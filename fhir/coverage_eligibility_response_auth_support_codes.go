// Code generated by FHIR Generator. DO NOT EDIT.
// This value set includes CoverageEligibilityResponse Auth Support codes.
package fhir_r4b_go
// CoverageEligibilityResponseAuthSupportCodes represents the FHIR ValueSet as an enumeration
type CoverageEligibilityResponseAuthSupportCodes struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	CoverageEligibilityResponseAuthSupportCodes_Laborder = "laborder" // Lab Order: A request or authorization for laboratory diagnostic tests.
	CoverageEligibilityResponseAuthSupportCodes_Labreport = "labreport" // Lab Report: A report on laboratory diagnostic test(s).
	CoverageEligibilityResponseAuthSupportCodes_Diagnosticimageorder = "diagnosticimageorder" // Diagnostic Image Order: A request or authorization for diagnostic imaging.
	CoverageEligibilityResponseAuthSupportCodes_Diagnosticimagereport = "diagnosticimagereport" // Diagnostic Image Report: A report on diagnostic image(s).
	CoverageEligibilityResponseAuthSupportCodes_Professionalreport = "professionalreport" // Professional Report: A report from a licensed professional regarding the siutation, condition or proposed treatment.
	CoverageEligibilityResponseAuthSupportCodes_Accidentreport = "accidentreport" // Accident Report: A formal accident report as would be filed with police or a simlar official body.
	CoverageEligibilityResponseAuthSupportCodes_Model = "model" // Model: A physical model of the affected area.
	CoverageEligibilityResponseAuthSupportCodes_Picture = "picture" // Picture: A photograph of the affected area.
)

// Clone creates a deep copy of the enum
func (e CoverageEligibilityResponseAuthSupportCodes) Clone() *CoverageEligibilityResponseAuthSupportCodes {
	return &CoverageEligibilityResponseAuthSupportCodes{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *CoverageEligibilityResponseAuthSupportCodes) Equals(other *CoverageEligibilityResponseAuthSupportCodes) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

