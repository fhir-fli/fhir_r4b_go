// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// MedicationAdministration
// Describes the event of a patient consuming or otherwise being administered a medication.  This may be as simple as swallowing a tablet or it may be a long running infusion.  Related resources tie this event to the authorizing prescription, and the specific encounter between patient and health care practitioner.
type MedicationAdministration struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Instantiates []*FhirUri `json:"instantiates,omitempty"`
	PartOf []*Reference `json:"partof,omitempty"`
	Status *MedicationAdministrationStatusCodes `json:"status,omitempty"`
	StatusReason []*CodeableConcept `json:"statusreason,omitempty"`
	Category *CodeableConcept `json:"category,omitempty"`
	MedicationCodeableConcept *CodeableConcept `json:"medicationcodeableconcept,omitempty"`
	MedicationReference *Reference `json:"medicationreference,omitempty"`
	Subject *Reference `json:"subject,omitempty"`
	Context *Reference `json:"context,omitempty"`
	SupportingInformation []*Reference `json:"supportinginformation,omitempty"`
	EffectiveDateTime *FhirDateTime `json:"effectivedatetime,omitempty"`
	EffectivePeriod *Period `json:"effectiveperiod,omitempty"`
	Performer []*MedicationAdministrationPerformer `json:"performer,omitempty"`
	ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
	ReasonReference []*Reference `json:"reasonreference,omitempty"`
	Request *Reference `json:"request,omitempty"`
	Device []*Reference `json:"device,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
	Dosage *MedicationAdministrationDosage `json:"dosage,omitempty"`
	EventHistory []*Reference `json:"eventhistory,omitempty"`
}

// NewMedicationAdministration creates a new MedicationAdministration instance
func NewMedicationAdministration() *MedicationAdministration {
	return &MedicationAdministration{}
}

// FromJSON populates MedicationAdministration from JSON data
func (m *MedicationAdministration) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts MedicationAdministration to JSON data
func (m *MedicationAdministration) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of MedicationAdministration
func (m *MedicationAdministration) Clone() *MedicationAdministration {
	if m == nil { return nil }
	return &MedicationAdministration{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Instantiates: cloneSlices(m.Instantiates),
		PartOf: cloneSlices(m.PartOf),
		Status: m.Status.Clone(),
		StatusReason: cloneSlices(m.StatusReason),
		Category: m.Category.Clone(),
		MedicationCodeableConcept: m.MedicationCodeableConcept.Clone(),
		MedicationReference: m.MedicationReference.Clone(),
		Subject: m.Subject.Clone(),
		Context: m.Context.Clone(),
		SupportingInformation: cloneSlices(m.SupportingInformation),
		EffectiveDateTime: m.EffectiveDateTime.Clone(),
		EffectivePeriod: m.EffectivePeriod.Clone(),
		Performer: cloneSlices(m.Performer),
		ReasonCode: cloneSlices(m.ReasonCode),
		ReasonReference: cloneSlices(m.ReasonReference),
		Request: m.Request.Clone(),
		Device: cloneSlices(m.Device),
		Note: cloneSlices(m.Note),
		Dosage: m.Dosage.Clone(),
		EventHistory: cloneSlices(m.EventHistory),
	}
}

// Equals checks for equality with another MedicationAdministration instance
func (m *MedicationAdministration) Equals(other *MedicationAdministration) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.Instantiates, other.Instantiates) { return false }
	if !compareSlices(m.PartOf, other.PartOf) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !compareSlices(m.StatusReason, other.StatusReason) { return false }
	if !m.Category.Equals(other.Category) { return false }
	if !m.MedicationCodeableConcept.Equals(other.MedicationCodeableConcept) { return false }
	if !m.MedicationReference.Equals(other.MedicationReference) { return false }
	if !m.Subject.Equals(other.Subject) { return false }
	if !m.Context.Equals(other.Context) { return false }
	if !compareSlices(m.SupportingInformation, other.SupportingInformation) { return false }
	if !m.EffectiveDateTime.Equals(other.EffectiveDateTime) { return false }
	if !m.EffectivePeriod.Equals(other.EffectivePeriod) { return false }
	if !compareSlices(m.Performer, other.Performer) { return false }
	if !compareSlices(m.ReasonCode, other.ReasonCode) { return false }
	if !compareSlices(m.ReasonReference, other.ReasonReference) { return false }
	if !m.Request.Equals(other.Request) { return false }
	if !compareSlices(m.Device, other.Device) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	if !m.Dosage.Equals(other.Dosage) { return false }
	if !compareSlices(m.EventHistory, other.EventHistory) { return false }
	return true
}

// MedicationAdministrationPerformer
// Indicates who or what performed the medication administration and how they were involved.
type MedicationAdministrationPerformer struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Function_ *CodeableConcept `json:"function,omitempty"`
	Actor *Reference `json:"actor,omitempty"`
}

// NewMedicationAdministrationPerformer creates a new MedicationAdministrationPerformer instance
func NewMedicationAdministrationPerformer() *MedicationAdministrationPerformer {
	return &MedicationAdministrationPerformer{}
}

// FromJSON populates MedicationAdministrationPerformer from JSON data
func (m *MedicationAdministrationPerformer) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts MedicationAdministrationPerformer to JSON data
func (m *MedicationAdministrationPerformer) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of MedicationAdministrationPerformer
func (m *MedicationAdministrationPerformer) Clone() *MedicationAdministrationPerformer {
	if m == nil { return nil }
	return &MedicationAdministrationPerformer{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Function_: m.Function_.Clone(),
		Actor: m.Actor.Clone(),
	}
}

// Equals checks for equality with another MedicationAdministrationPerformer instance
func (m *MedicationAdministrationPerformer) Equals(other *MedicationAdministrationPerformer) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Function_.Equals(other.Function_) { return false }
	if !m.Actor.Equals(other.Actor) { return false }
	return true
}

// MedicationAdministrationDosage
// Describes the medication dosage information details e.g. dose, rate, site, route, etc.
type MedicationAdministrationDosage struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Text *FhirString `json:"text,omitempty"`
	Site *CodeableConcept `json:"site,omitempty"`
	Route *CodeableConcept `json:"route,omitempty"`
	Method *CodeableConcept `json:"method,omitempty"`
	Dose *Quantity `json:"dose,omitempty"`
	RateRatio *Ratio `json:"rateratio,omitempty"`
	RateQuantity *Quantity `json:"ratequantity,omitempty"`
}

// NewMedicationAdministrationDosage creates a new MedicationAdministrationDosage instance
func NewMedicationAdministrationDosage() *MedicationAdministrationDosage {
	return &MedicationAdministrationDosage{}
}

// FromJSON populates MedicationAdministrationDosage from JSON data
func (m *MedicationAdministrationDosage) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts MedicationAdministrationDosage to JSON data
func (m *MedicationAdministrationDosage) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of MedicationAdministrationDosage
func (m *MedicationAdministrationDosage) Clone() *MedicationAdministrationDosage {
	if m == nil { return nil }
	return &MedicationAdministrationDosage{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Text: m.Text.Clone(),
		Site: m.Site.Clone(),
		Route: m.Route.Clone(),
		Method: m.Method.Clone(),
		Dose: m.Dose.Clone(),
		RateRatio: m.RateRatio.Clone(),
		RateQuantity: m.RateQuantity.Clone(),
	}
}

// Equals checks for equality with another MedicationAdministrationDosage instance
func (m *MedicationAdministrationDosage) Equals(other *MedicationAdministrationDosage) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !m.Site.Equals(other.Site) { return false }
	if !m.Route.Equals(other.Route) { return false }
	if !m.Method.Equals(other.Method) { return false }
	if !m.Dose.Equals(other.Dose) { return false }
	if !m.RateRatio.Equals(other.RateRatio) { return false }
	if !m.RateQuantity.Equals(other.RateQuantity) { return false }
	return true
}

