// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// Immunization
// Describes the event of a patient being administered a vaccine or a record of an immunization as reported by a patient, a clinician or another party.
type Immunization struct {
	DomainResource
	// id
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Id FhirString `json:"id,omitempty"`
	// meta
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta FhirMeta `json:"meta,omitempty"`
	// implicitRules
	// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ImplicitRules FhirUri `json:"implicitRules,omitempty"`
	// language
	// The base language in which the resource is written.
	Language CommonLanguages `json:"language,omitempty"`
	// text
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text Narrative `json:"text,omitempty"`
	// contained
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []Resource `json:"contained,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// identifier
	// A unique identifier assigned to this immunization record.
	Identifier []Identifier `json:"identifier,omitempty"`
	// status
	// Indicates the current status of the immunization event.
	Status ImmunizationStatusCodes `json:"status,omitempty"`
	// statusReason
	// Indicates the reason the immunization event was not performed.
	StatusReason CodeableConcept `json:"statusReason,omitempty"`
	// vaccineCode
	// Vaccine that was administered or was to be administered.
	VaccineCode CodeableConcept `json:"vaccineCode,omitempty"`
	// patient
	// The patient who either received or did not receive the immunization.
	Patient Reference `json:"patient,omitempty"`
	// encounter
	// The visit or admission or other contact between patient and health care provider the immunization was performed as part of.
	Encounter Reference `json:"encounter,omitempty"`
	// occurrenceDateTime
	// Date vaccine administered or was to be administered.
	OccurrenceDateTime FhirDateTime `json:"occurrenceDateTime,omitempty"`
	// occurrenceString
	// Date vaccine administered or was to be administered.
	OccurrenceString FhirString `json:"occurrenceString,omitempty"`
	// recorded
	// The date the occurrence of the immunization was first captured in the record - potentially significantly after the occurrence of the event.
	Recorded FhirDateTime `json:"recorded,omitempty"`
	// primarySource
	// An indication that the content of the record is based on information from the person who administered the vaccine. This reflects the context under which the data was originally recorded.
	PrimarySource FhirBoolean `json:"primarySource,omitempty"`
	// reportOrigin
	// The source of the data when the report of the immunization event is not based on information from the person who administered the vaccine.
	ReportOrigin CodeableConcept `json:"reportOrigin,omitempty"`
	// location
	// The service delivery location where the vaccine administration occurred.
	Location Reference `json:"location,omitempty"`
	// manufacturer
	// Name of vaccine manufacturer.
	Manufacturer Reference `json:"manufacturer,omitempty"`
	// lotNumber
	// Lot number of the  vaccine product.
	LotNumber FhirString `json:"lotNumber,omitempty"`
	// expirationDate
	// Date vaccine batch expires.
	ExpirationDate FhirDate `json:"expirationDate,omitempty"`
	// site
	// Body site where vaccine was administered.
	Site CodeableConcept `json:"site,omitempty"`
	// route
	// The path by which the vaccine product is taken into the body.
	Route CodeableConcept `json:"route,omitempty"`
	// doseQuantity
	// The quantity of vaccine product that was administered.
	DoseQuantity Quantity `json:"doseQuantity,omitempty"`
	// performer
	// Indicates who performed the immunization event.
	Performer []ImmunizationPerformer `json:"performer,omitempty"`
	// note
	// Extra information about the immunization that is not conveyed by the other attributes.
	Note []Annotation `json:"note,omitempty"`
	// reasonCode
	// Reasons why the vaccine was administered.
	ReasonCode []CodeableConcept `json:"reasonCode,omitempty"`
	// reasonReference
	// Condition, Observation or DiagnosticReport that supports why the immunization was administered.
	ReasonReference []Reference `json:"reasonReference,omitempty"`
	// isSubpotent
	// Indication if a dose is considered to be subpotent. By default, a dose should be considered to be potent.
	IsSubpotent FhirBoolean `json:"isSubpotent,omitempty"`
	// subpotentReason
	// Reason why a dose is considered to be subpotent.
	SubpotentReason []CodeableConcept `json:"subpotentReason,omitempty"`
	// education
	// Educational material presented to the patient (or guardian) at the time of vaccine administration.
	Education []ImmunizationEducation `json:"education,omitempty"`
	// programEligibility
	// Indicates a patient's eligibility for a funding program.
	ProgramEligibility []CodeableConcept `json:"programEligibility,omitempty"`
	// fundingSource
	// Indicates the source of the vaccine actually administered. This may be different than the patient eligibility (e.g. the patient may be eligible for a publically purchased vaccine but due to inventory issues, vaccine purchased with private funds was actually administered).
	FundingSource CodeableConcept `json:"fundingSource,omitempty"`
	// reaction
	// Categorical data indicating that an adverse event is associated in time to an immunization.
	Reaction []ImmunizationReaction `json:"reaction,omitempty"`
	// protocolApplied
	// The protocol (set of recommendations) being followed by the provider who administered the dose.
	ProtocolApplied []ImmunizationProtocolApplied `json:"protocolApplied,omitempty"`
}

// NewImmunization creates a new Immunization instance
func NewImmunization(
	id FhirString,
	meta FhirMeta,
	implicitRules FhirUri,
	language CommonLanguages,
	text Narrative,
	contained []Resource,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	identifier []Identifier,
	status ImmunizationStatusCodes,
	statusReason CodeableConcept,
	vaccineCode CodeableConcept,
	patient Reference,
	encounter Reference,
	occurrenceDateTime FhirDateTime,
	occurrenceString FhirString,
	recorded FhirDateTime,
	primarySource FhirBoolean,
	reportOrigin CodeableConcept,
	location Reference,
	manufacturer Reference,
	lotNumber FhirString,
	expirationDate FhirDate,
	site CodeableConcept,
	route CodeableConcept,
	doseQuantity Quantity,
	performer []ImmunizationPerformer,
	note []Annotation,
	reasonCode []CodeableConcept,
	reasonReference []Reference,
	isSubpotent FhirBoolean,
	subpotentReason []CodeableConcept,
	education []ImmunizationEducation,
	programEligibility []CodeableConcept,
	fundingSource CodeableConcept,
	reaction []ImmunizationReaction,
	protocolApplied []ImmunizationProtocolApplied,
) *Immunization {
	return &Immunization{
		Id: id,
		Meta: meta,
		ImplicitRules: implicitRules,
		Language: language,
		Text: text,
		Contained: contained,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Identifier: identifier,
		Status: status,
		StatusReason: statusReason,
		VaccineCode: vaccineCode,
		Patient: patient,
		Encounter: encounter,
		OccurrenceDateTime: occurrenceDateTime,
		OccurrenceString: occurrenceString,
		Recorded: recorded,
		PrimarySource: primarySource,
		ReportOrigin: reportOrigin,
		Location: location,
		Manufacturer: manufacturer,
		LotNumber: lotNumber,
		ExpirationDate: expirationDate,
		Site: site,
		Route: route,
		DoseQuantity: doseQuantity,
		Performer: performer,
		Note: note,
		ReasonCode: reasonCode,
		ReasonReference: reasonReference,
		IsSubpotent: isSubpotent,
		SubpotentReason: subpotentReason,
		Education: education,
		ProgramEligibility: programEligibility,
		FundingSource: fundingSource,
		Reaction: reaction,
		ProtocolApplied: protocolApplied,
	}
}
// FromJSON populates Immunization from JSON data
func (m *Immunization) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Immunization to JSON data
func (m *Immunization) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of Immunization
func (m *Immunization) CopyWith(
	id *FhirString,
	meta *FhirMeta,
	implicitRules *FhirUri,
	language *CommonLanguages,
	text *Narrative,
	contained *[]Resource,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	identifier *[]Identifier,
	status *ImmunizationStatusCodes,
	statusReason *CodeableConcept,
	vaccineCode *CodeableConcept,
	patient *Reference,
	encounter *Reference,
	occurrenceDateTime *FhirDateTime,
	occurrenceString *FhirString,
	recorded *FhirDateTime,
	primarySource *FhirBoolean,
	reportOrigin *CodeableConcept,
	location *Reference,
	manufacturer *Reference,
	lotNumber *FhirString,
	expirationDate *FhirDate,
	site *CodeableConcept,
	route *CodeableConcept,
	doseQuantity *Quantity,
	performer *[]ImmunizationPerformer,
	note *[]Annotation,
	reasonCode *[]CodeableConcept,
	reasonReference *[]Reference,
	isSubpotent *FhirBoolean,
	subpotentReason *[]CodeableConcept,
	education *[]ImmunizationEducation,
	programEligibility *[]CodeableConcept,
	fundingSource *CodeableConcept,
	reaction *[]ImmunizationReaction,
	protocolApplied *[]ImmunizationProtocolApplied,
) *Immunization {
	return &Immunization{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Meta: func() FhirMeta {
			if meta != nil { return *meta }
			return m.Meta
		}(),
		ImplicitRules: func() FhirUri {
			if implicitRules != nil { return *implicitRules }
			return m.ImplicitRules
		}(),
		Language: func() CommonLanguages {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() Narrative {
			if text != nil { return *text }
			return m.Text
		}(),
		Contained: func() []Resource {
			if contained != nil { return *contained }
			return m.Contained
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		Status: func() ImmunizationStatusCodes {
			if status != nil { return *status }
			return m.Status
		}(),
		StatusReason: func() CodeableConcept {
			if statusReason != nil { return *statusReason }
			return m.StatusReason
		}(),
		VaccineCode: func() CodeableConcept {
			if vaccineCode != nil { return *vaccineCode }
			return m.VaccineCode
		}(),
		Patient: func() Reference {
			if patient != nil { return *patient }
			return m.Patient
		}(),
		Encounter: func() Reference {
			if encounter != nil { return *encounter }
			return m.Encounter
		}(),
		OccurrenceDateTime: func() FhirDateTime {
			if occurrenceDateTime != nil { return *occurrenceDateTime }
			return m.OccurrenceDateTime
		}(),
		OccurrenceString: func() FhirString {
			if occurrenceString != nil { return *occurrenceString }
			return m.OccurrenceString
		}(),
		Recorded: func() FhirDateTime {
			if recorded != nil { return *recorded }
			return m.Recorded
		}(),
		PrimarySource: func() FhirBoolean {
			if primarySource != nil { return *primarySource }
			return m.PrimarySource
		}(),
		ReportOrigin: func() CodeableConcept {
			if reportOrigin != nil { return *reportOrigin }
			return m.ReportOrigin
		}(),
		Location: func() Reference {
			if location != nil { return *location }
			return m.Location
		}(),
		Manufacturer: func() Reference {
			if manufacturer != nil { return *manufacturer }
			return m.Manufacturer
		}(),
		LotNumber: func() FhirString {
			if lotNumber != nil { return *lotNumber }
			return m.LotNumber
		}(),
		ExpirationDate: func() FhirDate {
			if expirationDate != nil { return *expirationDate }
			return m.ExpirationDate
		}(),
		Site: func() CodeableConcept {
			if site != nil { return *site }
			return m.Site
		}(),
		Route: func() CodeableConcept {
			if route != nil { return *route }
			return m.Route
		}(),
		DoseQuantity: func() Quantity {
			if doseQuantity != nil { return *doseQuantity }
			return m.DoseQuantity
		}(),
		Performer: func() []ImmunizationPerformer {
			if performer != nil { return *performer }
			return m.Performer
		}(),
		Note: func() []Annotation {
			if note != nil { return *note }
			return m.Note
		}(),
		ReasonCode: func() []CodeableConcept {
			if reasonCode != nil { return *reasonCode }
			return m.ReasonCode
		}(),
		ReasonReference: func() []Reference {
			if reasonReference != nil { return *reasonReference }
			return m.ReasonReference
		}(),
		IsSubpotent: func() FhirBoolean {
			if isSubpotent != nil { return *isSubpotent }
			return m.IsSubpotent
		}(),
		SubpotentReason: func() []CodeableConcept {
			if subpotentReason != nil { return *subpotentReason }
			return m.SubpotentReason
		}(),
		Education: func() []ImmunizationEducation {
			if education != nil { return *education }
			return m.Education
		}(),
		ProgramEligibility: func() []CodeableConcept {
			if programEligibility != nil { return *programEligibility }
			return m.ProgramEligibility
		}(),
		FundingSource: func() CodeableConcept {
			if fundingSource != nil { return *fundingSource }
			return m.FundingSource
		}(),
		Reaction: func() []ImmunizationReaction {
			if reaction != nil { return *reaction }
			return m.Reaction
		}(),
		ProtocolApplied: func() []ImmunizationProtocolApplied {
			if protocolApplied != nil { return *protocolApplied }
			return m.ProtocolApplied
		}(),
	}
}
// ImmunizationPerformer
// Indicates who performed the immunization event.
type ImmunizationPerformer struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// function
	// Describes the type of performance (e.g. ordering provider, administering provider, etc.).
	Function_ CodeableConcept `json:"function,omitempty"`
	// actor
	// The practitioner or organization who performed the action.
	Actor Reference `json:"actor,omitempty"`
}

// NewImmunizationPerformer creates a new ImmunizationPerformer instance
func NewImmunizationPerformer(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	function_ CodeableConcept,
	actor Reference,
) *ImmunizationPerformer {
	return &ImmunizationPerformer{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Function_: function_,
		Actor: actor,
	}
}
// FromJSON populates ImmunizationPerformer from JSON data
func (m *ImmunizationPerformer) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImmunizationPerformer to JSON data
func (m *ImmunizationPerformer) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImmunizationPerformer
func (m *ImmunizationPerformer) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	function_ *CodeableConcept,
	actor *Reference,
) *ImmunizationPerformer {
	return &ImmunizationPerformer{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Function_: func() CodeableConcept {
			if function_ != nil { return *function_ }
			return m.Function_
		}(),
		Actor: func() Reference {
			if actor != nil { return *actor }
			return m.Actor
		}(),
	}
}
// ImmunizationEducation
// Educational material presented to the patient (or guardian) at the time of vaccine administration.
type ImmunizationEducation struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// documentType
	// Identifier of the material presented to the patient.
	DocumentType FhirString `json:"documentType,omitempty"`
	// reference
	// Reference pointer to the educational material given to the patient if the information was on line.
	Reference FhirUri `json:"reference,omitempty"`
	// publicationDate
	// Date the educational material was published.
	PublicationDate FhirDateTime `json:"publicationDate,omitempty"`
	// presentationDate
	// Date the educational material was given to the patient.
	PresentationDate FhirDateTime `json:"presentationDate,omitempty"`
}

// NewImmunizationEducation creates a new ImmunizationEducation instance
func NewImmunizationEducation(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	documentType FhirString,
	reference FhirUri,
	publicationDate FhirDateTime,
	presentationDate FhirDateTime,
) *ImmunizationEducation {
	return &ImmunizationEducation{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		DocumentType: documentType,
		Reference: reference,
		PublicationDate: publicationDate,
		PresentationDate: presentationDate,
	}
}
// FromJSON populates ImmunizationEducation from JSON data
func (m *ImmunizationEducation) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImmunizationEducation to JSON data
func (m *ImmunizationEducation) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImmunizationEducation
func (m *ImmunizationEducation) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	documentType *FhirString,
	reference *FhirUri,
	publicationDate *FhirDateTime,
	presentationDate *FhirDateTime,
) *ImmunizationEducation {
	return &ImmunizationEducation{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		DocumentType: func() FhirString {
			if documentType != nil { return *documentType }
			return m.DocumentType
		}(),
		Reference: func() FhirUri {
			if reference != nil { return *reference }
			return m.Reference
		}(),
		PublicationDate: func() FhirDateTime {
			if publicationDate != nil { return *publicationDate }
			return m.PublicationDate
		}(),
		PresentationDate: func() FhirDateTime {
			if presentationDate != nil { return *presentationDate }
			return m.PresentationDate
		}(),
	}
}
// ImmunizationReaction
// Categorical data indicating that an adverse event is associated in time to an immunization.
type ImmunizationReaction struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// date
	// Date of reaction to the immunization.
	Date FhirDateTime `json:"date,omitempty"`
	// detail
	// Details of the reaction.
	Detail Reference `json:"detail,omitempty"`
	// reported
	// Self-reported indicator.
	Reported FhirBoolean `json:"reported,omitempty"`
}

// NewImmunizationReaction creates a new ImmunizationReaction instance
func NewImmunizationReaction(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	date FhirDateTime,
	detail Reference,
	reported FhirBoolean,
) *ImmunizationReaction {
	return &ImmunizationReaction{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Date: date,
		Detail: detail,
		Reported: reported,
	}
}
// FromJSON populates ImmunizationReaction from JSON data
func (m *ImmunizationReaction) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImmunizationReaction to JSON data
func (m *ImmunizationReaction) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImmunizationReaction
func (m *ImmunizationReaction) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	date *FhirDateTime,
	detail *Reference,
	reported *FhirBoolean,
) *ImmunizationReaction {
	return &ImmunizationReaction{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Date: func() FhirDateTime {
			if date != nil { return *date }
			return m.Date
		}(),
		Detail: func() Reference {
			if detail != nil { return *detail }
			return m.Detail
		}(),
		Reported: func() FhirBoolean {
			if reported != nil { return *reported }
			return m.Reported
		}(),
	}
}
// ImmunizationProtocolApplied
// The protocol (set of recommendations) being followed by the provider who administered the dose.
type ImmunizationProtocolApplied struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// series
	// One possible path to achieve presumed immunity against a disease - within the context of an authority.
	Series FhirString `json:"series,omitempty"`
	// authority
	// Indicates the authority who published the protocol (e.g. ACIP) that is being followed.
	Authority Reference `json:"authority,omitempty"`
	// targetDisease
	// The vaccine preventable disease the dose is being administered against.
	TargetDisease []CodeableConcept `json:"targetDisease,omitempty"`
	// doseNumberPositiveInt
	// Nominal position in a series.
	DoseNumberPositiveInt FhirPositiveInt `json:"doseNumberPositiveInt,omitempty"`
	// doseNumberString
	// Nominal position in a series.
	DoseNumberString FhirString `json:"doseNumberString,omitempty"`
	// seriesDosesPositiveInt
	// The recommended number of doses to achieve immunity.
	SeriesDosesPositiveInt FhirPositiveInt `json:"seriesDosesPositiveInt,omitempty"`
	// seriesDosesString
	// The recommended number of doses to achieve immunity.
	SeriesDosesString FhirString `json:"seriesDosesString,omitempty"`
}

// NewImmunizationProtocolApplied creates a new ImmunizationProtocolApplied instance
func NewImmunizationProtocolApplied(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	series FhirString,
	authority Reference,
	targetDisease []CodeableConcept,
	doseNumberPositiveInt FhirPositiveInt,
	doseNumberString FhirString,
	seriesDosesPositiveInt FhirPositiveInt,
	seriesDosesString FhirString,
) *ImmunizationProtocolApplied {
	return &ImmunizationProtocolApplied{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Series: series,
		Authority: authority,
		TargetDisease: targetDisease,
		DoseNumberPositiveInt: doseNumberPositiveInt,
		DoseNumberString: doseNumberString,
		SeriesDosesPositiveInt: seriesDosesPositiveInt,
		SeriesDosesString: seriesDosesString,
	}
}
// FromJSON populates ImmunizationProtocolApplied from JSON data
func (m *ImmunizationProtocolApplied) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImmunizationProtocolApplied to JSON data
func (m *ImmunizationProtocolApplied) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImmunizationProtocolApplied
func (m *ImmunizationProtocolApplied) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	series *FhirString,
	authority *Reference,
	targetDisease *[]CodeableConcept,
	doseNumberPositiveInt *FhirPositiveInt,
	doseNumberString *FhirString,
	seriesDosesPositiveInt *FhirPositiveInt,
	seriesDosesString *FhirString,
) *ImmunizationProtocolApplied {
	return &ImmunizationProtocolApplied{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Series: func() FhirString {
			if series != nil { return *series }
			return m.Series
		}(),
		Authority: func() Reference {
			if authority != nil { return *authority }
			return m.Authority
		}(),
		TargetDisease: func() []CodeableConcept {
			if targetDisease != nil { return *targetDisease }
			return m.TargetDisease
		}(),
		DoseNumberPositiveInt: func() FhirPositiveInt {
			if doseNumberPositiveInt != nil { return *doseNumberPositiveInt }
			return m.DoseNumberPositiveInt
		}(),
		DoseNumberString: func() FhirString {
			if doseNumberString != nil { return *doseNumberString }
			return m.DoseNumberString
		}(),
		SeriesDosesPositiveInt: func() FhirPositiveInt {
			if seriesDosesPositiveInt != nil { return *seriesDosesPositiveInt }
			return m.SeriesDosesPositiveInt
		}(),
		SeriesDosesString: func() FhirString {
			if seriesDosesString != nil { return *seriesDosesString }
			return m.SeriesDosesString
		}(),
	}
}
