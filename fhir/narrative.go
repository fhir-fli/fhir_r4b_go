// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// Narrative
// A human-readable summary of the resource conveying the essential clinical and business information for the resource.
type Narrative struct {
	DataType
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// status
	// The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.
	Status NarrativeStatus `json:"status,omitempty"`
	// div
	// The actual narrative content, a stripped down version of XHTML.
	Div FhirXhtml `json:"div,omitempty"`
}

// NewNarrative creates a new Narrative instance
func NewNarrative(
	id FhirString,
	extension_ []FhirExtension,
	status NarrativeStatus,
	div FhirXhtml,
) *Narrative {
	return &Narrative{
		Id: id,
		Extension_: extension_,
		Status: status,
		Div: div,
	}
}
// FromJSON populates Narrative from JSON data
func (m *Narrative) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Narrative to JSON data
func (m *Narrative) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of Narrative
func (m *Narrative) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	status *NarrativeStatus,
	div *FhirXhtml,
) *Narrative {
	return &Narrative{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		Status: func() NarrativeStatus {
			if status != nil { return *status }
			return m.Status
		}(),
		Div: func() FhirXhtml {
			if div != nil { return *div }
			return m.Div
		}(),
	}
}
