// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// DeviceRequest
// Represents a request for a patient to employ a medical device. The device may be an implantable device, or an external assistive device, such as a walker.
type DeviceRequest struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	InstantiatesCanonical []*FhirCanonical `json:"instantiatescanonical,omitempty"`
	InstantiatesUri []*FhirUri `json:"instantiatesuri,omitempty"`
	BasedOn []*Reference `json:"basedon,omitempty"`
	PriorRequest []*Reference `json:"priorrequest,omitempty"`
	GroupIdentifier *Identifier `json:"groupidentifier,omitempty"`
	Status *RequestStatus `json:"status,omitempty"`
	Intent *RequestIntent `json:"intent,omitempty"`
	Priority *RequestPriority `json:"priority,omitempty"`
	CodeReference *Reference `json:"codereference,omitempty"`
	CodeCodeableConcept *CodeableConcept `json:"codecodeableconcept,omitempty"`
	Parameter []*DeviceRequestParameter `json:"parameter,omitempty"`
	Subject *Reference `json:"subject,omitempty"`
	Encounter *Reference `json:"encounter,omitempty"`
	OccurrenceDateTime *FhirDateTime `json:"occurrencedatetime,omitempty"`
	OccurrencePeriod *Period `json:"occurrenceperiod,omitempty"`
	OccurrenceTiming *Timing `json:"occurrencetiming,omitempty"`
	AuthoredOn *FhirDateTime `json:"authoredon,omitempty"`
	Requester *Reference `json:"requester,omitempty"`
	PerformerType *CodeableConcept `json:"performertype,omitempty"`
	Performer *Reference `json:"performer,omitempty"`
	ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
	ReasonReference []*Reference `json:"reasonreference,omitempty"`
	Insurance []*Reference `json:"insurance,omitempty"`
	SupportingInfo []*Reference `json:"supportinginfo,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
	RelevantHistory []*Reference `json:"relevanthistory,omitempty"`
}

// NewDeviceRequest creates a new DeviceRequest instance
func NewDeviceRequest() *DeviceRequest {
	return &DeviceRequest{}
}

// FromJSON populates DeviceRequest from JSON data
func (m *DeviceRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DeviceRequest to JSON data
func (m *DeviceRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of DeviceRequest
func (m *DeviceRequest) Clone() *DeviceRequest {
	if m == nil { return nil }
	return &DeviceRequest{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		InstantiatesCanonical: cloneSlices(m.InstantiatesCanonical),
		InstantiatesUri: cloneSlices(m.InstantiatesUri),
		BasedOn: cloneSlices(m.BasedOn),
		PriorRequest: cloneSlices(m.PriorRequest),
		GroupIdentifier: m.GroupIdentifier.Clone(),
		Status: m.Status.Clone(),
		Intent: m.Intent.Clone(),
		Priority: m.Priority.Clone(),
		CodeReference: m.CodeReference.Clone(),
		CodeCodeableConcept: m.CodeCodeableConcept.Clone(),
		Parameter: cloneSlices(m.Parameter),
		Subject: m.Subject.Clone(),
		Encounter: m.Encounter.Clone(),
		OccurrenceDateTime: m.OccurrenceDateTime.Clone(),
		OccurrencePeriod: m.OccurrencePeriod.Clone(),
		OccurrenceTiming: m.OccurrenceTiming.Clone(),
		AuthoredOn: m.AuthoredOn.Clone(),
		Requester: m.Requester.Clone(),
		PerformerType: m.PerformerType.Clone(),
		Performer: m.Performer.Clone(),
		ReasonCode: cloneSlices(m.ReasonCode),
		ReasonReference: cloneSlices(m.ReasonReference),
		Insurance: cloneSlices(m.Insurance),
		SupportingInfo: cloneSlices(m.SupportingInfo),
		Note: cloneSlices(m.Note),
		RelevantHistory: cloneSlices(m.RelevantHistory),
	}
}

// Equals checks for equality with another DeviceRequest instance
func (m *DeviceRequest) Equals(other *DeviceRequest) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.InstantiatesCanonical, other.InstantiatesCanonical) { return false }
	if !compareSlices(m.InstantiatesUri, other.InstantiatesUri) { return false }
	if !compareSlices(m.BasedOn, other.BasedOn) { return false }
	if !compareSlices(m.PriorRequest, other.PriorRequest) { return false }
	if !m.GroupIdentifier.Equals(other.GroupIdentifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Intent.Equals(other.Intent) { return false }
	if !m.Priority.Equals(other.Priority) { return false }
	if !m.CodeReference.Equals(other.CodeReference) { return false }
	if !m.CodeCodeableConcept.Equals(other.CodeCodeableConcept) { return false }
	if !compareSlices(m.Parameter, other.Parameter) { return false }
	if !m.Subject.Equals(other.Subject) { return false }
	if !m.Encounter.Equals(other.Encounter) { return false }
	if !m.OccurrenceDateTime.Equals(other.OccurrenceDateTime) { return false }
	if !m.OccurrencePeriod.Equals(other.OccurrencePeriod) { return false }
	if !m.OccurrenceTiming.Equals(other.OccurrenceTiming) { return false }
	if !m.AuthoredOn.Equals(other.AuthoredOn) { return false }
	if !m.Requester.Equals(other.Requester) { return false }
	if !m.PerformerType.Equals(other.PerformerType) { return false }
	if !m.Performer.Equals(other.Performer) { return false }
	if !compareSlices(m.ReasonCode, other.ReasonCode) { return false }
	if !compareSlices(m.ReasonReference, other.ReasonReference) { return false }
	if !compareSlices(m.Insurance, other.Insurance) { return false }
	if !compareSlices(m.SupportingInfo, other.SupportingInfo) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	if !compareSlices(m.RelevantHistory, other.RelevantHistory) { return false }
	return true
}

// DeviceRequestParameter
// Specific parameters for the ordered item.  For example, the prism value for lenses.
type DeviceRequestParameter struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	ValueCodeableConcept *CodeableConcept `json:"valuecodeableconcept,omitempty"`
	ValueQuantity *Quantity `json:"valuequantity,omitempty"`
	ValueRange *Range `json:"valuerange,omitempty"`
	ValueBoolean *FhirBoolean `json:"valueboolean,omitempty"`
}

// NewDeviceRequestParameter creates a new DeviceRequestParameter instance
func NewDeviceRequestParameter() *DeviceRequestParameter {
	return &DeviceRequestParameter{}
}

// FromJSON populates DeviceRequestParameter from JSON data
func (m *DeviceRequestParameter) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DeviceRequestParameter to JSON data
func (m *DeviceRequestParameter) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of DeviceRequestParameter
func (m *DeviceRequestParameter) Clone() *DeviceRequestParameter {
	if m == nil { return nil }
	return &DeviceRequestParameter{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		ValueCodeableConcept: m.ValueCodeableConcept.Clone(),
		ValueQuantity: m.ValueQuantity.Clone(),
		ValueRange: m.ValueRange.Clone(),
		ValueBoolean: m.ValueBoolean.Clone(),
	}
}

// Equals checks for equality with another DeviceRequestParameter instance
func (m *DeviceRequestParameter) Equals(other *DeviceRequestParameter) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.ValueCodeableConcept.Equals(other.ValueCodeableConcept) { return false }
	if !m.ValueQuantity.Equals(other.ValueQuantity) { return false }
	if !m.ValueRange.Equals(other.ValueRange) { return false }
	if !m.ValueBoolean.Equals(other.ValueBoolean) { return false }
	return true
}

