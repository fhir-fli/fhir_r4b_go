// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// OperationDefinition
// A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
type OperationDefinition struct {
	CanonicalResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Url *FhirUri `json:"url,omitempty"`
	Version *FhirString `json:"version,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	Kind *OperationKind `json:"kind,omitempty"`
	Experimental *FhirBoolean `json:"experimental,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Publisher *FhirString `json:"publisher,omitempty"`
	Contact []*ContactDetail `json:"contact,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	UseContext []*UsageContext `json:"usecontext,omitempty"`
	Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`
	Purpose *FhirMarkdown `json:"purpose,omitempty"`
	AffectsState *FhirBoolean `json:"affectsstate,omitempty"`
	Code *FhirCode `json:"code,omitempty"`
	Comment *FhirMarkdown `json:"comment,omitempty"`
	Base *FhirCanonical `json:"base,omitempty"`
	Resource []*FhirCode `json:"resource,omitempty"`
	System *FhirBoolean `json:"system,omitempty"`
	Type *FhirBoolean `json:"type,omitempty"`
	Instance *FhirBoolean `json:"instance,omitempty"`
	InputProfile *FhirCanonical `json:"inputprofile,omitempty"`
	OutputProfile *FhirCanonical `json:"outputprofile,omitempty"`
	Parameter []*OperationDefinitionParameter `json:"parameter,omitempty"`
	Overload []*OperationDefinitionOverload `json:"overload,omitempty"`
}

// NewOperationDefinition creates a new OperationDefinition instance
func NewOperationDefinition() *OperationDefinition {
	return &OperationDefinition{}
}

// FromJSON populates OperationDefinition from JSON data
func (m *OperationDefinition) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts OperationDefinition to JSON data
func (m *OperationDefinition) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of OperationDefinition
func (m *OperationDefinition) Clone() *OperationDefinition {
	if m == nil { return nil }
	return &OperationDefinition{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Url: m.Url.Clone(),
		Version: m.Version.Clone(),
		Name: m.Name.Clone(),
		Title: m.Title.Clone(),
		Status: m.Status.Clone(),
		Kind: m.Kind.Clone(),
		Experimental: m.Experimental.Clone(),
		Date: m.Date.Clone(),
		Publisher: m.Publisher.Clone(),
		Contact: cloneSlices(m.Contact),
		Description: m.Description.Clone(),
		UseContext: cloneSlices(m.UseContext),
		Jurisdiction: cloneSlices(m.Jurisdiction),
		Purpose: m.Purpose.Clone(),
		AffectsState: m.AffectsState.Clone(),
		Code: m.Code.Clone(),
		Comment: m.Comment.Clone(),
		Base: m.Base.Clone(),
		Resource: cloneSlices(m.Resource),
		System: m.System.Clone(),
		Type: m.Type.Clone(),
		Instance: m.Instance.Clone(),
		InputProfile: m.InputProfile.Clone(),
		OutputProfile: m.OutputProfile.Clone(),
		Parameter: cloneSlices(m.Parameter),
		Overload: cloneSlices(m.Overload),
	}
}

// Equals checks for equality with another OperationDefinition instance
func (m *OperationDefinition) Equals(other *OperationDefinition) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !m.Version.Equals(other.Version) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Kind.Equals(other.Kind) { return false }
	if !m.Experimental.Equals(other.Experimental) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Publisher.Equals(other.Publisher) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.UseContext, other.UseContext) { return false }
	if !compareSlices(m.Jurisdiction, other.Jurisdiction) { return false }
	if !m.Purpose.Equals(other.Purpose) { return false }
	if !m.AffectsState.Equals(other.AffectsState) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Comment.Equals(other.Comment) { return false }
	if !m.Base.Equals(other.Base) { return false }
	if !compareSlices(m.Resource, other.Resource) { return false }
	if !m.System.Equals(other.System) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Instance.Equals(other.Instance) { return false }
	if !m.InputProfile.Equals(other.InputProfile) { return false }
	if !m.OutputProfile.Equals(other.OutputProfile) { return false }
	if !compareSlices(m.Parameter, other.Parameter) { return false }
	if !compareSlices(m.Overload, other.Overload) { return false }
	return true
}

// OperationDefinitionParameter
// The parameters for the operation/query.
type OperationDefinitionParameter struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Name *FhirCode `json:"name,omitempty"`
	Use *OperationParameterUse `json:"use,omitempty"`
	Min *FhirInteger `json:"min,omitempty"`
	Max *FhirString `json:"max,omitempty"`
	Documentation *FhirString `json:"documentation,omitempty"`
	Type *FHIRAllTypes `json:"type,omitempty"`
	TargetProfile []*FhirCanonical `json:"targetprofile,omitempty"`
	SearchType *SearchParamType `json:"searchtype,omitempty"`
	Binding *OperationDefinitionBinding `json:"binding,omitempty"`
	ReferencedFrom []*OperationDefinitionReferencedFrom `json:"referencedfrom,omitempty"`
	Part_ []*OperationDefinitionParameter `json:"part,omitempty"`
}

// NewOperationDefinitionParameter creates a new OperationDefinitionParameter instance
func NewOperationDefinitionParameter() *OperationDefinitionParameter {
	return &OperationDefinitionParameter{}
}

// FromJSON populates OperationDefinitionParameter from JSON data
func (m *OperationDefinitionParameter) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts OperationDefinitionParameter to JSON data
func (m *OperationDefinitionParameter) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of OperationDefinitionParameter
func (m *OperationDefinitionParameter) Clone() *OperationDefinitionParameter {
	if m == nil { return nil }
	return &OperationDefinitionParameter{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Name: m.Name.Clone(),
		Use: m.Use.Clone(),
		Min: m.Min.Clone(),
		Max: m.Max.Clone(),
		Documentation: m.Documentation.Clone(),
		Type: m.Type.Clone(),
		TargetProfile: cloneSlices(m.TargetProfile),
		SearchType: m.SearchType.Clone(),
		Binding: m.Binding.Clone(),
		ReferencedFrom: cloneSlices(m.ReferencedFrom),
		Part_: cloneSlices(m.Part_),
	}
}

// Equals checks for equality with another OperationDefinitionParameter instance
func (m *OperationDefinitionParameter) Equals(other *OperationDefinitionParameter) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Use.Equals(other.Use) { return false }
	if !m.Min.Equals(other.Min) { return false }
	if !m.Max.Equals(other.Max) { return false }
	if !m.Documentation.Equals(other.Documentation) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !compareSlices(m.TargetProfile, other.TargetProfile) { return false }
	if !m.SearchType.Equals(other.SearchType) { return false }
	if !m.Binding.Equals(other.Binding) { return false }
	if !compareSlices(m.ReferencedFrom, other.ReferencedFrom) { return false }
	if !compareSlices(m.Part_, other.Part_) { return false }
	return true
}

// OperationDefinitionBinding
// Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
type OperationDefinitionBinding struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Strength *BindingStrength `json:"strength,omitempty"`
	ValueSet *FhirCanonical `json:"valueset,omitempty"`
}

// NewOperationDefinitionBinding creates a new OperationDefinitionBinding instance
func NewOperationDefinitionBinding() *OperationDefinitionBinding {
	return &OperationDefinitionBinding{}
}

// FromJSON populates OperationDefinitionBinding from JSON data
func (m *OperationDefinitionBinding) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts OperationDefinitionBinding to JSON data
func (m *OperationDefinitionBinding) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of OperationDefinitionBinding
func (m *OperationDefinitionBinding) Clone() *OperationDefinitionBinding {
	if m == nil { return nil }
	return &OperationDefinitionBinding{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Strength: m.Strength.Clone(),
		ValueSet: m.ValueSet.Clone(),
	}
}

// Equals checks for equality with another OperationDefinitionBinding instance
func (m *OperationDefinitionBinding) Equals(other *OperationDefinitionBinding) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Strength.Equals(other.Strength) { return false }
	if !m.ValueSet.Equals(other.ValueSet) { return false }
	return true
}

// OperationDefinitionReferencedFrom
// Identifies other resource parameters within the operation invocation that are expected to resolve to this resource.
type OperationDefinitionReferencedFrom struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Source *FhirString `json:"source,omitempty"`
	SourceId *FhirString `json:"sourceid,omitempty"`
}

// NewOperationDefinitionReferencedFrom creates a new OperationDefinitionReferencedFrom instance
func NewOperationDefinitionReferencedFrom() *OperationDefinitionReferencedFrom {
	return &OperationDefinitionReferencedFrom{}
}

// FromJSON populates OperationDefinitionReferencedFrom from JSON data
func (m *OperationDefinitionReferencedFrom) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts OperationDefinitionReferencedFrom to JSON data
func (m *OperationDefinitionReferencedFrom) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of OperationDefinitionReferencedFrom
func (m *OperationDefinitionReferencedFrom) Clone() *OperationDefinitionReferencedFrom {
	if m == nil { return nil }
	return &OperationDefinitionReferencedFrom{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Source: m.Source.Clone(),
		SourceId: m.SourceId.Clone(),
	}
}

// Equals checks for equality with another OperationDefinitionReferencedFrom instance
func (m *OperationDefinitionReferencedFrom) Equals(other *OperationDefinitionReferencedFrom) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Source.Equals(other.Source) { return false }
	if !m.SourceId.Equals(other.SourceId) { return false }
	return true
}

// OperationDefinitionOverload
// Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation.
type OperationDefinitionOverload struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	ParameterName []*FhirString `json:"parametername,omitempty"`
	Comment *FhirString `json:"comment,omitempty"`
}

// NewOperationDefinitionOverload creates a new OperationDefinitionOverload instance
func NewOperationDefinitionOverload() *OperationDefinitionOverload {
	return &OperationDefinitionOverload{}
}

// FromJSON populates OperationDefinitionOverload from JSON data
func (m *OperationDefinitionOverload) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts OperationDefinitionOverload to JSON data
func (m *OperationDefinitionOverload) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of OperationDefinitionOverload
func (m *OperationDefinitionOverload) Clone() *OperationDefinitionOverload {
	if m == nil { return nil }
	return &OperationDefinitionOverload{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		ParameterName: cloneSlices(m.ParameterName),
		Comment: m.Comment.Clone(),
	}
}

// Equals checks for equality with another OperationDefinitionOverload instance
func (m *OperationDefinitionOverload) Equals(other *OperationDefinitionOverload) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.ParameterName, other.ParameterName) { return false }
	if !m.Comment.Equals(other.Comment) { return false }
	return true
}

