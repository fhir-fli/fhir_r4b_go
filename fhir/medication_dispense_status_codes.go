// Code generated by FHIR Generator. DO NOT EDIT.
// MedicationDispense Status Codes
package fhir_r4b_go
// MedicationDispenseStatusCodes represents the FHIR ValueSet as an enumeration
type MedicationDispenseStatusCodes struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	MedicationDispenseStatusCodes_Preparation = "preparation" // Preparation: The core event has not started yet, but some staging activities have begun (e.g. initial compounding or packaging of medication). Preparation stages may be tracked for billing purposes.
	MedicationDispenseStatusCodes_In_progress = "in-progress" // In Progress: The dispensed product is ready for pickup.
	MedicationDispenseStatusCodes_Cancelled = "cancelled" // Cancelled: The dispensed product was not and will never be picked up by the patient.
	MedicationDispenseStatusCodes_On_hold = "on-hold" // On Hold: The dispense process is paused while waiting for an external event to reactivate the dispense. For example, new stock has arrived or the prescriber has called.
	MedicationDispenseStatusCodes_Completed = "completed" // Completed: The dispensed product has been picked up.
	MedicationDispenseStatusCodes_Entered_in_error = "entered-in-error" // Entered in Error: The dispense was entered in error and therefore nullified.
	MedicationDispenseStatusCodes_Stopped = "stopped" // Stopped: Actions implied by the dispense have been permanently halted, before all of them occurred.
	MedicationDispenseStatusCodes_Declined = "declined" // Declined: The dispense was declined and not performed.
	MedicationDispenseStatusCodes_Unknown = "unknown" // Unknown: The authoring system does not know which of the status values applies for this medication dispense. Note: this concept is not to be used for other - one of the listed statuses is presumed to apply, it's just now known which one.
)

// Clone creates a deep copy of the enum
func (e MedicationDispenseStatusCodes) Clone() *MedicationDispenseStatusCodes {
	return &MedicationDispenseStatusCodes{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *MedicationDispenseStatusCodes) Equals(other *MedicationDispenseStatusCodes) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

