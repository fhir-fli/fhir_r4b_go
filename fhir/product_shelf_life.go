// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// ProductShelfLife
// The shelf-life and storage information for a medicinal product item or container can be described using this class.
type ProductShelfLife struct {
	BackboneType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier *Identifier `json:"identifier,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	Period *Quantity `json:"period,omitempty"`
	SpecialPrecautionsForStorage []*CodeableConcept `json:"specialprecautionsforstorage,omitempty"`
}

// NewProductShelfLife creates a new ProductShelfLife instance
func NewProductShelfLife() *ProductShelfLife {
	return &ProductShelfLife{}
}

// FromJSON populates ProductShelfLife from JSON data
func (m *ProductShelfLife) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ProductShelfLife to JSON data
func (m *ProductShelfLife) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ProductShelfLife
func (m *ProductShelfLife) Clone() *ProductShelfLife {
	if m == nil { return nil }
	return &ProductShelfLife{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: m.Identifier.Clone(),
		Type: m.Type.Clone(),
		Period: m.Period.Clone(),
		SpecialPrecautionsForStorage: cloneSlices(m.SpecialPrecautionsForStorage),
	}
}

// Equals checks for equality with another ProductShelfLife instance
func (m *ProductShelfLife) Equals(other *ProductShelfLife) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Identifier.Equals(other.Identifier) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !compareSlices(m.SpecialPrecautionsForStorage, other.SpecialPrecautionsForStorage) { return false }
	return true
}

