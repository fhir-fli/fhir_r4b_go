// Code generated by FHIR Generator. DO NOT EDIT.
// How data is copied/created.
package fhir_r4b_go
// StructureMapTransform represents the FHIR ValueSet as an enumeration
type StructureMapTransform struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	StructureMapTransform_Create = "create" // create: create(type : string) - type is passed through to the application on the standard API, and must be known by it.
	StructureMapTransform_Copy = "copy" // copy: copy(source).
	StructureMapTransform_Truncate = "truncate" // truncate: truncate(source, length) - source must be stringy type.
	StructureMapTransform_Escape = "escape" // escape: escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped.
	StructureMapTransform_Cast = "cast" // cast: cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known.
	StructureMapTransform_Append = "append" // append: append(source...) - source is element or string.
	StructureMapTransform_Translate = "translate" // translate: translate(source, uri_of_map) - use the translate operation.
	StructureMapTransform_Reference = "reference" // reference: reference(source : object) - return a string that references the provided tree properly.
	StructureMapTransform_DateOp = "dateOp" // dateOp: Perform a date operation. *Parameters to be documented*.
	StructureMapTransform_Uuid = "uuid" // uuid: Generate a random UUID (in lowercase). No Parameters.
	StructureMapTransform_Pointer = "pointer" // pointer: Return the appropriate string to put in a reference that refers to the resource provided as a parameter.
	StructureMapTransform_Evaluate = "evaluate" // evaluate: Execute the supplied FHIRPath expression and use the value returned by that.
	StructureMapTransform_Cc = "cc" // cc: Create a CodeableConcept. Parameters = (text) or (system. Code[, display]).
	StructureMapTransform_C = "c" // c: Create a Coding. Parameters = (system. Code[, display]).
	StructureMapTransform_Qty = "qty" // qty: Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit.
	StructureMapTransform_Id = "id" // id: Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set.
	StructureMapTransform_Cp = "cp" // cp: Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value.
)

// Clone creates a deep copy of the enum
func (e StructureMapTransform) Clone() *StructureMapTransform {
	return &StructureMapTransform{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *StructureMapTransform) Equals(other *StructureMapTransform) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

