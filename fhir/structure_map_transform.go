// Code generated by FHIR Generator. DO NOT EDIT.
// How data is copied/created.
package fhir_r4b_go

// StructureMapTransform represents the FHIR ValueSet as an enumeration
type StructureMapTransform int

const (
	// create: create(type : string) - type is passed through to the application on the standard API, and must be known by it.
	StructureMapTransform_Create StructureMapTransform = iota
	// copy: copy(source).
	StructureMapTransform_Copy StructureMapTransform = iota
	// truncate: truncate(source, length) - source must be stringy type.
	StructureMapTransform_Truncate StructureMapTransform = iota
	// escape: escape(source, fmt1, fmt2) - change source from one kind of escaping to another (plain, java, xml, json). note that this is for when the string itself is escaped.
	StructureMapTransform_Escape StructureMapTransform = iota
	// cast: cast(source, type?) - case source from one type to another. target type can be left as implicit if there is one and only one target type known.
	StructureMapTransform_Cast StructureMapTransform = iota
	// append: append(source...) - source is element or string.
	StructureMapTransform_Append StructureMapTransform = iota
	// translate: translate(source, uri_of_map) - use the translate operation.
	StructureMapTransform_Translate StructureMapTransform = iota
	// reference: reference(source : object) - return a string that references the provided tree properly.
	StructureMapTransform_Reference StructureMapTransform = iota
	// dateOp: Perform a date operation. *Parameters to be documented*.
	StructureMapTransform_DateOp StructureMapTransform = iota
	// uuid: Generate a random UUID (in lowercase). No Parameters.
	StructureMapTransform_Uuid StructureMapTransform = iota
	// pointer: Return the appropriate string to put in a reference that refers to the resource provided as a parameter.
	StructureMapTransform_Pointer StructureMapTransform = iota
	// evaluate: Execute the supplied FHIRPath expression and use the value returned by that.
	StructureMapTransform_Evaluate StructureMapTransform = iota
	// cc: Create a CodeableConcept. Parameters = (text) or (system. Code[, display]).
	StructureMapTransform_Cc StructureMapTransform = iota
	// c: Create a Coding. Parameters = (system. Code[, display]).
	StructureMapTransform_C StructureMapTransform = iota
	// qty: Create a quantity. Parameters = (text) or (value, unit, [system, code]) where text is the natural representation e.g. [comparator]value[space]unit.
	StructureMapTransform_Qty StructureMapTransform = iota
	// id: Create an identifier. Parameters = (system, value[, type]) where type is a code from the identifier type value set.
	StructureMapTransform_Id StructureMapTransform = iota
	// cp: Create a contact details. Parameters = (value) or (system, value). If no system is provided, the system should be inferred from the content of the value.
	StructureMapTransform_Cp StructureMapTransform = iota
)

// String converts the enum to its string representation
func (e StructureMapTransform) String() string {
	switch e {
	case StructureMapTransform_Create: return "create"
	case StructureMapTransform_Copy: return "copy"
	case StructureMapTransform_Truncate: return "truncate"
	case StructureMapTransform_Escape: return "escape"
	case StructureMapTransform_Cast: return "cast"
	case StructureMapTransform_Append: return "append"
	case StructureMapTransform_Translate: return "translate"
	case StructureMapTransform_Reference: return "reference"
	case StructureMapTransform_DateOp: return "dateOp"
	case StructureMapTransform_Uuid: return "uuid"
	case StructureMapTransform_Pointer: return "pointer"
	case StructureMapTransform_Evaluate: return "evaluate"
	case StructureMapTransform_Cc: return "cc"
	case StructureMapTransform_C: return "c"
	case StructureMapTransform_Qty: return "qty"
	case StructureMapTransform_Id: return "id"
	case StructureMapTransform_Cp: return "cp"
	default: return "Unknown"
	}
}

