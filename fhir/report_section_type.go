// Code generated by FHIR Generator. DO NOT EDIT.
// Evidence Report Section Type.
package fhir_r4b_go
// ReportSectionType represents the FHIR ValueSet as an enumeration
type ReportSectionType struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	ReportSectionType_Evidence = "Evidence" // Evidence Results: Evidence Results.
	ReportSectionType_Intervention_group_alone_Evidence = "Intervention-group-alone-Evidence" // Evidence Results for the intervention exposure only: Evidence Results for the intervention exposure only.
	ReportSectionType_Intervention_vs_Control_Evidence = "Intervention-vs-Control-Evidence" // Evidence Results for comparison of Intervention and Control: Evidence Results for comparison of Intervention and Control.
	ReportSectionType_Control_group_alone_Evidence = "Control-group-alone-Evidence" // Evidence Results for the control exposure only: Evidence Results for the control exposure only.
	ReportSectionType_EvidenceVariable = "EvidenceVariable" // Evidence Variables used: Evidence Variables used.
	ReportSectionType_EvidenceVariable_observed = "EvidenceVariable-observed" // Evidence Variables actually observed: Evidence Variables as observed in the research data.
	ReportSectionType_EvidenceVariable_intended = "EvidenceVariable-intended" // Evidence Variables intended for interpretation: Evidence Variables intended for interpretation.
	ReportSectionType_EvidenceVariable_population = "EvidenceVariable-population" // Evidence Variable in variable role Population: Evidence Variable in variable role Population.
	ReportSectionType_EvidenceVariable_exposure = "EvidenceVariable-exposure" // Evidence Variable in variable role Exposure: Evidence Variable in variable role Exposure.
	ReportSectionType_EvidenceVariable_outcome = "EvidenceVariable-outcome" // Evidence Variable in variable role Outcome (MeasuredVariable): Evidence Variable in variable role Outcome (MeasuredVariable).
	ReportSectionType_Efficacy_outcomes = "Efficacy-outcomes" // Efficacy-outcomes: Outcomes related to efficacy or potential benefits of interventions.
	ReportSectionType_Harms_outcomes = "Harms-outcomes" // Harms outcomes: Outcomes related to adverse effects or potential harms of interventions.
	ReportSectionType_SampleSize = "SampleSize" // Sample Size: Sample Size.
	ReportSectionType_References = "References" // References: References.
	ReportSectionType_Assertion = "Assertion" // Assertion: Assertion.
	ReportSectionType_Reasons = "Reasons" // Reasons: Reasons.
	ReportSectionType_Certainty_of_Evidence = "Certainty-of-Evidence" // Certainty of Evidence: Certainty of Evidence.
	ReportSectionType_Evidence_Classifier = "Evidence-Classifier" // Evidence Classifier section: This section is used for classifiers of the evidence.
	ReportSectionType_Warnings = "Warnings" // Warnings: Warnings.
	ReportSectionType_Text_Summary = "Text-Summary" // Text Summary: Denotes a section specifying text summary for a report.
	ReportSectionType_SummaryOfBodyOfEvidenceFindings = "SummaryOfBodyOfEvidenceFindings" // Summary of Body of Evidence Findings: Summary of Body of Evidence Findings.
	ReportSectionType_SummaryOfIndividualStudyFindings = "SummaryOfIndividualStudyFindings" // Summary of Individual Study Findings: Summary of Individual Study Findings.
	ReportSectionType_Header = "Header" // Header: Denotes the header to use for a Text Summary or above a Table.
	ReportSectionType_Tables = "Tables" // Tables: Tables.
	ReportSectionType_Table = "Table" // Table: 
	ReportSectionType_Row_Headers = "Row-Headers" // Row Headers: Denotes a section specifying row headers for a tabular report.
	ReportSectionType_Column_Header = "Column-Header" // Column Header: Denotes the header to use for the column for a tabular report.
	ReportSectionType_Column_Headers = "Column-Headers" // Column Headers: Denotes a section specifying column headers for a tabular report.
)

// Clone creates a deep copy of the enum
func (e ReportSectionType) Clone() *ReportSectionType {
	return &ReportSectionType{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *ReportSectionType) Equals(other *ReportSectionType) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

