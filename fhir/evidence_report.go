// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// EvidenceReport
// The EvidenceReport Resource is a specialized container for a collection of resources and codable concepts, adapted to support compositions of Evidence, EvidenceVariable, and Citation resources and related concepts.
type EvidenceReport struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Url *FhirUri `json:"url,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	UseContext []*UsageContext `json:"usecontext,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	RelatedIdentifier []*Identifier `json:"relatedidentifier,omitempty"`
	CiteAsReference *Reference `json:"citeasreference,omitempty"`
	CiteAsMarkdown *FhirMarkdown `json:"citeasmarkdown,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
	RelatedArtifact []*RelatedArtifact `json:"relatedartifact,omitempty"`
	Subject *EvidenceReportSubject `json:"subject,omitempty"`
	Publisher *FhirString `json:"publisher,omitempty"`
	Contact []*ContactDetail `json:"contact,omitempty"`
	Author []*ContactDetail `json:"author,omitempty"`
	Editor []*ContactDetail `json:"editor,omitempty"`
	Reviewer []*ContactDetail `json:"reviewer,omitempty"`
	Endorser []*ContactDetail `json:"endorser,omitempty"`
	RelatesTo []*EvidenceReportRelatesTo `json:"relatesto,omitempty"`
	Section []*EvidenceReportSection `json:"section,omitempty"`
}

// NewEvidenceReport creates a new EvidenceReport instance
func NewEvidenceReport() *EvidenceReport {
	return &EvidenceReport{}
}

// FromJSON populates EvidenceReport from JSON data
func (m *EvidenceReport) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts EvidenceReport to JSON data
func (m *EvidenceReport) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of EvidenceReport
func (m *EvidenceReport) Clone() *EvidenceReport {
	if m == nil { return nil }
	return &EvidenceReport{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Url: m.Url.Clone(),
		Status: m.Status.Clone(),
		UseContext: cloneSlices(m.UseContext),
		Identifier: cloneSlices(m.Identifier),
		RelatedIdentifier: cloneSlices(m.RelatedIdentifier),
		CiteAsReference: m.CiteAsReference.Clone(),
		CiteAsMarkdown: m.CiteAsMarkdown.Clone(),
		Type: m.Type.Clone(),
		Note: cloneSlices(m.Note),
		RelatedArtifact: cloneSlices(m.RelatedArtifact),
		Subject: m.Subject.Clone(),
		Publisher: m.Publisher.Clone(),
		Contact: cloneSlices(m.Contact),
		Author: cloneSlices(m.Author),
		Editor: cloneSlices(m.Editor),
		Reviewer: cloneSlices(m.Reviewer),
		Endorser: cloneSlices(m.Endorser),
		RelatesTo: cloneSlices(m.RelatesTo),
		Section: cloneSlices(m.Section),
	}
}

// Equals checks for equality with another EvidenceReport instance
func (m *EvidenceReport) Equals(other *EvidenceReport) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !compareSlices(m.UseContext, other.UseContext) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.RelatedIdentifier, other.RelatedIdentifier) { return false }
	if !m.CiteAsReference.Equals(other.CiteAsReference) { return false }
	if !m.CiteAsMarkdown.Equals(other.CiteAsMarkdown) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	if !compareSlices(m.RelatedArtifact, other.RelatedArtifact) { return false }
	if !m.Subject.Equals(other.Subject) { return false }
	if !m.Publisher.Equals(other.Publisher) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !compareSlices(m.Author, other.Author) { return false }
	if !compareSlices(m.Editor, other.Editor) { return false }
	if !compareSlices(m.Reviewer, other.Reviewer) { return false }
	if !compareSlices(m.Endorser, other.Endorser) { return false }
	if !compareSlices(m.RelatesTo, other.RelatesTo) { return false }
	if !compareSlices(m.Section, other.Section) { return false }
	return true
}

// EvidenceReportSubject
// Specifies the subject or focus of the report. Answers "What is this report about?".
type EvidenceReportSubject struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Characteristic []*EvidenceReportCharacteristic `json:"characteristic,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
}

// NewEvidenceReportSubject creates a new EvidenceReportSubject instance
func NewEvidenceReportSubject() *EvidenceReportSubject {
	return &EvidenceReportSubject{}
}

// FromJSON populates EvidenceReportSubject from JSON data
func (m *EvidenceReportSubject) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts EvidenceReportSubject to JSON data
func (m *EvidenceReportSubject) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of EvidenceReportSubject
func (m *EvidenceReportSubject) Clone() *EvidenceReportSubject {
	if m == nil { return nil }
	return &EvidenceReportSubject{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Characteristic: cloneSlices(m.Characteristic),
		Note: cloneSlices(m.Note),
	}
}

// Equals checks for equality with another EvidenceReportSubject instance
func (m *EvidenceReportSubject) Equals(other *EvidenceReportSubject) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Characteristic, other.Characteristic) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	return true
}

// EvidenceReportCharacteristic
// Characteristic.
type EvidenceReportCharacteristic struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	ValueReference *Reference `json:"valuereference,omitempty"`
	ValueCodeableConcept *CodeableConcept `json:"valuecodeableconcept,omitempty"`
	ValueBoolean *FhirBoolean `json:"valueboolean,omitempty"`
	ValueQuantity *Quantity `json:"valuequantity,omitempty"`
	ValueRange *Range `json:"valuerange,omitempty"`
	Exclude *FhirBoolean `json:"exclude,omitempty"`
	Period *Period `json:"period,omitempty"`
}

// NewEvidenceReportCharacteristic creates a new EvidenceReportCharacteristic instance
func NewEvidenceReportCharacteristic() *EvidenceReportCharacteristic {
	return &EvidenceReportCharacteristic{}
}

// FromJSON populates EvidenceReportCharacteristic from JSON data
func (m *EvidenceReportCharacteristic) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts EvidenceReportCharacteristic to JSON data
func (m *EvidenceReportCharacteristic) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of EvidenceReportCharacteristic
func (m *EvidenceReportCharacteristic) Clone() *EvidenceReportCharacteristic {
	if m == nil { return nil }
	return &EvidenceReportCharacteristic{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		ValueReference: m.ValueReference.Clone(),
		ValueCodeableConcept: m.ValueCodeableConcept.Clone(),
		ValueBoolean: m.ValueBoolean.Clone(),
		ValueQuantity: m.ValueQuantity.Clone(),
		ValueRange: m.ValueRange.Clone(),
		Exclude: m.Exclude.Clone(),
		Period: m.Period.Clone(),
	}
}

// Equals checks for equality with another EvidenceReportCharacteristic instance
func (m *EvidenceReportCharacteristic) Equals(other *EvidenceReportCharacteristic) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.ValueReference.Equals(other.ValueReference) { return false }
	if !m.ValueCodeableConcept.Equals(other.ValueCodeableConcept) { return false }
	if !m.ValueBoolean.Equals(other.ValueBoolean) { return false }
	if !m.ValueQuantity.Equals(other.ValueQuantity) { return false }
	if !m.ValueRange.Equals(other.ValueRange) { return false }
	if !m.Exclude.Equals(other.Exclude) { return false }
	if !m.Period.Equals(other.Period) { return false }
	return true
}

// EvidenceReportRelatesTo
// Relationships that this composition has with other compositions or documents that already exist.
type EvidenceReportRelatesTo struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *ReportRelationshipType `json:"code,omitempty"`
	TargetIdentifier *Identifier `json:"targetidentifier,omitempty"`
	TargetReference *Reference `json:"targetreference,omitempty"`
}

// NewEvidenceReportRelatesTo creates a new EvidenceReportRelatesTo instance
func NewEvidenceReportRelatesTo() *EvidenceReportRelatesTo {
	return &EvidenceReportRelatesTo{}
}

// FromJSON populates EvidenceReportRelatesTo from JSON data
func (m *EvidenceReportRelatesTo) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts EvidenceReportRelatesTo to JSON data
func (m *EvidenceReportRelatesTo) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of EvidenceReportRelatesTo
func (m *EvidenceReportRelatesTo) Clone() *EvidenceReportRelatesTo {
	if m == nil { return nil }
	return &EvidenceReportRelatesTo{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		TargetIdentifier: m.TargetIdentifier.Clone(),
		TargetReference: m.TargetReference.Clone(),
	}
}

// Equals checks for equality with another EvidenceReportRelatesTo instance
func (m *EvidenceReportRelatesTo) Equals(other *EvidenceReportRelatesTo) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.TargetIdentifier.Equals(other.TargetIdentifier) { return false }
	if !m.TargetReference.Equals(other.TargetReference) { return false }
	return true
}

// EvidenceReportSection
// The root of the sections that make up the composition.
type EvidenceReportSection struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	Focus *CodeableConcept `json:"focus,omitempty"`
	FocusReference *Reference `json:"focusreference,omitempty"`
	Author []*Reference `json:"author,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Mode *ListMode `json:"mode,omitempty"`
	OrderedBy *CodeableConcept `json:"orderedby,omitempty"`
	EntryClassifier []*CodeableConcept `json:"entryclassifier,omitempty"`
	EntryReference []*Reference `json:"entryreference,omitempty"`
	EntryQuantity []*Quantity `json:"entryquantity,omitempty"`
	EmptyReason *CodeableConcept `json:"emptyreason,omitempty"`
	Section []*EvidenceReportSection `json:"section,omitempty"`
}

// NewEvidenceReportSection creates a new EvidenceReportSection instance
func NewEvidenceReportSection() *EvidenceReportSection {
	return &EvidenceReportSection{}
}

// FromJSON populates EvidenceReportSection from JSON data
func (m *EvidenceReportSection) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts EvidenceReportSection to JSON data
func (m *EvidenceReportSection) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of EvidenceReportSection
func (m *EvidenceReportSection) Clone() *EvidenceReportSection {
	if m == nil { return nil }
	return &EvidenceReportSection{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Title: m.Title.Clone(),
		Focus: m.Focus.Clone(),
		FocusReference: m.FocusReference.Clone(),
		Author: cloneSlices(m.Author),
		Text: m.Text.Clone(),
		Mode: m.Mode.Clone(),
		OrderedBy: m.OrderedBy.Clone(),
		EntryClassifier: cloneSlices(m.EntryClassifier),
		EntryReference: cloneSlices(m.EntryReference),
		EntryQuantity: cloneSlices(m.EntryQuantity),
		EmptyReason: m.EmptyReason.Clone(),
		Section: cloneSlices(m.Section),
	}
}

// Equals checks for equality with another EvidenceReportSection instance
func (m *EvidenceReportSection) Equals(other *EvidenceReportSection) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !m.Focus.Equals(other.Focus) { return false }
	if !m.FocusReference.Equals(other.FocusReference) { return false }
	if !compareSlices(m.Author, other.Author) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !m.Mode.Equals(other.Mode) { return false }
	if !m.OrderedBy.Equals(other.OrderedBy) { return false }
	if !compareSlices(m.EntryClassifier, other.EntryClassifier) { return false }
	if !compareSlices(m.EntryReference, other.EntryReference) { return false }
	if !compareSlices(m.EntryQuantity, other.EntryQuantity) { return false }
	if !m.EmptyReason.Equals(other.EmptyReason) { return false }
	if !compareSlices(m.Section, other.Section) { return false }
	return true
}

