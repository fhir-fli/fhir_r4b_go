// Code generated by FHIR Generator. DO NOT EDIT.
// A supported modifier for a search parameter.
package fhir_r4b_go

// SearchModifierCode represents the FHIR ValueSet as an enumeration
type SearchModifierCode int

const (
	// Missing: The search parameter returns resources that have a value or not.
	SearchModifierCode_Missing SearchModifierCode = iota
	// Exact: The search parameter returns resources that have a value that exactly matches the supplied parameter (the whole string, including casing and accents).
	SearchModifierCode_Exact SearchModifierCode = iota
	// Contains: The search parameter returns resources that include the supplied parameter value anywhere within the field being searched.
	SearchModifierCode_Contains SearchModifierCode = iota
	// Not: The search parameter returns resources that do not contain a match.
	SearchModifierCode_Not SearchModifierCode = iota
	// Text: The search parameter is processed as a string that searches text associated with the code/value - either CodeableConcept.text, Coding.display, or Identifier.type.text.
	SearchModifierCode_Text SearchModifierCode = iota
	// In: The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is in the specified value set.
	SearchModifierCode_In SearchModifierCode = iota
	// Not In: The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is not in the specified value set.
	SearchModifierCode_Not_in SearchModifierCode = iota
	// Below: The search parameter tests whether the value in a resource is subsumed by the specified value (is-a, or hierarchical relationships).
	SearchModifierCode_Below SearchModifierCode = iota
	// Above: The search parameter tests whether the value in a resource subsumes the specified value (is-a, or hierarchical relationships).
	SearchModifierCode_Above SearchModifierCode = iota
	// Type: The search parameter only applies to the Resource Type specified as a modifier (e.g. the modifier is not actually :type, but :Patient etc.).
	SearchModifierCode_Type_ SearchModifierCode = iota
	// Identifier: The search parameter applies to the identifier on the resource, not the reference.
	SearchModifierCode_Identifier SearchModifierCode = iota
	// Of Type: The search parameter has the format system|code|value, where the system and code refer to an Identifier.type.coding.system and .code, and match if any of the type codes match. All 3 parts must be present.
	SearchModifierCode_OfType SearchModifierCode = iota
)

// String converts the enum to its string representation
func (e SearchModifierCode) String() string {
	switch e {
	case SearchModifierCode_Missing: return "Missing"
	case SearchModifierCode_Exact: return "Exact"
	case SearchModifierCode_Contains: return "Contains"
	case SearchModifierCode_Not: return "Not"
	case SearchModifierCode_Text: return "Text"
	case SearchModifierCode_In: return "In"
	case SearchModifierCode_Not_in: return "Not In"
	case SearchModifierCode_Below: return "Below"
	case SearchModifierCode_Above: return "Above"
	case SearchModifierCode_Type_: return "Type"
	case SearchModifierCode_Identifier: return "Identifier"
	case SearchModifierCode_OfType: return "Of Type"
	default: return "Unknown"
	}
}

