// Code generated by FHIR Generator. DO NOT EDIT.
// A supported modifier for a search parameter.
package fhir_r4b_go
// SearchModifierCode represents the FHIR ValueSet as an enumeration
type SearchModifierCode struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	SearchModifierCode_Missing = "missing" // Missing: The search parameter returns resources that have a value or not.
	SearchModifierCode_Exact = "exact" // Exact: The search parameter returns resources that have a value that exactly matches the supplied parameter (the whole string, including casing and accents).
	SearchModifierCode_Contains = "contains" // Contains: The search parameter returns resources that include the supplied parameter value anywhere within the field being searched.
	SearchModifierCode_Not = "not" // Not: The search parameter returns resources that do not contain a match.
	SearchModifierCode_Text = "text" // Text: The search parameter is processed as a string that searches text associated with the code/value - either CodeableConcept.text, Coding.display, or Identifier.type.text.
	SearchModifierCode_In = "in" // In: The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is in the specified value set.
	SearchModifierCode_Not_in = "not-in" // Not In: The search parameter is a URI (relative or absolute) that identifies a value set, and the search parameter tests whether the coding is not in the specified value set.
	SearchModifierCode_Below = "below" // Below: The search parameter tests whether the value in a resource is subsumed by the specified value (is-a, or hierarchical relationships).
	SearchModifierCode_Above = "above" // Above: The search parameter tests whether the value in a resource subsumes the specified value (is-a, or hierarchical relationships).
	SearchModifierCode_Type_ = "type" // Type: The search parameter only applies to the Resource Type specified as a modifier (e.g. the modifier is not actually :type, but :Patient etc.).
	SearchModifierCode_Identifier = "identifier" // Identifier: The search parameter applies to the identifier on the resource, not the reference.
	SearchModifierCode_OfType = "ofType" // Of Type: The search parameter has the format system|code|value, where the system and code refer to an Identifier.type.coding.system and .code, and match if any of the type codes match. All 3 parts must be present.
)

// Clone creates a deep copy of the enum
func (e SearchModifierCode) Clone() *SearchModifierCode {
	return &SearchModifierCode{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *SearchModifierCode) Equals(other *SearchModifierCode) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

