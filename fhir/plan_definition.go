// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// PlanDefinition
// This resource allows for the definition of various types of plans as a sharable, consumable, and executable artifact. The resource is general enough to support the description of a broad range of clinical and non-clinical artifacts such as clinical decision support rules, order sets, protocols, and drug quality specifications.
type PlanDefinition struct {
	CanonicalResource
	// id
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Id FhirString `json:"id,omitempty"`
	// meta
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta FhirMeta `json:"meta,omitempty"`
	// implicitRules
	// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ImplicitRules FhirUri `json:"implicitRules,omitempty"`
	// language
	// The base language in which the resource is written.
	Language CommonLanguages `json:"language,omitempty"`
	// text
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text Narrative `json:"text,omitempty"`
	// contained
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []Resource `json:"contained,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// url
	// An absolute URI that is used to identify this plan definition when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this plan definition is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the plan definition is stored on different servers.
	Url FhirUri `json:"url,omitempty"`
	// identifier
	// A formal identifier that is used to identify this plan definition when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Identifier []Identifier `json:"identifier,omitempty"`
	// version
	// The identifier that is used to identify this version of the plan definition when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the plan definition author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence. To provide a version consistent with the Decision Support Service specification, use the format Major.Minor.Revision (e.g. 1.0.0). For more information on versioning knowledge assets, refer to the Decision Support Service specification. Note that a version is required for non-experimental active artifacts.
	Version FhirString `json:"version,omitempty"`
	// name
	// A natural language name identifying the plan definition. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Name FhirString `json:"name,omitempty"`
	// title
	// A short, descriptive, user-friendly title for the plan definition.
	Title FhirString `json:"title,omitempty"`
	// subtitle
	// An explanatory or alternate title for the plan definition giving additional information about its content.
	Subtitle FhirString `json:"subtitle,omitempty"`
	// type
	// A high-level category for the plan definition that distinguishes the kinds of systems that would be interested in the plan definition.
	Type_ CodeableConcept `json:"type,omitempty"`
	// status
	// The status of this plan definition. Enables tracking the life-cycle of the content.
	Status PublicationStatus `json:"status,omitempty"`
	// experimental
	// A Boolean value to indicate that this plan definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Experimental FhirBoolean `json:"experimental,omitempty"`
	// subjectCodeableConcept
	// A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
	SubjectCodeableConcept CodeableConcept `json:"subjectCodeableConcept,omitempty"`
	// subjectReference
	// A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
	SubjectReference Reference `json:"subjectReference,omitempty"`
	// subjectCanonical
	// A code, group definition, or canonical reference that describes  or identifies the intended subject of the plan definition. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
	SubjectCanonical SubjectType `json:"subjectCanonical,omitempty"`
	// date
	// The date  (and optionally time) when the plan definition was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the plan definition changes.
	Date FhirDateTime `json:"date,omitempty"`
	// publisher
	// The name of the organization or individual that published the plan definition.
	Publisher FhirString `json:"publisher,omitempty"`
	// contact
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []ContactDetail `json:"contact,omitempty"`
	// description
	// A free text natural language description of the plan definition from a consumer's perspective.
	Description FhirMarkdown `json:"description,omitempty"`
	// useContext
	// The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate plan definition instances.
	UseContext []UsageContext `json:"useContext,omitempty"`
	// jurisdiction
	// A legal or geographic region in which the plan definition is intended to be used.
	Jurisdiction []CodeableConcept `json:"jurisdiction,omitempty"`
	// purpose
	// Explanation of why this plan definition is needed and why it has been designed as it has.
	Purpose FhirMarkdown `json:"purpose,omitempty"`
	// usage
	// A detailed description of how the plan definition is used from a clinical perspective.
	Usage FhirString `json:"usage,omitempty"`
	// copyright
	// A copyright statement relating to the plan definition and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the plan definition.
	Copyright FhirMarkdown `json:"copyright,omitempty"`
	// approvalDate
	// The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	ApprovalDate FhirDate `json:"approvalDate,omitempty"`
	// lastReviewDate
	// The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	LastReviewDate FhirDate `json:"lastReviewDate,omitempty"`
	// effectivePeriod
	// The period during which the plan definition content was or is planned to be in active use.
	EffectivePeriod Period `json:"effectivePeriod,omitempty"`
	// topic
	// Descriptive topics related to the content of the plan definition. Topics provide a high-level categorization of the definition that can be useful for filtering and searching.
	Topic []CodeableConcept `json:"topic,omitempty"`
	// author
	// An individiual or organization primarily involved in the creation and maintenance of the content.
	Author []ContactDetail `json:"author,omitempty"`
	// editor
	// An individual or organization primarily responsible for internal coherence of the content.
	Editor []ContactDetail `json:"editor,omitempty"`
	// reviewer
	// An individual or organization primarily responsible for review of some aspect of the content.
	Reviewer []ContactDetail `json:"reviewer,omitempty"`
	// endorser
	// An individual or organization responsible for officially endorsing the content for use in some setting.
	Endorser []ContactDetail `json:"endorser,omitempty"`
	// relatedArtifact
	// Related artifacts such as additional documentation, justification, or bibliographic references.
	RelatedArtifact []RelatedArtifact `json:"relatedArtifact,omitempty"`
	// library
	// A reference to a Library resource containing any formal logic used by the plan definition.
	Library_ []FhirCanonical `json:"library,omitempty"`
	// goal
	// A goal describes an expected outcome that activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, meeting the acceptance criteria for a test as specified by a quality specification, etc.
	Goal []PlanDefinitionGoal `json:"goal,omitempty"`
	// action
	// An action or group of actions to be taken as part of the plan. For example, in clinical care, an action would be to prescribe a particular indicated medication, or perform a particular test as appropriate. In pharmaceutical quality, an action would be the test that needs to be performed on a drug product as defined in the quality specification.
	Action []PlanDefinitionAction `json:"action,omitempty"`
}

// NewPlanDefinition creates a new PlanDefinition instance
func NewPlanDefinition(
	id FhirString,
	meta FhirMeta,
	implicitRules FhirUri,
	language CommonLanguages,
	text Narrative,
	contained []Resource,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	url FhirUri,
	identifier []Identifier,
	version FhirString,
	name FhirString,
	title FhirString,
	subtitle FhirString,
	type_ CodeableConcept,
	status PublicationStatus,
	experimental FhirBoolean,
	subjectCodeableConcept CodeableConcept,
	subjectReference Reference,
	subjectCanonical SubjectType,
	date FhirDateTime,
	publisher FhirString,
	contact []ContactDetail,
	description FhirMarkdown,
	useContext []UsageContext,
	jurisdiction []CodeableConcept,
	purpose FhirMarkdown,
	usage FhirString,
	copyright FhirMarkdown,
	approvalDate FhirDate,
	lastReviewDate FhirDate,
	effectivePeriod Period,
	topic []CodeableConcept,
	author []ContactDetail,
	editor []ContactDetail,
	reviewer []ContactDetail,
	endorser []ContactDetail,
	relatedArtifact []RelatedArtifact,
	library_ []FhirCanonical,
	goal []PlanDefinitionGoal,
	action []PlanDefinitionAction,
) *PlanDefinition {
	return &PlanDefinition{
		Id: id,
		Meta: meta,
		ImplicitRules: implicitRules,
		Language: language,
		Text: text,
		Contained: contained,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Url: url,
		Identifier: identifier,
		Version: version,
		Name: name,
		Title: title,
		Subtitle: subtitle,
		Type_: type_,
		Status: status,
		Experimental: experimental,
		SubjectCodeableConcept: subjectCodeableConcept,
		SubjectReference: subjectReference,
		SubjectCanonical: subjectCanonical,
		Date: date,
		Publisher: publisher,
		Contact: contact,
		Description: description,
		UseContext: useContext,
		Jurisdiction: jurisdiction,
		Purpose: purpose,
		Usage: usage,
		Copyright: copyright,
		ApprovalDate: approvalDate,
		LastReviewDate: lastReviewDate,
		EffectivePeriod: effectivePeriod,
		Topic: topic,
		Author: author,
		Editor: editor,
		Reviewer: reviewer,
		Endorser: endorser,
		RelatedArtifact: relatedArtifact,
		Library_: library_,
		Goal: goal,
		Action: action,
	}
}
// FromJSON populates PlanDefinition from JSON data
func (m *PlanDefinition) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PlanDefinition to JSON data
func (m *PlanDefinition) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of PlanDefinition
func (m *PlanDefinition) CopyWith(
	id *FhirString,
	meta *FhirMeta,
	implicitRules *FhirUri,
	language *CommonLanguages,
	text *Narrative,
	contained *[]Resource,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	url *FhirUri,
	identifier *[]Identifier,
	version *FhirString,
	name *FhirString,
	title *FhirString,
	subtitle *FhirString,
	type_ *CodeableConcept,
	status *PublicationStatus,
	experimental *FhirBoolean,
	subjectCodeableConcept *CodeableConcept,
	subjectReference *Reference,
	subjectCanonical *SubjectType,
	date *FhirDateTime,
	publisher *FhirString,
	contact *[]ContactDetail,
	description *FhirMarkdown,
	useContext *[]UsageContext,
	jurisdiction *[]CodeableConcept,
	purpose *FhirMarkdown,
	usage *FhirString,
	copyright *FhirMarkdown,
	approvalDate *FhirDate,
	lastReviewDate *FhirDate,
	effectivePeriod *Period,
	topic *[]CodeableConcept,
	author *[]ContactDetail,
	editor *[]ContactDetail,
	reviewer *[]ContactDetail,
	endorser *[]ContactDetail,
	relatedArtifact *[]RelatedArtifact,
	library_ *[]FhirCanonical,
	goal *[]PlanDefinitionGoal,
	action *[]PlanDefinitionAction,
) *PlanDefinition {
	return &PlanDefinition{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Meta: func() FhirMeta {
			if meta != nil { return *meta }
			return m.Meta
		}(),
		ImplicitRules: func() FhirUri {
			if implicitRules != nil { return *implicitRules }
			return m.ImplicitRules
		}(),
		Language: func() CommonLanguages {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() Narrative {
			if text != nil { return *text }
			return m.Text
		}(),
		Contained: func() []Resource {
			if contained != nil { return *contained }
			return m.Contained
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Url: func() FhirUri {
			if url != nil { return *url }
			return m.Url
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		Version: func() FhirString {
			if version != nil { return *version }
			return m.Version
		}(),
		Name: func() FhirString {
			if name != nil { return *name }
			return m.Name
		}(),
		Title: func() FhirString {
			if title != nil { return *title }
			return m.Title
		}(),
		Subtitle: func() FhirString {
			if subtitle != nil { return *subtitle }
			return m.Subtitle
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Status: func() PublicationStatus {
			if status != nil { return *status }
			return m.Status
		}(),
		Experimental: func() FhirBoolean {
			if experimental != nil { return *experimental }
			return m.Experimental
		}(),
		SubjectCodeableConcept: func() CodeableConcept {
			if subjectCodeableConcept != nil { return *subjectCodeableConcept }
			return m.SubjectCodeableConcept
		}(),
		SubjectReference: func() Reference {
			if subjectReference != nil { return *subjectReference }
			return m.SubjectReference
		}(),
		SubjectCanonical: func() SubjectType {
			if subjectCanonical != nil { return *subjectCanonical }
			return m.SubjectCanonical
		}(),
		Date: func() FhirDateTime {
			if date != nil { return *date }
			return m.Date
		}(),
		Publisher: func() FhirString {
			if publisher != nil { return *publisher }
			return m.Publisher
		}(),
		Contact: func() []ContactDetail {
			if contact != nil { return *contact }
			return m.Contact
		}(),
		Description: func() FhirMarkdown {
			if description != nil { return *description }
			return m.Description
		}(),
		UseContext: func() []UsageContext {
			if useContext != nil { return *useContext }
			return m.UseContext
		}(),
		Jurisdiction: func() []CodeableConcept {
			if jurisdiction != nil { return *jurisdiction }
			return m.Jurisdiction
		}(),
		Purpose: func() FhirMarkdown {
			if purpose != nil { return *purpose }
			return m.Purpose
		}(),
		Usage: func() FhirString {
			if usage != nil { return *usage }
			return m.Usage
		}(),
		Copyright: func() FhirMarkdown {
			if copyright != nil { return *copyright }
			return m.Copyright
		}(),
		ApprovalDate: func() FhirDate {
			if approvalDate != nil { return *approvalDate }
			return m.ApprovalDate
		}(),
		LastReviewDate: func() FhirDate {
			if lastReviewDate != nil { return *lastReviewDate }
			return m.LastReviewDate
		}(),
		EffectivePeriod: func() Period {
			if effectivePeriod != nil { return *effectivePeriod }
			return m.EffectivePeriod
		}(),
		Topic: func() []CodeableConcept {
			if topic != nil { return *topic }
			return m.Topic
		}(),
		Author: func() []ContactDetail {
			if author != nil { return *author }
			return m.Author
		}(),
		Editor: func() []ContactDetail {
			if editor != nil { return *editor }
			return m.Editor
		}(),
		Reviewer: func() []ContactDetail {
			if reviewer != nil { return *reviewer }
			return m.Reviewer
		}(),
		Endorser: func() []ContactDetail {
			if endorser != nil { return *endorser }
			return m.Endorser
		}(),
		RelatedArtifact: func() []RelatedArtifact {
			if relatedArtifact != nil { return *relatedArtifact }
			return m.RelatedArtifact
		}(),
		Library_: func() []FhirCanonical {
			if library_ != nil { return *library_ }
			return m.Library_
		}(),
		Goal: func() []PlanDefinitionGoal {
			if goal != nil { return *goal }
			return m.Goal
		}(),
		Action: func() []PlanDefinitionAction {
			if action != nil { return *action }
			return m.Action
		}(),
	}
}
// PlanDefinitionGoal
// A goal describes an expected outcome that activities within the plan are intended to achieve. For example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, meeting the acceptance criteria for a test as specified by a quality specification, etc.
type PlanDefinitionGoal struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// category
	// Indicates a category the goal falls within.
	Category CodeableConcept `json:"category,omitempty"`
	// description
	// Human-readable and/or coded description of a specific desired objective of care, such as "control blood pressure" or "negotiate an obstacle course" or "dance with child at wedding".
	Description CodeableConcept `json:"description,omitempty"`
	// priority
	// Identifies the expected level of importance associated with reaching/sustaining the defined goal.
	Priority CodeableConcept `json:"priority,omitempty"`
	// start
	// The event after which the goal should begin being pursued.
	Start CodeableConcept `json:"start,omitempty"`
	// addresses
	// Identifies problems, conditions, issues, or concerns the goal is intended to address.
	Addresses []CodeableConcept `json:"addresses,omitempty"`
	// documentation
	// Didactic or other informational resources associated with the goal that provide further supporting information about the goal. Information resources can include inline text commentary and links to web resources.
	Documentation []RelatedArtifact `json:"documentation,omitempty"`
	// target
	// Indicates what should be done and within what timeframe.
	Target []PlanDefinitionTarget `json:"target,omitempty"`
}

// NewPlanDefinitionGoal creates a new PlanDefinitionGoal instance
func NewPlanDefinitionGoal(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	category CodeableConcept,
	description CodeableConcept,
	priority CodeableConcept,
	start CodeableConcept,
	addresses []CodeableConcept,
	documentation []RelatedArtifact,
	target []PlanDefinitionTarget,
) *PlanDefinitionGoal {
	return &PlanDefinitionGoal{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Category: category,
		Description: description,
		Priority: priority,
		Start: start,
		Addresses: addresses,
		Documentation: documentation,
		Target: target,
	}
}
// FromJSON populates PlanDefinitionGoal from JSON data
func (m *PlanDefinitionGoal) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PlanDefinitionGoal to JSON data
func (m *PlanDefinitionGoal) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of PlanDefinitionGoal
func (m *PlanDefinitionGoal) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	category *CodeableConcept,
	description *CodeableConcept,
	priority *CodeableConcept,
	start *CodeableConcept,
	addresses *[]CodeableConcept,
	documentation *[]RelatedArtifact,
	target *[]PlanDefinitionTarget,
) *PlanDefinitionGoal {
	return &PlanDefinitionGoal{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Category: func() CodeableConcept {
			if category != nil { return *category }
			return m.Category
		}(),
		Description: func() CodeableConcept {
			if description != nil { return *description }
			return m.Description
		}(),
		Priority: func() CodeableConcept {
			if priority != nil { return *priority }
			return m.Priority
		}(),
		Start: func() CodeableConcept {
			if start != nil { return *start }
			return m.Start
		}(),
		Addresses: func() []CodeableConcept {
			if addresses != nil { return *addresses }
			return m.Addresses
		}(),
		Documentation: func() []RelatedArtifact {
			if documentation != nil { return *documentation }
			return m.Documentation
		}(),
		Target: func() []PlanDefinitionTarget {
			if target != nil { return *target }
			return m.Target
		}(),
	}
}
// PlanDefinitionTarget
// Indicates what should be done and within what timeframe.
type PlanDefinitionTarget struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// measure
	// The parameter whose value is to be tracked, e.g. body weight, blood pressure, or hemoglobin A1c level.
	Measure CodeableConcept `json:"measure,omitempty"`
	// detailQuantity
	// The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
	DetailQuantity Quantity `json:"detailQuantity,omitempty"`
	// detailRange
	// The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
	DetailRange Range `json:"detailRange,omitempty"`
	// detailCodeableConcept
	// The target value of the measure to be achieved to signify fulfillment of the goal, e.g. 150 pounds or 7.0%, or in the case of pharmaceutical quality - NMT 0.6%, Clear solution, etc. Either the high or low or both values of the range can be specified. When a low value is missing, it indicates that the goal is achieved at any value at or below the high value. Similarly, if the high value is missing, it indicates that the goal is achieved at any value at or above the low value.
	DetailCodeableConcept CodeableConcept `json:"detailCodeableConcept,omitempty"`
	// due
	// Indicates the timeframe after the start of the goal in which the goal should be met.
	Due FhirDuration `json:"due,omitempty"`
}

// NewPlanDefinitionTarget creates a new PlanDefinitionTarget instance
func NewPlanDefinitionTarget(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	measure CodeableConcept,
	detailQuantity Quantity,
	detailRange Range,
	detailCodeableConcept CodeableConcept,
	due FhirDuration,
) *PlanDefinitionTarget {
	return &PlanDefinitionTarget{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Measure: measure,
		DetailQuantity: detailQuantity,
		DetailRange: detailRange,
		DetailCodeableConcept: detailCodeableConcept,
		Due: due,
	}
}
// FromJSON populates PlanDefinitionTarget from JSON data
func (m *PlanDefinitionTarget) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PlanDefinitionTarget to JSON data
func (m *PlanDefinitionTarget) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of PlanDefinitionTarget
func (m *PlanDefinitionTarget) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	measure *CodeableConcept,
	detailQuantity *Quantity,
	detailRange *Range,
	detailCodeableConcept *CodeableConcept,
	due *FhirDuration,
) *PlanDefinitionTarget {
	return &PlanDefinitionTarget{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Measure: func() CodeableConcept {
			if measure != nil { return *measure }
			return m.Measure
		}(),
		DetailQuantity: func() Quantity {
			if detailQuantity != nil { return *detailQuantity }
			return m.DetailQuantity
		}(),
		DetailRange: func() Range {
			if detailRange != nil { return *detailRange }
			return m.DetailRange
		}(),
		DetailCodeableConcept: func() CodeableConcept {
			if detailCodeableConcept != nil { return *detailCodeableConcept }
			return m.DetailCodeableConcept
		}(),
		Due: func() FhirDuration {
			if due != nil { return *due }
			return m.Due
		}(),
	}
}
// PlanDefinitionAction
// An action or group of actions to be taken as part of the plan. For example, in clinical care, an action would be to prescribe a particular indicated medication, or perform a particular test as appropriate. In pharmaceutical quality, an action would be the test that needs to be performed on a drug product as defined in the quality specification.
type PlanDefinitionAction struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// prefix
	// A user-visible prefix for the action.
	Prefix FhirString `json:"prefix,omitempty"`
	// title
	// The textual description of the action displayed to a user. For example, when the action is a test to be performed, the title would be the title of the test such as Assay by HPLC.
	Title FhirString `json:"title,omitempty"`
	// description
	// A brief description of the action used to provide a summary to display to the user.
	Description FhirString `json:"description,omitempty"`
	// textEquivalent
	// A text equivalent of the action to be performed. This provides a human-interpretable description of the action when the definition is consumed by a system that might not be capable of interpreting it dynamically.
	TextEquivalent FhirString `json:"textEquivalent,omitempty"`
	// priority
	// Indicates how quickly the action should be addressed with respect to other actions.
	Priority RequestPriority `json:"priority,omitempty"`
	// code
	// A code that provides a meaning, grouping, or classification for the action or action group. For example, a section may have a LOINC code for the section of a documentation template. In pharmaceutical quality, an action (Test) such as pH could be classified as a physical property.
	Code []CodeableConcept `json:"code,omitempty"`
	// reason
	// A description of why this action is necessary or appropriate.
	Reason []CodeableConcept `json:"reason,omitempty"`
	// documentation
	// Didactic or other informational resources associated with the action that can be provided to the CDS recipient. Information resources can include inline text commentary and links to web resources.
	Documentation []RelatedArtifact `json:"documentation,omitempty"`
	// goalId
	// Identifies goals that this action supports. The reference must be to a goal element defined within this plan definition. In pharmaceutical quality, a goal represents acceptance criteria (Goal) for a given action (Test), so the goalId would be the unique id of a defined goal element establishing the acceptance criteria for the action.
	GoalId []FhirId `json:"goalId,omitempty"`
	// subjectCodeableConcept
	// A code, group definition, or canonical reference that describes the intended subject of the action and its children, if any. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
	SubjectCodeableConcept CodeableConcept `json:"subjectCodeableConcept,omitempty"`
	// subjectReference
	// A code, group definition, or canonical reference that describes the intended subject of the action and its children, if any. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
	SubjectReference Reference `json:"subjectReference,omitempty"`
	// subjectCanonical
	// A code, group definition, or canonical reference that describes the intended subject of the action and its children, if any. Canonical references are allowed to support the definition of protocols for drug and substance quality specifications, and is allowed to reference a MedicinalProductDefinition, SubstanceDefinition, AdministrableProductDefinition, ManufacturedItemDefinition, or PackagedProductDefinition resource.
	SubjectCanonical SubjectType `json:"subjectCanonical,omitempty"`
	// trigger
	// A description of when the action should be triggered.
	Trigger []TriggerDefinition `json:"trigger,omitempty"`
	// condition
	// An expression that describes applicability criteria or start/stop conditions for the action.
	Condition []PlanDefinitionCondition `json:"condition,omitempty"`
	// input
	// Defines input data requirements for the action.
	Input []DataRequirement `json:"input,omitempty"`
	// output
	// Defines the outputs of the action, if any.
	Output []DataRequirement `json:"output,omitempty"`
	// relatedAction
	// A relationship to another action such as "before" or "30-60 minutes after start of".
	RelatedAction []PlanDefinitionRelatedAction `json:"relatedAction,omitempty"`
	// timingDateTime
	// An optional value describing when the action should be performed.
	TimingDateTime FhirDateTime `json:"timingDateTime,omitempty"`
	// timingAge
	// An optional value describing when the action should be performed.
	TimingAge Age `json:"timingAge,omitempty"`
	// timingPeriod
	// An optional value describing when the action should be performed.
	TimingPeriod Period `json:"timingPeriod,omitempty"`
	// timingDuration
	// An optional value describing when the action should be performed.
	TimingDuration FhirDuration `json:"timingDuration,omitempty"`
	// timingRange
	// An optional value describing when the action should be performed.
	TimingRange Range `json:"timingRange,omitempty"`
	// timingTiming
	// An optional value describing when the action should be performed.
	TimingTiming Timing `json:"timingTiming,omitempty"`
	// participant
	// Indicates who should participate in performing the action described.
	Participant []PlanDefinitionParticipant `json:"participant,omitempty"`
	// type
	// The type of action to perform (create, update, remove).
	Type_ CodeableConcept `json:"type,omitempty"`
	// groupingBehavior
	// Defines the grouping behavior for the action and its children.
	GroupingBehavior ActionGroupingBehavior `json:"groupingBehavior,omitempty"`
	// selectionBehavior
	// Defines the selection behavior for the action and its children.
	SelectionBehavior ActionSelectionBehavior `json:"selectionBehavior,omitempty"`
	// requiredBehavior
	// Defines the required behavior for the action.
	RequiredBehavior ActionRequiredBehavior `json:"requiredBehavior,omitempty"`
	// precheckBehavior
	// Defines whether the action should usually be preselected.
	PrecheckBehavior ActionPrecheckBehavior `json:"precheckBehavior,omitempty"`
	// cardinalityBehavior
	// Defines whether the action can be selected multiple times.
	CardinalityBehavior ActionCardinalityBehavior `json:"cardinalityBehavior,omitempty"`
	// definitionCanonical
	// A reference to an ActivityDefinition that describes the action to be taken in detail, or a PlanDefinition that describes a series of actions to be taken.
	DefinitionCanonical FhirCanonical `json:"definitionCanonical,omitempty"`
	// definitionUri
	// A reference to an ActivityDefinition that describes the action to be taken in detail, or a PlanDefinition that describes a series of actions to be taken.
	DefinitionUri FhirUri `json:"definitionUri,omitempty"`
	// transform
	// A reference to a StructureMap resource that defines a transform that can be executed to produce the intent resource using the ActivityDefinition instance as the input.
	Transform FhirCanonical `json:"transform,omitempty"`
	// dynamicValue
	// Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
	DynamicValue []PlanDefinitionDynamicValue `json:"dynamicValue,omitempty"`
	// action
	// Sub actions that are contained within the action. The behavior of this action determines the functionality of the sub-actions. For example, a selection behavior of at-most-one indicates that of the sub-actions, at most one may be chosen as part of realizing the action definition.
	Action []PlanDefinitionAction `json:"action,omitempty"`
}

// NewPlanDefinitionAction creates a new PlanDefinitionAction instance
func NewPlanDefinitionAction(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	prefix FhirString,
	title FhirString,
	description FhirString,
	textEquivalent FhirString,
	priority RequestPriority,
	code []CodeableConcept,
	reason []CodeableConcept,
	documentation []RelatedArtifact,
	goalId []FhirId,
	subjectCodeableConcept CodeableConcept,
	subjectReference Reference,
	subjectCanonical SubjectType,
	trigger []TriggerDefinition,
	condition []PlanDefinitionCondition,
	input []DataRequirement,
	output []DataRequirement,
	relatedAction []PlanDefinitionRelatedAction,
	timingDateTime FhirDateTime,
	timingAge Age,
	timingPeriod Period,
	timingDuration FhirDuration,
	timingRange Range,
	timingTiming Timing,
	participant []PlanDefinitionParticipant,
	type_ CodeableConcept,
	groupingBehavior ActionGroupingBehavior,
	selectionBehavior ActionSelectionBehavior,
	requiredBehavior ActionRequiredBehavior,
	precheckBehavior ActionPrecheckBehavior,
	cardinalityBehavior ActionCardinalityBehavior,
	definitionCanonical FhirCanonical,
	definitionUri FhirUri,
	transform FhirCanonical,
	dynamicValue []PlanDefinitionDynamicValue,
	action []PlanDefinitionAction,
) *PlanDefinitionAction {
	return &PlanDefinitionAction{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Prefix: prefix,
		Title: title,
		Description: description,
		TextEquivalent: textEquivalent,
		Priority: priority,
		Code: code,
		Reason: reason,
		Documentation: documentation,
		GoalId: goalId,
		SubjectCodeableConcept: subjectCodeableConcept,
		SubjectReference: subjectReference,
		SubjectCanonical: subjectCanonical,
		Trigger: trigger,
		Condition: condition,
		Input: input,
		Output: output,
		RelatedAction: relatedAction,
		TimingDateTime: timingDateTime,
		TimingAge: timingAge,
		TimingPeriod: timingPeriod,
		TimingDuration: timingDuration,
		TimingRange: timingRange,
		TimingTiming: timingTiming,
		Participant: participant,
		Type_: type_,
		GroupingBehavior: groupingBehavior,
		SelectionBehavior: selectionBehavior,
		RequiredBehavior: requiredBehavior,
		PrecheckBehavior: precheckBehavior,
		CardinalityBehavior: cardinalityBehavior,
		DefinitionCanonical: definitionCanonical,
		DefinitionUri: definitionUri,
		Transform: transform,
		DynamicValue: dynamicValue,
		Action: action,
	}
}
// FromJSON populates PlanDefinitionAction from JSON data
func (m *PlanDefinitionAction) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PlanDefinitionAction to JSON data
func (m *PlanDefinitionAction) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of PlanDefinitionAction
func (m *PlanDefinitionAction) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	prefix *FhirString,
	title *FhirString,
	description *FhirString,
	textEquivalent *FhirString,
	priority *RequestPriority,
	code *[]CodeableConcept,
	reason *[]CodeableConcept,
	documentation *[]RelatedArtifact,
	goalId *[]FhirId,
	subjectCodeableConcept *CodeableConcept,
	subjectReference *Reference,
	subjectCanonical *SubjectType,
	trigger *[]TriggerDefinition,
	condition *[]PlanDefinitionCondition,
	input *[]DataRequirement,
	output *[]DataRequirement,
	relatedAction *[]PlanDefinitionRelatedAction,
	timingDateTime *FhirDateTime,
	timingAge *Age,
	timingPeriod *Period,
	timingDuration *FhirDuration,
	timingRange *Range,
	timingTiming *Timing,
	participant *[]PlanDefinitionParticipant,
	type_ *CodeableConcept,
	groupingBehavior *ActionGroupingBehavior,
	selectionBehavior *ActionSelectionBehavior,
	requiredBehavior *ActionRequiredBehavior,
	precheckBehavior *ActionPrecheckBehavior,
	cardinalityBehavior *ActionCardinalityBehavior,
	definitionCanonical *FhirCanonical,
	definitionUri *FhirUri,
	transform *FhirCanonical,
	dynamicValue *[]PlanDefinitionDynamicValue,
	action *[]PlanDefinitionAction,
) *PlanDefinitionAction {
	return &PlanDefinitionAction{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Prefix: func() FhirString {
			if prefix != nil { return *prefix }
			return m.Prefix
		}(),
		Title: func() FhirString {
			if title != nil { return *title }
			return m.Title
		}(),
		Description: func() FhirString {
			if description != nil { return *description }
			return m.Description
		}(),
		TextEquivalent: func() FhirString {
			if textEquivalent != nil { return *textEquivalent }
			return m.TextEquivalent
		}(),
		Priority: func() RequestPriority {
			if priority != nil { return *priority }
			return m.Priority
		}(),
		Code: func() []CodeableConcept {
			if code != nil { return *code }
			return m.Code
		}(),
		Reason: func() []CodeableConcept {
			if reason != nil { return *reason }
			return m.Reason
		}(),
		Documentation: func() []RelatedArtifact {
			if documentation != nil { return *documentation }
			return m.Documentation
		}(),
		GoalId: func() []FhirId {
			if goalId != nil { return *goalId }
			return m.GoalId
		}(),
		SubjectCodeableConcept: func() CodeableConcept {
			if subjectCodeableConcept != nil { return *subjectCodeableConcept }
			return m.SubjectCodeableConcept
		}(),
		SubjectReference: func() Reference {
			if subjectReference != nil { return *subjectReference }
			return m.SubjectReference
		}(),
		SubjectCanonical: func() SubjectType {
			if subjectCanonical != nil { return *subjectCanonical }
			return m.SubjectCanonical
		}(),
		Trigger: func() []TriggerDefinition {
			if trigger != nil { return *trigger }
			return m.Trigger
		}(),
		Condition: func() []PlanDefinitionCondition {
			if condition != nil { return *condition }
			return m.Condition
		}(),
		Input: func() []DataRequirement {
			if input != nil { return *input }
			return m.Input
		}(),
		Output: func() []DataRequirement {
			if output != nil { return *output }
			return m.Output
		}(),
		RelatedAction: func() []PlanDefinitionRelatedAction {
			if relatedAction != nil { return *relatedAction }
			return m.RelatedAction
		}(),
		TimingDateTime: func() FhirDateTime {
			if timingDateTime != nil { return *timingDateTime }
			return m.TimingDateTime
		}(),
		TimingAge: func() Age {
			if timingAge != nil { return *timingAge }
			return m.TimingAge
		}(),
		TimingPeriod: func() Period {
			if timingPeriod != nil { return *timingPeriod }
			return m.TimingPeriod
		}(),
		TimingDuration: func() FhirDuration {
			if timingDuration != nil { return *timingDuration }
			return m.TimingDuration
		}(),
		TimingRange: func() Range {
			if timingRange != nil { return *timingRange }
			return m.TimingRange
		}(),
		TimingTiming: func() Timing {
			if timingTiming != nil { return *timingTiming }
			return m.TimingTiming
		}(),
		Participant: func() []PlanDefinitionParticipant {
			if participant != nil { return *participant }
			return m.Participant
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		GroupingBehavior: func() ActionGroupingBehavior {
			if groupingBehavior != nil { return *groupingBehavior }
			return m.GroupingBehavior
		}(),
		SelectionBehavior: func() ActionSelectionBehavior {
			if selectionBehavior != nil { return *selectionBehavior }
			return m.SelectionBehavior
		}(),
		RequiredBehavior: func() ActionRequiredBehavior {
			if requiredBehavior != nil { return *requiredBehavior }
			return m.RequiredBehavior
		}(),
		PrecheckBehavior: func() ActionPrecheckBehavior {
			if precheckBehavior != nil { return *precheckBehavior }
			return m.PrecheckBehavior
		}(),
		CardinalityBehavior: func() ActionCardinalityBehavior {
			if cardinalityBehavior != nil { return *cardinalityBehavior }
			return m.CardinalityBehavior
		}(),
		DefinitionCanonical: func() FhirCanonical {
			if definitionCanonical != nil { return *definitionCanonical }
			return m.DefinitionCanonical
		}(),
		DefinitionUri: func() FhirUri {
			if definitionUri != nil { return *definitionUri }
			return m.DefinitionUri
		}(),
		Transform: func() FhirCanonical {
			if transform != nil { return *transform }
			return m.Transform
		}(),
		DynamicValue: func() []PlanDefinitionDynamicValue {
			if dynamicValue != nil { return *dynamicValue }
			return m.DynamicValue
		}(),
		Action: func() []PlanDefinitionAction {
			if action != nil { return *action }
			return m.Action
		}(),
	}
}
// PlanDefinitionCondition
// An expression that describes applicability criteria or start/stop conditions for the action.
type PlanDefinitionCondition struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// kind
	// The kind of condition.
	Kind ActionConditionKind `json:"kind,omitempty"`
	// expression
	// An expression that returns true or false, indicating whether the condition is satisfied.
	Expression FhirExpression `json:"expression,omitempty"`
}

// NewPlanDefinitionCondition creates a new PlanDefinitionCondition instance
func NewPlanDefinitionCondition(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	kind ActionConditionKind,
	expression FhirExpression,
) *PlanDefinitionCondition {
	return &PlanDefinitionCondition{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Kind: kind,
		Expression: expression,
	}
}
// FromJSON populates PlanDefinitionCondition from JSON data
func (m *PlanDefinitionCondition) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PlanDefinitionCondition to JSON data
func (m *PlanDefinitionCondition) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of PlanDefinitionCondition
func (m *PlanDefinitionCondition) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	kind *ActionConditionKind,
	expression *FhirExpression,
) *PlanDefinitionCondition {
	return &PlanDefinitionCondition{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Kind: func() ActionConditionKind {
			if kind != nil { return *kind }
			return m.Kind
		}(),
		Expression: func() FhirExpression {
			if expression != nil { return *expression }
			return m.Expression
		}(),
	}
}
// PlanDefinitionRelatedAction
// A relationship to another action such as "before" or "30-60 minutes after start of".
type PlanDefinitionRelatedAction struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// actionId
	// The element id of the related action.
	ActionId FhirId `json:"actionId,omitempty"`
	// relationship
	// The relationship of this action to the related action.
	Relationship ActionRelationshipType `json:"relationship,omitempty"`
	// offsetDuration
	// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
	OffsetDuration FhirDuration `json:"offsetDuration,omitempty"`
	// offsetRange
	// A duration or range of durations to apply to the relationship. For example, 30-60 minutes before.
	OffsetRange Range `json:"offsetRange,omitempty"`
}

// NewPlanDefinitionRelatedAction creates a new PlanDefinitionRelatedAction instance
func NewPlanDefinitionRelatedAction(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	actionId FhirId,
	relationship ActionRelationshipType,
	offsetDuration FhirDuration,
	offsetRange Range,
) *PlanDefinitionRelatedAction {
	return &PlanDefinitionRelatedAction{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		ActionId: actionId,
		Relationship: relationship,
		OffsetDuration: offsetDuration,
		OffsetRange: offsetRange,
	}
}
// FromJSON populates PlanDefinitionRelatedAction from JSON data
func (m *PlanDefinitionRelatedAction) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PlanDefinitionRelatedAction to JSON data
func (m *PlanDefinitionRelatedAction) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of PlanDefinitionRelatedAction
func (m *PlanDefinitionRelatedAction) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	actionId *FhirId,
	relationship *ActionRelationshipType,
	offsetDuration *FhirDuration,
	offsetRange *Range,
) *PlanDefinitionRelatedAction {
	return &PlanDefinitionRelatedAction{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		ActionId: func() FhirId {
			if actionId != nil { return *actionId }
			return m.ActionId
		}(),
		Relationship: func() ActionRelationshipType {
			if relationship != nil { return *relationship }
			return m.Relationship
		}(),
		OffsetDuration: func() FhirDuration {
			if offsetDuration != nil { return *offsetDuration }
			return m.OffsetDuration
		}(),
		OffsetRange: func() Range {
			if offsetRange != nil { return *offsetRange }
			return m.OffsetRange
		}(),
	}
}
// PlanDefinitionParticipant
// Indicates who should participate in performing the action described.
type PlanDefinitionParticipant struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// The type of participant in the action.
	Type_ ActionParticipantType `json:"type,omitempty"`
	// role
	// The role the participant should play in performing the described action.
	Role CodeableConcept `json:"role,omitempty"`
}

// NewPlanDefinitionParticipant creates a new PlanDefinitionParticipant instance
func NewPlanDefinitionParticipant(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ ActionParticipantType,
	role CodeableConcept,
) *PlanDefinitionParticipant {
	return &PlanDefinitionParticipant{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		Role: role,
	}
}
// FromJSON populates PlanDefinitionParticipant from JSON data
func (m *PlanDefinitionParticipant) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PlanDefinitionParticipant to JSON data
func (m *PlanDefinitionParticipant) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of PlanDefinitionParticipant
func (m *PlanDefinitionParticipant) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *ActionParticipantType,
	role *CodeableConcept,
) *PlanDefinitionParticipant {
	return &PlanDefinitionParticipant{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() ActionParticipantType {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Role: func() CodeableConcept {
			if role != nil { return *role }
			return m.Role
		}(),
	}
}
// PlanDefinitionDynamicValue
// Customizations that should be applied to the statically defined resource. For example, if the dosage of a medication must be computed based on the patient's weight, a customization would be used to specify an expression that calculated the weight, and the path on the resource that would contain the result.
type PlanDefinitionDynamicValue struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// path
	// The path to the element to be customized. This is the path on the resource that will hold the result of the calculation defined by the expression. The specified path SHALL be a FHIRPath resolveable on the specified target type of the ActivityDefinition, and SHALL consist only of identifiers, constant indexers, and a restricted subset of functions. The path is allowed to contain qualifiers (.) to traverse sub-elements, as well as indexers ([x]) to traverse multiple-cardinality sub-elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).
	Path FhirString `json:"path,omitempty"`
	// expression
	// An expression specifying the value of the customized element.
	Expression FhirExpression `json:"expression,omitempty"`
}

// NewPlanDefinitionDynamicValue creates a new PlanDefinitionDynamicValue instance
func NewPlanDefinitionDynamicValue(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	path FhirString,
	expression FhirExpression,
) *PlanDefinitionDynamicValue {
	return &PlanDefinitionDynamicValue{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Path: path,
		Expression: expression,
	}
}
// FromJSON populates PlanDefinitionDynamicValue from JSON data
func (m *PlanDefinitionDynamicValue) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PlanDefinitionDynamicValue to JSON data
func (m *PlanDefinitionDynamicValue) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of PlanDefinitionDynamicValue
func (m *PlanDefinitionDynamicValue) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	path *FhirString,
	expression *FhirExpression,
) *PlanDefinitionDynamicValue {
	return &PlanDefinitionDynamicValue{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Path: func() FhirString {
			if path != nil { return *path }
			return m.Path
		}(),
		Expression: func() FhirExpression {
			if expression != nil { return *expression }
			return m.Expression
		}(),
	}
}
