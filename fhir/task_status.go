// Code generated by FHIR Generator. DO NOT EDIT.
// The current status of the task.
package fhir_r4b_go
// TaskStatus represents the FHIR ValueSet as an enumeration
type TaskStatus struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	TaskStatus_Draft = "draft" // Draft: The task is not yet ready to be acted upon.
	TaskStatus_Requested = "requested" // Requested: The task is ready to be acted upon and action is sought.
	TaskStatus_Received = "received" // Received: A potential performer has claimed ownership of the task and is evaluating whether to perform it.
	TaskStatus_Accepted = "accepted" // Accepted: The potential performer has agreed to execute the task but has not yet started work.
	TaskStatus_Rejected = "rejected" // Rejected: The potential performer who claimed ownership of the task has decided not to execute it prior to performing any action.
	TaskStatus_Ready = "ready" // Ready: The task is ready to be performed, but no action has yet been taken. Used in place of requested/received/accepted/rejected when request assignment and acceptance is a given.
	TaskStatus_Cancelled = "cancelled" // Cancelled: The task was not completed.
	TaskStatus_In_progress = "in-progress" // In Progress: The task has been started but is not yet complete.
	TaskStatus_On_hold = "on-hold" // On Hold: The task has been started but work has been paused.
	TaskStatus_Failed = "failed" // Failed: The task was attempted but could not be completed due to some error.
	TaskStatus_Completed = "completed" // Completed: The task has been completed.
	TaskStatus_Entered_in_error = "entered-in-error" // Entered in Error: The task should never have existed and is retained only because of the possibility it may have used.
)

// Clone creates a deep copy of the enum
func (e TaskStatus) Clone() *TaskStatus {
	return &TaskStatus{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *TaskStatus) Equals(other *TaskStatus) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

