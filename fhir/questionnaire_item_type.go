// Code generated by FHIR Generator. DO NOT EDIT.
// Distinguishes groups from questions and display text and indicates data type for questions.
package fhir_r4b_go
// QuestionnaireItemType represents the FHIR ValueSet as an enumeration
type QuestionnaireItemType struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	QuestionnaireItemType_Group = "group" // Group: An item with no direct answer but should have at least one child item.
	QuestionnaireItemType_Display = "display" // Display: Text for display that will not capture an answer or have child items.
	QuestionnaireItemType_Question = "question" // Question: An item that defines a specific answer to be captured, and which may have child items. (the answer provided in the QuestionnaireResponse should be of the defined datatype).
	QuestionnaireItemType_Boolean = "boolean" // Boolean: Question with a yes/no answer (valueBoolean).
	QuestionnaireItemType_Decimal = "decimal" // Decimal: Question with is a real number answer (valueDecimal).
	QuestionnaireItemType_Integer = "integer" // Integer: Question with an integer answer (valueInteger).
	QuestionnaireItemType_Date = "date" // Date: Question with a date answer (valueDate).
	QuestionnaireItemType_DateTime = "dateTime" // Date Time: Question with a date and time answer (valueDateTime).
	QuestionnaireItemType_Time = "time" // Time: Question with a time (hour:minute:second) answer independent of date. (valueTime).
	QuestionnaireItemType_String = "string" // String: Question with a short (few words to short sentence) free-text entry answer (valueString).
	QuestionnaireItemType_Text = "text" // Text: Question with a long (potentially multi-paragraph) free-text entry answer (valueString).
	QuestionnaireItemType_Url = "url" // Url: Question with a URL (website, FTP site, etc.) answer (valueUri).
	QuestionnaireItemType_Choice = "choice" // Choice: Question with a Coding drawn from a list of possible answers (specified in either the answerOption property, or via the valueset referenced in the answerValueSet property) as an answer (valueCoding).
	QuestionnaireItemType_Open_choice = "open-choice" // Open Choice: Answer is a Coding drawn from a list of possible answers (as with the choice type) or a free-text entry in a string (valueCoding or valueString).
	QuestionnaireItemType_Attachment = "attachment" // Attachment: Question with binary content such as an image, PDF, etc. as an answer (valueAttachment).
	QuestionnaireItemType_Reference = "reference" // Reference: Question with a reference to another resource (practitioner, organization, etc.) as an answer (valueReference).
	QuestionnaireItemType_Quantity = "quantity" // Quantity: Question with a combination of a numeric value and unit, potentially with a comparator (<, >, etc.) as an answer. (valueQuantity) There is an extension 'http://hl7.org/fhir/StructureDefinition/questionnaire-unit' that can be used to define what unit should be captured (or the unit that has a ucum conversion from the provided unit).
)

// Clone creates a deep copy of the enum
func (e QuestionnaireItemType) Clone() *QuestionnaireItemType {
	return &QuestionnaireItemType{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *QuestionnaireItemType) Equals(other *QuestionnaireItemType) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

