// Code generated by FHIR Generator. DO NOT EDIT.
// The type of operator to use for assertion.
package fhir_r4b_go
// AssertionOperatorType represents the FHIR ValueSet as an enumeration
type AssertionOperatorType struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	AssertionOperatorType_Equals = "equals" // equals: Default value. Equals comparison.
	AssertionOperatorType_NotEquals = "notEquals" // notEquals: Not equals comparison.
	AssertionOperatorType_In = "in" // in: Compare value within a known set of values.
	AssertionOperatorType_NotIn = "notIn" // notIn: Compare value not within a known set of values.
	AssertionOperatorType_GreaterThan = "greaterThan" // greaterThan: Compare value to be greater than a known value.
	AssertionOperatorType_LessThan = "lessThan" // lessThan: Compare value to be less than a known value.
	AssertionOperatorType_Empty = "empty" // empty: Compare value is empty.
	AssertionOperatorType_NotEmpty = "notEmpty" // notEmpty: Compare value is not empty.
	AssertionOperatorType_Contains = "contains" // contains: Compare value string contains a known value.
	AssertionOperatorType_NotContains = "notContains" // notContains: Compare value string does not contain a known value.
	AssertionOperatorType_Eval = "eval" // evaluate: Evaluate the FHIRPath expression as a boolean condition.
)

// Clone creates a deep copy of the enum
func (e AssertionOperatorType) Clone() *AssertionOperatorType {
	return &AssertionOperatorType{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *AssertionOperatorType) Equals(other *AssertionOperatorType) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

