// Code generated by FHIR Generator. DO NOT EDIT.
// The type of operator to use for assertion.
package fhir_r4b_go

// AssertionOperatorType represents the FHIR ValueSet as an enumeration
type AssertionOperatorType int

const (
	// equals: Default value. Equals comparison.
	AssertionOperatorType_Equals AssertionOperatorType = iota
	// notEquals: Not equals comparison.
	AssertionOperatorType_NotEquals AssertionOperatorType = iota
	// in: Compare value within a known set of values.
	AssertionOperatorType_In AssertionOperatorType = iota
	// notIn: Compare value not within a known set of values.
	AssertionOperatorType_NotIn AssertionOperatorType = iota
	// greaterThan: Compare value to be greater than a known value.
	AssertionOperatorType_GreaterThan AssertionOperatorType = iota
	// lessThan: Compare value to be less than a known value.
	AssertionOperatorType_LessThan AssertionOperatorType = iota
	// empty: Compare value is empty.
	AssertionOperatorType_Empty AssertionOperatorType = iota
	// notEmpty: Compare value is not empty.
	AssertionOperatorType_NotEmpty AssertionOperatorType = iota
	// contains: Compare value string contains a known value.
	AssertionOperatorType_Contains AssertionOperatorType = iota
	// notContains: Compare value string does not contain a known value.
	AssertionOperatorType_NotContains AssertionOperatorType = iota
	// evaluate: Evaluate the FHIRPath expression as a boolean condition.
	AssertionOperatorType_Eval AssertionOperatorType = iota
)

// String converts the enum to its string representation
func (e AssertionOperatorType) String() string {
	switch e {
	case AssertionOperatorType_Equals: return "equals"
	case AssertionOperatorType_NotEquals: return "notEquals"
	case AssertionOperatorType_In: return "in"
	case AssertionOperatorType_NotIn: return "notIn"
	case AssertionOperatorType_GreaterThan: return "greaterThan"
	case AssertionOperatorType_LessThan: return "lessThan"
	case AssertionOperatorType_Empty: return "empty"
	case AssertionOperatorType_NotEmpty: return "notEmpty"
	case AssertionOperatorType_Contains: return "contains"
	case AssertionOperatorType_NotContains: return "notContains"
	case AssertionOperatorType_Eval: return "evaluate"
	default: return "Unknown"
	}
}

