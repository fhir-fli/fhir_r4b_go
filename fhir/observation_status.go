// Code generated by FHIR Generator. DO NOT EDIT.
// Codes providing the status of an observation.
package fhir_r4b_go

// ObservationStatus represents the FHIR ValueSet as an enumeration
type ObservationStatus int

const (
	// Registered: The existence of the observation is registered, but there is no result yet available.
	ObservationStatus_Registered ObservationStatus = iota
	// Preliminary: This is an initial or interim observation: data may be incomplete or unverified.
	ObservationStatus_Preliminary ObservationStatus = iota
	// Final: The observation is complete and there are no further actions needed. Additional information such "released", "signed", etc would be represented using [Provenance](provenance.html) which provides not only the act but also the actors and dates and other related data. These act states would be associated with an observation status of `preliminary` until they are all completed and then a status of `final` would be applied.
	ObservationStatus_Final ObservationStatus = iota
	// Amended: Subsequent to being Final, the observation has been modified subsequent. This includes updates/new information and corrections.
	ObservationStatus_Amended ObservationStatus = iota
	// Corrected: Subsequent to being Final, the observation has been modified to correct an error in the test result.
	ObservationStatus_Corrected ObservationStatus = iota
	// Cancelled: The observation is unavailable because the measurement was not started or not completed (also sometimes called "aborted").
	ObservationStatus_Cancelled ObservationStatus = iota
	// Entered in Error: The observation has been withdrawn following previous final release. This electronic record should never have existed, though it is possible that real-world decisions were based on it. (If real-world activity has occurred, the status should be "cancelled" rather than "entered-in-error".).
	ObservationStatus_Entered_in_error ObservationStatus = iota
	// Unknown: The authoring/source system does not know which of the status values currently applies for this observation. Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, but the authoring/source system does not know which.
	ObservationStatus_Unknown ObservationStatus = iota
)

// String converts the enum to its string representation
func (e ObservationStatus) String() string {
	switch e {
	case ObservationStatus_Registered: return "Registered"
	case ObservationStatus_Preliminary: return "Preliminary"
	case ObservationStatus_Final: return "Final"
	case ObservationStatus_Amended: return "Amended"
	case ObservationStatus_Corrected: return "Corrected"
	case ObservationStatus_Cancelled: return "Cancelled"
	case ObservationStatus_Entered_in_error: return "Entered in Error"
	case ObservationStatus_Unknown: return "Unknown"
	default: return "Unknown"
	}
}

