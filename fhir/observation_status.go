// Code generated by FHIR Generator. DO NOT EDIT.
// Codes providing the status of an observation.
package fhir_r4b_go
// ObservationStatus represents the FHIR ValueSet as an enumeration
type ObservationStatus struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	ObservationStatus_Registered = "registered" // Registered: The existence of the observation is registered, but there is no result yet available.
	ObservationStatus_Preliminary = "preliminary" // Preliminary: This is an initial or interim observation: data may be incomplete or unverified.
	ObservationStatus_Final = "final" // Final: The observation is complete and there are no further actions needed. Additional information such "released", "signed", etc would be represented using [Provenance](provenance.html) which provides not only the act but also the actors and dates and other related data. These act states would be associated with an observation status of `preliminary` until they are all completed and then a status of `final` would be applied.
	ObservationStatus_Amended = "amended" // Amended: Subsequent to being Final, the observation has been modified subsequent. This includes updates/new information and corrections.
	ObservationStatus_Corrected = "corrected" // Corrected: Subsequent to being Final, the observation has been modified to correct an error in the test result.
	ObservationStatus_Cancelled = "cancelled" // Cancelled: The observation is unavailable because the measurement was not started or not completed (also sometimes called "aborted").
	ObservationStatus_Entered_in_error = "entered-in-error" // Entered in Error: The observation has been withdrawn following previous final release. This electronic record should never have existed, though it is possible that real-world decisions were based on it. (If real-world activity has occurred, the status should be "cancelled" rather than "entered-in-error".).
	ObservationStatus_Unknown = "unknown" // Unknown: The authoring/source system does not know which of the status values currently applies for this observation. Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, but the authoring/source system does not know which.
)

// Clone creates a deep copy of the enum
func (e ObservationStatus) Clone() *ObservationStatus {
	return &ObservationStatus{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *ObservationStatus) Equals(other *ObservationStatus) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

