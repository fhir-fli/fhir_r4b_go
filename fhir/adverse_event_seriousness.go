// Code generated by FHIR Generator. DO NOT EDIT.
// Overall seriousness of this event for the patient.
package fhir_r4b_go
// AdverseEventSeriousness represents the FHIR ValueSet as an enumeration
type AdverseEventSeriousness struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	AdverseEventSeriousness_Non_serious = "Non-serious" // Non-serious: Non-serious.
	AdverseEventSeriousness_Serious = "Serious" // Serious: Serious.
	AdverseEventSeriousness_SeriousResultsInDeath = "SeriousResultsInDeath" // Results in death: Results in death.
	AdverseEventSeriousness_SeriousIsLifeThreatening = "SeriousIsLifeThreatening" // Is Life-threatening: Is Life-threatening.
	AdverseEventSeriousness_SeriousResultsInHospitalization = "SeriousResultsInHospitalization" // Requires or prolongs inpatient hospitalization: Requires inpatient hospitalization or causes prolongation of existing hospitalization.
	AdverseEventSeriousness_SeriousResultsInDisability = "SeriousResultsInDisability" // Results in persistent or significant disability/incapacity: Results in persistent or significant disability/incapacity.
	AdverseEventSeriousness_SeriousIsBirthDefect = "SeriousIsBirthDefect" // Is a congenital anomaly/birth defect: Is a congenital anomaly/birth defect.
	AdverseEventSeriousness_SeriousRequiresPreventImpairment = "SeriousRequiresPreventImpairment" // Requires intervention to prevent permanent impairment: Requires intervention to prevent permanent impairment or damage (i.e., an important medical event that requires medical judgement).
)

// Clone creates a deep copy of the enum
func (e AdverseEventSeriousness) Clone() *AdverseEventSeriousness {
	return &AdverseEventSeriousness{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *AdverseEventSeriousness) Equals(other *AdverseEventSeriousness) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

