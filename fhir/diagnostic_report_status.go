// Code generated by FHIR Generator. DO NOT EDIT.
// The status of the diagnostic report.
package fhir_r4b_go
// DiagnosticReportStatus represents the FHIR ValueSet as an enumeration
type DiagnosticReportStatus struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	DiagnosticReportStatus_Registered = "registered" // Registered: The existence of the report is registered, but there is nothing yet available.
	DiagnosticReportStatus_Partial = "partial" // Partial: This is a partial (e.g. initial, interim or preliminary) report: data in the report may be incomplete or unverified.
	DiagnosticReportStatus_Preliminary = "preliminary" // Preliminary: Verified early results are available, but not all results are final.
	DiagnosticReportStatus_Final = "final" // Final: The report is complete and verified by an authorized person.
	DiagnosticReportStatus_Amended = "amended" // Amended: Subsequent to being final, the report has been modified. This includes any change in the results, diagnosis, narrative text, or other content of a report that has been issued.
	DiagnosticReportStatus_Corrected = "corrected" // Corrected: Subsequent to being final, the report has been modified to correct an error in the report or referenced results.
	DiagnosticReportStatus_Appended = "appended" // Appended: Subsequent to being final, the report has been modified by adding new content. The existing content is unchanged.
	DiagnosticReportStatus_Cancelled = "cancelled" // Cancelled: The report is unavailable because the measurement was not started or not completed (also sometimes called "aborted").
	DiagnosticReportStatus_Entered_in_error = "entered-in-error" // Entered in Error: The report has been withdrawn following a previous final release. This electronic record should never have existed, though it is possible that real-world decisions were based on it. (If real-world activity has occurred, the status should be "cancelled" rather than "entered-in-error".).
	DiagnosticReportStatus_Unknown = "unknown" // Unknown: The authoring/source system does not know which of the status values currently applies for this observation. Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, but the authoring/source system does not know which.
)

// Clone creates a deep copy of the enum
func (e DiagnosticReportStatus) Clone() *DiagnosticReportStatus {
	return &DiagnosticReportStatus{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *DiagnosticReportStatus) Equals(other *DiagnosticReportStatus) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

