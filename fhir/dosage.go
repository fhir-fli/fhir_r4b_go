// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// Dosage
// Indicates how the medication is/was taken or should be taken by the patient.
type Dosage struct {
	BackboneType
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// sequence
	// Indicates the order in which the dosage instructions should be applied or interpreted.
	Sequence FhirInteger `json:"sequence,omitempty"`
	// text
	// Free text dosage instructions e.g. SIG.
	Text FhirString `json:"text,omitempty"`
	// additionalInstruction
	// Supplemental instructions to the patient on how to take the medication  (e.g. "with meals" or"take half to one hour before food") or warnings for the patient about the medication (e.g. "may cause drowsiness" or "avoid exposure of skin to direct sunlight or sunlamps").
	AdditionalInstruction []CodeableConcept `json:"additionalInstruction,omitempty"`
	// patientInstruction
	// Instructions in terms that are understood by the patient or consumer.
	PatientInstruction FhirString `json:"patientInstruction,omitempty"`
	// timing
	// When medication should be administered.
	Timing Timing `json:"timing,omitempty"`
	// asNeededBoolean
	// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
	AsNeededBoolean FhirBoolean `json:"asNeededBoolean,omitempty"`
	// asNeededCodeableConcept
	// Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).
	AsNeededCodeableConcept CodeableConcept `json:"asNeededCodeableConcept,omitempty"`
	// site
	// Body site to administer to.
	Site CodeableConcept `json:"site,omitempty"`
	// route
	// How drug should enter body.
	Route CodeableConcept `json:"route,omitempty"`
	// method
	// Technique for administering medication.
	Method CodeableConcept `json:"method,omitempty"`
	// doseAndRate
	// The amount of medication administered.
	DoseAndRate []DosageDoseAndRate `json:"doseAndRate,omitempty"`
	// maxDosePerPeriod
	// Upper limit on medication per unit of time.
	MaxDosePerPeriod Ratio `json:"maxDosePerPeriod,omitempty"`
	// maxDosePerAdministration
	// Upper limit on medication per administration.
	MaxDosePerAdministration Quantity `json:"maxDosePerAdministration,omitempty"`
	// maxDosePerLifetime
	// Upper limit on medication per lifetime of the patient.
	MaxDosePerLifetime Quantity `json:"maxDosePerLifetime,omitempty"`
}

// NewDosage creates a new Dosage instance
func NewDosage(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	sequence FhirInteger,
	text FhirString,
	additionalInstruction []CodeableConcept,
	patientInstruction FhirString,
	timing Timing,
	asNeededBoolean FhirBoolean,
	asNeededCodeableConcept CodeableConcept,
	site CodeableConcept,
	route CodeableConcept,
	method CodeableConcept,
	doseAndRate []DosageDoseAndRate,
	maxDosePerPeriod Ratio,
	maxDosePerAdministration Quantity,
	maxDosePerLifetime Quantity,
) *Dosage {
	return &Dosage{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Sequence: sequence,
		Text: text,
		AdditionalInstruction: additionalInstruction,
		PatientInstruction: patientInstruction,
		Timing: timing,
		AsNeededBoolean: asNeededBoolean,
		AsNeededCodeableConcept: asNeededCodeableConcept,
		Site: site,
		Route: route,
		Method: method,
		DoseAndRate: doseAndRate,
		MaxDosePerPeriod: maxDosePerPeriod,
		MaxDosePerAdministration: maxDosePerAdministration,
		MaxDosePerLifetime: maxDosePerLifetime,
	}
}
// FromJSON populates Dosage from JSON data
func (m *Dosage) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Dosage to JSON data
func (m *Dosage) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of Dosage
func (m *Dosage) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	sequence *FhirInteger,
	text *FhirString,
	additionalInstruction *[]CodeableConcept,
	patientInstruction *FhirString,
	timing *Timing,
	asNeededBoolean *FhirBoolean,
	asNeededCodeableConcept *CodeableConcept,
	site *CodeableConcept,
	route *CodeableConcept,
	method *CodeableConcept,
	doseAndRate *[]DosageDoseAndRate,
	maxDosePerPeriod *Ratio,
	maxDosePerAdministration *Quantity,
	maxDosePerLifetime *Quantity,
) *Dosage {
	return &Dosage{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Sequence: func() FhirInteger {
			if sequence != nil { return *sequence }
			return m.Sequence
		}(),
		Text: func() FhirString {
			if text != nil { return *text }
			return m.Text
		}(),
		AdditionalInstruction: func() []CodeableConcept {
			if additionalInstruction != nil { return *additionalInstruction }
			return m.AdditionalInstruction
		}(),
		PatientInstruction: func() FhirString {
			if patientInstruction != nil { return *patientInstruction }
			return m.PatientInstruction
		}(),
		Timing: func() Timing {
			if timing != nil { return *timing }
			return m.Timing
		}(),
		AsNeededBoolean: func() FhirBoolean {
			if asNeededBoolean != nil { return *asNeededBoolean }
			return m.AsNeededBoolean
		}(),
		AsNeededCodeableConcept: func() CodeableConcept {
			if asNeededCodeableConcept != nil { return *asNeededCodeableConcept }
			return m.AsNeededCodeableConcept
		}(),
		Site: func() CodeableConcept {
			if site != nil { return *site }
			return m.Site
		}(),
		Route: func() CodeableConcept {
			if route != nil { return *route }
			return m.Route
		}(),
		Method: func() CodeableConcept {
			if method != nil { return *method }
			return m.Method
		}(),
		DoseAndRate: func() []DosageDoseAndRate {
			if doseAndRate != nil { return *doseAndRate }
			return m.DoseAndRate
		}(),
		MaxDosePerPeriod: func() Ratio {
			if maxDosePerPeriod != nil { return *maxDosePerPeriod }
			return m.MaxDosePerPeriod
		}(),
		MaxDosePerAdministration: func() Quantity {
			if maxDosePerAdministration != nil { return *maxDosePerAdministration }
			return m.MaxDosePerAdministration
		}(),
		MaxDosePerLifetime: func() Quantity {
			if maxDosePerLifetime != nil { return *maxDosePerLifetime }
			return m.MaxDosePerLifetime
		}(),
	}
}
// DosageDoseAndRate
// The amount of medication administered.
type DosageDoseAndRate struct {
	Element
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// type
	// The kind of dose or rate specified, for example, ordered or calculated.
	Type_ CodeableConcept `json:"type,omitempty"`
	// doseRange
	// Amount of medication per dose.
	DoseRange Range `json:"doseRange,omitempty"`
	// doseQuantity
	// Amount of medication per dose.
	DoseQuantity Quantity `json:"doseQuantity,omitempty"`
	// rateRatio
	// Amount of medication per unit of time.
	RateRatio Ratio `json:"rateRatio,omitempty"`
	// rateRange
	// Amount of medication per unit of time.
	RateRange Range `json:"rateRange,omitempty"`
	// rateQuantity
	// Amount of medication per unit of time.
	RateQuantity Quantity `json:"rateQuantity,omitempty"`
}

// NewDosageDoseAndRate creates a new DosageDoseAndRate instance
func NewDosageDoseAndRate(
	id FhirString,
	extension_ []FhirExtension,
	type_ CodeableConcept,
	doseRange Range,
	doseQuantity Quantity,
	rateRatio Ratio,
	rateRange Range,
	rateQuantity Quantity,
) *DosageDoseAndRate {
	return &DosageDoseAndRate{
		Id: id,
		Extension_: extension_,
		Type_: type_,
		DoseRange: doseRange,
		DoseQuantity: doseQuantity,
		RateRatio: rateRatio,
		RateRange: rateRange,
		RateQuantity: rateQuantity,
	}
}
// FromJSON populates DosageDoseAndRate from JSON data
func (m *DosageDoseAndRate) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DosageDoseAndRate to JSON data
func (m *DosageDoseAndRate) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DosageDoseAndRate
func (m *DosageDoseAndRate) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	type_ *CodeableConcept,
	doseRange *Range,
	doseQuantity *Quantity,
	rateRatio *Ratio,
	rateRange *Range,
	rateQuantity *Quantity,
) *DosageDoseAndRate {
	return &DosageDoseAndRate{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		DoseRange: func() Range {
			if doseRange != nil { return *doseRange }
			return m.DoseRange
		}(),
		DoseQuantity: func() Quantity {
			if doseQuantity != nil { return *doseQuantity }
			return m.DoseQuantity
		}(),
		RateRatio: func() Ratio {
			if rateRatio != nil { return *rateRatio }
			return m.RateRatio
		}(),
		RateRange: func() Range {
			if rateRange != nil { return *rateRange }
			return m.RateRange
		}(),
		RateQuantity: func() Quantity {
			if rateQuantity != nil { return *rateQuantity }
			return m.RateQuantity
		}(),
	}
}
