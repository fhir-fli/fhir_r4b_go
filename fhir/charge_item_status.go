// Code generated by FHIR Generator. DO NOT EDIT.
// Codes identifying the lifecycle stage of a ChargeItem.
package fhir_r4b_go

// ChargeItemStatus represents the FHIR ValueSet as an enumeration
type ChargeItemStatus int

const (
	// Planned: The charge item has been entered, but the charged service is not yet complete, so it shall not be billed yet but might be used in the context of pre-authorization.
	ChargeItemStatus_Planned ChargeItemStatus = iota
	// Billable: The charge item is ready for billing.
	ChargeItemStatus_Billable ChargeItemStatus = iota
	// Not billable: The charge item has been determined to be not billable (e.g. due to rules associated with the billing code).
	ChargeItemStatus_Not_billable ChargeItemStatus = iota
	// Aborted: The processing of the charge was aborted.
	ChargeItemStatus_Aborted ChargeItemStatus = iota
	// Billed: The charge item has been billed (e.g. a billing engine has generated financial transactions by applying the associated ruled for the charge item to the context of the Encounter, and placed them into Claims/Invoices.
	ChargeItemStatus_Billed ChargeItemStatus = iota
	// Entered in Error: The charge item has been entered in error and should not be processed for billing.
	ChargeItemStatus_Entered_in_error ChargeItemStatus = iota
	// Unknown: The authoring system does not know which of the status values currently applies for this charge item Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, it's just not known which one.
	ChargeItemStatus_Unknown ChargeItemStatus = iota
)

// String converts the enum to its string representation
func (e ChargeItemStatus) String() string {
	switch e {
	case ChargeItemStatus_Planned: return "Planned"
	case ChargeItemStatus_Billable: return "Billable"
	case ChargeItemStatus_Not_billable: return "Not billable"
	case ChargeItemStatus_Aborted: return "Aborted"
	case ChargeItemStatus_Billed: return "Billed"
	case ChargeItemStatus_Entered_in_error: return "Entered in Error"
	case ChargeItemStatus_Unknown: return "Unknown"
	default: return "Unknown"
	}
}

