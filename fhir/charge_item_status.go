// Code generated by FHIR Generator. DO NOT EDIT.
// Codes identifying the lifecycle stage of a ChargeItem.
package fhir_r4b_go
// ChargeItemStatus represents the FHIR ValueSet as an enumeration
type ChargeItemStatus struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	ChargeItemStatus_Planned = "planned" // Planned: The charge item has been entered, but the charged service is not yet complete, so it shall not be billed yet but might be used in the context of pre-authorization.
	ChargeItemStatus_Billable = "billable" // Billable: The charge item is ready for billing.
	ChargeItemStatus_Not_billable = "not-billable" // Not billable: The charge item has been determined to be not billable (e.g. due to rules associated with the billing code).
	ChargeItemStatus_Aborted = "aborted" // Aborted: The processing of the charge was aborted.
	ChargeItemStatus_Billed = "billed" // Billed: The charge item has been billed (e.g. a billing engine has generated financial transactions by applying the associated ruled for the charge item to the context of the Encounter, and placed them into Claims/Invoices.
	ChargeItemStatus_Entered_in_error = "entered-in-error" // Entered in Error: The charge item has been entered in error and should not be processed for billing.
	ChargeItemStatus_Unknown = "unknown" // Unknown: The authoring system does not know which of the status values currently applies for this charge item Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, it's just not known which one.
)

// Clone creates a deep copy of the enum
func (e ChargeItemStatus) Clone() *ChargeItemStatus {
	return &ChargeItemStatus{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *ChargeItemStatus) Equals(other *ChargeItemStatus) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

