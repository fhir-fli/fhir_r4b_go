// Code generated by FHIR Generator. DO NOT EDIT.
// What Search Comparator Codes are supported in search.
package fhir_r4b_go

// SearchComparator represents the FHIR ValueSet as an enumeration
type SearchComparator int

const (
	// Equals: the value for the parameter in the resource is equal to the provided value.
	SearchComparator_Eq SearchComparator = iota
	// Not Equals: the value for the parameter in the resource is not equal to the provided value.
	SearchComparator_Ne SearchComparator = iota
	// Greater Than: the value for the parameter in the resource is greater than the provided value.
	SearchComparator_Gt SearchComparator = iota
	// Less Than: the value for the parameter in the resource is less than the provided value.
	SearchComparator_Lt SearchComparator = iota
	// Greater or Equals: the value for the parameter in the resource is greater or equal to the provided value.
	SearchComparator_Ge SearchComparator = iota
	// Less of Equal: the value for the parameter in the resource is less or equal to the provided value.
	SearchComparator_Le SearchComparator = iota
	// Starts After: the value for the parameter in the resource starts after the provided value.
	SearchComparator_Sa SearchComparator = iota
	// Ends Before: the value for the parameter in the resource ends before the provided value.
	SearchComparator_Eb SearchComparator = iota
	// Approximately: the value for the parameter in the resource is approximately the same to the provided value.
	SearchComparator_Ap SearchComparator = iota
)

// String converts the enum to its string representation
func (e SearchComparator) String() string {
	switch e {
	case SearchComparator_Eq: return "Equals"
	case SearchComparator_Ne: return "Not Equals"
	case SearchComparator_Gt: return "Greater Than"
	case SearchComparator_Lt: return "Less Than"
	case SearchComparator_Ge: return "Greater or Equals"
	case SearchComparator_Le: return "Less of Equal"
	case SearchComparator_Sa: return "Starts After"
	case SearchComparator_Eb: return "Ends Before"
	case SearchComparator_Ap: return "Approximately"
	default: return "Unknown"
	}
}

