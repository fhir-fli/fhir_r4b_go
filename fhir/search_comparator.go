// Code generated by FHIR Generator. DO NOT EDIT.
// What Search Comparator Codes are supported in search.
package fhir_r4b_go
// SearchComparator represents the FHIR ValueSet as an enumeration
type SearchComparator struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	SearchComparator_Eq = "eq" // Equals: the value for the parameter in the resource is equal to the provided value.
	SearchComparator_Ne = "ne" // Not Equals: the value for the parameter in the resource is not equal to the provided value.
	SearchComparator_Gt = "gt" // Greater Than: the value for the parameter in the resource is greater than the provided value.
	SearchComparator_Lt = "lt" // Less Than: the value for the parameter in the resource is less than the provided value.
	SearchComparator_Ge = "ge" // Greater or Equals: the value for the parameter in the resource is greater or equal to the provided value.
	SearchComparator_Le = "le" // Less of Equal: the value for the parameter in the resource is less or equal to the provided value.
	SearchComparator_Sa = "sa" // Starts After: the value for the parameter in the resource starts after the provided value.
	SearchComparator_Eb = "eb" // Ends Before: the value for the parameter in the resource ends before the provided value.
	SearchComparator_Ap = "ap" // Approximately: the value for the parameter in the resource is approximately the same to the provided value.
)

// Clone creates a deep copy of the enum
func (e SearchComparator) Clone() *SearchComparator {
	return &SearchComparator{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *SearchComparator) Equals(other *SearchComparator) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

