// Code generated by FHIR Generator. DO NOT EDIT.
// MedicationStatement Status Codes
package fhir_r4b_go
// MedicationStatementStatusCodes represents the FHIR ValueSet as an enumeration
type MedicationStatementStatusCodes struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	MedicationStatementStatusCodes_Active = "active" // Active: The medication is still being taken.
	MedicationStatementStatusCodes_Completed = "completed" // Completed: The medication is no longer being taken.
	MedicationStatementStatusCodes_Entered_in_error = "entered-in-error" // Entered in Error: Some of the actions that are implied by the medication statement may have occurred. For example, the patient may have taken some of the medication. Clinical decision support systems should take this status into account.
	MedicationStatementStatusCodes_Intended = "intended" // Intended: The medication may be taken at some time in the future.
	MedicationStatementStatusCodes_Stopped = "stopped" // Stopped: Actions implied by the statement have been permanently halted, before all of them occurred. This should not be used if the statement was entered in error.
	MedicationStatementStatusCodes_On_hold = "on-hold" // On Hold: Actions implied by the statement have been temporarily halted, but are expected to continue later. May also be called 'suspended'.
	MedicationStatementStatusCodes_Unknown = "unknown" // Unknown: The state of the medication use is not currently known.
	MedicationStatementStatusCodes_Not_taken = "not-taken" // Not Taken: The medication was not consumed by the patient
)

// Clone creates a deep copy of the enum
func (e MedicationStatementStatusCodes) Clone() *MedicationStatementStatusCodes {
	return &MedicationStatementStatusCodes{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *MedicationStatementStatusCodes) Equals(other *MedicationStatementStatusCodes) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

