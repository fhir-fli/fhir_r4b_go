// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// FamilyMemberHistory
// Significant health conditions for a person related to the patient relevant in the context of care for the patient.
type FamilyMemberHistory struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	InstantiatesCanonical []*FhirCanonical `json:"instantiatescanonical,omitempty"`
	InstantiatesUri []*FhirUri `json:"instantiatesuri,omitempty"`
	Status *FamilyHistoryStatus `json:"status,omitempty"`
	DataAbsentReason *CodeableConcept `json:"dataabsentreason,omitempty"`
	Patient *Reference `json:"patient,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Relationship *CodeableConcept `json:"relationship,omitempty"`
	Sex *CodeableConcept `json:"sex,omitempty"`
	BornPeriod *Period `json:"bornperiod,omitempty"`
	BornDate *FhirDate `json:"borndate,omitempty"`
	BornString *FhirString `json:"bornstring,omitempty"`
	AgeAge *Age `json:"ageage,omitempty"`
	AgeRange *Range `json:"agerange,omitempty"`
	AgeString *FhirString `json:"agestring,omitempty"`
	EstimatedAge *FhirBoolean `json:"estimatedage,omitempty"`
	DeceasedBoolean *FhirBoolean `json:"deceasedboolean,omitempty"`
	DeceasedAge *Age `json:"deceasedage,omitempty"`
	DeceasedRange *Range `json:"deceasedrange,omitempty"`
	DeceasedDate *FhirDate `json:"deceaseddate,omitempty"`
	DeceasedString *FhirString `json:"deceasedstring,omitempty"`
	ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
	ReasonReference []*Reference `json:"reasonreference,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
	Condition []*FamilyMemberHistoryCondition `json:"condition,omitempty"`
}

// NewFamilyMemberHistory creates a new FamilyMemberHistory instance
func NewFamilyMemberHistory() *FamilyMemberHistory {
	return &FamilyMemberHistory{}
}

// FromJSON populates FamilyMemberHistory from JSON data
func (m *FamilyMemberHistory) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts FamilyMemberHistory to JSON data
func (m *FamilyMemberHistory) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of FamilyMemberHistory
func (m *FamilyMemberHistory) Clone() *FamilyMemberHistory {
	if m == nil { return nil }
	return &FamilyMemberHistory{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		InstantiatesCanonical: cloneSlices(m.InstantiatesCanonical),
		InstantiatesUri: cloneSlices(m.InstantiatesUri),
		Status: m.Status.Clone(),
		DataAbsentReason: m.DataAbsentReason.Clone(),
		Patient: m.Patient.Clone(),
		Date: m.Date.Clone(),
		Name: m.Name.Clone(),
		Relationship: m.Relationship.Clone(),
		Sex: m.Sex.Clone(),
		BornPeriod: m.BornPeriod.Clone(),
		BornDate: m.BornDate.Clone(),
		BornString: m.BornString.Clone(),
		AgeAge: m.AgeAge.Clone(),
		AgeRange: m.AgeRange.Clone(),
		AgeString: m.AgeString.Clone(),
		EstimatedAge: m.EstimatedAge.Clone(),
		DeceasedBoolean: m.DeceasedBoolean.Clone(),
		DeceasedAge: m.DeceasedAge.Clone(),
		DeceasedRange: m.DeceasedRange.Clone(),
		DeceasedDate: m.DeceasedDate.Clone(),
		DeceasedString: m.DeceasedString.Clone(),
		ReasonCode: cloneSlices(m.ReasonCode),
		ReasonReference: cloneSlices(m.ReasonReference),
		Note: cloneSlices(m.Note),
		Condition: cloneSlices(m.Condition),
	}
}

// Equals checks for equality with another FamilyMemberHistory instance
func (m *FamilyMemberHistory) Equals(other *FamilyMemberHistory) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.InstantiatesCanonical, other.InstantiatesCanonical) { return false }
	if !compareSlices(m.InstantiatesUri, other.InstantiatesUri) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.DataAbsentReason.Equals(other.DataAbsentReason) { return false }
	if !m.Patient.Equals(other.Patient) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Relationship.Equals(other.Relationship) { return false }
	if !m.Sex.Equals(other.Sex) { return false }
	if !m.BornPeriod.Equals(other.BornPeriod) { return false }
	if !m.BornDate.Equals(other.BornDate) { return false }
	if !m.BornString.Equals(other.BornString) { return false }
	if !m.AgeAge.Equals(other.AgeAge) { return false }
	if !m.AgeRange.Equals(other.AgeRange) { return false }
	if !m.AgeString.Equals(other.AgeString) { return false }
	if !m.EstimatedAge.Equals(other.EstimatedAge) { return false }
	if !m.DeceasedBoolean.Equals(other.DeceasedBoolean) { return false }
	if !m.DeceasedAge.Equals(other.DeceasedAge) { return false }
	if !m.DeceasedRange.Equals(other.DeceasedRange) { return false }
	if !m.DeceasedDate.Equals(other.DeceasedDate) { return false }
	if !m.DeceasedString.Equals(other.DeceasedString) { return false }
	if !compareSlices(m.ReasonCode, other.ReasonCode) { return false }
	if !compareSlices(m.ReasonReference, other.ReasonReference) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	if !compareSlices(m.Condition, other.Condition) { return false }
	return true
}

// FamilyMemberHistoryCondition
// The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
type FamilyMemberHistoryCondition struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Outcome *CodeableConcept `json:"outcome,omitempty"`
	ContributedToDeath *FhirBoolean `json:"contributedtodeath,omitempty"`
	OnsetAge *Age `json:"onsetage,omitempty"`
	OnsetRange *Range `json:"onsetrange,omitempty"`
	OnsetPeriod *Period `json:"onsetperiod,omitempty"`
	OnsetString *FhirString `json:"onsetstring,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
}

// NewFamilyMemberHistoryCondition creates a new FamilyMemberHistoryCondition instance
func NewFamilyMemberHistoryCondition() *FamilyMemberHistoryCondition {
	return &FamilyMemberHistoryCondition{}
}

// FromJSON populates FamilyMemberHistoryCondition from JSON data
func (m *FamilyMemberHistoryCondition) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts FamilyMemberHistoryCondition to JSON data
func (m *FamilyMemberHistoryCondition) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of FamilyMemberHistoryCondition
func (m *FamilyMemberHistoryCondition) Clone() *FamilyMemberHistoryCondition {
	if m == nil { return nil }
	return &FamilyMemberHistoryCondition{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		Outcome: m.Outcome.Clone(),
		ContributedToDeath: m.ContributedToDeath.Clone(),
		OnsetAge: m.OnsetAge.Clone(),
		OnsetRange: m.OnsetRange.Clone(),
		OnsetPeriod: m.OnsetPeriod.Clone(),
		OnsetString: m.OnsetString.Clone(),
		Note: cloneSlices(m.Note),
	}
}

// Equals checks for equality with another FamilyMemberHistoryCondition instance
func (m *FamilyMemberHistoryCondition) Equals(other *FamilyMemberHistoryCondition) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Outcome.Equals(other.Outcome) { return false }
	if !m.ContributedToDeath.Equals(other.ContributedToDeath) { return false }
	if !m.OnsetAge.Equals(other.OnsetAge) { return false }
	if !m.OnsetRange.Equals(other.OnsetRange) { return false }
	if !m.OnsetPeriod.Equals(other.OnsetPeriod) { return false }
	if !m.OnsetString.Equals(other.OnsetString) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	return true
}

