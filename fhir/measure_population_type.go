// Code generated by FHIR Generator. DO NOT EDIT.
// The type of population.
package fhir_r4b_go

// MeasurePopulationType represents the FHIR ValueSet as an enumeration
type MeasurePopulationType int

const (
	// Initial Population: The initial population refers to all patients or events to be evaluated by a quality measure involving patients who share a common set of specified characterstics. All patients or events counted (for example, as numerator, as denominator) are drawn from the initial population.
	MeasurePopulationType_Initial_population MeasurePopulationType = iota
	// Numerator: The upper portion of a fraction used to calculate a rate, proportion, or ratio. Also called the measure focus, it is the target process, condition, event, or outcome. Numerator criteria are the processes or outcomes expected for each patient, or event defined in the denominator. A numerator statement describes the clinical action that satisfies the conditions of the measure.
	MeasurePopulationType_Numerator MeasurePopulationType = iota
	// Numerator Exclusion: Numerator exclusion criteria define patients or events to be removed from the numerator. Numerator exclusions are used in proportion and ratio measures to help narrow the numerator (for inverted measures).
	MeasurePopulationType_Numerator_exclusion MeasurePopulationType = iota
	// Denominator: The lower portion of a fraction used to calculate a rate, proportion, or ratio. The denominator can be the same as the initial population, or a subset of the initial population to further constrain the population for the purpose of the measure.
	MeasurePopulationType_Denominator MeasurePopulationType = iota
	// Denominator Exclusion: Denominator exclusion criteria define patients or events that should be removed from the denominator before determining if numerator criteria are met. Denominator exclusions are used in proportion and ratio measures to help narrow the denominator. For example, patients with bilateral lower extremity amputations would be listed as a denominator exclusion for a measure requiring foot exams.
	MeasurePopulationType_Denominator_exclusion MeasurePopulationType = iota
	// Denominator Exception: Denominator exceptions are conditions that should remove a patient or event from the denominator of a measure only if the numerator criteria are not met. Denominator exception allows for adjustment of the calculated score for those providers with higher risk populations. Denominator exception criteria are only used in proportion measures.
	MeasurePopulationType_Denominator_exception MeasurePopulationType = iota
	// Measure Population: Measure population criteria define the patients or events for which the individual observation for the measure should be taken. Measure populations are used for continuous variable measures rather than numerator and denominator criteria.
	MeasurePopulationType_Measure_population MeasurePopulationType = iota
	// Measure Population Exclusion: Measure population criteria define the patients or events that should be removed from the measure population before determining the outcome of one or more continuous variables defined for the measure observation. Measure population exclusion criteria are used within continuous variable measures to help narrow the measure population.
	MeasurePopulationType_Measure_population_exclusion MeasurePopulationType = iota
	// Measure Observation: Defines the individual observation to be performed for each patient or event in the measure population. Measure observations for each case in the population are aggregated to determine the overall measure score for the population.
	MeasurePopulationType_Measure_observation MeasurePopulationType = iota
)

// String converts the enum to its string representation
func (e MeasurePopulationType) String() string {
	switch e {
	case MeasurePopulationType_Initial_population: return "Initial Population"
	case MeasurePopulationType_Numerator: return "Numerator"
	case MeasurePopulationType_Numerator_exclusion: return "Numerator Exclusion"
	case MeasurePopulationType_Denominator: return "Denominator"
	case MeasurePopulationType_Denominator_exclusion: return "Denominator Exclusion"
	case MeasurePopulationType_Denominator_exception: return "Denominator Exception"
	case MeasurePopulationType_Measure_population: return "Measure Population"
	case MeasurePopulationType_Measure_population_exclusion: return "Measure Population Exclusion"
	case MeasurePopulationType_Measure_observation: return "Measure Observation"
	default: return "Unknown"
	}
}

