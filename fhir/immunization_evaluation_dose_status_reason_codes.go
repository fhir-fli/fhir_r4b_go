// Code generated by FHIR Generator. DO NOT EDIT.
// The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the reason why an administered dose has been assigned a particular status. Often, this reason describes why a dose is considered invalid. This value set is provided as a suggestive example.
package fhir_r4b_go
// ImmunizationEvaluationDoseStatusReasonCodes represents the FHIR ValueSet as an enumeration
type ImmunizationEvaluationDoseStatusReasonCodes struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	ImmunizationEvaluationDoseStatusReasonCodes_Advstorage = "advstorage" // Adverse storage condition: The product was stored in a manner inconsistent with manufacturer guidelines potentially reducing the effectiveness of the product.
	ImmunizationEvaluationDoseStatusReasonCodes_Coldchbrk = "coldchbrk" // Cold chain break: The product was stored at a temperature inconsistent with manufacturer guidelines potentially reducing the effectiveness of the product.
	ImmunizationEvaluationDoseStatusReasonCodes_Explot = "explot" // Expired lot: The product was administered after the expiration date associated with lot of vaccine.
	ImmunizationEvaluationDoseStatusReasonCodes_Outsidesched = "outsidesched" // Administered outside recommended schedule: The product was administered at a time inconsistent with the documented schedule.
	ImmunizationEvaluationDoseStatusReasonCodes_Prodrecall = "prodrecall" // Product recall: The product administered has been recalled by the manufacturer.
)

// Clone creates a deep copy of the enum
func (e ImmunizationEvaluationDoseStatusReasonCodes) Clone() *ImmunizationEvaluationDoseStatusReasonCodes {
	return &ImmunizationEvaluationDoseStatusReasonCodes{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *ImmunizationEvaluationDoseStatusReasonCodes) Equals(other *ImmunizationEvaluationDoseStatusReasonCodes) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

