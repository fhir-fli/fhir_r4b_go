// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// ImmunizationRecommendation
// A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
type ImmunizationRecommendation struct {
	DomainResource
	// id
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Id FhirString `json:"id,omitempty"`
	// meta
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta FhirMeta `json:"meta,omitempty"`
	// implicitRules
	// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ImplicitRules FhirUri `json:"implicitRules,omitempty"`
	// language
	// The base language in which the resource is written.
	Language CommonLanguages `json:"language,omitempty"`
	// text
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text Narrative `json:"text,omitempty"`
	// contained
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []Resource `json:"contained,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// identifier
	// A unique identifier assigned to this particular recommendation record.
	Identifier []Identifier `json:"identifier,omitempty"`
	// patient
	// The patient the recommendation(s) are for.
	Patient Reference `json:"patient,omitempty"`
	// date
	// The date the immunization recommendation(s) were created.
	Date FhirDateTime `json:"date,omitempty"`
	// authority
	// Indicates the authority who published the protocol (e.g. ACIP).
	Authority Reference `json:"authority,omitempty"`
	// recommendation
	// Vaccine administration recommendations.
	Recommendation []ImmunizationRecommendationRecommendation `json:"recommendation,omitempty"`
}

// NewImmunizationRecommendation creates a new ImmunizationRecommendation instance
func NewImmunizationRecommendation(
	id FhirString,
	meta FhirMeta,
	implicitRules FhirUri,
	language CommonLanguages,
	text Narrative,
	contained []Resource,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	identifier []Identifier,
	patient Reference,
	date FhirDateTime,
	authority Reference,
	recommendation []ImmunizationRecommendationRecommendation,
) *ImmunizationRecommendation {
	return &ImmunizationRecommendation{
		Id: id,
		Meta: meta,
		ImplicitRules: implicitRules,
		Language: language,
		Text: text,
		Contained: contained,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Identifier: identifier,
		Patient: patient,
		Date: date,
		Authority: authority,
		Recommendation: recommendation,
	}
}
// FromJSON populates ImmunizationRecommendation from JSON data
func (m *ImmunizationRecommendation) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImmunizationRecommendation to JSON data
func (m *ImmunizationRecommendation) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImmunizationRecommendation
func (m *ImmunizationRecommendation) CopyWith(
	id *FhirString,
	meta *FhirMeta,
	implicitRules *FhirUri,
	language *CommonLanguages,
	text *Narrative,
	contained *[]Resource,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	identifier *[]Identifier,
	patient *Reference,
	date *FhirDateTime,
	authority *Reference,
	recommendation *[]ImmunizationRecommendationRecommendation,
) *ImmunizationRecommendation {
	return &ImmunizationRecommendation{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Meta: func() FhirMeta {
			if meta != nil { return *meta }
			return m.Meta
		}(),
		ImplicitRules: func() FhirUri {
			if implicitRules != nil { return *implicitRules }
			return m.ImplicitRules
		}(),
		Language: func() CommonLanguages {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() Narrative {
			if text != nil { return *text }
			return m.Text
		}(),
		Contained: func() []Resource {
			if contained != nil { return *contained }
			return m.Contained
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		Patient: func() Reference {
			if patient != nil { return *patient }
			return m.Patient
		}(),
		Date: func() FhirDateTime {
			if date != nil { return *date }
			return m.Date
		}(),
		Authority: func() Reference {
			if authority != nil { return *authority }
			return m.Authority
		}(),
		Recommendation: func() []ImmunizationRecommendationRecommendation {
			if recommendation != nil { return *recommendation }
			return m.Recommendation
		}(),
	}
}
// ImmunizationRecommendationRecommendation
// Vaccine administration recommendations.
type ImmunizationRecommendationRecommendation struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// vaccineCode
	// Vaccine(s) or vaccine group that pertain to the recommendation.
	VaccineCode []CodeableConcept `json:"vaccineCode,omitempty"`
	// targetDisease
	// The targeted disease for the recommendation.
	TargetDisease CodeableConcept `json:"targetDisease,omitempty"`
	// contraindicatedVaccineCode
	// Vaccine(s) which should not be used to fulfill the recommendation.
	ContraindicatedVaccineCode []CodeableConcept `json:"contraindicatedVaccineCode,omitempty"`
	// forecastStatus
	// Indicates the patient status with respect to the path to immunity for the target disease.
	ForecastStatus CodeableConcept `json:"forecastStatus,omitempty"`
	// forecastReason
	// The reason for the assigned forecast status.
	ForecastReason []CodeableConcept `json:"forecastReason,omitempty"`
	// dateCriterion
	// Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
	DateCriterion []ImmunizationRecommendationDateCriterion `json:"dateCriterion,omitempty"`
	// description
	// Contains the description about the protocol under which the vaccine was administered.
	Description FhirString `json:"description,omitempty"`
	// series
	// One possible path to achieve presumed immunity against a disease - within the context of an authority.
	Series FhirString `json:"series,omitempty"`
	// doseNumberPositiveInt
	// Nominal position of the recommended dose in a series (e.g. dose 2 is the next recommended dose).
	DoseNumberPositiveInt FhirPositiveInt `json:"doseNumberPositiveInt,omitempty"`
	// doseNumberString
	// Nominal position of the recommended dose in a series (e.g. dose 2 is the next recommended dose).
	DoseNumberString FhirString `json:"doseNumberString,omitempty"`
	// seriesDosesPositiveInt
	// The recommended number of doses to achieve immunity.
	SeriesDosesPositiveInt FhirPositiveInt `json:"seriesDosesPositiveInt,omitempty"`
	// seriesDosesString
	// The recommended number of doses to achieve immunity.
	SeriesDosesString FhirString `json:"seriesDosesString,omitempty"`
	// supportingImmunization
	// Immunization event history and/or evaluation that supports the status and recommendation.
	SupportingImmunization []Reference `json:"supportingImmunization,omitempty"`
	// supportingPatientInformation
	// Patient Information that supports the status and recommendation.  This includes patient observations, adverse reactions and allergy/intolerance information.
	SupportingPatientInformation []Reference `json:"supportingPatientInformation,omitempty"`
}

// NewImmunizationRecommendationRecommendation creates a new ImmunizationRecommendationRecommendation instance
func NewImmunizationRecommendationRecommendation(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	vaccineCode []CodeableConcept,
	targetDisease CodeableConcept,
	contraindicatedVaccineCode []CodeableConcept,
	forecastStatus CodeableConcept,
	forecastReason []CodeableConcept,
	dateCriterion []ImmunizationRecommendationDateCriterion,
	description FhirString,
	series FhirString,
	doseNumberPositiveInt FhirPositiveInt,
	doseNumberString FhirString,
	seriesDosesPositiveInt FhirPositiveInt,
	seriesDosesString FhirString,
	supportingImmunization []Reference,
	supportingPatientInformation []Reference,
) *ImmunizationRecommendationRecommendation {
	return &ImmunizationRecommendationRecommendation{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		VaccineCode: vaccineCode,
		TargetDisease: targetDisease,
		ContraindicatedVaccineCode: contraindicatedVaccineCode,
		ForecastStatus: forecastStatus,
		ForecastReason: forecastReason,
		DateCriterion: dateCriterion,
		Description: description,
		Series: series,
		DoseNumberPositiveInt: doseNumberPositiveInt,
		DoseNumberString: doseNumberString,
		SeriesDosesPositiveInt: seriesDosesPositiveInt,
		SeriesDosesString: seriesDosesString,
		SupportingImmunization: supportingImmunization,
		SupportingPatientInformation: supportingPatientInformation,
	}
}
// FromJSON populates ImmunizationRecommendationRecommendation from JSON data
func (m *ImmunizationRecommendationRecommendation) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImmunizationRecommendationRecommendation to JSON data
func (m *ImmunizationRecommendationRecommendation) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImmunizationRecommendationRecommendation
func (m *ImmunizationRecommendationRecommendation) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	vaccineCode *[]CodeableConcept,
	targetDisease *CodeableConcept,
	contraindicatedVaccineCode *[]CodeableConcept,
	forecastStatus *CodeableConcept,
	forecastReason *[]CodeableConcept,
	dateCriterion *[]ImmunizationRecommendationDateCriterion,
	description *FhirString,
	series *FhirString,
	doseNumberPositiveInt *FhirPositiveInt,
	doseNumberString *FhirString,
	seriesDosesPositiveInt *FhirPositiveInt,
	seriesDosesString *FhirString,
	supportingImmunization *[]Reference,
	supportingPatientInformation *[]Reference,
) *ImmunizationRecommendationRecommendation {
	return &ImmunizationRecommendationRecommendation{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		VaccineCode: func() []CodeableConcept {
			if vaccineCode != nil { return *vaccineCode }
			return m.VaccineCode
		}(),
		TargetDisease: func() CodeableConcept {
			if targetDisease != nil { return *targetDisease }
			return m.TargetDisease
		}(),
		ContraindicatedVaccineCode: func() []CodeableConcept {
			if contraindicatedVaccineCode != nil { return *contraindicatedVaccineCode }
			return m.ContraindicatedVaccineCode
		}(),
		ForecastStatus: func() CodeableConcept {
			if forecastStatus != nil { return *forecastStatus }
			return m.ForecastStatus
		}(),
		ForecastReason: func() []CodeableConcept {
			if forecastReason != nil { return *forecastReason }
			return m.ForecastReason
		}(),
		DateCriterion: func() []ImmunizationRecommendationDateCriterion {
			if dateCriterion != nil { return *dateCriterion }
			return m.DateCriterion
		}(),
		Description: func() FhirString {
			if description != nil { return *description }
			return m.Description
		}(),
		Series: func() FhirString {
			if series != nil { return *series }
			return m.Series
		}(),
		DoseNumberPositiveInt: func() FhirPositiveInt {
			if doseNumberPositiveInt != nil { return *doseNumberPositiveInt }
			return m.DoseNumberPositiveInt
		}(),
		DoseNumberString: func() FhirString {
			if doseNumberString != nil { return *doseNumberString }
			return m.DoseNumberString
		}(),
		SeriesDosesPositiveInt: func() FhirPositiveInt {
			if seriesDosesPositiveInt != nil { return *seriesDosesPositiveInt }
			return m.SeriesDosesPositiveInt
		}(),
		SeriesDosesString: func() FhirString {
			if seriesDosesString != nil { return *seriesDosesString }
			return m.SeriesDosesString
		}(),
		SupportingImmunization: func() []Reference {
			if supportingImmunization != nil { return *supportingImmunization }
			return m.SupportingImmunization
		}(),
		SupportingPatientInformation: func() []Reference {
			if supportingPatientInformation != nil { return *supportingPatientInformation }
			return m.SupportingPatientInformation
		}(),
	}
}
// ImmunizationRecommendationDateCriterion
// Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
type ImmunizationRecommendationDateCriterion struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// code
	// Date classification of recommendation.  For example, earliest date to give, latest date to give, etc.
	Code CodeableConcept `json:"code,omitempty"`
	// value
	// The date whose meaning is specified by dateCriterion.code.
	Value FhirDateTime `json:"value,omitempty"`
}

// NewImmunizationRecommendationDateCriterion creates a new ImmunizationRecommendationDateCriterion instance
func NewImmunizationRecommendationDateCriterion(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	code CodeableConcept,
	value FhirDateTime,
) *ImmunizationRecommendationDateCriterion {
	return &ImmunizationRecommendationDateCriterion{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Code: code,
		Value: value,
	}
}
// FromJSON populates ImmunizationRecommendationDateCriterion from JSON data
func (m *ImmunizationRecommendationDateCriterion) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImmunizationRecommendationDateCriterion to JSON data
func (m *ImmunizationRecommendationDateCriterion) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImmunizationRecommendationDateCriterion
func (m *ImmunizationRecommendationDateCriterion) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	code *CodeableConcept,
	value *FhirDateTime,
) *ImmunizationRecommendationDateCriterion {
	return &ImmunizationRecommendationDateCriterion{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Code: func() CodeableConcept {
			if code != nil { return *code }
			return m.Code
		}(),
		Value: func() FhirDateTime {
			if value != nil { return *value }
			return m.Value
		}(),
	}
}
