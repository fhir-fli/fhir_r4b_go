// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// ImmunizationRecommendation
// A patient's point-in-time set of recommendations (i.e. forecasting) according to a published schedule with optional supporting justification.
type ImmunizationRecommendation struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Patient *Reference `json:"patient,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Authority *Reference `json:"authority,omitempty"`
	Recommendation []*ImmunizationRecommendationRecommendation `json:"recommendation,omitempty"`
}

// NewImmunizationRecommendation creates a new ImmunizationRecommendation instance
func NewImmunizationRecommendation() *ImmunizationRecommendation {
	return &ImmunizationRecommendation{}
}

// FromJSON populates ImmunizationRecommendation from JSON data
func (m *ImmunizationRecommendation) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImmunizationRecommendation to JSON data
func (m *ImmunizationRecommendation) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ImmunizationRecommendation
func (m *ImmunizationRecommendation) Clone() *ImmunizationRecommendation {
	if m == nil { return nil }
	return &ImmunizationRecommendation{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Patient: m.Patient.Clone(),
		Date: m.Date.Clone(),
		Authority: m.Authority.Clone(),
		Recommendation: cloneSlices(m.Recommendation),
	}
}

// Equals checks for equality with another ImmunizationRecommendation instance
func (m *ImmunizationRecommendation) Equals(other *ImmunizationRecommendation) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Patient.Equals(other.Patient) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Authority.Equals(other.Authority) { return false }
	if !compareSlices(m.Recommendation, other.Recommendation) { return false }
	return true
}

// ImmunizationRecommendationRecommendation
// Vaccine administration recommendations.
type ImmunizationRecommendationRecommendation struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	VaccineCode []*CodeableConcept `json:"vaccinecode,omitempty"`
	TargetDisease *CodeableConcept `json:"targetdisease,omitempty"`
	ContraindicatedVaccineCode []*CodeableConcept `json:"contraindicatedvaccinecode,omitempty"`
	ForecastStatus *CodeableConcept `json:"forecaststatus,omitempty"`
	ForecastReason []*CodeableConcept `json:"forecastreason,omitempty"`
	DateCriterion []*ImmunizationRecommendationDateCriterion `json:"datecriterion,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Series *FhirString `json:"series,omitempty"`
	DoseNumberPositiveInt *FhirPositiveInt `json:"dosenumberpositiveint,omitempty"`
	DoseNumberString *FhirString `json:"dosenumberstring,omitempty"`
	SeriesDosesPositiveInt *FhirPositiveInt `json:"seriesdosespositiveint,omitempty"`
	SeriesDosesString *FhirString `json:"seriesdosesstring,omitempty"`
	SupportingImmunization []*Reference `json:"supportingimmunization,omitempty"`
	SupportingPatientInformation []*Reference `json:"supportingpatientinformation,omitempty"`
}

// NewImmunizationRecommendationRecommendation creates a new ImmunizationRecommendationRecommendation instance
func NewImmunizationRecommendationRecommendation() *ImmunizationRecommendationRecommendation {
	return &ImmunizationRecommendationRecommendation{}
}

// FromJSON populates ImmunizationRecommendationRecommendation from JSON data
func (m *ImmunizationRecommendationRecommendation) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImmunizationRecommendationRecommendation to JSON data
func (m *ImmunizationRecommendationRecommendation) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ImmunizationRecommendationRecommendation
func (m *ImmunizationRecommendationRecommendation) Clone() *ImmunizationRecommendationRecommendation {
	if m == nil { return nil }
	return &ImmunizationRecommendationRecommendation{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		VaccineCode: cloneSlices(m.VaccineCode),
		TargetDisease: m.TargetDisease.Clone(),
		ContraindicatedVaccineCode: cloneSlices(m.ContraindicatedVaccineCode),
		ForecastStatus: m.ForecastStatus.Clone(),
		ForecastReason: cloneSlices(m.ForecastReason),
		DateCriterion: cloneSlices(m.DateCriterion),
		Description: m.Description.Clone(),
		Series: m.Series.Clone(),
		DoseNumberPositiveInt: m.DoseNumberPositiveInt.Clone(),
		DoseNumberString: m.DoseNumberString.Clone(),
		SeriesDosesPositiveInt: m.SeriesDosesPositiveInt.Clone(),
		SeriesDosesString: m.SeriesDosesString.Clone(),
		SupportingImmunization: cloneSlices(m.SupportingImmunization),
		SupportingPatientInformation: cloneSlices(m.SupportingPatientInformation),
	}
}

// Equals checks for equality with another ImmunizationRecommendationRecommendation instance
func (m *ImmunizationRecommendationRecommendation) Equals(other *ImmunizationRecommendationRecommendation) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.VaccineCode, other.VaccineCode) { return false }
	if !m.TargetDisease.Equals(other.TargetDisease) { return false }
	if !compareSlices(m.ContraindicatedVaccineCode, other.ContraindicatedVaccineCode) { return false }
	if !m.ForecastStatus.Equals(other.ForecastStatus) { return false }
	if !compareSlices(m.ForecastReason, other.ForecastReason) { return false }
	if !compareSlices(m.DateCriterion, other.DateCriterion) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.Series.Equals(other.Series) { return false }
	if !m.DoseNumberPositiveInt.Equals(other.DoseNumberPositiveInt) { return false }
	if !m.DoseNumberString.Equals(other.DoseNumberString) { return false }
	if !m.SeriesDosesPositiveInt.Equals(other.SeriesDosesPositiveInt) { return false }
	if !m.SeriesDosesString.Equals(other.SeriesDosesString) { return false }
	if !compareSlices(m.SupportingImmunization, other.SupportingImmunization) { return false }
	if !compareSlices(m.SupportingPatientInformation, other.SupportingPatientInformation) { return false }
	return true
}

// ImmunizationRecommendationDateCriterion
// Vaccine date recommendations.  For example, earliest date to administer, latest date to administer, etc.
type ImmunizationRecommendationDateCriterion struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Value *FhirDateTime `json:"value,omitempty"`
}

// NewImmunizationRecommendationDateCriterion creates a new ImmunizationRecommendationDateCriterion instance
func NewImmunizationRecommendationDateCriterion() *ImmunizationRecommendationDateCriterion {
	return &ImmunizationRecommendationDateCriterion{}
}

// FromJSON populates ImmunizationRecommendationDateCriterion from JSON data
func (m *ImmunizationRecommendationDateCriterion) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImmunizationRecommendationDateCriterion to JSON data
func (m *ImmunizationRecommendationDateCriterion) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ImmunizationRecommendationDateCriterion
func (m *ImmunizationRecommendationDateCriterion) Clone() *ImmunizationRecommendationDateCriterion {
	if m == nil { return nil }
	return &ImmunizationRecommendationDateCriterion{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		Value: m.Value.Clone(),
	}
}

// Equals checks for equality with another ImmunizationRecommendationDateCriterion instance
func (m *ImmunizationRecommendationDateCriterion) Equals(other *ImmunizationRecommendationDateCriterion) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Value.Equals(other.Value) { return false }
	return true
}

