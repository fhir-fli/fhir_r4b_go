// Code generated by FHIR Generator. DO NOT EDIT.
// Used to specify why the normally expected content of the data element is missing.
package fhir_r4b_go

// DataAbsentReason represents the FHIR ValueSet as an enumeration
type DataAbsentReason int

const (
	// Unknown: The value is expected to exist but is not known.
	DataAbsentReason_Unknown DataAbsentReason = iota
	// Asked But Unknown: The source was asked but does not know the value.
	DataAbsentReason_Asked_unknown DataAbsentReason = iota
	// Temporarily Unknown: There is reason to expect (from the workflow) that the value may become known.
	DataAbsentReason_Temp_unknown DataAbsentReason = iota
	// Not Asked: The workflow didn't lead to this value being known.
	DataAbsentReason_Not_asked DataAbsentReason = iota
	// Asked But Declined: The source was asked but declined to answer.
	DataAbsentReason_Asked_declined DataAbsentReason = iota
	// Masked: The information is not available due to security, privacy or related reasons.
	DataAbsentReason_Masked DataAbsentReason = iota
	// Not Applicable: There is no proper value for this element (e.g. last menstrual period for a male).
	DataAbsentReason_Not_applicable DataAbsentReason = iota
	// Unsupported: The source system wasn't capable of supporting this element.
	DataAbsentReason_Unsupported DataAbsentReason = iota
	// As Text: The content of the data is represented in the resource narrative.
	DataAbsentReason_As_text DataAbsentReason = iota
	// Error: Some system or workflow process error means that the information is not available.
	DataAbsentReason_Error DataAbsentReason = iota
	// Not a Number (NaN): The numeric value is undefined or unrepresentable due to a floating point processing error.
	DataAbsentReason_Not_a_number DataAbsentReason = iota
	// Negative Infinity (NINF): The numeric value is excessively low and unrepresentable due to a floating point processing error.
	DataAbsentReason_Negative_infinity DataAbsentReason = iota
	// Positive Infinity (PINF): The numeric value is excessively high and unrepresentable due to a floating point processing error.
	DataAbsentReason_Positive_infinity DataAbsentReason = iota
	// Not Performed: The value is not available because the observation procedure (test, etc.) was not performed.
	DataAbsentReason_Not_performed DataAbsentReason = iota
	// Not Permitted: The value is not permitted in this context (e.g. due to profiles, or the base data types).
	DataAbsentReason_Not_permitted DataAbsentReason = iota
)

// String converts the enum to its string representation
func (e DataAbsentReason) String() string {
	switch e {
	case DataAbsentReason_Unknown: return "Unknown"
	case DataAbsentReason_Asked_unknown: return "Asked But Unknown"
	case DataAbsentReason_Temp_unknown: return "Temporarily Unknown"
	case DataAbsentReason_Not_asked: return "Not Asked"
	case DataAbsentReason_Asked_declined: return "Asked But Declined"
	case DataAbsentReason_Masked: return "Masked"
	case DataAbsentReason_Not_applicable: return "Not Applicable"
	case DataAbsentReason_Unsupported: return "Unsupported"
	case DataAbsentReason_As_text: return "As Text"
	case DataAbsentReason_Error: return "Error"
	case DataAbsentReason_Not_a_number: return "Not a Number (NaN)"
	case DataAbsentReason_Negative_infinity: return "Negative Infinity (NINF)"
	case DataAbsentReason_Positive_infinity: return "Positive Infinity (PINF)"
	case DataAbsentReason_Not_performed: return "Not Performed"
	case DataAbsentReason_Not_permitted: return "Not Permitted"
	default: return "Unknown"
	}
}

