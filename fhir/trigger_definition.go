// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// TriggerDefinition
// A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.
type TriggerDefinition struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Type *TriggerType `json:"type,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	TimingTiming *Timing `json:"timingtiming,omitempty"`
	TimingReference *Reference `json:"timingreference,omitempty"`
	TimingDate *FhirDate `json:"timingdate,omitempty"`
	TimingDateTime *FhirDateTime `json:"timingdatetime,omitempty"`
	Data []*DataRequirement `json:"data,omitempty"`
	Condition *FhirExpression `json:"condition,omitempty"`
}

// NewTriggerDefinition creates a new TriggerDefinition instance
func NewTriggerDefinition() *TriggerDefinition {
	return &TriggerDefinition{}
}

// FromJSON populates TriggerDefinition from JSON data
func (m *TriggerDefinition) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TriggerDefinition to JSON data
func (m *TriggerDefinition) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TriggerDefinition
func (m *TriggerDefinition) Clone() *TriggerDefinition {
	if m == nil { return nil }
	return &TriggerDefinition{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Type: m.Type.Clone(),
		Name: m.Name.Clone(),
		TimingTiming: m.TimingTiming.Clone(),
		TimingReference: m.TimingReference.Clone(),
		TimingDate: m.TimingDate.Clone(),
		TimingDateTime: m.TimingDateTime.Clone(),
		Data: cloneSlices(m.Data),
		Condition: m.Condition.Clone(),
	}
}

// Equals checks for equality with another TriggerDefinition instance
func (m *TriggerDefinition) Equals(other *TriggerDefinition) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.TimingTiming.Equals(other.TimingTiming) { return false }
	if !m.TimingReference.Equals(other.TimingReference) { return false }
	if !m.TimingDate.Equals(other.TimingDate) { return false }
	if !m.TimingDateTime.Equals(other.TimingDateTime) { return false }
	if !compareSlices(m.Data, other.Data) { return false }
	if !m.Condition.Equals(other.Condition) { return false }
	return true
}

