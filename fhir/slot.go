// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// Slot
// A slot of time on a schedule that may be available for booking appointments.
type Slot struct {
	DomainResource
	// id
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Id FhirString `json:"id,omitempty"`
	// meta
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta FhirMeta `json:"meta,omitempty"`
	// implicitRules
	// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ImplicitRules FhirUri `json:"implicitRules,omitempty"`
	// language
	// The base language in which the resource is written.
	Language CommonLanguages `json:"language,omitempty"`
	// text
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text Narrative `json:"text,omitempty"`
	// contained
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []Resource `json:"contained,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// identifier
	// External Ids for this item.
	Identifier []Identifier `json:"identifier,omitempty"`
	// serviceCategory
	// A broad categorization of the service that is to be performed during this appointment.
	ServiceCategory []CodeableConcept `json:"serviceCategory,omitempty"`
	// serviceType
	// The type of appointments that can be booked into this slot (ideally this would be an identifiable service - which is at a location, rather than the location itself). If provided then this overrides the value provided on the availability resource.
	ServiceType []CodeableConcept `json:"serviceType,omitempty"`
	// specialty
	// The specialty of a practitioner that would be required to perform the service requested in this appointment.
	Specialty []CodeableConcept `json:"specialty,omitempty"`
	// appointmentType
	// The style of appointment or patient that may be booked in the slot (not service type).
	AppointmentType CodeableConcept `json:"appointmentType,omitempty"`
	// schedule
	// The schedule resource that this slot defines an interval of status information.
	Schedule Reference `json:"schedule,omitempty"`
	// status
	// busy | free | busy-unavailable | busy-tentative | entered-in-error.
	Status SlotStatus `json:"status,omitempty"`
	// start
	// Date/Time that the slot is to begin.
	Start FhirInstant `json:"start,omitempty"`
	// end
	// Date/Time that the slot is to conclude.
	End FhirInstant `json:"end,omitempty"`
	// overbooked
	// This slot has already been overbooked, appointments are unlikely to be accepted for this time.
	Overbooked FhirBoolean `json:"overbooked,omitempty"`
	// comment
	// Comments on the slot to describe any extended information. Such as custom constraints on the slot.
	Comment FhirString `json:"comment,omitempty"`
}

// NewSlot creates a new Slot instance
func NewSlot(
	id FhirString,
	meta FhirMeta,
	implicitRules FhirUri,
	language CommonLanguages,
	text Narrative,
	contained []Resource,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	identifier []Identifier,
	serviceCategory []CodeableConcept,
	serviceType []CodeableConcept,
	specialty []CodeableConcept,
	appointmentType CodeableConcept,
	schedule Reference,
	status SlotStatus,
	start FhirInstant,
	end FhirInstant,
	overbooked FhirBoolean,
	comment FhirString,
) *Slot {
	return &Slot{
		Id: id,
		Meta: meta,
		ImplicitRules: implicitRules,
		Language: language,
		Text: text,
		Contained: contained,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Identifier: identifier,
		ServiceCategory: serviceCategory,
		ServiceType: serviceType,
		Specialty: specialty,
		AppointmentType: appointmentType,
		Schedule: schedule,
		Status: status,
		Start: start,
		End: end,
		Overbooked: overbooked,
		Comment: comment,
	}
}
// FromJSON populates Slot from JSON data
func (m *Slot) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Slot to JSON data
func (m *Slot) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of Slot
func (m *Slot) CopyWith(
	id *FhirString,
	meta *FhirMeta,
	implicitRules *FhirUri,
	language *CommonLanguages,
	text *Narrative,
	contained *[]Resource,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	identifier *[]Identifier,
	serviceCategory *[]CodeableConcept,
	serviceType *[]CodeableConcept,
	specialty *[]CodeableConcept,
	appointmentType *CodeableConcept,
	schedule *Reference,
	status *SlotStatus,
	start *FhirInstant,
	end *FhirInstant,
	overbooked *FhirBoolean,
	comment *FhirString,
) *Slot {
	return &Slot{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Meta: func() FhirMeta {
			if meta != nil { return *meta }
			return m.Meta
		}(),
		ImplicitRules: func() FhirUri {
			if implicitRules != nil { return *implicitRules }
			return m.ImplicitRules
		}(),
		Language: func() CommonLanguages {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() Narrative {
			if text != nil { return *text }
			return m.Text
		}(),
		Contained: func() []Resource {
			if contained != nil { return *contained }
			return m.Contained
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		ServiceCategory: func() []CodeableConcept {
			if serviceCategory != nil { return *serviceCategory }
			return m.ServiceCategory
		}(),
		ServiceType: func() []CodeableConcept {
			if serviceType != nil { return *serviceType }
			return m.ServiceType
		}(),
		Specialty: func() []CodeableConcept {
			if specialty != nil { return *specialty }
			return m.Specialty
		}(),
		AppointmentType: func() CodeableConcept {
			if appointmentType != nil { return *appointmentType }
			return m.AppointmentType
		}(),
		Schedule: func() Reference {
			if schedule != nil { return *schedule }
			return m.Schedule
		}(),
		Status: func() SlotStatus {
			if status != nil { return *status }
			return m.Status
		}(),
		Start: func() FhirInstant {
			if start != nil { return *start }
			return m.Start
		}(),
		End: func() FhirInstant {
			if end != nil { return *end }
			return m.End
		}(),
		Overbooked: func() FhirBoolean {
			if overbooked != nil { return *overbooked }
			return m.Overbooked
		}(),
		Comment: func() FhirString {
			if comment != nil { return *comment }
			return m.Comment
		}(),
	}
}
