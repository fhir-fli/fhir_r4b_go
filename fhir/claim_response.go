// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// ClaimResponse
// This resource provides the adjudication details from the processing of a Claim resource.
type ClaimResponse struct {
	DomainResource
	// id
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Id FhirString `json:"id,omitempty"`
	// meta
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta FhirMeta `json:"meta,omitempty"`
	// implicitRules
	// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ImplicitRules FhirUri `json:"implicitRules,omitempty"`
	// language
	// The base language in which the resource is written.
	Language CommonLanguages `json:"language,omitempty"`
	// text
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text Narrative `json:"text,omitempty"`
	// contained
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []Resource `json:"contained,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// identifier
	// A unique identifier assigned to this claim response.
	Identifier []Identifier `json:"identifier,omitempty"`
	// status
	// The status of the resource instance.
	Status FinancialResourceStatusCodes `json:"status,omitempty"`
	// type
	// A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
	Type_ CodeableConcept `json:"type,omitempty"`
	// subType
	// A finer grained suite of claim type codes which may convey additional information such as Inpatient vs Outpatient and/or a specialty service.
	SubType CodeableConcept `json:"subType,omitempty"`
	// use
	// A code to indicate whether the nature of the request is: to request adjudication of products and services previously rendered; or requesting authorization and adjudication for provision in the future; or requesting the non-binding adjudication of the listed products and services which could be provided in the future.
	Use Use `json:"use,omitempty"`
	// patient
	// The party to whom the professional services and/or products have been supplied or are being considered and for whom actual for facast reimbursement is sought.
	Patient Reference `json:"patient,omitempty"`
	// created
	// The date this resource was created.
	Created FhirDateTime `json:"created,omitempty"`
	// insurer
	// The party responsible for authorization, adjudication and reimbursement.
	Insurer Reference `json:"insurer,omitempty"`
	// requestor
	// The provider which is responsible for the claim, predetermination or preauthorization.
	Requestor Reference `json:"requestor,omitempty"`
	// request
	// Original request resource reference.
	Request Reference `json:"request,omitempty"`
	// outcome
	// The outcome of the claim, predetermination, or preauthorization processing.
	Outcome RemittanceOutcome `json:"outcome,omitempty"`
	// disposition
	// A human readable description of the status of the adjudication.
	Disposition FhirString `json:"disposition,omitempty"`
	// preAuthRef
	// Reference from the Insurer which is used in later communications which refers to this adjudication.
	PreAuthRef FhirString `json:"preAuthRef,omitempty"`
	// preAuthPeriod
	// The time frame during which this authorization is effective.
	PreAuthPeriod Period `json:"preAuthPeriod,omitempty"`
	// payeeType
	// Type of Party to be reimbursed: subscriber, provider, other.
	PayeeType CodeableConcept `json:"payeeType,omitempty"`
	// item
	// A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
	Item []ClaimResponseItem `json:"item,omitempty"`
	// addItem
	// The first-tier service adjudications for payor added product or service lines.
	AddItem []ClaimResponseAddItem `json:"addItem,omitempty"`
	// adjudication
	// The adjudication results which are presented at the header level rather than at the line-item or add-item levels.
	Adjudication []ClaimResponseAdjudication `json:"adjudication,omitempty"`
	// total
	// Categorized monetary totals for the adjudication.
	Total []ClaimResponseTotal `json:"total,omitempty"`
	// payment
	// Payment details for the adjudication of the claim.
	Payment ClaimResponsePayment `json:"payment,omitempty"`
	// fundsReserve
	// A code, used only on a response to a preauthorization, to indicate whether the benefits payable have been reserved and for whom.
	FundsReserve CodeableConcept `json:"fundsReserve,omitempty"`
	// formCode
	// A code for the form to be used for printing the content.
	FormCode CodeableConcept `json:"formCode,omitempty"`
	// form
	// The actual form, by reference or inclusion, for printing the content or an EOB.
	Form Attachment `json:"form,omitempty"`
	// processNote
	// A note that describes or explains adjudication results in a human readable form.
	ProcessNote []ClaimResponseProcessNote `json:"processNote,omitempty"`
	// communicationRequest
	// Request for additional supporting or authorizing information.
	CommunicationRequest []Reference `json:"communicationRequest,omitempty"`
	// insurance
	// Financial instruments for reimbursement for the health care products and services specified on the claim.
	Insurance []ClaimResponseInsurance `json:"insurance,omitempty"`
	// error
	// Errors encountered during the processing of the adjudication.
	Error []ClaimResponseError `json:"error,omitempty"`
}

// NewClaimResponse creates a new ClaimResponse instance
func NewClaimResponse(
	id FhirString,
	meta FhirMeta,
	implicitRules FhirUri,
	language CommonLanguages,
	text Narrative,
	contained []Resource,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	identifier []Identifier,
	status FinancialResourceStatusCodes,
	type_ CodeableConcept,
	subType CodeableConcept,
	use Use,
	patient Reference,
	created FhirDateTime,
	insurer Reference,
	requestor Reference,
	request Reference,
	outcome RemittanceOutcome,
	disposition FhirString,
	preAuthRef FhirString,
	preAuthPeriod Period,
	payeeType CodeableConcept,
	item []ClaimResponseItem,
	addItem []ClaimResponseAddItem,
	adjudication []ClaimResponseAdjudication,
	total []ClaimResponseTotal,
	payment ClaimResponsePayment,
	fundsReserve CodeableConcept,
	formCode CodeableConcept,
	form Attachment,
	processNote []ClaimResponseProcessNote,
	communicationRequest []Reference,
	insurance []ClaimResponseInsurance,
	error []ClaimResponseError,
) *ClaimResponse {
	return &ClaimResponse{
		Id: id,
		Meta: meta,
		ImplicitRules: implicitRules,
		Language: language,
		Text: text,
		Contained: contained,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Identifier: identifier,
		Status: status,
		Type_: type_,
		SubType: subType,
		Use: use,
		Patient: patient,
		Created: created,
		Insurer: insurer,
		Requestor: requestor,
		Request: request,
		Outcome: outcome,
		Disposition: disposition,
		PreAuthRef: preAuthRef,
		PreAuthPeriod: preAuthPeriod,
		PayeeType: payeeType,
		Item: item,
		AddItem: addItem,
		Adjudication: adjudication,
		Total: total,
		Payment: payment,
		FundsReserve: fundsReserve,
		FormCode: formCode,
		Form: form,
		ProcessNote: processNote,
		CommunicationRequest: communicationRequest,
		Insurance: insurance,
		Error: error,
	}
}
// FromJSON populates ClaimResponse from JSON data
func (m *ClaimResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimResponse to JSON data
func (m *ClaimResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ClaimResponse
func (m *ClaimResponse) CopyWith(
	id *FhirString,
	meta *FhirMeta,
	implicitRules *FhirUri,
	language *CommonLanguages,
	text *Narrative,
	contained *[]Resource,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	identifier *[]Identifier,
	status *FinancialResourceStatusCodes,
	type_ *CodeableConcept,
	subType *CodeableConcept,
	use *Use,
	patient *Reference,
	created *FhirDateTime,
	insurer *Reference,
	requestor *Reference,
	request *Reference,
	outcome *RemittanceOutcome,
	disposition *FhirString,
	preAuthRef *FhirString,
	preAuthPeriod *Period,
	payeeType *CodeableConcept,
	item *[]ClaimResponseItem,
	addItem *[]ClaimResponseAddItem,
	adjudication *[]ClaimResponseAdjudication,
	total *[]ClaimResponseTotal,
	payment *ClaimResponsePayment,
	fundsReserve *CodeableConcept,
	formCode *CodeableConcept,
	form *Attachment,
	processNote *[]ClaimResponseProcessNote,
	communicationRequest *[]Reference,
	insurance *[]ClaimResponseInsurance,
	error *[]ClaimResponseError,
) *ClaimResponse {
	return &ClaimResponse{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Meta: func() FhirMeta {
			if meta != nil { return *meta }
			return m.Meta
		}(),
		ImplicitRules: func() FhirUri {
			if implicitRules != nil { return *implicitRules }
			return m.ImplicitRules
		}(),
		Language: func() CommonLanguages {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() Narrative {
			if text != nil { return *text }
			return m.Text
		}(),
		Contained: func() []Resource {
			if contained != nil { return *contained }
			return m.Contained
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		Status: func() FinancialResourceStatusCodes {
			if status != nil { return *status }
			return m.Status
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		SubType: func() CodeableConcept {
			if subType != nil { return *subType }
			return m.SubType
		}(),
		Use: func() Use {
			if use != nil { return *use }
			return m.Use
		}(),
		Patient: func() Reference {
			if patient != nil { return *patient }
			return m.Patient
		}(),
		Created: func() FhirDateTime {
			if created != nil { return *created }
			return m.Created
		}(),
		Insurer: func() Reference {
			if insurer != nil { return *insurer }
			return m.Insurer
		}(),
		Requestor: func() Reference {
			if requestor != nil { return *requestor }
			return m.Requestor
		}(),
		Request: func() Reference {
			if request != nil { return *request }
			return m.Request
		}(),
		Outcome: func() RemittanceOutcome {
			if outcome != nil { return *outcome }
			return m.Outcome
		}(),
		Disposition: func() FhirString {
			if disposition != nil { return *disposition }
			return m.Disposition
		}(),
		PreAuthRef: func() FhirString {
			if preAuthRef != nil { return *preAuthRef }
			return m.PreAuthRef
		}(),
		PreAuthPeriod: func() Period {
			if preAuthPeriod != nil { return *preAuthPeriod }
			return m.PreAuthPeriod
		}(),
		PayeeType: func() CodeableConcept {
			if payeeType != nil { return *payeeType }
			return m.PayeeType
		}(),
		Item: func() []ClaimResponseItem {
			if item != nil { return *item }
			return m.Item
		}(),
		AddItem: func() []ClaimResponseAddItem {
			if addItem != nil { return *addItem }
			return m.AddItem
		}(),
		Adjudication: func() []ClaimResponseAdjudication {
			if adjudication != nil { return *adjudication }
			return m.Adjudication
		}(),
		Total: func() []ClaimResponseTotal {
			if total != nil { return *total }
			return m.Total
		}(),
		Payment: func() ClaimResponsePayment {
			if payment != nil { return *payment }
			return m.Payment
		}(),
		FundsReserve: func() CodeableConcept {
			if fundsReserve != nil { return *fundsReserve }
			return m.FundsReserve
		}(),
		FormCode: func() CodeableConcept {
			if formCode != nil { return *formCode }
			return m.FormCode
		}(),
		Form: func() Attachment {
			if form != nil { return *form }
			return m.Form
		}(),
		ProcessNote: func() []ClaimResponseProcessNote {
			if processNote != nil { return *processNote }
			return m.ProcessNote
		}(),
		CommunicationRequest: func() []Reference {
			if communicationRequest != nil { return *communicationRequest }
			return m.CommunicationRequest
		}(),
		Insurance: func() []ClaimResponseInsurance {
			if insurance != nil { return *insurance }
			return m.Insurance
		}(),
		Error: func() []ClaimResponseError {
			if error != nil { return *error }
			return m.Error
		}(),
	}
}
// ClaimResponseItem
// A claim line. Either a simple (a product or service) or a 'group' of details which can also be a simple items or groups of sub-details.
type ClaimResponseItem struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// itemSequence
	// A number to uniquely reference the claim item entries.
	ItemSequence FhirPositiveInt `json:"itemSequence,omitempty"`
	// noteNumber
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []FhirPositiveInt `json:"noteNumber,omitempty"`
	// adjudication
	// If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
	Adjudication []ClaimResponseAdjudication `json:"adjudication,omitempty"`
	// detail
	// A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
	Detail []ClaimResponseDetail `json:"detail,omitempty"`
}

// NewClaimResponseItem creates a new ClaimResponseItem instance
func NewClaimResponseItem(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	itemSequence FhirPositiveInt,
	noteNumber []FhirPositiveInt,
	adjudication []ClaimResponseAdjudication,
	detail []ClaimResponseDetail,
) *ClaimResponseItem {
	return &ClaimResponseItem{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		ItemSequence: itemSequence,
		NoteNumber: noteNumber,
		Adjudication: adjudication,
		Detail: detail,
	}
}
// FromJSON populates ClaimResponseItem from JSON data
func (m *ClaimResponseItem) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimResponseItem to JSON data
func (m *ClaimResponseItem) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ClaimResponseItem
func (m *ClaimResponseItem) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	itemSequence *FhirPositiveInt,
	noteNumber *[]FhirPositiveInt,
	adjudication *[]ClaimResponseAdjudication,
	detail *[]ClaimResponseDetail,
) *ClaimResponseItem {
	return &ClaimResponseItem{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		ItemSequence: func() FhirPositiveInt {
			if itemSequence != nil { return *itemSequence }
			return m.ItemSequence
		}(),
		NoteNumber: func() []FhirPositiveInt {
			if noteNumber != nil { return *noteNumber }
			return m.NoteNumber
		}(),
		Adjudication: func() []ClaimResponseAdjudication {
			if adjudication != nil { return *adjudication }
			return m.Adjudication
		}(),
		Detail: func() []ClaimResponseDetail {
			if detail != nil { return *detail }
			return m.Detail
		}(),
	}
}
// ClaimResponseAdjudication
// If this item is a group then the values here are a summary of the adjudication of the detail items. If this item is a simple product or service then this is the result of the adjudication of this item.
type ClaimResponseAdjudication struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// category
	// A code to indicate the information type of this adjudication record. Information types may include the value submitted, maximum values or percentages allowed or payable under the plan, amounts that: the patient is responsible for in aggregate or pertaining to this item; amounts paid by other coverages; and, the benefit payable for this item.
	Category CodeableConcept `json:"category,omitempty"`
	// reason
	// A code supporting the understanding of the adjudication result and explaining variance from expected amount.
	Reason CodeableConcept `json:"reason,omitempty"`
	// amount
	// Monetary amount associated with the category.
	Amount Money `json:"amount,omitempty"`
	// value
	// A non-monetary value associated with the category. Mutually exclusive to the amount element above.
	Value FhirDecimal `json:"value,omitempty"`
}

// NewClaimResponseAdjudication creates a new ClaimResponseAdjudication instance
func NewClaimResponseAdjudication(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	category CodeableConcept,
	reason CodeableConcept,
	amount Money,
	value FhirDecimal,
) *ClaimResponseAdjudication {
	return &ClaimResponseAdjudication{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Category: category,
		Reason: reason,
		Amount: amount,
		Value: value,
	}
}
// FromJSON populates ClaimResponseAdjudication from JSON data
func (m *ClaimResponseAdjudication) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimResponseAdjudication to JSON data
func (m *ClaimResponseAdjudication) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ClaimResponseAdjudication
func (m *ClaimResponseAdjudication) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	category *CodeableConcept,
	reason *CodeableConcept,
	amount *Money,
	value *FhirDecimal,
) *ClaimResponseAdjudication {
	return &ClaimResponseAdjudication{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Category: func() CodeableConcept {
			if category != nil { return *category }
			return m.Category
		}(),
		Reason: func() CodeableConcept {
			if reason != nil { return *reason }
			return m.Reason
		}(),
		Amount: func() Money {
			if amount != nil { return *amount }
			return m.Amount
		}(),
		Value: func() FhirDecimal {
			if value != nil { return *value }
			return m.Value
		}(),
	}
}
// ClaimResponseDetail
// A claim detail. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
type ClaimResponseDetail struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// detailSequence
	// A number to uniquely reference the claim detail entry.
	DetailSequence FhirPositiveInt `json:"detailSequence,omitempty"`
	// noteNumber
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []FhirPositiveInt `json:"noteNumber,omitempty"`
	// adjudication
	// The adjudication results.
	Adjudication []ClaimResponseAdjudication `json:"adjudication,omitempty"`
	// subDetail
	// A sub-detail adjudication of a simple product or service.
	SubDetail []ClaimResponseSubDetail `json:"subDetail,omitempty"`
}

// NewClaimResponseDetail creates a new ClaimResponseDetail instance
func NewClaimResponseDetail(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	detailSequence FhirPositiveInt,
	noteNumber []FhirPositiveInt,
	adjudication []ClaimResponseAdjudication,
	subDetail []ClaimResponseSubDetail,
) *ClaimResponseDetail {
	return &ClaimResponseDetail{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		DetailSequence: detailSequence,
		NoteNumber: noteNumber,
		Adjudication: adjudication,
		SubDetail: subDetail,
	}
}
// FromJSON populates ClaimResponseDetail from JSON data
func (m *ClaimResponseDetail) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimResponseDetail to JSON data
func (m *ClaimResponseDetail) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ClaimResponseDetail
func (m *ClaimResponseDetail) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	detailSequence *FhirPositiveInt,
	noteNumber *[]FhirPositiveInt,
	adjudication *[]ClaimResponseAdjudication,
	subDetail *[]ClaimResponseSubDetail,
) *ClaimResponseDetail {
	return &ClaimResponseDetail{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		DetailSequence: func() FhirPositiveInt {
			if detailSequence != nil { return *detailSequence }
			return m.DetailSequence
		}(),
		NoteNumber: func() []FhirPositiveInt {
			if noteNumber != nil { return *noteNumber }
			return m.NoteNumber
		}(),
		Adjudication: func() []ClaimResponseAdjudication {
			if adjudication != nil { return *adjudication }
			return m.Adjudication
		}(),
		SubDetail: func() []ClaimResponseSubDetail {
			if subDetail != nil { return *subDetail }
			return m.SubDetail
		}(),
	}
}
// ClaimResponseSubDetail
// A sub-detail adjudication of a simple product or service.
type ClaimResponseSubDetail struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// subDetailSequence
	// A number to uniquely reference the claim sub-detail entry.
	SubDetailSequence FhirPositiveInt `json:"subDetailSequence,omitempty"`
	// noteNumber
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []FhirPositiveInt `json:"noteNumber,omitempty"`
	// adjudication
	// The adjudication results.
	Adjudication []ClaimResponseAdjudication `json:"adjudication,omitempty"`
}

// NewClaimResponseSubDetail creates a new ClaimResponseSubDetail instance
func NewClaimResponseSubDetail(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	subDetailSequence FhirPositiveInt,
	noteNumber []FhirPositiveInt,
	adjudication []ClaimResponseAdjudication,
) *ClaimResponseSubDetail {
	return &ClaimResponseSubDetail{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		SubDetailSequence: subDetailSequence,
		NoteNumber: noteNumber,
		Adjudication: adjudication,
	}
}
// FromJSON populates ClaimResponseSubDetail from JSON data
func (m *ClaimResponseSubDetail) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimResponseSubDetail to JSON data
func (m *ClaimResponseSubDetail) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ClaimResponseSubDetail
func (m *ClaimResponseSubDetail) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	subDetailSequence *FhirPositiveInt,
	noteNumber *[]FhirPositiveInt,
	adjudication *[]ClaimResponseAdjudication,
) *ClaimResponseSubDetail {
	return &ClaimResponseSubDetail{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		SubDetailSequence: func() FhirPositiveInt {
			if subDetailSequence != nil { return *subDetailSequence }
			return m.SubDetailSequence
		}(),
		NoteNumber: func() []FhirPositiveInt {
			if noteNumber != nil { return *noteNumber }
			return m.NoteNumber
		}(),
		Adjudication: func() []ClaimResponseAdjudication {
			if adjudication != nil { return *adjudication }
			return m.Adjudication
		}(),
	}
}
// ClaimResponseAddItem
// The first-tier service adjudications for payor added product or service lines.
type ClaimResponseAddItem struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// itemSequence
	// Claim items which this service line is intended to replace.
	ItemSequence []FhirPositiveInt `json:"itemSequence,omitempty"`
	// detailSequence
	// The sequence number of the details within the claim item which this line is intended to replace.
	DetailSequence []FhirPositiveInt `json:"detailSequence,omitempty"`
	// subdetailSequence
	// The sequence number of the sub-details within the details within the claim item which this line is intended to replace.
	SubdetailSequence []FhirPositiveInt `json:"subdetailSequence,omitempty"`
	// provider
	// The providers who are authorized for the services rendered to the patient.
	Provider []Reference `json:"provider,omitempty"`
	// productOrService
	// When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
	ProductOrService CodeableConcept `json:"productOrService,omitempty"`
	// modifier
	// Item typification or modifiers codes to convey additional context for the product or service.
	Modifier []CodeableConcept `json:"modifier,omitempty"`
	// programCode
	// Identifies the program under which this may be recovered.
	ProgramCode []CodeableConcept `json:"programCode,omitempty"`
	// servicedDate
	// The date or dates when the service or product was supplied, performed or completed.
	ServicedDate FhirDate `json:"servicedDate,omitempty"`
	// servicedPeriod
	// The date or dates when the service or product was supplied, performed or completed.
	ServicedPeriod Period `json:"servicedPeriod,omitempty"`
	// locationCodeableConcept
	// Where the product or service was provided.
	LocationCodeableConcept CodeableConcept `json:"locationCodeableConcept,omitempty"`
	// locationAddress
	// Where the product or service was provided.
	LocationAddress Address `json:"locationAddress,omitempty"`
	// locationReference
	// Where the product or service was provided.
	LocationReference Reference `json:"locationReference,omitempty"`
	// quantity
	// The number of repetitions of a service or product.
	Quantity Quantity `json:"quantity,omitempty"`
	// unitPrice
	// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	UnitPrice Money `json:"unitPrice,omitempty"`
	// factor
	// A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
	Factor FhirDecimal `json:"factor,omitempty"`
	// net
	// The quantity times the unit price for an additional service or product or charge.
	Net Money `json:"net,omitempty"`
	// bodySite
	// Physical service site on the patient (limb, tooth, etc.).
	BodySite CodeableConcept `json:"bodySite,omitempty"`
	// subSite
	// A region or surface of the bodySite, e.g. limb region or tooth surface(s).
	SubSite []CodeableConcept `json:"subSite,omitempty"`
	// noteNumber
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []FhirPositiveInt `json:"noteNumber,omitempty"`
	// adjudication
	// The adjudication results.
	Adjudication []ClaimResponseAdjudication `json:"adjudication,omitempty"`
	// detail
	// The second-tier service adjudications for payor added services.
	Detail []ClaimResponseDetail `json:"detail,omitempty"`
}

// NewClaimResponseAddItem creates a new ClaimResponseAddItem instance
func NewClaimResponseAddItem(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	itemSequence []FhirPositiveInt,
	detailSequence []FhirPositiveInt,
	subdetailSequence []FhirPositiveInt,
	provider []Reference,
	productOrService CodeableConcept,
	modifier []CodeableConcept,
	programCode []CodeableConcept,
	servicedDate FhirDate,
	servicedPeriod Period,
	locationCodeableConcept CodeableConcept,
	locationAddress Address,
	locationReference Reference,
	quantity Quantity,
	unitPrice Money,
	factor FhirDecimal,
	net Money,
	bodySite CodeableConcept,
	subSite []CodeableConcept,
	noteNumber []FhirPositiveInt,
	adjudication []ClaimResponseAdjudication,
	detail []ClaimResponseDetail,
) *ClaimResponseAddItem {
	return &ClaimResponseAddItem{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		ItemSequence: itemSequence,
		DetailSequence: detailSequence,
		SubdetailSequence: subdetailSequence,
		Provider: provider,
		ProductOrService: productOrService,
		Modifier: modifier,
		ProgramCode: programCode,
		ServicedDate: servicedDate,
		ServicedPeriod: servicedPeriod,
		LocationCodeableConcept: locationCodeableConcept,
		LocationAddress: locationAddress,
		LocationReference: locationReference,
		Quantity: quantity,
		UnitPrice: unitPrice,
		Factor: factor,
		Net: net,
		BodySite: bodySite,
		SubSite: subSite,
		NoteNumber: noteNumber,
		Adjudication: adjudication,
		Detail: detail,
	}
}
// FromJSON populates ClaimResponseAddItem from JSON data
func (m *ClaimResponseAddItem) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimResponseAddItem to JSON data
func (m *ClaimResponseAddItem) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ClaimResponseAddItem
func (m *ClaimResponseAddItem) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	itemSequence *[]FhirPositiveInt,
	detailSequence *[]FhirPositiveInt,
	subdetailSequence *[]FhirPositiveInt,
	provider *[]Reference,
	productOrService *CodeableConcept,
	modifier *[]CodeableConcept,
	programCode *[]CodeableConcept,
	servicedDate *FhirDate,
	servicedPeriod *Period,
	locationCodeableConcept *CodeableConcept,
	locationAddress *Address,
	locationReference *Reference,
	quantity *Quantity,
	unitPrice *Money,
	factor *FhirDecimal,
	net *Money,
	bodySite *CodeableConcept,
	subSite *[]CodeableConcept,
	noteNumber *[]FhirPositiveInt,
	adjudication *[]ClaimResponseAdjudication,
	detail *[]ClaimResponseDetail,
) *ClaimResponseAddItem {
	return &ClaimResponseAddItem{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		ItemSequence: func() []FhirPositiveInt {
			if itemSequence != nil { return *itemSequence }
			return m.ItemSequence
		}(),
		DetailSequence: func() []FhirPositiveInt {
			if detailSequence != nil { return *detailSequence }
			return m.DetailSequence
		}(),
		SubdetailSequence: func() []FhirPositiveInt {
			if subdetailSequence != nil { return *subdetailSequence }
			return m.SubdetailSequence
		}(),
		Provider: func() []Reference {
			if provider != nil { return *provider }
			return m.Provider
		}(),
		ProductOrService: func() CodeableConcept {
			if productOrService != nil { return *productOrService }
			return m.ProductOrService
		}(),
		Modifier: func() []CodeableConcept {
			if modifier != nil { return *modifier }
			return m.Modifier
		}(),
		ProgramCode: func() []CodeableConcept {
			if programCode != nil { return *programCode }
			return m.ProgramCode
		}(),
		ServicedDate: func() FhirDate {
			if servicedDate != nil { return *servicedDate }
			return m.ServicedDate
		}(),
		ServicedPeriod: func() Period {
			if servicedPeriod != nil { return *servicedPeriod }
			return m.ServicedPeriod
		}(),
		LocationCodeableConcept: func() CodeableConcept {
			if locationCodeableConcept != nil { return *locationCodeableConcept }
			return m.LocationCodeableConcept
		}(),
		LocationAddress: func() Address {
			if locationAddress != nil { return *locationAddress }
			return m.LocationAddress
		}(),
		LocationReference: func() Reference {
			if locationReference != nil { return *locationReference }
			return m.LocationReference
		}(),
		Quantity: func() Quantity {
			if quantity != nil { return *quantity }
			return m.Quantity
		}(),
		UnitPrice: func() Money {
			if unitPrice != nil { return *unitPrice }
			return m.UnitPrice
		}(),
		Factor: func() FhirDecimal {
			if factor != nil { return *factor }
			return m.Factor
		}(),
		Net: func() Money {
			if net != nil { return *net }
			return m.Net
		}(),
		BodySite: func() CodeableConcept {
			if bodySite != nil { return *bodySite }
			return m.BodySite
		}(),
		SubSite: func() []CodeableConcept {
			if subSite != nil { return *subSite }
			return m.SubSite
		}(),
		NoteNumber: func() []FhirPositiveInt {
			if noteNumber != nil { return *noteNumber }
			return m.NoteNumber
		}(),
		Adjudication: func() []ClaimResponseAdjudication {
			if adjudication != nil { return *adjudication }
			return m.Adjudication
		}(),
		Detail: func() []ClaimResponseDetail {
			if detail != nil { return *detail }
			return m.Detail
		}(),
	}
}
// ClaimResponseDetail1
// The second-tier service adjudications for payor added services.
type ClaimResponseDetail1 struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// productOrService
	// When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
	ProductOrService CodeableConcept `json:"productOrService,omitempty"`
	// modifier
	// Item typification or modifiers codes to convey additional context for the product or service.
	Modifier []CodeableConcept `json:"modifier,omitempty"`
	// quantity
	// The number of repetitions of a service or product.
	Quantity Quantity `json:"quantity,omitempty"`
	// unitPrice
	// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	UnitPrice Money `json:"unitPrice,omitempty"`
	// factor
	// A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
	Factor FhirDecimal `json:"factor,omitempty"`
	// net
	// The quantity times the unit price for an additional service or product or charge.
	Net Money `json:"net,omitempty"`
	// noteNumber
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []FhirPositiveInt `json:"noteNumber,omitempty"`
	// adjudication
	// The adjudication results.
	Adjudication []ClaimResponseAdjudication `json:"adjudication,omitempty"`
	// subDetail
	// The third-tier service adjudications for payor added services.
	SubDetail []ClaimResponseSubDetail `json:"subDetail,omitempty"`
}

// NewClaimResponseDetail1 creates a new ClaimResponseDetail1 instance
func NewClaimResponseDetail1(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	productOrService CodeableConcept,
	modifier []CodeableConcept,
	quantity Quantity,
	unitPrice Money,
	factor FhirDecimal,
	net Money,
	noteNumber []FhirPositiveInt,
	adjudication []ClaimResponseAdjudication,
	subDetail []ClaimResponseSubDetail,
) *ClaimResponseDetail1 {
	return &ClaimResponseDetail1{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		ProductOrService: productOrService,
		Modifier: modifier,
		Quantity: quantity,
		UnitPrice: unitPrice,
		Factor: factor,
		Net: net,
		NoteNumber: noteNumber,
		Adjudication: adjudication,
		SubDetail: subDetail,
	}
}
// FromJSON populates ClaimResponseDetail1 from JSON data
func (m *ClaimResponseDetail1) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimResponseDetail1 to JSON data
func (m *ClaimResponseDetail1) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ClaimResponseDetail1
func (m *ClaimResponseDetail1) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	productOrService *CodeableConcept,
	modifier *[]CodeableConcept,
	quantity *Quantity,
	unitPrice *Money,
	factor *FhirDecimal,
	net *Money,
	noteNumber *[]FhirPositiveInt,
	adjudication *[]ClaimResponseAdjudication,
	subDetail *[]ClaimResponseSubDetail,
) *ClaimResponseDetail1 {
	return &ClaimResponseDetail1{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		ProductOrService: func() CodeableConcept {
			if productOrService != nil { return *productOrService }
			return m.ProductOrService
		}(),
		Modifier: func() []CodeableConcept {
			if modifier != nil { return *modifier }
			return m.Modifier
		}(),
		Quantity: func() Quantity {
			if quantity != nil { return *quantity }
			return m.Quantity
		}(),
		UnitPrice: func() Money {
			if unitPrice != nil { return *unitPrice }
			return m.UnitPrice
		}(),
		Factor: func() FhirDecimal {
			if factor != nil { return *factor }
			return m.Factor
		}(),
		Net: func() Money {
			if net != nil { return *net }
			return m.Net
		}(),
		NoteNumber: func() []FhirPositiveInt {
			if noteNumber != nil { return *noteNumber }
			return m.NoteNumber
		}(),
		Adjudication: func() []ClaimResponseAdjudication {
			if adjudication != nil { return *adjudication }
			return m.Adjudication
		}(),
		SubDetail: func() []ClaimResponseSubDetail {
			if subDetail != nil { return *subDetail }
			return m.SubDetail
		}(),
	}
}
// ClaimResponseSubDetail1
// The third-tier service adjudications for payor added services.
type ClaimResponseSubDetail1 struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// productOrService
	// When the value is a group code then this item collects a set of related claim details, otherwise this contains the product, service, drug or other billing code for the item.
	ProductOrService CodeableConcept `json:"productOrService,omitempty"`
	// modifier
	// Item typification or modifiers codes to convey additional context for the product or service.
	Modifier []CodeableConcept `json:"modifier,omitempty"`
	// quantity
	// The number of repetitions of a service or product.
	Quantity Quantity `json:"quantity,omitempty"`
	// unitPrice
	// If the item is not a group then this is the fee for the product or service, otherwise this is the total of the fees for the details of the group.
	UnitPrice Money `json:"unitPrice,omitempty"`
	// factor
	// A real number that represents a multiplier used in determining the overall value of services delivered and/or goods received. The concept of a Factor allows for a discount or surcharge multiplier to be applied to a monetary amount.
	Factor FhirDecimal `json:"factor,omitempty"`
	// net
	// The quantity times the unit price for an additional service or product or charge.
	Net Money `json:"net,omitempty"`
	// noteNumber
	// The numbers associated with notes below which apply to the adjudication of this item.
	NoteNumber []FhirPositiveInt `json:"noteNumber,omitempty"`
	// adjudication
	// The adjudication results.
	Adjudication []ClaimResponseAdjudication `json:"adjudication,omitempty"`
}

// NewClaimResponseSubDetail1 creates a new ClaimResponseSubDetail1 instance
func NewClaimResponseSubDetail1(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	productOrService CodeableConcept,
	modifier []CodeableConcept,
	quantity Quantity,
	unitPrice Money,
	factor FhirDecimal,
	net Money,
	noteNumber []FhirPositiveInt,
	adjudication []ClaimResponseAdjudication,
) *ClaimResponseSubDetail1 {
	return &ClaimResponseSubDetail1{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		ProductOrService: productOrService,
		Modifier: modifier,
		Quantity: quantity,
		UnitPrice: unitPrice,
		Factor: factor,
		Net: net,
		NoteNumber: noteNumber,
		Adjudication: adjudication,
	}
}
// FromJSON populates ClaimResponseSubDetail1 from JSON data
func (m *ClaimResponseSubDetail1) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimResponseSubDetail1 to JSON data
func (m *ClaimResponseSubDetail1) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ClaimResponseSubDetail1
func (m *ClaimResponseSubDetail1) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	productOrService *CodeableConcept,
	modifier *[]CodeableConcept,
	quantity *Quantity,
	unitPrice *Money,
	factor *FhirDecimal,
	net *Money,
	noteNumber *[]FhirPositiveInt,
	adjudication *[]ClaimResponseAdjudication,
) *ClaimResponseSubDetail1 {
	return &ClaimResponseSubDetail1{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		ProductOrService: func() CodeableConcept {
			if productOrService != nil { return *productOrService }
			return m.ProductOrService
		}(),
		Modifier: func() []CodeableConcept {
			if modifier != nil { return *modifier }
			return m.Modifier
		}(),
		Quantity: func() Quantity {
			if quantity != nil { return *quantity }
			return m.Quantity
		}(),
		UnitPrice: func() Money {
			if unitPrice != nil { return *unitPrice }
			return m.UnitPrice
		}(),
		Factor: func() FhirDecimal {
			if factor != nil { return *factor }
			return m.Factor
		}(),
		Net: func() Money {
			if net != nil { return *net }
			return m.Net
		}(),
		NoteNumber: func() []FhirPositiveInt {
			if noteNumber != nil { return *noteNumber }
			return m.NoteNumber
		}(),
		Adjudication: func() []ClaimResponseAdjudication {
			if adjudication != nil { return *adjudication }
			return m.Adjudication
		}(),
	}
}
// ClaimResponseTotal
// Categorized monetary totals for the adjudication.
type ClaimResponseTotal struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// category
	// A code to indicate the information type of this adjudication record. Information types may include: the value submitted, maximum values or percentages allowed or payable under the plan, amounts that the patient is responsible for in aggregate or pertaining to this item, amounts paid by other coverages, and the benefit payable for this item.
	Category CodeableConcept `json:"category,omitempty"`
	// amount
	// Monetary total amount associated with the category.
	Amount Money `json:"amount,omitempty"`
}

// NewClaimResponseTotal creates a new ClaimResponseTotal instance
func NewClaimResponseTotal(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	category CodeableConcept,
	amount Money,
) *ClaimResponseTotal {
	return &ClaimResponseTotal{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Category: category,
		Amount: amount,
	}
}
// FromJSON populates ClaimResponseTotal from JSON data
func (m *ClaimResponseTotal) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimResponseTotal to JSON data
func (m *ClaimResponseTotal) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ClaimResponseTotal
func (m *ClaimResponseTotal) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	category *CodeableConcept,
	amount *Money,
) *ClaimResponseTotal {
	return &ClaimResponseTotal{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Category: func() CodeableConcept {
			if category != nil { return *category }
			return m.Category
		}(),
		Amount: func() Money {
			if amount != nil { return *amount }
			return m.Amount
		}(),
	}
}
// ClaimResponsePayment
// Payment details for the adjudication of the claim.
type ClaimResponsePayment struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// Whether this represents partial or complete payment of the benefits payable.
	Type_ CodeableConcept `json:"type,omitempty"`
	// adjustment
	// Total amount of all adjustments to this payment included in this transaction which are not related to this claim's adjudication.
	Adjustment Money `json:"adjustment,omitempty"`
	// adjustmentReason
	// Reason for the payment adjustment.
	AdjustmentReason CodeableConcept `json:"adjustmentReason,omitempty"`
	// date
	// Estimated date the payment will be issued or the actual issue date of payment.
	Date FhirDate `json:"date,omitempty"`
	// amount
	// Benefits payable less any payment adjustment.
	Amount Money `json:"amount,omitempty"`
	// identifier
	// Issuer's unique identifier for the payment instrument.
	Identifier Identifier `json:"identifier,omitempty"`
}

// NewClaimResponsePayment creates a new ClaimResponsePayment instance
func NewClaimResponsePayment(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ CodeableConcept,
	adjustment Money,
	adjustmentReason CodeableConcept,
	date FhirDate,
	amount Money,
	identifier Identifier,
) *ClaimResponsePayment {
	return &ClaimResponsePayment{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		Adjustment: adjustment,
		AdjustmentReason: adjustmentReason,
		Date: date,
		Amount: amount,
		Identifier: identifier,
	}
}
// FromJSON populates ClaimResponsePayment from JSON data
func (m *ClaimResponsePayment) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimResponsePayment to JSON data
func (m *ClaimResponsePayment) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ClaimResponsePayment
func (m *ClaimResponsePayment) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *CodeableConcept,
	adjustment *Money,
	adjustmentReason *CodeableConcept,
	date *FhirDate,
	amount *Money,
	identifier *Identifier,
) *ClaimResponsePayment {
	return &ClaimResponsePayment{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Adjustment: func() Money {
			if adjustment != nil { return *adjustment }
			return m.Adjustment
		}(),
		AdjustmentReason: func() CodeableConcept {
			if adjustmentReason != nil { return *adjustmentReason }
			return m.AdjustmentReason
		}(),
		Date: func() FhirDate {
			if date != nil { return *date }
			return m.Date
		}(),
		Amount: func() Money {
			if amount != nil { return *amount }
			return m.Amount
		}(),
		Identifier: func() Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
	}
}
// ClaimResponseProcessNote
// A note that describes or explains adjudication results in a human readable form.
type ClaimResponseProcessNote struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// number
	// A number to uniquely identify a note entry.
	Number FhirPositiveInt `json:"number,omitempty"`
	// type
	// The business purpose of the note text.
	Type_ NoteType `json:"type,omitempty"`
	// text
	// The explanation or description associated with the processing.
	Text FhirString `json:"text,omitempty"`
	// language
	// A code to define the language used in the text of the note.
	Language CodeableConcept `json:"language,omitempty"`
}

// NewClaimResponseProcessNote creates a new ClaimResponseProcessNote instance
func NewClaimResponseProcessNote(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	number FhirPositiveInt,
	type_ NoteType,
	text FhirString,
	language CodeableConcept,
) *ClaimResponseProcessNote {
	return &ClaimResponseProcessNote{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Number: number,
		Type_: type_,
		Text: text,
		Language: language,
	}
}
// FromJSON populates ClaimResponseProcessNote from JSON data
func (m *ClaimResponseProcessNote) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimResponseProcessNote to JSON data
func (m *ClaimResponseProcessNote) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ClaimResponseProcessNote
func (m *ClaimResponseProcessNote) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	number *FhirPositiveInt,
	type_ *NoteType,
	text *FhirString,
	language *CodeableConcept,
) *ClaimResponseProcessNote {
	return &ClaimResponseProcessNote{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Number: func() FhirPositiveInt {
			if number != nil { return *number }
			return m.Number
		}(),
		Type_: func() NoteType {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Text: func() FhirString {
			if text != nil { return *text }
			return m.Text
		}(),
		Language: func() CodeableConcept {
			if language != nil { return *language }
			return m.Language
		}(),
	}
}
// ClaimResponseInsurance
// Financial instruments for reimbursement for the health care products and services specified on the claim.
type ClaimResponseInsurance struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// sequence
	// A number to uniquely identify insurance entries and provide a sequence of coverages to convey coordination of benefit order.
	Sequence FhirPositiveInt `json:"sequence,omitempty"`
	// focal
	// A flag to indicate that this Coverage is to be used for adjudication of this claim when set to true.
	Focal FhirBoolean `json:"focal,omitempty"`
	// coverage
	// Reference to the insurance card level information contained in the Coverage resource. The coverage issuing insurer will use these details to locate the patient's actual coverage within the insurer's information system.
	Coverage Reference `json:"coverage,omitempty"`
	// businessArrangement
	// A business agreement number established between the provider and the insurer for special business processing purposes.
	BusinessArrangement FhirString `json:"businessArrangement,omitempty"`
	// claimResponse
	// The result of the adjudication of the line items for the Coverage specified in this insurance.
	ClaimResponse Reference `json:"claimResponse,omitempty"`
}

// NewClaimResponseInsurance creates a new ClaimResponseInsurance instance
func NewClaimResponseInsurance(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	sequence FhirPositiveInt,
	focal FhirBoolean,
	coverage Reference,
	businessArrangement FhirString,
	claimResponse Reference,
) *ClaimResponseInsurance {
	return &ClaimResponseInsurance{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Sequence: sequence,
		Focal: focal,
		Coverage: coverage,
		BusinessArrangement: businessArrangement,
		ClaimResponse: claimResponse,
	}
}
// FromJSON populates ClaimResponseInsurance from JSON data
func (m *ClaimResponseInsurance) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimResponseInsurance to JSON data
func (m *ClaimResponseInsurance) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ClaimResponseInsurance
func (m *ClaimResponseInsurance) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	sequence *FhirPositiveInt,
	focal *FhirBoolean,
	coverage *Reference,
	businessArrangement *FhirString,
	claimResponse *Reference,
) *ClaimResponseInsurance {
	return &ClaimResponseInsurance{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Sequence: func() FhirPositiveInt {
			if sequence != nil { return *sequence }
			return m.Sequence
		}(),
		Focal: func() FhirBoolean {
			if focal != nil { return *focal }
			return m.Focal
		}(),
		Coverage: func() Reference {
			if coverage != nil { return *coverage }
			return m.Coverage
		}(),
		BusinessArrangement: func() FhirString {
			if businessArrangement != nil { return *businessArrangement }
			return m.BusinessArrangement
		}(),
		ClaimResponse: func() Reference {
			if claimResponse != nil { return *claimResponse }
			return m.ClaimResponse
		}(),
	}
}
// ClaimResponseError
// Errors encountered during the processing of the adjudication.
type ClaimResponseError struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// itemSequence
	// The sequence number of the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
	ItemSequence FhirPositiveInt `json:"itemSequence,omitempty"`
	// detailSequence
	// The sequence number of the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
	DetailSequence FhirPositiveInt `json:"detailSequence,omitempty"`
	// subDetailSequence
	// The sequence number of the sub-detail within the detail within the line item submitted which contains the error. This value is omitted when the error occurs outside of the item structure.
	SubDetailSequence FhirPositiveInt `json:"subDetailSequence,omitempty"`
	// code
	// An error code, from a specified code system, which details why the claim could not be adjudicated.
	Code CodeableConcept `json:"code,omitempty"`
}

// NewClaimResponseError creates a new ClaimResponseError instance
func NewClaimResponseError(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	itemSequence FhirPositiveInt,
	detailSequence FhirPositiveInt,
	subDetailSequence FhirPositiveInt,
	code CodeableConcept,
) *ClaimResponseError {
	return &ClaimResponseError{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		ItemSequence: itemSequence,
		DetailSequence: detailSequence,
		SubDetailSequence: subDetailSequence,
		Code: code,
	}
}
// FromJSON populates ClaimResponseError from JSON data
func (m *ClaimResponseError) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimResponseError to JSON data
func (m *ClaimResponseError) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ClaimResponseError
func (m *ClaimResponseError) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	itemSequence *FhirPositiveInt,
	detailSequence *FhirPositiveInt,
	subDetailSequence *FhirPositiveInt,
	code *CodeableConcept,
) *ClaimResponseError {
	return &ClaimResponseError{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		ItemSequence: func() FhirPositiveInt {
			if itemSequence != nil { return *itemSequence }
			return m.ItemSequence
		}(),
		DetailSequence: func() FhirPositiveInt {
			if detailSequence != nil { return *detailSequence }
			return m.DetailSequence
		}(),
		SubDetailSequence: func() FhirPositiveInt {
			if subDetailSequence != nil { return *subDetailSequence }
			return m.SubDetailSequence
		}(),
		Code: func() CodeableConcept {
			if code != nil { return *code }
			return m.Code
		}(),
	}
}
