// Code generated by FHIR Generator. DO NOT EDIT.
// This value set defines a set of codes that are used to indicate the supported operations of a testing engine or tool.
package fhir_r4b_go
// TestScriptOperationCode represents the FHIR ValueSet as an enumeration
type TestScriptOperationCode struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	TestScriptOperationCode_Read = "read" // Read: Read the current state of the resource.
	TestScriptOperationCode_Vread = "vread" // Version Read: Read the state of a specific version of the resource.
	TestScriptOperationCode_Update = "update" // Update: Update an existing resource by its id.
	TestScriptOperationCode_UpdateCreate = "updateCreate" // Create using Update: Update an existing resource by its id (or create it if it is new).
	TestScriptOperationCode_Patch = "patch" // Patch: Patch an existing resource by its id.
	TestScriptOperationCode_Delete = "delete" // Delete: Delete a resource.
	TestScriptOperationCode_DeleteCondSingle = "deleteCondSingle" // Conditional Delete Single: Conditionally delete a single resource based on search parameters.
	TestScriptOperationCode_DeleteCondMultiple = "deleteCondMultiple" // Conditional Delete Multiple: Conditionally delete one or more resources based on search parameters.
	TestScriptOperationCode_History = "history" // History: Retrieve the change history for a particular resource or resource type.
	TestScriptOperationCode_Create = "create" // Create: Create a new resource with a server assigned id.
	TestScriptOperationCode_Search = "search" // Search: Search based on some filter criteria.
	TestScriptOperationCode_Batch = "batch" // Batch: Update, create or delete a set of resources as independent actions.
	TestScriptOperationCode_Transaction = "transaction" // Transaction: Update, create or delete a set of resources as a single transaction.
	TestScriptOperationCode_Capabilities = "capabilities" // Capabilities: Get a capability statement for the system.
	TestScriptOperationCode_Apply = "apply" // $apply: Realizes an ActivityDefinition in a specific context
	TestScriptOperationCode_Closure = "closure" // $closure: Closure Table Maintenance
	TestScriptOperationCode_Find_matches = "find-matches" // $find-matches: Finding Codes based on supplied properties
	TestScriptOperationCode_Conforms = "conforms" // $conforms: Compare two systems CapabilityStatements
	TestScriptOperationCode_Data_requirements = "data-requirements" // $data-requirements: Aggregates and returns the parameters and data requirements for a resource and all its dependencies as a single module definition
	TestScriptOperationCode_Document = "document" // $document: Generate a Document
	TestScriptOperationCode_Evaluate = "evaluate" // $evaluate: Request clinical decision support guidance based on a specific decision support module
	TestScriptOperationCode_Evaluate_measure = "evaluate-measure" // $evaluate-measure: Invoke an eMeasure and obtain the results
	TestScriptOperationCode_Everything = "everything" // $everything: Return all the related information as described in the Encounter or Patient
	TestScriptOperationCode_Expand = "expand" // $expand: Value Set Expansion
	TestScriptOperationCode_Find = "find" // $find: Find a functional list
	TestScriptOperationCode_Graphql = "graphql" // $graphql: Invoke a GraphQL query
	TestScriptOperationCode_Implements = "implements" // $implements: Test if a server implements a client's required operations
	TestScriptOperationCode_Lastn = "lastn" // $lastn: Last N Observations Query
	TestScriptOperationCode_Lookup = "lookup" // $lookup: Concept Look Up and Decomposition
	TestScriptOperationCode_Match = "match" // $match: Find patient matches using MPI based logic
	TestScriptOperationCode_Meta = "meta" // $meta: Access a list of profiles, tags, and security labels
	TestScriptOperationCode_Meta_add = "meta-add" // $meta-add: Add profiles, tags, and security labels to a resource
	TestScriptOperationCode_Meta_delete = "meta-delete" // $meta-delete: Delete profiles, tags, and security labels for a resource
	TestScriptOperationCode_Populate = "populate" // $populate: Populate Questionnaire
	TestScriptOperationCode_Populatehtml = "populatehtml" // $populatehtml: Generate HTML for Questionnaire
	TestScriptOperationCode_Populatelink = "populatelink" // $populatelink: Generate a link to a Questionnaire completion webpage
	TestScriptOperationCode_Process_message = "process-message" // $process-message: Process a message according to the defined event
	TestScriptOperationCode_Questionnaire = "questionnaire" // $questionnaire: Build Questionnaire
	TestScriptOperationCode_Stats = "stats" // $stats: Observation Statistics
	TestScriptOperationCode_Subset = "subset" // $subset: Fetch a subset of the CapabilityStatement resource
	TestScriptOperationCode_Subsumes = "subsumes" // $subsumes: CodeSystem Subsumption Testing
	TestScriptOperationCode_Transform = "transform" // $transform: Model Instance Transformation
	TestScriptOperationCode_Translate = "translate" // $translate: Concept Translation
	TestScriptOperationCode_Validate = "validate" // $validate: Validate a resource
	TestScriptOperationCode_Validate_code = "validate-code" // $validate-code: ValueSet based Validation
)

// Clone creates a deep copy of the enum
func (e TestScriptOperationCode) Clone() *TestScriptOperationCode {
	return &TestScriptOperationCode{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *TestScriptOperationCode) Equals(other *TestScriptOperationCode) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

