// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// ConceptMap
// A statement of relationships from one set of concepts to one or more other concepts - either concepts in code systems, or data element/data element concepts, or classes in class models.
type ConceptMap struct {
	CanonicalResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Url *FhirUri `json:"url,omitempty"`
	Identifier *Identifier `json:"identifier,omitempty"`
	Version *FhirString `json:"version,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	Experimental *FhirBoolean `json:"experimental,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Publisher *FhirString `json:"publisher,omitempty"`
	Contact []*ContactDetail `json:"contact,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	UseContext []*UsageContext `json:"usecontext,omitempty"`
	Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`
	Purpose *FhirMarkdown `json:"purpose,omitempty"`
	Copyright *FhirMarkdown `json:"copyright,omitempty"`
	SourceUri *FhirUri `json:"sourceuri,omitempty"`
	SourceCanonical *FhirCanonical `json:"sourcecanonical,omitempty"`
	TargetUri *FhirUri `json:"targeturi,omitempty"`
	TargetCanonical *FhirCanonical `json:"targetcanonical,omitempty"`
	Group []*ConceptMapGroup `json:"group,omitempty"`
}

// NewConceptMap creates a new ConceptMap instance
func NewConceptMap() *ConceptMap {
	return &ConceptMap{}
}

// FromJSON populates ConceptMap from JSON data
func (m *ConceptMap) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ConceptMap to JSON data
func (m *ConceptMap) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ConceptMap
func (m *ConceptMap) Clone() *ConceptMap {
	if m == nil { return nil }
	return &ConceptMap{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Url: m.Url.Clone(),
		Identifier: m.Identifier.Clone(),
		Version: m.Version.Clone(),
		Name: m.Name.Clone(),
		Title: m.Title.Clone(),
		Status: m.Status.Clone(),
		Experimental: m.Experimental.Clone(),
		Date: m.Date.Clone(),
		Publisher: m.Publisher.Clone(),
		Contact: cloneSlices(m.Contact),
		Description: m.Description.Clone(),
		UseContext: cloneSlices(m.UseContext),
		Jurisdiction: cloneSlices(m.Jurisdiction),
		Purpose: m.Purpose.Clone(),
		Copyright: m.Copyright.Clone(),
		SourceUri: m.SourceUri.Clone(),
		SourceCanonical: m.SourceCanonical.Clone(),
		TargetUri: m.TargetUri.Clone(),
		TargetCanonical: m.TargetCanonical.Clone(),
		Group: cloneSlices(m.Group),
	}
}

// Equals checks for equality with another ConceptMap instance
func (m *ConceptMap) Equals(other *ConceptMap) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !m.Identifier.Equals(other.Identifier) { return false }
	if !m.Version.Equals(other.Version) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Experimental.Equals(other.Experimental) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Publisher.Equals(other.Publisher) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.UseContext, other.UseContext) { return false }
	if !compareSlices(m.Jurisdiction, other.Jurisdiction) { return false }
	if !m.Purpose.Equals(other.Purpose) { return false }
	if !m.Copyright.Equals(other.Copyright) { return false }
	if !m.SourceUri.Equals(other.SourceUri) { return false }
	if !m.SourceCanonical.Equals(other.SourceCanonical) { return false }
	if !m.TargetUri.Equals(other.TargetUri) { return false }
	if !m.TargetCanonical.Equals(other.TargetCanonical) { return false }
	if !compareSlices(m.Group, other.Group) { return false }
	return true
}

// ConceptMapGroup
// A group of mappings that all have the same source and target system.
type ConceptMapGroup struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Source *FhirUri `json:"source,omitempty"`
	SourceVersion *FhirString `json:"sourceversion,omitempty"`
	Target *FhirUri `json:"target,omitempty"`
	TargetVersion *FhirString `json:"targetversion,omitempty"`
	Element []*ConceptMapElement `json:"element,omitempty"`
	Unmapped *ConceptMapUnmapped `json:"unmapped,omitempty"`
}

// NewConceptMapGroup creates a new ConceptMapGroup instance
func NewConceptMapGroup() *ConceptMapGroup {
	return &ConceptMapGroup{}
}

// FromJSON populates ConceptMapGroup from JSON data
func (m *ConceptMapGroup) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ConceptMapGroup to JSON data
func (m *ConceptMapGroup) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ConceptMapGroup
func (m *ConceptMapGroup) Clone() *ConceptMapGroup {
	if m == nil { return nil }
	return &ConceptMapGroup{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Source: m.Source.Clone(),
		SourceVersion: m.SourceVersion.Clone(),
		Target: m.Target.Clone(),
		TargetVersion: m.TargetVersion.Clone(),
		Element: cloneSlices(m.Element),
		Unmapped: m.Unmapped.Clone(),
	}
}

// Equals checks for equality with another ConceptMapGroup instance
func (m *ConceptMapGroup) Equals(other *ConceptMapGroup) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Source.Equals(other.Source) { return false }
	if !m.SourceVersion.Equals(other.SourceVersion) { return false }
	if !m.Target.Equals(other.Target) { return false }
	if !m.TargetVersion.Equals(other.TargetVersion) { return false }
	if !compareSlices(m.Element, other.Element) { return false }
	if !m.Unmapped.Equals(other.Unmapped) { return false }
	return true
}

// ConceptMapElement
// Mappings for an individual concept in the source to one or more concepts in the target.
type ConceptMapElement struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *FhirCode `json:"code,omitempty"`
	Display *FhirString `json:"display,omitempty"`
	Target []*ConceptMapTarget `json:"target,omitempty"`
}

// NewConceptMapElement creates a new ConceptMapElement instance
func NewConceptMapElement() *ConceptMapElement {
	return &ConceptMapElement{}
}

// FromJSON populates ConceptMapElement from JSON data
func (m *ConceptMapElement) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ConceptMapElement to JSON data
func (m *ConceptMapElement) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ConceptMapElement
func (m *ConceptMapElement) Clone() *ConceptMapElement {
	if m == nil { return nil }
	return &ConceptMapElement{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		Display: m.Display.Clone(),
		Target: cloneSlices(m.Target),
	}
}

// Equals checks for equality with another ConceptMapElement instance
func (m *ConceptMapElement) Equals(other *ConceptMapElement) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Display.Equals(other.Display) { return false }
	if !compareSlices(m.Target, other.Target) { return false }
	return true
}

// ConceptMapTarget
// A concept from the target value set that this concept maps to.
type ConceptMapTarget struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *FhirCode `json:"code,omitempty"`
	Display *FhirString `json:"display,omitempty"`
	Equivalence *ConceptMapEquivalence `json:"equivalence,omitempty"`
	Comment *FhirString `json:"comment,omitempty"`
	DependsOn []*ConceptMapDependsOn `json:"dependson,omitempty"`
	Product []*ConceptMapDependsOn `json:"product,omitempty"`
}

// NewConceptMapTarget creates a new ConceptMapTarget instance
func NewConceptMapTarget() *ConceptMapTarget {
	return &ConceptMapTarget{}
}

// FromJSON populates ConceptMapTarget from JSON data
func (m *ConceptMapTarget) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ConceptMapTarget to JSON data
func (m *ConceptMapTarget) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ConceptMapTarget
func (m *ConceptMapTarget) Clone() *ConceptMapTarget {
	if m == nil { return nil }
	return &ConceptMapTarget{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		Display: m.Display.Clone(),
		Equivalence: m.Equivalence.Clone(),
		Comment: m.Comment.Clone(),
		DependsOn: cloneSlices(m.DependsOn),
		Product: cloneSlices(m.Product),
	}
}

// Equals checks for equality with another ConceptMapTarget instance
func (m *ConceptMapTarget) Equals(other *ConceptMapTarget) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Display.Equals(other.Display) { return false }
	if !m.Equivalence.Equals(other.Equivalence) { return false }
	if !m.Comment.Equals(other.Comment) { return false }
	if !compareSlices(m.DependsOn, other.DependsOn) { return false }
	if !compareSlices(m.Product, other.Product) { return false }
	return true
}

// ConceptMapDependsOn
// A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.
type ConceptMapDependsOn struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Property *FhirUri `json:"property,omitempty"`
	System *FhirCanonical `json:"system,omitempty"`
	Value *FhirString `json:"value,omitempty"`
	Display *FhirString `json:"display,omitempty"`
}

// NewConceptMapDependsOn creates a new ConceptMapDependsOn instance
func NewConceptMapDependsOn() *ConceptMapDependsOn {
	return &ConceptMapDependsOn{}
}

// FromJSON populates ConceptMapDependsOn from JSON data
func (m *ConceptMapDependsOn) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ConceptMapDependsOn to JSON data
func (m *ConceptMapDependsOn) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ConceptMapDependsOn
func (m *ConceptMapDependsOn) Clone() *ConceptMapDependsOn {
	if m == nil { return nil }
	return &ConceptMapDependsOn{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Property: m.Property.Clone(),
		System: m.System.Clone(),
		Value: m.Value.Clone(),
		Display: m.Display.Clone(),
	}
}

// Equals checks for equality with another ConceptMapDependsOn instance
func (m *ConceptMapDependsOn) Equals(other *ConceptMapDependsOn) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Property.Equals(other.Property) { return false }
	if !m.System.Equals(other.System) { return false }
	if !m.Value.Equals(other.Value) { return false }
	if !m.Display.Equals(other.Display) { return false }
	return true
}

// ConceptMapUnmapped
// What to do when there is no mapping for the source concept. "Unmapped" does not include codes that are unmatched, and the unmapped element is ignored in a code is specified to have equivalence = unmatched.
type ConceptMapUnmapped struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Mode *ConceptMapGroupUnmappedMode `json:"mode,omitempty"`
	Code *FhirCode `json:"code,omitempty"`
	Display *FhirString `json:"display,omitempty"`
	Url *FhirCanonical `json:"url,omitempty"`
}

// NewConceptMapUnmapped creates a new ConceptMapUnmapped instance
func NewConceptMapUnmapped() *ConceptMapUnmapped {
	return &ConceptMapUnmapped{}
}

// FromJSON populates ConceptMapUnmapped from JSON data
func (m *ConceptMapUnmapped) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ConceptMapUnmapped to JSON data
func (m *ConceptMapUnmapped) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ConceptMapUnmapped
func (m *ConceptMapUnmapped) Clone() *ConceptMapUnmapped {
	if m == nil { return nil }
	return &ConceptMapUnmapped{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Mode: m.Mode.Clone(),
		Code: m.Code.Clone(),
		Display: m.Display.Clone(),
		Url: m.Url.Clone(),
	}
}

// Equals checks for equality with another ConceptMapUnmapped instance
func (m *ConceptMapUnmapped) Equals(other *ConceptMapUnmapped) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Mode.Equals(other.Mode) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Display.Equals(other.Display) { return false }
	if !m.Url.Equals(other.Url) { return false }
	return true
}

