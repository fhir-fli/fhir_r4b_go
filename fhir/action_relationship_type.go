// Code generated by FHIR Generator. DO NOT EDIT.
// Defines the types of relationships between actions.
package fhir_r4b_go

// ActionRelationshipType represents the FHIR ValueSet as an enumeration
type ActionRelationshipType int

const (
	// Before Start: The action must be performed before the start of the related action.
	ActionRelationshipType_Before_start ActionRelationshipType = iota
	// Before: The action must be performed before the related action.
	ActionRelationshipType_Before ActionRelationshipType = iota
	// Before End: The action must be performed before the end of the related action.
	ActionRelationshipType_Before_end ActionRelationshipType = iota
	// Concurrent With Start: The action must be performed concurrent with the start of the related action.
	ActionRelationshipType_Concurrent_with_start ActionRelationshipType = iota
	// Concurrent: The action must be performed concurrent with the related action.
	ActionRelationshipType_Concurrent ActionRelationshipType = iota
	// Concurrent With End: The action must be performed concurrent with the end of the related action.
	ActionRelationshipType_Concurrent_with_end ActionRelationshipType = iota
	// After Start: The action must be performed after the start of the related action.
	ActionRelationshipType_After_start ActionRelationshipType = iota
	// After: The action must be performed after the related action.
	ActionRelationshipType_After ActionRelationshipType = iota
	// After End: The action must be performed after the end of the related action.
	ActionRelationshipType_After_end ActionRelationshipType = iota
)

// String converts the enum to its string representation
func (e ActionRelationshipType) String() string {
	switch e {
	case ActionRelationshipType_Before_start: return "Before Start"
	case ActionRelationshipType_Before: return "Before"
	case ActionRelationshipType_Before_end: return "Before End"
	case ActionRelationshipType_Concurrent_with_start: return "Concurrent With Start"
	case ActionRelationshipType_Concurrent: return "Concurrent"
	case ActionRelationshipType_Concurrent_with_end: return "Concurrent With End"
	case ActionRelationshipType_After_start: return "After Start"
	case ActionRelationshipType_After: return "After"
	case ActionRelationshipType_After_end: return "After End"
	default: return "Unknown"
	}
}

