// Code generated by FHIR Generator. DO NOT EDIT.
// Types of combining results from a body of evidence (eg. summary data meta-analysis).
package fhir_r4b_go

// SynthesisType represents the FHIR ValueSet as an enumeration
type SynthesisType int

const (
	// summary data meta-analysis: A meta-analysis of the summary data of estimates from individual studies or data sets.
	SynthesisType_Std_MA SynthesisType = iota
	// individual patient data meta-analysis: A meta-analysis of the individual participant data from individual studies or data sets.
	SynthesisType_IPD_MA SynthesisType = iota
	// indirect network meta-analysis: An indirect meta-analysis derived from 2 or more direct comparisons in a network meta-analysis.
	SynthesisType_Indirect_NMA SynthesisType = iota
	// combined direct plus indirect network meta-analysis: An composite meta-analysis derived from direct comparisons and indirect comparisons in a network meta-analysis.
	SynthesisType_Combined_NMA SynthesisType = iota
	// range of results: A range of results across a body of evidence.
	SynthesisType_Range SynthesisType = iota
	// classifcation of results: An approach describing a body of evidence by categorically classifying individual studies (eg 3 studies showed beneft and 2 studied found no effect).
	SynthesisType_Classification SynthesisType = iota
	// not applicable: Not applicable because the evidence is not from a synthesis but from a single study. Used fo explicitly state that it's not a synthesis.
	SynthesisType_NotApplicable SynthesisType = iota
)

// String converts the enum to its string representation
func (e SynthesisType) String() string {
	switch e {
	case SynthesisType_Std_MA: return "summary data meta-analysis"
	case SynthesisType_IPD_MA: return "individual patient data meta-analysis"
	case SynthesisType_Indirect_NMA: return "indirect network meta-analysis"
	case SynthesisType_Combined_NMA: return "combined direct plus indirect network meta-analysis"
	case SynthesisType_Range: return "range of results"
	case SynthesisType_Classification: return "classifcation of results"
	case SynthesisType_NotApplicable: return "not applicable"
	default: return "Unknown"
	}
}

