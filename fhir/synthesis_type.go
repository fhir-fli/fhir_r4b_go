// Code generated by FHIR Generator. DO NOT EDIT.
// Types of combining results from a body of evidence (eg. summary data meta-analysis).
package fhir_r4b_go
// SynthesisType represents the FHIR ValueSet as an enumeration
type SynthesisType struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	SynthesisType_Std_MA = "std-MA" // summary data meta-analysis: A meta-analysis of the summary data of estimates from individual studies or data sets.
	SynthesisType_IPD_MA = "IPD-MA" // individual patient data meta-analysis: A meta-analysis of the individual participant data from individual studies or data sets.
	SynthesisType_Indirect_NMA = "indirect-NMA" // indirect network meta-analysis: An indirect meta-analysis derived from 2 or more direct comparisons in a network meta-analysis.
	SynthesisType_Combined_NMA = "combined-NMA" // combined direct plus indirect network meta-analysis: An composite meta-analysis derived from direct comparisons and indirect comparisons in a network meta-analysis.
	SynthesisType_Range = "range" // range of results: A range of results across a body of evidence.
	SynthesisType_Classification = "classification" // classifcation of results: An approach describing a body of evidence by categorically classifying individual studies (eg 3 studies showed beneft and 2 studied found no effect).
	SynthesisType_NotApplicable = "NotApplicable" // not applicable: Not applicable because the evidence is not from a synthesis but from a single study. Used fo explicitly state that it's not a synthesis.
)

// Clone creates a deep copy of the enum
func (e SynthesisType) Clone() *SynthesisType {
	return &SynthesisType{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *SynthesisType) Equals(other *SynthesisType) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

