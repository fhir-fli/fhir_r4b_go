// Code generated by FHIR Generator. DO NOT EDIT.
// A set of flags that defines how references are supported.
package fhir_r4b_go
// ReferenceHandlingPolicy represents the FHIR ValueSet as an enumeration
type ReferenceHandlingPolicy struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	ReferenceHandlingPolicy_Literal = "literal" // Literal References: The server supports and populates Literal references (i.e. using Reference.reference) where they are known (this code does not guarantee that all references are literal; see 'enforced').
	ReferenceHandlingPolicy_Logical = "logical" // Logical References: The server allows logical references (i.e. using Reference.identifier).
	ReferenceHandlingPolicy_Resolves = "resolves" // Resolves References: The server will attempt to resolve logical references to literal references - i.e. converting Reference.identifier to Reference.reference (if resolution fails, the server may still accept resources; see logical).
	ReferenceHandlingPolicy_Enforced = "enforced" // Reference Integrity Enforced: The server enforces that references have integrity - e.g. it ensures that references can always be resolved. This is typically the case for clinical record systems, but often not the case for middleware/proxy systems.
	ReferenceHandlingPolicy_Local = "local" // Local References Only: The server does not support references that point to other servers.
)

// Clone creates a deep copy of the enum
func (e ReferenceHandlingPolicy) Clone() *ReferenceHandlingPolicy {
	return &ReferenceHandlingPolicy{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *ReferenceHandlingPolicy) Equals(other *ReferenceHandlingPolicy) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

