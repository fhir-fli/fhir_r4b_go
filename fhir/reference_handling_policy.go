// Code generated by FHIR Generator. DO NOT EDIT.
// A set of flags that defines how references are supported.
package fhir_r4b_go

// ReferenceHandlingPolicy represents the FHIR ValueSet as an enumeration
type ReferenceHandlingPolicy int

const (
	// Literal References: The server supports and populates Literal references (i.e. using Reference.reference) where they are known (this code does not guarantee that all references are literal; see 'enforced').
	ReferenceHandlingPolicy_Literal ReferenceHandlingPolicy = iota
	// Logical References: The server allows logical references (i.e. using Reference.identifier).
	ReferenceHandlingPolicy_Logical ReferenceHandlingPolicy = iota
	// Resolves References: The server will attempt to resolve logical references to literal references - i.e. converting Reference.identifier to Reference.reference (if resolution fails, the server may still accept resources; see logical).
	ReferenceHandlingPolicy_Resolves ReferenceHandlingPolicy = iota
	// Reference Integrity Enforced: The server enforces that references have integrity - e.g. it ensures that references can always be resolved. This is typically the case for clinical record systems, but often not the case for middleware/proxy systems.
	ReferenceHandlingPolicy_Enforced ReferenceHandlingPolicy = iota
	// Local References Only: The server does not support references that point to other servers.
	ReferenceHandlingPolicy_Local ReferenceHandlingPolicy = iota
)

// String converts the enum to its string representation
func (e ReferenceHandlingPolicy) String() string {
	switch e {
	case ReferenceHandlingPolicy_Literal: return "Literal References"
	case ReferenceHandlingPolicy_Logical: return "Logical References"
	case ReferenceHandlingPolicy_Resolves: return "Resolves References"
	case ReferenceHandlingPolicy_Enforced: return "Reference Integrity Enforced"
	case ReferenceHandlingPolicy_Local: return "Local References Only"
	default: return "Unknown"
	}
}

