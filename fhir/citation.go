// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// Citation
// The Citation Resource enables reference to any knowledge artifact for purposes of identification and attribution. The Citation Resource supports existing reference structures and developing publication practices such as versioning, expressing complex contributorship roles, and referencing computable resources.
type Citation struct {
	DomainResource
	// id
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Id FhirString `json:"id,omitempty"`
	// meta
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta FhirMeta `json:"meta,omitempty"`
	// implicitRules
	// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ImplicitRules FhirUri `json:"implicitRules,omitempty"`
	// language
	// The base language in which the resource is written.
	Language CommonLanguages `json:"language,omitempty"`
	// text
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text Narrative `json:"text,omitempty"`
	// contained
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []Resource `json:"contained,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// url
	// An absolute URI that is used to identify this citation when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this summary is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the summary is stored on different servers.
	Url FhirUri `json:"url,omitempty"`
	// identifier
	// A formal identifier that is used to identify this citation when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Identifier []Identifier `json:"identifier,omitempty"`
	// version
	// The identifier that is used to identify this version of the citation when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the citation author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Version FhirString `json:"version,omitempty"`
	// name
	// A natural language name identifying the citation. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Name FhirString `json:"name,omitempty"`
	// title
	// A short, descriptive, user-friendly title for the citation.
	Title FhirString `json:"title,omitempty"`
	// status
	// The status of this summary. Enables tracking the life-cycle of the content.
	Status PublicationStatus `json:"status,omitempty"`
	// experimental
	// A Boolean value to indicate that this citation is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Experimental FhirBoolean `json:"experimental,omitempty"`
	// date
	// The date  (and optionally time) when the citation was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the citation changes.
	Date FhirDateTime `json:"date,omitempty"`
	// publisher
	// The name of the organization or individual that published the citation.
	Publisher FhirString `json:"publisher,omitempty"`
	// contact
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []ContactDetail `json:"contact,omitempty"`
	// description
	// A free text natural language description of the citation from a consumer's perspective.
	Description FhirMarkdown `json:"description,omitempty"`
	// useContext
	// The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate citation instances.
	UseContext []UsageContext `json:"useContext,omitempty"`
	// jurisdiction
	// A legal or geographic region in which the citation is intended to be used.
	Jurisdiction []CodeableConcept `json:"jurisdiction,omitempty"`
	// purpose
	// Explanation of why this citation is needed and why it has been designed as it has.
	Purpose FhirMarkdown `json:"purpose,omitempty"`
	// copyright
	// Use and/or publishing restrictions for the Citation, not for the cited artifact.
	Copyright FhirMarkdown `json:"copyright,omitempty"`
	// approvalDate
	// The date on which the resource content was approved by the publisher. Approval happens once when the content is officially approved for usage.
	ApprovalDate FhirDate `json:"approvalDate,omitempty"`
	// lastReviewDate
	// The date on which the resource content was last reviewed. Review happens periodically after approval but does not change the original approval date.
	LastReviewDate FhirDate `json:"lastReviewDate,omitempty"`
	// effectivePeriod
	// The period during which the citation content was or is planned to be in active use.
	EffectivePeriod Period `json:"effectivePeriod,omitempty"`
	// author
	// Who authored the Citation.
	Author []ContactDetail `json:"author,omitempty"`
	// editor
	// Who edited the Citation.
	Editor []ContactDetail `json:"editor,omitempty"`
	// reviewer
	// Who reviewed the Citation.
	Reviewer []ContactDetail `json:"reviewer,omitempty"`
	// endorser
	// Who endorsed the Citation.
	Endorser []ContactDetail `json:"endorser,omitempty"`
	// summary
	// A human-readable display of the citation.
	Summary []CitationSummary `json:"summary,omitempty"`
	// classification
	// The assignment to an organizing scheme.
	Classification []CitationClassification `json:"classification,omitempty"`
	// note
	// Used for general notes and annotations not coded elsewhere.
	Note []Annotation `json:"note,omitempty"`
	// currentState
	// The status of the citation.
	CurrentState []CodeableConcept `json:"currentState,omitempty"`
	// statusDate
	// An effective date or period for a status of the citation.
	StatusDate []CitationStatusDate `json:"statusDate,omitempty"`
	// relatesTo
	// Artifact related to the Citation Resource.
	RelatesTo []CitationRelatesTo `json:"relatesTo,omitempty"`
	// citedArtifact
	// The article or artifact being described.
	CitedArtifact CitationCitedArtifact `json:"citedArtifact,omitempty"`
}

// NewCitation creates a new Citation instance
func NewCitation(
	id FhirString,
	meta FhirMeta,
	implicitRules FhirUri,
	language CommonLanguages,
	text Narrative,
	contained []Resource,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	url FhirUri,
	identifier []Identifier,
	version FhirString,
	name FhirString,
	title FhirString,
	status PublicationStatus,
	experimental FhirBoolean,
	date FhirDateTime,
	publisher FhirString,
	contact []ContactDetail,
	description FhirMarkdown,
	useContext []UsageContext,
	jurisdiction []CodeableConcept,
	purpose FhirMarkdown,
	copyright FhirMarkdown,
	approvalDate FhirDate,
	lastReviewDate FhirDate,
	effectivePeriod Period,
	author []ContactDetail,
	editor []ContactDetail,
	reviewer []ContactDetail,
	endorser []ContactDetail,
	summary []CitationSummary,
	classification []CitationClassification,
	note []Annotation,
	currentState []CodeableConcept,
	statusDate []CitationStatusDate,
	relatesTo []CitationRelatesTo,
	citedArtifact CitationCitedArtifact,
) *Citation {
	return &Citation{
		Id: id,
		Meta: meta,
		ImplicitRules: implicitRules,
		Language: language,
		Text: text,
		Contained: contained,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Url: url,
		Identifier: identifier,
		Version: version,
		Name: name,
		Title: title,
		Status: status,
		Experimental: experimental,
		Date: date,
		Publisher: publisher,
		Contact: contact,
		Description: description,
		UseContext: useContext,
		Jurisdiction: jurisdiction,
		Purpose: purpose,
		Copyright: copyright,
		ApprovalDate: approvalDate,
		LastReviewDate: lastReviewDate,
		EffectivePeriod: effectivePeriod,
		Author: author,
		Editor: editor,
		Reviewer: reviewer,
		Endorser: endorser,
		Summary: summary,
		Classification: classification,
		Note: note,
		CurrentState: currentState,
		StatusDate: statusDate,
		RelatesTo: relatesTo,
		CitedArtifact: citedArtifact,
	}
}
// FromJSON populates Citation from JSON data
func (m *Citation) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Citation to JSON data
func (m *Citation) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of Citation
func (m *Citation) CopyWith(
	id *FhirString,
	meta *FhirMeta,
	implicitRules *FhirUri,
	language *CommonLanguages,
	text *Narrative,
	contained *[]Resource,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	url *FhirUri,
	identifier *[]Identifier,
	version *FhirString,
	name *FhirString,
	title *FhirString,
	status *PublicationStatus,
	experimental *FhirBoolean,
	date *FhirDateTime,
	publisher *FhirString,
	contact *[]ContactDetail,
	description *FhirMarkdown,
	useContext *[]UsageContext,
	jurisdiction *[]CodeableConcept,
	purpose *FhirMarkdown,
	copyright *FhirMarkdown,
	approvalDate *FhirDate,
	lastReviewDate *FhirDate,
	effectivePeriod *Period,
	author *[]ContactDetail,
	editor *[]ContactDetail,
	reviewer *[]ContactDetail,
	endorser *[]ContactDetail,
	summary *[]CitationSummary,
	classification *[]CitationClassification,
	note *[]Annotation,
	currentState *[]CodeableConcept,
	statusDate *[]CitationStatusDate,
	relatesTo *[]CitationRelatesTo,
	citedArtifact *CitationCitedArtifact,
) *Citation {
	return &Citation{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Meta: func() FhirMeta {
			if meta != nil { return *meta }
			return m.Meta
		}(),
		ImplicitRules: func() FhirUri {
			if implicitRules != nil { return *implicitRules }
			return m.ImplicitRules
		}(),
		Language: func() CommonLanguages {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() Narrative {
			if text != nil { return *text }
			return m.Text
		}(),
		Contained: func() []Resource {
			if contained != nil { return *contained }
			return m.Contained
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Url: func() FhirUri {
			if url != nil { return *url }
			return m.Url
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		Version: func() FhirString {
			if version != nil { return *version }
			return m.Version
		}(),
		Name: func() FhirString {
			if name != nil { return *name }
			return m.Name
		}(),
		Title: func() FhirString {
			if title != nil { return *title }
			return m.Title
		}(),
		Status: func() PublicationStatus {
			if status != nil { return *status }
			return m.Status
		}(),
		Experimental: func() FhirBoolean {
			if experimental != nil { return *experimental }
			return m.Experimental
		}(),
		Date: func() FhirDateTime {
			if date != nil { return *date }
			return m.Date
		}(),
		Publisher: func() FhirString {
			if publisher != nil { return *publisher }
			return m.Publisher
		}(),
		Contact: func() []ContactDetail {
			if contact != nil { return *contact }
			return m.Contact
		}(),
		Description: func() FhirMarkdown {
			if description != nil { return *description }
			return m.Description
		}(),
		UseContext: func() []UsageContext {
			if useContext != nil { return *useContext }
			return m.UseContext
		}(),
		Jurisdiction: func() []CodeableConcept {
			if jurisdiction != nil { return *jurisdiction }
			return m.Jurisdiction
		}(),
		Purpose: func() FhirMarkdown {
			if purpose != nil { return *purpose }
			return m.Purpose
		}(),
		Copyright: func() FhirMarkdown {
			if copyright != nil { return *copyright }
			return m.Copyright
		}(),
		ApprovalDate: func() FhirDate {
			if approvalDate != nil { return *approvalDate }
			return m.ApprovalDate
		}(),
		LastReviewDate: func() FhirDate {
			if lastReviewDate != nil { return *lastReviewDate }
			return m.LastReviewDate
		}(),
		EffectivePeriod: func() Period {
			if effectivePeriod != nil { return *effectivePeriod }
			return m.EffectivePeriod
		}(),
		Author: func() []ContactDetail {
			if author != nil { return *author }
			return m.Author
		}(),
		Editor: func() []ContactDetail {
			if editor != nil { return *editor }
			return m.Editor
		}(),
		Reviewer: func() []ContactDetail {
			if reviewer != nil { return *reviewer }
			return m.Reviewer
		}(),
		Endorser: func() []ContactDetail {
			if endorser != nil { return *endorser }
			return m.Endorser
		}(),
		Summary: func() []CitationSummary {
			if summary != nil { return *summary }
			return m.Summary
		}(),
		Classification: func() []CitationClassification {
			if classification != nil { return *classification }
			return m.Classification
		}(),
		Note: func() []Annotation {
			if note != nil { return *note }
			return m.Note
		}(),
		CurrentState: func() []CodeableConcept {
			if currentState != nil { return *currentState }
			return m.CurrentState
		}(),
		StatusDate: func() []CitationStatusDate {
			if statusDate != nil { return *statusDate }
			return m.StatusDate
		}(),
		RelatesTo: func() []CitationRelatesTo {
			if relatesTo != nil { return *relatesTo }
			return m.RelatesTo
		}(),
		CitedArtifact: func() CitationCitedArtifact {
			if citedArtifact != nil { return *citedArtifact }
			return m.CitedArtifact
		}(),
	}
}
// CitationSummary
// A human-readable display of the citation.
type CitationSummary struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// style
	// Format for display of the citation.
	Style CodeableConcept `json:"style,omitempty"`
	// text
	// The human-readable display of the citation.
	Text FhirMarkdown `json:"text,omitempty"`
}

// NewCitationSummary creates a new CitationSummary instance
func NewCitationSummary(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	style CodeableConcept,
	text FhirMarkdown,
) *CitationSummary {
	return &CitationSummary{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Style: style,
		Text: text,
	}
}
// FromJSON populates CitationSummary from JSON data
func (m *CitationSummary) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationSummary to JSON data
func (m *CitationSummary) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationSummary
func (m *CitationSummary) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	style *CodeableConcept,
	text *FhirMarkdown,
) *CitationSummary {
	return &CitationSummary{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Style: func() CodeableConcept {
			if style != nil { return *style }
			return m.Style
		}(),
		Text: func() FhirMarkdown {
			if text != nil { return *text }
			return m.Text
		}(),
	}
}
// CitationClassification
// The assignment to an organizing scheme.
type CitationClassification struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// The kind of classifier (e.g. publication type, keyword).
	Type_ CodeableConcept `json:"type,omitempty"`
	// classifier
	// The specific classification value.
	Classifier []CodeableConcept `json:"classifier,omitempty"`
}

// NewCitationClassification creates a new CitationClassification instance
func NewCitationClassification(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ CodeableConcept,
	classifier []CodeableConcept,
) *CitationClassification {
	return &CitationClassification{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		Classifier: classifier,
	}
}
// FromJSON populates CitationClassification from JSON data
func (m *CitationClassification) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationClassification to JSON data
func (m *CitationClassification) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationClassification
func (m *CitationClassification) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *CodeableConcept,
	classifier *[]CodeableConcept,
) *CitationClassification {
	return &CitationClassification{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Classifier: func() []CodeableConcept {
			if classifier != nil { return *classifier }
			return m.Classifier
		}(),
	}
}
// CitationStatusDate
// An effective date or period for a status of the citation.
type CitationStatusDate struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// activity
	// Classification of the status.
	Activity CodeableConcept `json:"activity,omitempty"`
	// actual
	// Either occurred or expected.
	Actual FhirBoolean `json:"actual,omitempty"`
	// period
	// When the status started and/or ended.
	Period Period `json:"period,omitempty"`
}

// NewCitationStatusDate creates a new CitationStatusDate instance
func NewCitationStatusDate(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	activity CodeableConcept,
	actual FhirBoolean,
	period Period,
) *CitationStatusDate {
	return &CitationStatusDate{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Activity: activity,
		Actual: actual,
		Period: period,
	}
}
// FromJSON populates CitationStatusDate from JSON data
func (m *CitationStatusDate) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationStatusDate to JSON data
func (m *CitationStatusDate) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationStatusDate
func (m *CitationStatusDate) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	activity *CodeableConcept,
	actual *FhirBoolean,
	period *Period,
) *CitationStatusDate {
	return &CitationStatusDate{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Activity: func() CodeableConcept {
			if activity != nil { return *activity }
			return m.Activity
		}(),
		Actual: func() FhirBoolean {
			if actual != nil { return *actual }
			return m.Actual
		}(),
		Period: func() Period {
			if period != nil { return *period }
			return m.Period
		}(),
	}
}
// CitationRelatesTo
// Artifact related to the Citation Resource.
type CitationRelatesTo struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// relationshipType
	// How the Citation resource relates to the target artifact.
	RelationshipType CodeableConcept `json:"relationshipType,omitempty"`
	// targetClassifier
	// The clasification of the related artifact.
	TargetClassifier []CodeableConcept `json:"targetClassifier,omitempty"`
	// targetUri
	// The article or artifact that the Citation Resource is related to.
	TargetUri FhirUri `json:"targetUri,omitempty"`
	// targetIdentifier
	// The article or artifact that the Citation Resource is related to.
	TargetIdentifier Identifier `json:"targetIdentifier,omitempty"`
	// targetReference
	// The article or artifact that the Citation Resource is related to.
	TargetReference Reference `json:"targetReference,omitempty"`
	// targetAttachment
	// The article or artifact that the Citation Resource is related to.
	TargetAttachment Attachment `json:"targetAttachment,omitempty"`
}

// NewCitationRelatesTo creates a new CitationRelatesTo instance
func NewCitationRelatesTo(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	relationshipType CodeableConcept,
	targetClassifier []CodeableConcept,
	targetUri FhirUri,
	targetIdentifier Identifier,
	targetReference Reference,
	targetAttachment Attachment,
) *CitationRelatesTo {
	return &CitationRelatesTo{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		RelationshipType: relationshipType,
		TargetClassifier: targetClassifier,
		TargetUri: targetUri,
		TargetIdentifier: targetIdentifier,
		TargetReference: targetReference,
		TargetAttachment: targetAttachment,
	}
}
// FromJSON populates CitationRelatesTo from JSON data
func (m *CitationRelatesTo) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationRelatesTo to JSON data
func (m *CitationRelatesTo) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationRelatesTo
func (m *CitationRelatesTo) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	relationshipType *CodeableConcept,
	targetClassifier *[]CodeableConcept,
	targetUri *FhirUri,
	targetIdentifier *Identifier,
	targetReference *Reference,
	targetAttachment *Attachment,
) *CitationRelatesTo {
	return &CitationRelatesTo{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		RelationshipType: func() CodeableConcept {
			if relationshipType != nil { return *relationshipType }
			return m.RelationshipType
		}(),
		TargetClassifier: func() []CodeableConcept {
			if targetClassifier != nil { return *targetClassifier }
			return m.TargetClassifier
		}(),
		TargetUri: func() FhirUri {
			if targetUri != nil { return *targetUri }
			return m.TargetUri
		}(),
		TargetIdentifier: func() Identifier {
			if targetIdentifier != nil { return *targetIdentifier }
			return m.TargetIdentifier
		}(),
		TargetReference: func() Reference {
			if targetReference != nil { return *targetReference }
			return m.TargetReference
		}(),
		TargetAttachment: func() Attachment {
			if targetAttachment != nil { return *targetAttachment }
			return m.TargetAttachment
		}(),
	}
}
// CitationCitedArtifact
// The article or artifact being described.
type CitationCitedArtifact struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// identifier
	// A formal identifier that is used to identify this citation when it is represented in other formats, or referenced in a specification, model, design or an instance.
	Identifier []Identifier `json:"identifier,omitempty"`
	// relatedIdentifier
	// A formal identifier that is used to identify things closely related to this citation.
	RelatedIdentifier []Identifier `json:"relatedIdentifier,omitempty"`
	// dateAccessed
	// When the cited artifact was accessed.
	DateAccessed FhirDateTime `json:"dateAccessed,omitempty"`
	// version
	// The defined version of the cited artifact.
	Version CitationVersion `json:"version,omitempty"`
	// currentState
	// The status of the cited artifact.
	CurrentState []CodeableConcept `json:"currentState,omitempty"`
	// statusDate
	// An effective date or period for a status of the cited artifact.
	StatusDate []CitationStatusDate `json:"statusDate,omitempty"`
	// title
	// The title details of the article or artifact.
	Title []CitationTitle `json:"title,omitempty"`
	// abstract
	// Summary of the article or artifact.
	Abstract_ []CitationAbstract `json:"abstract,omitempty"`
	// part
	// The component of the article or artifact.
	Part_ CitationPart `json:"part,omitempty"`
	// relatesTo
	// The artifact related to the cited artifact.
	RelatesTo []CitationRelatesTo `json:"relatesTo,omitempty"`
	// publicationForm
	// If multiple, used to represent alternative forms of the article that are not separate citations.
	PublicationForm []CitationPublicationForm `json:"publicationForm,omitempty"`
	// webLocation
	// Used for any URL for the article or artifact cited.
	WebLocation []CitationWebLocation `json:"webLocation,omitempty"`
	// classification
	// The assignment to an organizing scheme.
	Classification []CitationClassification `json:"classification,omitempty"`
	// contributorship
	// This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements.
	Contributorship CitationContributorship `json:"contributorship,omitempty"`
	// note
	// Any additional information or content for the article or artifact.
	Note []Annotation `json:"note,omitempty"`
}

// NewCitationCitedArtifact creates a new CitationCitedArtifact instance
func NewCitationCitedArtifact(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	identifier []Identifier,
	relatedIdentifier []Identifier,
	dateAccessed FhirDateTime,
	version CitationVersion,
	currentState []CodeableConcept,
	statusDate []CitationStatusDate,
	title []CitationTitle,
	abstract_ []CitationAbstract,
	part_ CitationPart,
	relatesTo []CitationRelatesTo,
	publicationForm []CitationPublicationForm,
	webLocation []CitationWebLocation,
	classification []CitationClassification,
	contributorship CitationContributorship,
	note []Annotation,
) *CitationCitedArtifact {
	return &CitationCitedArtifact{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Identifier: identifier,
		RelatedIdentifier: relatedIdentifier,
		DateAccessed: dateAccessed,
		Version: version,
		CurrentState: currentState,
		StatusDate: statusDate,
		Title: title,
		Abstract_: abstract_,
		Part_: part_,
		RelatesTo: relatesTo,
		PublicationForm: publicationForm,
		WebLocation: webLocation,
		Classification: classification,
		Contributorship: contributorship,
		Note: note,
	}
}
// FromJSON populates CitationCitedArtifact from JSON data
func (m *CitationCitedArtifact) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationCitedArtifact to JSON data
func (m *CitationCitedArtifact) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationCitedArtifact
func (m *CitationCitedArtifact) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	identifier *[]Identifier,
	relatedIdentifier *[]Identifier,
	dateAccessed *FhirDateTime,
	version *CitationVersion,
	currentState *[]CodeableConcept,
	statusDate *[]CitationStatusDate,
	title *[]CitationTitle,
	abstract_ *[]CitationAbstract,
	part_ *CitationPart,
	relatesTo *[]CitationRelatesTo,
	publicationForm *[]CitationPublicationForm,
	webLocation *[]CitationWebLocation,
	classification *[]CitationClassification,
	contributorship *CitationContributorship,
	note *[]Annotation,
) *CitationCitedArtifact {
	return &CitationCitedArtifact{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		RelatedIdentifier: func() []Identifier {
			if relatedIdentifier != nil { return *relatedIdentifier }
			return m.RelatedIdentifier
		}(),
		DateAccessed: func() FhirDateTime {
			if dateAccessed != nil { return *dateAccessed }
			return m.DateAccessed
		}(),
		Version: func() CitationVersion {
			if version != nil { return *version }
			return m.Version
		}(),
		CurrentState: func() []CodeableConcept {
			if currentState != nil { return *currentState }
			return m.CurrentState
		}(),
		StatusDate: func() []CitationStatusDate {
			if statusDate != nil { return *statusDate }
			return m.StatusDate
		}(),
		Title: func() []CitationTitle {
			if title != nil { return *title }
			return m.Title
		}(),
		Abstract_: func() []CitationAbstract {
			if abstract_ != nil { return *abstract_ }
			return m.Abstract_
		}(),
		Part_: func() CitationPart {
			if part_ != nil { return *part_ }
			return m.Part_
		}(),
		RelatesTo: func() []CitationRelatesTo {
			if relatesTo != nil { return *relatesTo }
			return m.RelatesTo
		}(),
		PublicationForm: func() []CitationPublicationForm {
			if publicationForm != nil { return *publicationForm }
			return m.PublicationForm
		}(),
		WebLocation: func() []CitationWebLocation {
			if webLocation != nil { return *webLocation }
			return m.WebLocation
		}(),
		Classification: func() []CitationClassification {
			if classification != nil { return *classification }
			return m.Classification
		}(),
		Contributorship: func() CitationContributorship {
			if contributorship != nil { return *contributorship }
			return m.Contributorship
		}(),
		Note: func() []Annotation {
			if note != nil { return *note }
			return m.Note
		}(),
	}
}
// CitationVersion
// The defined version of the cited artifact.
type CitationVersion struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// value
	// The version number or other version identifier.
	Value FhirString `json:"value,omitempty"`
	// baseCitation
	// Citation for the main version of the cited artifact.
	BaseCitation Reference `json:"baseCitation,omitempty"`
}

// NewCitationVersion creates a new CitationVersion instance
func NewCitationVersion(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	value FhirString,
	baseCitation Reference,
) *CitationVersion {
	return &CitationVersion{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Value: value,
		BaseCitation: baseCitation,
	}
}
// FromJSON populates CitationVersion from JSON data
func (m *CitationVersion) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationVersion to JSON data
func (m *CitationVersion) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationVersion
func (m *CitationVersion) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	value *FhirString,
	baseCitation *Reference,
) *CitationVersion {
	return &CitationVersion{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Value: func() FhirString {
			if value != nil { return *value }
			return m.Value
		}(),
		BaseCitation: func() Reference {
			if baseCitation != nil { return *baseCitation }
			return m.BaseCitation
		}(),
	}
}
// CitationStatusDate1
// An effective date or period for a status of the cited artifact.
type CitationStatusDate1 struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// activity
	// Classification of the status.
	Activity CodeableConcept `json:"activity,omitempty"`
	// actual
	// Either occurred or expected.
	Actual FhirBoolean `json:"actual,omitempty"`
	// period
	// When the status started and/or ended.
	Period Period `json:"period,omitempty"`
}

// NewCitationStatusDate1 creates a new CitationStatusDate1 instance
func NewCitationStatusDate1(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	activity CodeableConcept,
	actual FhirBoolean,
	period Period,
) *CitationStatusDate1 {
	return &CitationStatusDate1{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Activity: activity,
		Actual: actual,
		Period: period,
	}
}
// FromJSON populates CitationStatusDate1 from JSON data
func (m *CitationStatusDate1) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationStatusDate1 to JSON data
func (m *CitationStatusDate1) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationStatusDate1
func (m *CitationStatusDate1) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	activity *CodeableConcept,
	actual *FhirBoolean,
	period *Period,
) *CitationStatusDate1 {
	return &CitationStatusDate1{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Activity: func() CodeableConcept {
			if activity != nil { return *activity }
			return m.Activity
		}(),
		Actual: func() FhirBoolean {
			if actual != nil { return *actual }
			return m.Actual
		}(),
		Period: func() Period {
			if period != nil { return *period }
			return m.Period
		}(),
	}
}
// CitationTitle
// The title details of the article or artifact.
type CitationTitle struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// Used to express the reason or specific aspect for the title.
	Type_ []CodeableConcept `json:"type,omitempty"`
	// language
	// Used to express the specific language.
	Language CodeableConcept `json:"language,omitempty"`
	// text
	// The title of the article or artifact.
	Text FhirMarkdown `json:"text,omitempty"`
}

// NewCitationTitle creates a new CitationTitle instance
func NewCitationTitle(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ []CodeableConcept,
	language CodeableConcept,
	text FhirMarkdown,
) *CitationTitle {
	return &CitationTitle{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		Language: language,
		Text: text,
	}
}
// FromJSON populates CitationTitle from JSON data
func (m *CitationTitle) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationTitle to JSON data
func (m *CitationTitle) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationTitle
func (m *CitationTitle) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *[]CodeableConcept,
	language *CodeableConcept,
	text *FhirMarkdown,
) *CitationTitle {
	return &CitationTitle{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() []CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Language: func() CodeableConcept {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() FhirMarkdown {
			if text != nil { return *text }
			return m.Text
		}(),
	}
}
// CitationAbstract
// Summary of the article or artifact.
type CitationAbstract struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// Used to express the reason or specific aspect for the abstract.
	Type_ CodeableConcept `json:"type,omitempty"`
	// language
	// Used to express the specific language.
	Language CodeableConcept `json:"language,omitempty"`
	// text
	// Abstract content.
	Text FhirMarkdown `json:"text,omitempty"`
	// copyright
	// Copyright notice for the abstract.
	Copyright FhirMarkdown `json:"copyright,omitempty"`
}

// NewCitationAbstract creates a new CitationAbstract instance
func NewCitationAbstract(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ CodeableConcept,
	language CodeableConcept,
	text FhirMarkdown,
	copyright FhirMarkdown,
) *CitationAbstract {
	return &CitationAbstract{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		Language: language,
		Text: text,
		Copyright: copyright,
	}
}
// FromJSON populates CitationAbstract from JSON data
func (m *CitationAbstract) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationAbstract to JSON data
func (m *CitationAbstract) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationAbstract
func (m *CitationAbstract) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *CodeableConcept,
	language *CodeableConcept,
	text *FhirMarkdown,
	copyright *FhirMarkdown,
) *CitationAbstract {
	return &CitationAbstract{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Language: func() CodeableConcept {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() FhirMarkdown {
			if text != nil { return *text }
			return m.Text
		}(),
		Copyright: func() FhirMarkdown {
			if copyright != nil { return *copyright }
			return m.Copyright
		}(),
	}
}
// CitationPart
// The component of the article or artifact.
type CitationPart struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// The kind of component.
	Type_ CodeableConcept `json:"type,omitempty"`
	// value
	// The specification of the component.
	Value FhirString `json:"value,omitempty"`
	// baseCitation
	// The citation for the full article or artifact.
	BaseCitation Reference `json:"baseCitation,omitempty"`
}

// NewCitationPart creates a new CitationPart instance
func NewCitationPart(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ CodeableConcept,
	value FhirString,
	baseCitation Reference,
) *CitationPart {
	return &CitationPart{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		Value: value,
		BaseCitation: baseCitation,
	}
}
// FromJSON populates CitationPart from JSON data
func (m *CitationPart) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationPart to JSON data
func (m *CitationPart) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationPart
func (m *CitationPart) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *CodeableConcept,
	value *FhirString,
	baseCitation *Reference,
) *CitationPart {
	return &CitationPart{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Value: func() FhirString {
			if value != nil { return *value }
			return m.Value
		}(),
		BaseCitation: func() Reference {
			if baseCitation != nil { return *baseCitation }
			return m.BaseCitation
		}(),
	}
}
// CitationRelatesTo1
// The artifact related to the cited artifact.
type CitationRelatesTo1 struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// relationshipType
	// How the cited artifact relates to the target artifact.
	RelationshipType CodeableConcept `json:"relationshipType,omitempty"`
	// targetClassifier
	// The clasification of the related artifact.
	TargetClassifier []CodeableConcept `json:"targetClassifier,omitempty"`
	// targetUri
	// The article or artifact that the cited artifact is related to.
	TargetUri FhirUri `json:"targetUri,omitempty"`
	// targetIdentifier
	// The article or artifact that the cited artifact is related to.
	TargetIdentifier Identifier `json:"targetIdentifier,omitempty"`
	// targetReference
	// The article or artifact that the cited artifact is related to.
	TargetReference Reference `json:"targetReference,omitempty"`
	// targetAttachment
	// The article or artifact that the cited artifact is related to.
	TargetAttachment Attachment `json:"targetAttachment,omitempty"`
}

// NewCitationRelatesTo1 creates a new CitationRelatesTo1 instance
func NewCitationRelatesTo1(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	relationshipType CodeableConcept,
	targetClassifier []CodeableConcept,
	targetUri FhirUri,
	targetIdentifier Identifier,
	targetReference Reference,
	targetAttachment Attachment,
) *CitationRelatesTo1 {
	return &CitationRelatesTo1{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		RelationshipType: relationshipType,
		TargetClassifier: targetClassifier,
		TargetUri: targetUri,
		TargetIdentifier: targetIdentifier,
		TargetReference: targetReference,
		TargetAttachment: targetAttachment,
	}
}
// FromJSON populates CitationRelatesTo1 from JSON data
func (m *CitationRelatesTo1) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationRelatesTo1 to JSON data
func (m *CitationRelatesTo1) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationRelatesTo1
func (m *CitationRelatesTo1) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	relationshipType *CodeableConcept,
	targetClassifier *[]CodeableConcept,
	targetUri *FhirUri,
	targetIdentifier *Identifier,
	targetReference *Reference,
	targetAttachment *Attachment,
) *CitationRelatesTo1 {
	return &CitationRelatesTo1{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		RelationshipType: func() CodeableConcept {
			if relationshipType != nil { return *relationshipType }
			return m.RelationshipType
		}(),
		TargetClassifier: func() []CodeableConcept {
			if targetClassifier != nil { return *targetClassifier }
			return m.TargetClassifier
		}(),
		TargetUri: func() FhirUri {
			if targetUri != nil { return *targetUri }
			return m.TargetUri
		}(),
		TargetIdentifier: func() Identifier {
			if targetIdentifier != nil { return *targetIdentifier }
			return m.TargetIdentifier
		}(),
		TargetReference: func() Reference {
			if targetReference != nil { return *targetReference }
			return m.TargetReference
		}(),
		TargetAttachment: func() Attachment {
			if targetAttachment != nil { return *targetAttachment }
			return m.TargetAttachment
		}(),
	}
}
// CitationPublicationForm
// If multiple, used to represent alternative forms of the article that are not separate citations.
type CitationPublicationForm struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// publishedIn
	// The collection the cited article or artifact is published in.
	PublishedIn CitationPublishedIn `json:"publishedIn,omitempty"`
	// periodicRelease
	// The specific issue in which the cited article resides.
	PeriodicRelease CitationPeriodicRelease `json:"periodicRelease,omitempty"`
	// articleDate
	// The date the article was added to the database, or the date the article was released (which may differ from the journal issue publication date).
	ArticleDate FhirDateTime `json:"articleDate,omitempty"`
	// lastRevisionDate
	// The date the article was last revised or updated in the database.
	LastRevisionDate FhirDateTime `json:"lastRevisionDate,omitempty"`
	// language
	// Language in which this form of the article is published.
	Language []CodeableConcept `json:"language,omitempty"`
	// accessionNumber
	// Entry number or identifier for inclusion in a database.
	AccessionNumber FhirString `json:"accessionNumber,omitempty"`
	// pageString
	// Used for full display of pagination.
	PageString FhirString `json:"pageString,omitempty"`
	// firstPage
	// Used for isolated representation of first page.
	FirstPage FhirString `json:"firstPage,omitempty"`
	// lastPage
	// Used for isolated representation of last page.
	LastPage FhirString `json:"lastPage,omitempty"`
	// pageCount
	// Actual or approximate number of pages or screens.
	PageCount FhirString `json:"pageCount,omitempty"`
	// copyright
	// Copyright notice for the full article or artifact.
	Copyright FhirMarkdown `json:"copyright,omitempty"`
}

// NewCitationPublicationForm creates a new CitationPublicationForm instance
func NewCitationPublicationForm(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	publishedIn CitationPublishedIn,
	periodicRelease CitationPeriodicRelease,
	articleDate FhirDateTime,
	lastRevisionDate FhirDateTime,
	language []CodeableConcept,
	accessionNumber FhirString,
	pageString FhirString,
	firstPage FhirString,
	lastPage FhirString,
	pageCount FhirString,
	copyright FhirMarkdown,
) *CitationPublicationForm {
	return &CitationPublicationForm{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		PublishedIn: publishedIn,
		PeriodicRelease: periodicRelease,
		ArticleDate: articleDate,
		LastRevisionDate: lastRevisionDate,
		Language: language,
		AccessionNumber: accessionNumber,
		PageString: pageString,
		FirstPage: firstPage,
		LastPage: lastPage,
		PageCount: pageCount,
		Copyright: copyright,
	}
}
// FromJSON populates CitationPublicationForm from JSON data
func (m *CitationPublicationForm) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationPublicationForm to JSON data
func (m *CitationPublicationForm) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationPublicationForm
func (m *CitationPublicationForm) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	publishedIn *CitationPublishedIn,
	periodicRelease *CitationPeriodicRelease,
	articleDate *FhirDateTime,
	lastRevisionDate *FhirDateTime,
	language *[]CodeableConcept,
	accessionNumber *FhirString,
	pageString *FhirString,
	firstPage *FhirString,
	lastPage *FhirString,
	pageCount *FhirString,
	copyright *FhirMarkdown,
) *CitationPublicationForm {
	return &CitationPublicationForm{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		PublishedIn: func() CitationPublishedIn {
			if publishedIn != nil { return *publishedIn }
			return m.PublishedIn
		}(),
		PeriodicRelease: func() CitationPeriodicRelease {
			if periodicRelease != nil { return *periodicRelease }
			return m.PeriodicRelease
		}(),
		ArticleDate: func() FhirDateTime {
			if articleDate != nil { return *articleDate }
			return m.ArticleDate
		}(),
		LastRevisionDate: func() FhirDateTime {
			if lastRevisionDate != nil { return *lastRevisionDate }
			return m.LastRevisionDate
		}(),
		Language: func() []CodeableConcept {
			if language != nil { return *language }
			return m.Language
		}(),
		AccessionNumber: func() FhirString {
			if accessionNumber != nil { return *accessionNumber }
			return m.AccessionNumber
		}(),
		PageString: func() FhirString {
			if pageString != nil { return *pageString }
			return m.PageString
		}(),
		FirstPage: func() FhirString {
			if firstPage != nil { return *firstPage }
			return m.FirstPage
		}(),
		LastPage: func() FhirString {
			if lastPage != nil { return *lastPage }
			return m.LastPage
		}(),
		PageCount: func() FhirString {
			if pageCount != nil { return *pageCount }
			return m.PageCount
		}(),
		Copyright: func() FhirMarkdown {
			if copyright != nil { return *copyright }
			return m.Copyright
		}(),
	}
}
// CitationPublishedIn
// The collection the cited article or artifact is published in.
type CitationPublishedIn struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// Kind of container (e.g. Periodical, database, or book).
	Type_ CodeableConcept `json:"type,omitempty"`
	// identifier
	// Journal identifiers include ISSN, ISO Abbreviation and NLMuniqueID; Book identifiers include ISBN.
	Identifier []Identifier `json:"identifier,omitempty"`
	// title
	// Name of the database or title of the book or journal.
	Title FhirString `json:"title,omitempty"`
	// publisher
	// Name of the publisher.
	Publisher Reference `json:"publisher,omitempty"`
	// publisherLocation
	// Geographic location of the publisher.
	PublisherLocation FhirString `json:"publisherLocation,omitempty"`
}

// NewCitationPublishedIn creates a new CitationPublishedIn instance
func NewCitationPublishedIn(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ CodeableConcept,
	identifier []Identifier,
	title FhirString,
	publisher Reference,
	publisherLocation FhirString,
) *CitationPublishedIn {
	return &CitationPublishedIn{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		Identifier: identifier,
		Title: title,
		Publisher: publisher,
		PublisherLocation: publisherLocation,
	}
}
// FromJSON populates CitationPublishedIn from JSON data
func (m *CitationPublishedIn) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationPublishedIn to JSON data
func (m *CitationPublishedIn) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationPublishedIn
func (m *CitationPublishedIn) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *CodeableConcept,
	identifier *[]Identifier,
	title *FhirString,
	publisher *Reference,
	publisherLocation *FhirString,
) *CitationPublishedIn {
	return &CitationPublishedIn{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		Title: func() FhirString {
			if title != nil { return *title }
			return m.Title
		}(),
		Publisher: func() Reference {
			if publisher != nil { return *publisher }
			return m.Publisher
		}(),
		PublisherLocation: func() FhirString {
			if publisherLocation != nil { return *publisherLocation }
			return m.PublisherLocation
		}(),
	}
}
// CitationPeriodicRelease
// The specific issue in which the cited article resides.
type CitationPeriodicRelease struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// citedMedium
	// Describes the form of the medium cited. Common codes are "Internet" or "Print".
	CitedMedium CodeableConcept `json:"citedMedium,omitempty"`
	// volume
	// Volume number of journal in which the article is published.
	Volume FhirString `json:"volume,omitempty"`
	// issue
	// Issue, part or supplement of journal in which the article is published.
	Issue FhirString `json:"issue,omitempty"`
	// dateOfPublication
	// Defining the date on which the issue of the journal was published.
	DateOfPublication CitationDateOfPublication `json:"dateOfPublication,omitempty"`
}

// NewCitationPeriodicRelease creates a new CitationPeriodicRelease instance
func NewCitationPeriodicRelease(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	citedMedium CodeableConcept,
	volume FhirString,
	issue FhirString,
	dateOfPublication CitationDateOfPublication,
) *CitationPeriodicRelease {
	return &CitationPeriodicRelease{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		CitedMedium: citedMedium,
		Volume: volume,
		Issue: issue,
		DateOfPublication: dateOfPublication,
	}
}
// FromJSON populates CitationPeriodicRelease from JSON data
func (m *CitationPeriodicRelease) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationPeriodicRelease to JSON data
func (m *CitationPeriodicRelease) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationPeriodicRelease
func (m *CitationPeriodicRelease) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	citedMedium *CodeableConcept,
	volume *FhirString,
	issue *FhirString,
	dateOfPublication *CitationDateOfPublication,
) *CitationPeriodicRelease {
	return &CitationPeriodicRelease{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		CitedMedium: func() CodeableConcept {
			if citedMedium != nil { return *citedMedium }
			return m.CitedMedium
		}(),
		Volume: func() FhirString {
			if volume != nil { return *volume }
			return m.Volume
		}(),
		Issue: func() FhirString {
			if issue != nil { return *issue }
			return m.Issue
		}(),
		DateOfPublication: func() CitationDateOfPublication {
			if dateOfPublication != nil { return *dateOfPublication }
			return m.DateOfPublication
		}(),
	}
}
// CitationDateOfPublication
// Defining the date on which the issue of the journal was published.
type CitationDateOfPublication struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// date
	// Date on which the issue of the journal was published.
	Date FhirDate `json:"date,omitempty"`
	// year
	// Year on which the issue of the journal was published.
	Year FhirString `json:"year,omitempty"`
	// month
	// Month on which the issue of the journal was published.
	Month FhirString `json:"month,omitempty"`
	// day
	// Day on which the issue of the journal was published.
	Day FhirString `json:"day,omitempty"`
	// season
	// Spring, Summer, Fall/Autumn, Winter.
	Season FhirString `json:"season,omitempty"`
	// text
	// Text representation of the date of which the issue of the journal was published.
	Text FhirString `json:"text,omitempty"`
}

// NewCitationDateOfPublication creates a new CitationDateOfPublication instance
func NewCitationDateOfPublication(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	date FhirDate,
	year FhirString,
	month FhirString,
	day FhirString,
	season FhirString,
	text FhirString,
) *CitationDateOfPublication {
	return &CitationDateOfPublication{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Date: date,
		Year: year,
		Month: month,
		Day: day,
		Season: season,
		Text: text,
	}
}
// FromJSON populates CitationDateOfPublication from JSON data
func (m *CitationDateOfPublication) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationDateOfPublication to JSON data
func (m *CitationDateOfPublication) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationDateOfPublication
func (m *CitationDateOfPublication) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	date *FhirDate,
	year *FhirString,
	month *FhirString,
	day *FhirString,
	season *FhirString,
	text *FhirString,
) *CitationDateOfPublication {
	return &CitationDateOfPublication{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Date: func() FhirDate {
			if date != nil { return *date }
			return m.Date
		}(),
		Year: func() FhirString {
			if year != nil { return *year }
			return m.Year
		}(),
		Month: func() FhirString {
			if month != nil { return *month }
			return m.Month
		}(),
		Day: func() FhirString {
			if day != nil { return *day }
			return m.Day
		}(),
		Season: func() FhirString {
			if season != nil { return *season }
			return m.Season
		}(),
		Text: func() FhirString {
			if text != nil { return *text }
			return m.Text
		}(),
	}
}
// CitationWebLocation
// Used for any URL for the article or artifact cited.
type CitationWebLocation struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// Code the reason for different URLs, e.g. abstract and full-text.
	Type_ CodeableConcept `json:"type,omitempty"`
	// url
	// The specific URL.
	Url FhirUri `json:"url,omitempty"`
}

// NewCitationWebLocation creates a new CitationWebLocation instance
func NewCitationWebLocation(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ CodeableConcept,
	url FhirUri,
) *CitationWebLocation {
	return &CitationWebLocation{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		Url: url,
	}
}
// FromJSON populates CitationWebLocation from JSON data
func (m *CitationWebLocation) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationWebLocation to JSON data
func (m *CitationWebLocation) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationWebLocation
func (m *CitationWebLocation) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *CodeableConcept,
	url *FhirUri,
) *CitationWebLocation {
	return &CitationWebLocation{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Url: func() FhirUri {
			if url != nil { return *url }
			return m.Url
		}(),
	}
}
// CitationClassification1
// The assignment to an organizing scheme.
type CitationClassification1 struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// The kind of classifier (e.g. publication type, keyword).
	Type_ CodeableConcept `json:"type,omitempty"`
	// classifier
	// The specific classification value.
	Classifier []CodeableConcept `json:"classifier,omitempty"`
	// whoClassified
	// Provenance and copyright of classification.
	WhoClassified CitationWhoClassified `json:"whoClassified,omitempty"`
}

// NewCitationClassification1 creates a new CitationClassification1 instance
func NewCitationClassification1(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ CodeableConcept,
	classifier []CodeableConcept,
	whoClassified CitationWhoClassified,
) *CitationClassification1 {
	return &CitationClassification1{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		Classifier: classifier,
		WhoClassified: whoClassified,
	}
}
// FromJSON populates CitationClassification1 from JSON data
func (m *CitationClassification1) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationClassification1 to JSON data
func (m *CitationClassification1) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationClassification1
func (m *CitationClassification1) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *CodeableConcept,
	classifier *[]CodeableConcept,
	whoClassified *CitationWhoClassified,
) *CitationClassification1 {
	return &CitationClassification1{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Classifier: func() []CodeableConcept {
			if classifier != nil { return *classifier }
			return m.Classifier
		}(),
		WhoClassified: func() CitationWhoClassified {
			if whoClassified != nil { return *whoClassified }
			return m.WhoClassified
		}(),
	}
}
// CitationWhoClassified
// Provenance and copyright of classification.
type CitationWhoClassified struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// person
	// Person who created the classification.
	Person Reference `json:"person,omitempty"`
	// organization
	// Organization who created the classification.
	Organization Reference `json:"organization,omitempty"`
	// publisher
	// The publisher of the classification, not the publisher of the article or artifact being cited.
	Publisher Reference `json:"publisher,omitempty"`
	// classifierCopyright
	// Rights management statement for the classification.
	ClassifierCopyright FhirString `json:"classifierCopyright,omitempty"`
	// freeToShare
	// Acceptable to re-use the classification.
	FreeToShare FhirBoolean `json:"freeToShare,omitempty"`
}

// NewCitationWhoClassified creates a new CitationWhoClassified instance
func NewCitationWhoClassified(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	person Reference,
	organization Reference,
	publisher Reference,
	classifierCopyright FhirString,
	freeToShare FhirBoolean,
) *CitationWhoClassified {
	return &CitationWhoClassified{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Person: person,
		Organization: organization,
		Publisher: publisher,
		ClassifierCopyright: classifierCopyright,
		FreeToShare: freeToShare,
	}
}
// FromJSON populates CitationWhoClassified from JSON data
func (m *CitationWhoClassified) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationWhoClassified to JSON data
func (m *CitationWhoClassified) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationWhoClassified
func (m *CitationWhoClassified) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	person *Reference,
	organization *Reference,
	publisher *Reference,
	classifierCopyright *FhirString,
	freeToShare *FhirBoolean,
) *CitationWhoClassified {
	return &CitationWhoClassified{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Person: func() Reference {
			if person != nil { return *person }
			return m.Person
		}(),
		Organization: func() Reference {
			if organization != nil { return *organization }
			return m.Organization
		}(),
		Publisher: func() Reference {
			if publisher != nil { return *publisher }
			return m.Publisher
		}(),
		ClassifierCopyright: func() FhirString {
			if classifierCopyright != nil { return *classifierCopyright }
			return m.ClassifierCopyright
		}(),
		FreeToShare: func() FhirBoolean {
			if freeToShare != nil { return *freeToShare }
			return m.FreeToShare
		}(),
	}
}
// CitationContributorship
// This element is used to list authors and other contributors, their contact information, specific contributions, and summary statements.
type CitationContributorship struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// complete
	// Indicates if the list includes all authors and/or contributors.
	Complete FhirBoolean `json:"complete,omitempty"`
	// entry
	// An individual entity named in the author list or contributor list.
	Entry []CitationEntry `json:"entry,omitempty"`
	// summary
	// Used to record a display of the author/contributor list without separate coding for each list member.
	Summary []CitationSummary `json:"summary,omitempty"`
}

// NewCitationContributorship creates a new CitationContributorship instance
func NewCitationContributorship(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	complete FhirBoolean,
	entry []CitationEntry,
	summary []CitationSummary,
) *CitationContributorship {
	return &CitationContributorship{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Complete: complete,
		Entry: entry,
		Summary: summary,
	}
}
// FromJSON populates CitationContributorship from JSON data
func (m *CitationContributorship) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationContributorship to JSON data
func (m *CitationContributorship) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationContributorship
func (m *CitationContributorship) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	complete *FhirBoolean,
	entry *[]CitationEntry,
	summary *[]CitationSummary,
) *CitationContributorship {
	return &CitationContributorship{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Complete: func() FhirBoolean {
			if complete != nil { return *complete }
			return m.Complete
		}(),
		Entry: func() []CitationEntry {
			if entry != nil { return *entry }
			return m.Entry
		}(),
		Summary: func() []CitationSummary {
			if summary != nil { return *summary }
			return m.Summary
		}(),
	}
}
// CitationEntry
// An individual entity named in the author list or contributor list.
type CitationEntry struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// name
	// A name associated with the individual.
	Name HumanName `json:"name,omitempty"`
	// initials
	// Initials for forename.
	Initials FhirString `json:"initials,omitempty"`
	// collectiveName
	// Used for collective or corporate name as an author.
	CollectiveName FhirString `json:"collectiveName,omitempty"`
	// identifier
	// Unique person identifier.
	Identifier []Identifier `json:"identifier,omitempty"`
	// affiliationInfo
	// Organization affiliated with the entity.
	AffiliationInfo []CitationAffiliationInfo `json:"affiliationInfo,omitempty"`
	// address
	// Physical mailing address for the author or contributor.
	Address []Address `json:"address,omitempty"`
	// telecom
	// Email or telephone contact methods for the author or contributor.
	Telecom []ContactPoint `json:"telecom,omitempty"`
	// contributionType
	// This element identifies the specific nature of an individual’s contribution with respect to the cited work.
	ContributionType []CodeableConcept `json:"contributionType,omitempty"`
	// role
	// The role of the contributor (e.g. author, editor, reviewer).
	Role CodeableConcept `json:"role,omitempty"`
	// contributionInstance
	// Contributions with accounting for time or number.
	ContributionInstance []CitationContributionInstance `json:"contributionInstance,omitempty"`
	// correspondingContact
	// Indication of which contributor is the corresponding contributor for the role.
	CorrespondingContact FhirBoolean `json:"correspondingContact,omitempty"`
	// listOrder
	// Used to code order of authors.
	ListOrder FhirPositiveInt `json:"listOrder,omitempty"`
}

// NewCitationEntry creates a new CitationEntry instance
func NewCitationEntry(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	name HumanName,
	initials FhirString,
	collectiveName FhirString,
	identifier []Identifier,
	affiliationInfo []CitationAffiliationInfo,
	address []Address,
	telecom []ContactPoint,
	contributionType []CodeableConcept,
	role CodeableConcept,
	contributionInstance []CitationContributionInstance,
	correspondingContact FhirBoolean,
	listOrder FhirPositiveInt,
) *CitationEntry {
	return &CitationEntry{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Name: name,
		Initials: initials,
		CollectiveName: collectiveName,
		Identifier: identifier,
		AffiliationInfo: affiliationInfo,
		Address: address,
		Telecom: telecom,
		ContributionType: contributionType,
		Role: role,
		ContributionInstance: contributionInstance,
		CorrespondingContact: correspondingContact,
		ListOrder: listOrder,
	}
}
// FromJSON populates CitationEntry from JSON data
func (m *CitationEntry) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationEntry to JSON data
func (m *CitationEntry) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationEntry
func (m *CitationEntry) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	name *HumanName,
	initials *FhirString,
	collectiveName *FhirString,
	identifier *[]Identifier,
	affiliationInfo *[]CitationAffiliationInfo,
	address *[]Address,
	telecom *[]ContactPoint,
	contributionType *[]CodeableConcept,
	role *CodeableConcept,
	contributionInstance *[]CitationContributionInstance,
	correspondingContact *FhirBoolean,
	listOrder *FhirPositiveInt,
) *CitationEntry {
	return &CitationEntry{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Name: func() HumanName {
			if name != nil { return *name }
			return m.Name
		}(),
		Initials: func() FhirString {
			if initials != nil { return *initials }
			return m.Initials
		}(),
		CollectiveName: func() FhirString {
			if collectiveName != nil { return *collectiveName }
			return m.CollectiveName
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		AffiliationInfo: func() []CitationAffiliationInfo {
			if affiliationInfo != nil { return *affiliationInfo }
			return m.AffiliationInfo
		}(),
		Address: func() []Address {
			if address != nil { return *address }
			return m.Address
		}(),
		Telecom: func() []ContactPoint {
			if telecom != nil { return *telecom }
			return m.Telecom
		}(),
		ContributionType: func() []CodeableConcept {
			if contributionType != nil { return *contributionType }
			return m.ContributionType
		}(),
		Role: func() CodeableConcept {
			if role != nil { return *role }
			return m.Role
		}(),
		ContributionInstance: func() []CitationContributionInstance {
			if contributionInstance != nil { return *contributionInstance }
			return m.ContributionInstance
		}(),
		CorrespondingContact: func() FhirBoolean {
			if correspondingContact != nil { return *correspondingContact }
			return m.CorrespondingContact
		}(),
		ListOrder: func() FhirPositiveInt {
			if listOrder != nil { return *listOrder }
			return m.ListOrder
		}(),
	}
}
// CitationAffiliationInfo
// Organization affiliated with the entity.
type CitationAffiliationInfo struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// affiliation
	// Display for the organization.
	Affiliation FhirString `json:"affiliation,omitempty"`
	// role
	// Role within the organization, such as professional title.
	Role FhirString `json:"role,omitempty"`
	// identifier
	// Identifier for the organization.
	Identifier []Identifier `json:"identifier,omitempty"`
}

// NewCitationAffiliationInfo creates a new CitationAffiliationInfo instance
func NewCitationAffiliationInfo(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	affiliation FhirString,
	role FhirString,
	identifier []Identifier,
) *CitationAffiliationInfo {
	return &CitationAffiliationInfo{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Affiliation: affiliation,
		Role: role,
		Identifier: identifier,
	}
}
// FromJSON populates CitationAffiliationInfo from JSON data
func (m *CitationAffiliationInfo) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationAffiliationInfo to JSON data
func (m *CitationAffiliationInfo) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationAffiliationInfo
func (m *CitationAffiliationInfo) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	affiliation *FhirString,
	role *FhirString,
	identifier *[]Identifier,
) *CitationAffiliationInfo {
	return &CitationAffiliationInfo{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Affiliation: func() FhirString {
			if affiliation != nil { return *affiliation }
			return m.Affiliation
		}(),
		Role: func() FhirString {
			if role != nil { return *role }
			return m.Role
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
	}
}
// CitationContributionInstance
// Contributions with accounting for time or number.
type CitationContributionInstance struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// The specific contribution.
	Type_ CodeableConcept `json:"type,omitempty"`
	// time
	// The time that the contribution was made.
	Time FhirDateTime `json:"time,omitempty"`
}

// NewCitationContributionInstance creates a new CitationContributionInstance instance
func NewCitationContributionInstance(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ CodeableConcept,
	time FhirDateTime,
) *CitationContributionInstance {
	return &CitationContributionInstance{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		Time: time,
	}
}
// FromJSON populates CitationContributionInstance from JSON data
func (m *CitationContributionInstance) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationContributionInstance to JSON data
func (m *CitationContributionInstance) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationContributionInstance
func (m *CitationContributionInstance) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *CodeableConcept,
	time *FhirDateTime,
) *CitationContributionInstance {
	return &CitationContributionInstance{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Time: func() FhirDateTime {
			if time != nil { return *time }
			return m.Time
		}(),
	}
}
// CitationSummary1
// Used to record a display of the author/contributor list without separate coding for each list member.
type CitationSummary1 struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// Used most commonly to express an author list or a contributorship statement.
	Type_ CodeableConcept `json:"type,omitempty"`
	// style
	// The format for the display string.
	Style CodeableConcept `json:"style,omitempty"`
	// source
	// Used to code the producer or rule for creating the display string.
	Source CodeableConcept `json:"source,omitempty"`
	// value
	// The display string for the author list, contributor list, or contributorship statement.
	Value FhirMarkdown `json:"value,omitempty"`
}

// NewCitationSummary1 creates a new CitationSummary1 instance
func NewCitationSummary1(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ CodeableConcept,
	style CodeableConcept,
	source CodeableConcept,
	value FhirMarkdown,
) *CitationSummary1 {
	return &CitationSummary1{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		Style: style,
		Source: source,
		Value: value,
	}
}
// FromJSON populates CitationSummary1 from JSON data
func (m *CitationSummary1) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CitationSummary1 to JSON data
func (m *CitationSummary1) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CitationSummary1
func (m *CitationSummary1) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *CodeableConcept,
	style *CodeableConcept,
	source *CodeableConcept,
	value *FhirMarkdown,
) *CitationSummary1 {
	return &CitationSummary1{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Style: func() CodeableConcept {
			if style != nil { return *style }
			return m.Style
		}(),
		Source: func() CodeableConcept {
			if source != nil { return *source }
			return m.Source
		}(),
		Value: func() FhirMarkdown {
			if value != nil { return *value }
			return m.Value
		}(),
	}
}
