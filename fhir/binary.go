// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Binary
// A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.
type Binary struct {
	Resource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	ContentType *FhirCode `json:"contenttype,omitempty"`
	SecurityContext *Reference `json:"securitycontext,omitempty"`
	Data *FhirBase64Binary `json:"data,omitempty"`
}

// NewBinary creates a new Binary instance
func NewBinary() *Binary {
	return &Binary{}
}

// FromJSON populates Binary from JSON data
func (m *Binary) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Binary to JSON data
func (m *Binary) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Binary
func (m *Binary) Clone() *Binary {
	if m == nil { return nil }
	return &Binary{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		ContentType: m.ContentType.Clone(),
		SecurityContext: m.SecurityContext.Clone(),
		Data: m.Data.Clone(),
	}
}

// Equals checks for equality with another Binary instance
func (m *Binary) Equals(other *Binary) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.ContentType.Equals(other.ContentType) { return false }
	if !m.SecurityContext.Equals(other.SecurityContext) { return false }
	if !m.Data.Equals(other.Data) { return false }
	return true
}

