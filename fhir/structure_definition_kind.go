// Code generated by FHIR Generator. DO NOT EDIT.
// Defines the type of structure that a definition is describing.
package fhir_r4b_go

// StructureDefinitionKind represents the FHIR ValueSet as an enumeration
type StructureDefinitionKind int

const (
	// Primitive Data Type: A primitive type that has a value and an extension. These can be used throughout complex datatype, Resource and extension definitions. Only the base specification can define primitive types.
	StructureDefinitionKind_Primitive_type StructureDefinitionKind = iota
	// Complex Data Type: A complex structure that defines a set of data elements that is suitable for use in 'resources'. The base specification defines a number of complex types, and other specifications can define additional types. These structures do not have a maintained identity.
	StructureDefinitionKind_Complex_type StructureDefinitionKind = iota
	// Resource: A 'resource' - a directed acyclic graph of elements that aggregrates other types into an identifiable entity. The base FHIR resources are defined by the FHIR specification itself but other 'resources' can be defined in additional specifications (though these will not be recognised as 'resources' by the FHIR specification (i.e. they do not get end-points etc, or act as the targets of references in FHIR defined resources - though other specificatiosn can treat them this way).
	StructureDefinitionKind_Resource StructureDefinitionKind = iota
	// Logical: A pattern or a template that is not intended to be a real resource or complex type.
	StructureDefinitionKind_Logical StructureDefinitionKind = iota
)

// String converts the enum to its string representation
func (e StructureDefinitionKind) String() string {
	switch e {
	case StructureDefinitionKind_Primitive_type: return "Primitive Data Type"
	case StructureDefinitionKind_Complex_type: return "Complex Data Type"
	case StructureDefinitionKind_Resource: return "Resource"
	case StructureDefinitionKind_Logical: return "Logical"
	default: return "Unknown"
	}
}

