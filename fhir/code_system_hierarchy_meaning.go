// Code generated by FHIR Generator. DO NOT EDIT.
// The meaning of the hierarchy of concepts in a code system.
package fhir_r4b_go
// CodeSystemHierarchyMeaning represents the FHIR ValueSet as an enumeration
type CodeSystemHierarchyMeaning struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	CodeSystemHierarchyMeaning_Grouped_by = "grouped-by" // Grouped By: No particular relationship between the concepts can be assumed, except what can be determined by inspection of the definitions of the elements (possible reasons to use this: importing from a source where this is not defined, or where various parts of the hierarchy have different meanings).
	CodeSystemHierarchyMeaning_Is_a = "is-a" // Is-A: A hierarchy where the child concepts have an IS-A relationship with the parents - that is, all the properties of the parent are also true for its child concepts. Not that is-a is a property of the concepts, so additional subsumption relationships may be defined using properties or the [subsumes](extension-codesystem-subsumes.html) extension.
	CodeSystemHierarchyMeaning_Part_of = "part-of" // Part Of: Child elements list the individual parts of a composite whole (e.g. body site).
	CodeSystemHierarchyMeaning_Classified_with = "classified-with" // Classified With: Child concepts in the hierarchy may have only one parent, and there is a presumption that the code system is a "closed world" meaning all things must be in the hierarchy. This results in concepts such as "not otherwise classified.".
)

// Clone creates a deep copy of the enum
func (e CodeSystemHierarchyMeaning) Clone() *CodeSystemHierarchyMeaning {
	return &CodeSystemHierarchyMeaning{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *CodeSystemHierarchyMeaning) Equals(other *CodeSystemHierarchyMeaning) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

