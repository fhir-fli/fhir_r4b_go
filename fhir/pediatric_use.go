// Code generated by FHIR Generator. DO NOT EDIT.
// Extra measures defined for a Medicinal Product, such as heightened reporting requirements.
package fhir_r4b_go
// PediatricUse represents the FHIR ValueSet as an enumeration
type PediatricUse struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	PediatricUse_InUtero = "InUtero" // In utero: In utero
	PediatricUse_PretermNewborn = "PretermNewborn" // Preterm newborn infants (0 – 27 days): Preterm newborn infants (0 – 27 days)
	PediatricUse_TermNewborn = "TermNewborn" // Term newborn infants (0 – 27 days): Term newborn infants (0 – 27 days)
	PediatricUse_Infants = "Infants" // Infants and toddlers (28 days – 23 months): Infants and toddlers (28 days – 23 months)
	PediatricUse_Children = "Children" // Children (2 to < 12 years): Children (2 to < 12 years)
	PediatricUse_Adolescents = "Adolescents" // Adolescents (12 to < 18 years): Adolescents (12 to < 18 years)
	PediatricUse_Adults = "Adults" // Adults (18 to < 65 years): Adults (18 to < 65 years)
	PediatricUse_Elderly = "Elderly" // Elderly (≥ 65 years): Elderly (≥ 65 years)
	PediatricUse_Neonate = "Neonate" // Neonate: Neonate
	PediatricUse_PediatricPopulation = "PediatricPopulation" // Pediatric Population (< 18 years): Pediatric Population (< 18 years)
	PediatricUse_All = "All" // All: All
	PediatricUse_Prepubertal = "Prepubertal" // Prepubertal children (2 years to onset of puberty): Prepubertal children (2 years to onset of puberty)
	PediatricUse_AdultsAndElderly = "AdultsAndElderly" // Adult and elderly population (> 18 years): Adult and elderly population (> 18 years)
	PediatricUse_PubertalAndPostpubertal = "PubertalAndPostpubertal" // Pubertal and postpubertal adolescents (onset of puberty to < 18 years): Pubertal and postpubertal adolescents (onset of puberty to < 18 years)
)

// Clone creates a deep copy of the enum
func (e PediatricUse) Clone() *PediatricUse {
	return &PediatricUse{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *PediatricUse) Equals(other *PediatricUse) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

