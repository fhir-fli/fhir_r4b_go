// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// CarePlan
// Describes the intention of how one or more practitioners intend to deliver care for a particular patient, group or community for a period of time, possibly limited to care for a specific condition or set of conditions.
type CarePlan struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	InstantiatesCanonical []*FhirCanonical `json:"instantiatescanonical,omitempty"`
	InstantiatesUri []*FhirUri `json:"instantiatesuri,omitempty"`
	BasedOn []*Reference `json:"basedon,omitempty"`
	Replaces []*Reference `json:"replaces,omitempty"`
	PartOf []*Reference `json:"partof,omitempty"`
	Status *RequestStatus `json:"status,omitempty"`
	Intent *CarePlanIntent `json:"intent,omitempty"`
	Category []*CodeableConcept `json:"category,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Subject *Reference `json:"subject,omitempty"`
	Encounter *Reference `json:"encounter,omitempty"`
	Period *Period `json:"period,omitempty"`
	Created *FhirDateTime `json:"created,omitempty"`
	Author *Reference `json:"author,omitempty"`
	Contributor []*Reference `json:"contributor,omitempty"`
	CareTeam []*Reference `json:"careteam,omitempty"`
	Addresses []*Reference `json:"addresses,omitempty"`
	SupportingInfo []*Reference `json:"supportinginfo,omitempty"`
	Goal []*Reference `json:"goal,omitempty"`
	Activity []*CarePlanActivity `json:"activity,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
}

// NewCarePlan creates a new CarePlan instance
func NewCarePlan() *CarePlan {
	return &CarePlan{}
}

// FromJSON populates CarePlan from JSON data
func (m *CarePlan) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CarePlan to JSON data
func (m *CarePlan) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of CarePlan
func (m *CarePlan) Clone() *CarePlan {
	if m == nil { return nil }
	return &CarePlan{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		InstantiatesCanonical: cloneSlices(m.InstantiatesCanonical),
		InstantiatesUri: cloneSlices(m.InstantiatesUri),
		BasedOn: cloneSlices(m.BasedOn),
		Replaces: cloneSlices(m.Replaces),
		PartOf: cloneSlices(m.PartOf),
		Status: m.Status.Clone(),
		Intent: m.Intent.Clone(),
		Category: cloneSlices(m.Category),
		Title: m.Title.Clone(),
		Description: m.Description.Clone(),
		Subject: m.Subject.Clone(),
		Encounter: m.Encounter.Clone(),
		Period: m.Period.Clone(),
		Created: m.Created.Clone(),
		Author: m.Author.Clone(),
		Contributor: cloneSlices(m.Contributor),
		CareTeam: cloneSlices(m.CareTeam),
		Addresses: cloneSlices(m.Addresses),
		SupportingInfo: cloneSlices(m.SupportingInfo),
		Goal: cloneSlices(m.Goal),
		Activity: cloneSlices(m.Activity),
		Note: cloneSlices(m.Note),
	}
}

// Equals checks for equality with another CarePlan instance
func (m *CarePlan) Equals(other *CarePlan) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.InstantiatesCanonical, other.InstantiatesCanonical) { return false }
	if !compareSlices(m.InstantiatesUri, other.InstantiatesUri) { return false }
	if !compareSlices(m.BasedOn, other.BasedOn) { return false }
	if !compareSlices(m.Replaces, other.Replaces) { return false }
	if !compareSlices(m.PartOf, other.PartOf) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Intent.Equals(other.Intent) { return false }
	if !compareSlices(m.Category, other.Category) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.Subject.Equals(other.Subject) { return false }
	if !m.Encounter.Equals(other.Encounter) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !m.Created.Equals(other.Created) { return false }
	if !m.Author.Equals(other.Author) { return false }
	if !compareSlices(m.Contributor, other.Contributor) { return false }
	if !compareSlices(m.CareTeam, other.CareTeam) { return false }
	if !compareSlices(m.Addresses, other.Addresses) { return false }
	if !compareSlices(m.SupportingInfo, other.SupportingInfo) { return false }
	if !compareSlices(m.Goal, other.Goal) { return false }
	if !compareSlices(m.Activity, other.Activity) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	return true
}

// CarePlanActivity
// Identifies a planned action to occur as part of the plan.  For example, a medication to be used, lab tests to perform, self-monitoring, education, etc.
type CarePlanActivity struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	OutcomeCodeableConcept []*CodeableConcept `json:"outcomecodeableconcept,omitempty"`
	OutcomeReference []*Reference `json:"outcomereference,omitempty"`
	Progress []*Annotation `json:"progress,omitempty"`
	Reference *Reference `json:"reference,omitempty"`
	Detail *CarePlanDetail `json:"detail,omitempty"`
}

// NewCarePlanActivity creates a new CarePlanActivity instance
func NewCarePlanActivity() *CarePlanActivity {
	return &CarePlanActivity{}
}

// FromJSON populates CarePlanActivity from JSON data
func (m *CarePlanActivity) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CarePlanActivity to JSON data
func (m *CarePlanActivity) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of CarePlanActivity
func (m *CarePlanActivity) Clone() *CarePlanActivity {
	if m == nil { return nil }
	return &CarePlanActivity{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		OutcomeCodeableConcept: cloneSlices(m.OutcomeCodeableConcept),
		OutcomeReference: cloneSlices(m.OutcomeReference),
		Progress: cloneSlices(m.Progress),
		Reference: m.Reference.Clone(),
		Detail: m.Detail.Clone(),
	}
}

// Equals checks for equality with another CarePlanActivity instance
func (m *CarePlanActivity) Equals(other *CarePlanActivity) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.OutcomeCodeableConcept, other.OutcomeCodeableConcept) { return false }
	if !compareSlices(m.OutcomeReference, other.OutcomeReference) { return false }
	if !compareSlices(m.Progress, other.Progress) { return false }
	if !m.Reference.Equals(other.Reference) { return false }
	if !m.Detail.Equals(other.Detail) { return false }
	return true
}

// CarePlanDetail
// A simple summary of a planned activity suitable for a general care plan system (e.g. form driven) that doesn't know about specific resources such as procedure etc.
type CarePlanDetail struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Kind *CarePlanActivityKind `json:"kind,omitempty"`
	InstantiatesCanonical []*FhirCanonical `json:"instantiatescanonical,omitempty"`
	InstantiatesUri []*FhirUri `json:"instantiatesuri,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
	ReasonReference []*Reference `json:"reasonreference,omitempty"`
	Goal []*Reference `json:"goal,omitempty"`
	Status *CarePlanActivityStatus `json:"status,omitempty"`
	StatusReason *CodeableConcept `json:"statusreason,omitempty"`
	DoNotPerform *FhirBoolean `json:"donotperform,omitempty"`
	ScheduledTiming *Timing `json:"scheduledtiming,omitempty"`
	ScheduledPeriod *Period `json:"scheduledperiod,omitempty"`
	ScheduledString *FhirString `json:"scheduledstring,omitempty"`
	Location *Reference `json:"location,omitempty"`
	Performer []*Reference `json:"performer,omitempty"`
	ProductCodeableConcept *CodeableConcept `json:"productcodeableconcept,omitempty"`
	ProductReference *Reference `json:"productreference,omitempty"`
	DailyAmount *Quantity `json:"dailyamount,omitempty"`
	Quantity *Quantity `json:"quantity,omitempty"`
	Description *FhirString `json:"description,omitempty"`
}

// NewCarePlanDetail creates a new CarePlanDetail instance
func NewCarePlanDetail() *CarePlanDetail {
	return &CarePlanDetail{}
}

// FromJSON populates CarePlanDetail from JSON data
func (m *CarePlanDetail) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CarePlanDetail to JSON data
func (m *CarePlanDetail) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of CarePlanDetail
func (m *CarePlanDetail) Clone() *CarePlanDetail {
	if m == nil { return nil }
	return &CarePlanDetail{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Kind: m.Kind.Clone(),
		InstantiatesCanonical: cloneSlices(m.InstantiatesCanonical),
		InstantiatesUri: cloneSlices(m.InstantiatesUri),
		Code: m.Code.Clone(),
		ReasonCode: cloneSlices(m.ReasonCode),
		ReasonReference: cloneSlices(m.ReasonReference),
		Goal: cloneSlices(m.Goal),
		Status: m.Status.Clone(),
		StatusReason: m.StatusReason.Clone(),
		DoNotPerform: m.DoNotPerform.Clone(),
		ScheduledTiming: m.ScheduledTiming.Clone(),
		ScheduledPeriod: m.ScheduledPeriod.Clone(),
		ScheduledString: m.ScheduledString.Clone(),
		Location: m.Location.Clone(),
		Performer: cloneSlices(m.Performer),
		ProductCodeableConcept: m.ProductCodeableConcept.Clone(),
		ProductReference: m.ProductReference.Clone(),
		DailyAmount: m.DailyAmount.Clone(),
		Quantity: m.Quantity.Clone(),
		Description: m.Description.Clone(),
	}
}

// Equals checks for equality with another CarePlanDetail instance
func (m *CarePlanDetail) Equals(other *CarePlanDetail) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Kind.Equals(other.Kind) { return false }
	if !compareSlices(m.InstantiatesCanonical, other.InstantiatesCanonical) { return false }
	if !compareSlices(m.InstantiatesUri, other.InstantiatesUri) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !compareSlices(m.ReasonCode, other.ReasonCode) { return false }
	if !compareSlices(m.ReasonReference, other.ReasonReference) { return false }
	if !compareSlices(m.Goal, other.Goal) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.StatusReason.Equals(other.StatusReason) { return false }
	if !m.DoNotPerform.Equals(other.DoNotPerform) { return false }
	if !m.ScheduledTiming.Equals(other.ScheduledTiming) { return false }
	if !m.ScheduledPeriod.Equals(other.ScheduledPeriod) { return false }
	if !m.ScheduledString.Equals(other.ScheduledString) { return false }
	if !m.Location.Equals(other.Location) { return false }
	if !compareSlices(m.Performer, other.Performer) { return false }
	if !m.ProductCodeableConcept.Equals(other.ProductCodeableConcept) { return false }
	if !m.ProductReference.Equals(other.ProductReference) { return false }
	if !m.DailyAmount.Equals(other.DailyAmount) { return false }
	if !m.Quantity.Equals(other.Quantity) { return false }
	if !m.Description.Equals(other.Description) { return false }
	return true
}

