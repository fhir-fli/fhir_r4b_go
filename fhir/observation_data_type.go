// Code generated by FHIR Generator. DO NOT EDIT.
// Permitted data type for observation value.
package fhir_r4b_go
// ObservationDataType represents the FHIR ValueSet as an enumeration
type ObservationDataType struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	ObservationDataType_Quantity = "Quantity" // Quantity: A measured amount.
	ObservationDataType_CodeableConcept = "CodeableConcept" // CodeableConcept: A coded concept from a reference terminology and/or text.
	ObservationDataType_String = "string" // string: A sequence of Unicode characters.
	ObservationDataType_Boolean = "boolean" // boolean: true or false.
	ObservationDataType_Integer = "integer" // integer: A signed integer.
	ObservationDataType_Range = "Range" // Range: A set of values bounded by low and high.
	ObservationDataType_Ratio = "Ratio" // Ratio: A ratio of two Quantity values - a numerator and a denominator.
	ObservationDataType_SampledData = "SampledData" // SampledData: A series of measurements taken by a device.
	ObservationDataType_Time = "time" // time: A time during the day, in the format hh:mm:ss.
	ObservationDataType_DateTime = "dateTime" // dateTime: A date, date-time or partial date (e.g. just year or year + month) as used in human communication.
	ObservationDataType_Period = "Period" // Period: A time range defined by start and end date/time.
)

// Clone creates a deep copy of the enum
func (e ObservationDataType) Clone() *ObservationDataType {
	return &ObservationDataType{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *ObservationDataType) Equals(other *ObservationDataType) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

