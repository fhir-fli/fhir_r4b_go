// Code generated by FHIR Generator. DO NOT EDIT.
// Permitted data type for observation value.
package fhir_r4b_go

// ObservationDataType represents the FHIR ValueSet as an enumeration
type ObservationDataType int

const (
	// Quantity: A measured amount.
	ObservationDataType_Quantity ObservationDataType = iota
	// CodeableConcept: A coded concept from a reference terminology and/or text.
	ObservationDataType_CodeableConcept ObservationDataType = iota
	// string: A sequence of Unicode characters.
	ObservationDataType_String ObservationDataType = iota
	// boolean: true or false.
	ObservationDataType_Boolean ObservationDataType = iota
	// integer: A signed integer.
	ObservationDataType_Integer ObservationDataType = iota
	// Range: A set of values bounded by low and high.
	ObservationDataType_Range ObservationDataType = iota
	// Ratio: A ratio of two Quantity values - a numerator and a denominator.
	ObservationDataType_Ratio ObservationDataType = iota
	// SampledData: A series of measurements taken by a device.
	ObservationDataType_SampledData ObservationDataType = iota
	// time: A time during the day, in the format hh:mm:ss.
	ObservationDataType_Time ObservationDataType = iota
	// dateTime: A date, date-time or partial date (e.g. just year or year + month) as used in human communication.
	ObservationDataType_DateTime ObservationDataType = iota
	// Period: A time range defined by start and end date/time.
	ObservationDataType_Period ObservationDataType = iota
)

// String converts the enum to its string representation
func (e ObservationDataType) String() string {
	switch e {
	case ObservationDataType_Quantity: return "Quantity"
	case ObservationDataType_CodeableConcept: return "CodeableConcept"
	case ObservationDataType_String: return "string"
	case ObservationDataType_Boolean: return "boolean"
	case ObservationDataType_Integer: return "integer"
	case ObservationDataType_Range: return "Range"
	case ObservationDataType_Ratio: return "Ratio"
	case ObservationDataType_SampledData: return "SampledData"
	case ObservationDataType_Time: return "time"
	case ObservationDataType_DateTime: return "dateTime"
	case ObservationDataType_Period: return "Period"
	default: return "Unknown"
	}
}

