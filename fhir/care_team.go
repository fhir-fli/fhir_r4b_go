// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// CareTeam
// The Care Team includes all the people and organizations who plan to participate in the coordination and delivery of care for a patient.
type CareTeam struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *CareTeamStatus `json:"status,omitempty"`
	Category []*CodeableConcept `json:"category,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Subject *Reference `json:"subject,omitempty"`
	Encounter *Reference `json:"encounter,omitempty"`
	Period *Period `json:"period,omitempty"`
	Participant []*CareTeamParticipant `json:"participant,omitempty"`
	ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
	ReasonReference []*Reference `json:"reasonreference,omitempty"`
	ManagingOrganization []*Reference `json:"managingorganization,omitempty"`
	Telecom []*ContactPoint `json:"telecom,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
}

// NewCareTeam creates a new CareTeam instance
func NewCareTeam() *CareTeam {
	return &CareTeam{}
}

// FromJSON populates CareTeam from JSON data
func (m *CareTeam) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CareTeam to JSON data
func (m *CareTeam) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of CareTeam
func (m *CareTeam) Clone() *CareTeam {
	if m == nil { return nil }
	return &CareTeam{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		Category: cloneSlices(m.Category),
		Name: m.Name.Clone(),
		Subject: m.Subject.Clone(),
		Encounter: m.Encounter.Clone(),
		Period: m.Period.Clone(),
		Participant: cloneSlices(m.Participant),
		ReasonCode: cloneSlices(m.ReasonCode),
		ReasonReference: cloneSlices(m.ReasonReference),
		ManagingOrganization: cloneSlices(m.ManagingOrganization),
		Telecom: cloneSlices(m.Telecom),
		Note: cloneSlices(m.Note),
	}
}

// Equals checks for equality with another CareTeam instance
func (m *CareTeam) Equals(other *CareTeam) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !compareSlices(m.Category, other.Category) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Subject.Equals(other.Subject) { return false }
	if !m.Encounter.Equals(other.Encounter) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !compareSlices(m.Participant, other.Participant) { return false }
	if !compareSlices(m.ReasonCode, other.ReasonCode) { return false }
	if !compareSlices(m.ReasonReference, other.ReasonReference) { return false }
	if !compareSlices(m.ManagingOrganization, other.ManagingOrganization) { return false }
	if !compareSlices(m.Telecom, other.Telecom) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	return true
}

// CareTeamParticipant
// Identifies all people and organizations who are expected to be involved in the care team.
type CareTeamParticipant struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Role []*CodeableConcept `json:"role,omitempty"`
	Member *Reference `json:"member,omitempty"`
	OnBehalfOf *Reference `json:"onbehalfof,omitempty"`
	Period *Period `json:"period,omitempty"`
}

// NewCareTeamParticipant creates a new CareTeamParticipant instance
func NewCareTeamParticipant() *CareTeamParticipant {
	return &CareTeamParticipant{}
}

// FromJSON populates CareTeamParticipant from JSON data
func (m *CareTeamParticipant) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CareTeamParticipant to JSON data
func (m *CareTeamParticipant) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of CareTeamParticipant
func (m *CareTeamParticipant) Clone() *CareTeamParticipant {
	if m == nil { return nil }
	return &CareTeamParticipant{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Role: cloneSlices(m.Role),
		Member: m.Member.Clone(),
		OnBehalfOf: m.OnBehalfOf.Clone(),
		Period: m.Period.Clone(),
	}
}

// Equals checks for equality with another CareTeamParticipant instance
func (m *CareTeamParticipant) Equals(other *CareTeamParticipant) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Role, other.Role) { return false }
	if !m.Member.Equals(other.Member) { return false }
	if !m.OnBehalfOf.Equals(other.OnBehalfOf) { return false }
	if !m.Period.Equals(other.Period) { return false }
	return true
}

