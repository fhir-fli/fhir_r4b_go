// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// ParameterDefinition
// The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.
type ParameterDefinition struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Name *FhirCode `json:"name,omitempty"`
	Use *OperationParameterUse `json:"use,omitempty"`
	Min *FhirInteger `json:"min,omitempty"`
	Max *FhirString `json:"max,omitempty"`
	Documentation *FhirString `json:"documentation,omitempty"`
	Type *FHIRAllTypes `json:"type,omitempty"`
	Profile *FhirCanonical `json:"profile,omitempty"`
}

// NewParameterDefinition creates a new ParameterDefinition instance
func NewParameterDefinition() *ParameterDefinition {
	return &ParameterDefinition{}
}

// FromJSON populates ParameterDefinition from JSON data
func (m *ParameterDefinition) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ParameterDefinition to JSON data
func (m *ParameterDefinition) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ParameterDefinition
func (m *ParameterDefinition) Clone() *ParameterDefinition {
	if m == nil { return nil }
	return &ParameterDefinition{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Name: m.Name.Clone(),
		Use: m.Use.Clone(),
		Min: m.Min.Clone(),
		Max: m.Max.Clone(),
		Documentation: m.Documentation.Clone(),
		Type: m.Type.Clone(),
		Profile: m.Profile.Clone(),
	}
}

// Equals checks for equality with another ParameterDefinition instance
func (m *ParameterDefinition) Equals(other *ParameterDefinition) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Use.Equals(other.Use) { return false }
	if !m.Min.Equals(other.Min) { return false }
	if !m.Max.Equals(other.Max) { return false }
	if !m.Documentation.Equals(other.Documentation) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Profile.Equals(other.Profile) { return false }
	return true
}

