// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// ActivityDefinition
// This resource allows for the definition of some activity to be performed, independent of a particular patient, practitioner, or other performance context.
type ActivityDefinition struct {
	CanonicalResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Url *FhirUri `json:"url,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Version *FhirString `json:"version,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	Subtitle *FhirString `json:"subtitle,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	Experimental *FhirBoolean `json:"experimental,omitempty"`
	SubjectCodeableConcept *CodeableConcept `json:"subjectcodeableconcept,omitempty"`
	SubjectReference *Reference `json:"subjectreference,omitempty"`
	SubjectCanonical *SubjectType `json:"subjectcanonical,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Publisher *FhirString `json:"publisher,omitempty"`
	Contact []*ContactDetail `json:"contact,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	UseContext []*UsageContext `json:"usecontext,omitempty"`
	Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`
	Purpose *FhirMarkdown `json:"purpose,omitempty"`
	Usage *FhirString `json:"usage,omitempty"`
	Copyright *FhirMarkdown `json:"copyright,omitempty"`
	ApprovalDate *FhirDate `json:"approvaldate,omitempty"`
	LastReviewDate *FhirDate `json:"lastreviewdate,omitempty"`
	EffectivePeriod *Period `json:"effectiveperiod,omitempty"`
	Topic []*CodeableConcept `json:"topic,omitempty"`
	Author []*ContactDetail `json:"author,omitempty"`
	Editor []*ContactDetail `json:"editor,omitempty"`
	Reviewer []*ContactDetail `json:"reviewer,omitempty"`
	Endorser []*ContactDetail `json:"endorser,omitempty"`
	RelatedArtifact []*RelatedArtifact `json:"relatedartifact,omitempty"`
	Library_ []*FhirCanonical `json:"library,omitempty"`
	Kind *RequestResourceType `json:"kind,omitempty"`
	Profile *FhirCanonical `json:"profile,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Intent *RequestIntent `json:"intent,omitempty"`
	Priority *RequestPriority `json:"priority,omitempty"`
	DoNotPerform *FhirBoolean `json:"donotperform,omitempty"`
	TimingTiming *Timing `json:"timingtiming,omitempty"`
	TimingDateTime *FhirDateTime `json:"timingdatetime,omitempty"`
	TimingAge *Age `json:"timingage,omitempty"`
	TimingPeriod *Period `json:"timingperiod,omitempty"`
	TimingRange *Range `json:"timingrange,omitempty"`
	TimingDuration *FhirDuration `json:"timingduration,omitempty"`
	Location *Reference `json:"location,omitempty"`
	Participant []*ActivityDefinitionParticipant `json:"participant,omitempty"`
	ProductReference *Reference `json:"productreference,omitempty"`
	ProductCodeableConcept *CodeableConcept `json:"productcodeableconcept,omitempty"`
	Quantity *Quantity `json:"quantity,omitempty"`
	Dosage []*Dosage `json:"dosage,omitempty"`
	BodySite []*CodeableConcept `json:"bodysite,omitempty"`
	SpecimenRequirement []*Reference `json:"specimenrequirement,omitempty"`
	ObservationRequirement []*Reference `json:"observationrequirement,omitempty"`
	ObservationResultRequirement []*Reference `json:"observationresultrequirement,omitempty"`
	Transform *FhirCanonical `json:"transform,omitempty"`
	DynamicValue []*ActivityDefinitionDynamicValue `json:"dynamicvalue,omitempty"`
}

// NewActivityDefinition creates a new ActivityDefinition instance
func NewActivityDefinition() *ActivityDefinition {
	return &ActivityDefinition{}
}

// FromJSON populates ActivityDefinition from JSON data
func (m *ActivityDefinition) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ActivityDefinition to JSON data
func (m *ActivityDefinition) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ActivityDefinition
func (m *ActivityDefinition) Clone() *ActivityDefinition {
	if m == nil { return nil }
	return &ActivityDefinition{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Url: m.Url.Clone(),
		Identifier: cloneSlices(m.Identifier),
		Version: m.Version.Clone(),
		Name: m.Name.Clone(),
		Title: m.Title.Clone(),
		Subtitle: m.Subtitle.Clone(),
		Status: m.Status.Clone(),
		Experimental: m.Experimental.Clone(),
		SubjectCodeableConcept: m.SubjectCodeableConcept.Clone(),
		SubjectReference: m.SubjectReference.Clone(),
		SubjectCanonical: m.SubjectCanonical.Clone(),
		Date: m.Date.Clone(),
		Publisher: m.Publisher.Clone(),
		Contact: cloneSlices(m.Contact),
		Description: m.Description.Clone(),
		UseContext: cloneSlices(m.UseContext),
		Jurisdiction: cloneSlices(m.Jurisdiction),
		Purpose: m.Purpose.Clone(),
		Usage: m.Usage.Clone(),
		Copyright: m.Copyright.Clone(),
		ApprovalDate: m.ApprovalDate.Clone(),
		LastReviewDate: m.LastReviewDate.Clone(),
		EffectivePeriod: m.EffectivePeriod.Clone(),
		Topic: cloneSlices(m.Topic),
		Author: cloneSlices(m.Author),
		Editor: cloneSlices(m.Editor),
		Reviewer: cloneSlices(m.Reviewer),
		Endorser: cloneSlices(m.Endorser),
		RelatedArtifact: cloneSlices(m.RelatedArtifact),
		Library_: cloneSlices(m.Library_),
		Kind: m.Kind.Clone(),
		Profile: m.Profile.Clone(),
		Code: m.Code.Clone(),
		Intent: m.Intent.Clone(),
		Priority: m.Priority.Clone(),
		DoNotPerform: m.DoNotPerform.Clone(),
		TimingTiming: m.TimingTiming.Clone(),
		TimingDateTime: m.TimingDateTime.Clone(),
		TimingAge: m.TimingAge.Clone(),
		TimingPeriod: m.TimingPeriod.Clone(),
		TimingRange: m.TimingRange.Clone(),
		TimingDuration: m.TimingDuration.Clone(),
		Location: m.Location.Clone(),
		Participant: cloneSlices(m.Participant),
		ProductReference: m.ProductReference.Clone(),
		ProductCodeableConcept: m.ProductCodeableConcept.Clone(),
		Quantity: m.Quantity.Clone(),
		Dosage: cloneSlices(m.Dosage),
		BodySite: cloneSlices(m.BodySite),
		SpecimenRequirement: cloneSlices(m.SpecimenRequirement),
		ObservationRequirement: cloneSlices(m.ObservationRequirement),
		ObservationResultRequirement: cloneSlices(m.ObservationResultRequirement),
		Transform: m.Transform.Clone(),
		DynamicValue: cloneSlices(m.DynamicValue),
	}
}

// Equals checks for equality with another ActivityDefinition instance
func (m *ActivityDefinition) Equals(other *ActivityDefinition) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Version.Equals(other.Version) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !m.Subtitle.Equals(other.Subtitle) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Experimental.Equals(other.Experimental) { return false }
	if !m.SubjectCodeableConcept.Equals(other.SubjectCodeableConcept) { return false }
	if !m.SubjectReference.Equals(other.SubjectReference) { return false }
	if !m.SubjectCanonical.Equals(other.SubjectCanonical) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Publisher.Equals(other.Publisher) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.UseContext, other.UseContext) { return false }
	if !compareSlices(m.Jurisdiction, other.Jurisdiction) { return false }
	if !m.Purpose.Equals(other.Purpose) { return false }
	if !m.Usage.Equals(other.Usage) { return false }
	if !m.Copyright.Equals(other.Copyright) { return false }
	if !m.ApprovalDate.Equals(other.ApprovalDate) { return false }
	if !m.LastReviewDate.Equals(other.LastReviewDate) { return false }
	if !m.EffectivePeriod.Equals(other.EffectivePeriod) { return false }
	if !compareSlices(m.Topic, other.Topic) { return false }
	if !compareSlices(m.Author, other.Author) { return false }
	if !compareSlices(m.Editor, other.Editor) { return false }
	if !compareSlices(m.Reviewer, other.Reviewer) { return false }
	if !compareSlices(m.Endorser, other.Endorser) { return false }
	if !compareSlices(m.RelatedArtifact, other.RelatedArtifact) { return false }
	if !compareSlices(m.Library_, other.Library_) { return false }
	if !m.Kind.Equals(other.Kind) { return false }
	if !m.Profile.Equals(other.Profile) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Intent.Equals(other.Intent) { return false }
	if !m.Priority.Equals(other.Priority) { return false }
	if !m.DoNotPerform.Equals(other.DoNotPerform) { return false }
	if !m.TimingTiming.Equals(other.TimingTiming) { return false }
	if !m.TimingDateTime.Equals(other.TimingDateTime) { return false }
	if !m.TimingAge.Equals(other.TimingAge) { return false }
	if !m.TimingPeriod.Equals(other.TimingPeriod) { return false }
	if !m.TimingRange.Equals(other.TimingRange) { return false }
	if !m.TimingDuration.Equals(other.TimingDuration) { return false }
	if !m.Location.Equals(other.Location) { return false }
	if !compareSlices(m.Participant, other.Participant) { return false }
	if !m.ProductReference.Equals(other.ProductReference) { return false }
	if !m.ProductCodeableConcept.Equals(other.ProductCodeableConcept) { return false }
	if !m.Quantity.Equals(other.Quantity) { return false }
	if !compareSlices(m.Dosage, other.Dosage) { return false }
	if !compareSlices(m.BodySite, other.BodySite) { return false }
	if !compareSlices(m.SpecimenRequirement, other.SpecimenRequirement) { return false }
	if !compareSlices(m.ObservationRequirement, other.ObservationRequirement) { return false }
	if !compareSlices(m.ObservationResultRequirement, other.ObservationResultRequirement) { return false }
	if !m.Transform.Equals(other.Transform) { return false }
	if !compareSlices(m.DynamicValue, other.DynamicValue) { return false }
	return true
}

// ActivityDefinitionParticipant
// Indicates who should participate in performing the action described.
type ActivityDefinitionParticipant struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Type *ActionParticipantType `json:"type,omitempty"`
	Role *CodeableConcept `json:"role,omitempty"`
}

// NewActivityDefinitionParticipant creates a new ActivityDefinitionParticipant instance
func NewActivityDefinitionParticipant() *ActivityDefinitionParticipant {
	return &ActivityDefinitionParticipant{}
}

// FromJSON populates ActivityDefinitionParticipant from JSON data
func (m *ActivityDefinitionParticipant) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ActivityDefinitionParticipant to JSON data
func (m *ActivityDefinitionParticipant) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ActivityDefinitionParticipant
func (m *ActivityDefinitionParticipant) Clone() *ActivityDefinitionParticipant {
	if m == nil { return nil }
	return &ActivityDefinitionParticipant{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Type: m.Type.Clone(),
		Role: m.Role.Clone(),
	}
}

// Equals checks for equality with another ActivityDefinitionParticipant instance
func (m *ActivityDefinitionParticipant) Equals(other *ActivityDefinitionParticipant) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Role.Equals(other.Role) { return false }
	return true
}

// ActivityDefinitionDynamicValue
// Dynamic values that will be evaluated to produce values for elements of the resulting resource. For example, if the dosage of a medication must be computed based on the patient's weight, a dynamic value would be used to specify an expression that calculated the weight, and the path on the request resource that would contain the result.
type ActivityDefinitionDynamicValue struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Path *FhirString `json:"path,omitempty"`
	Expression *FhirExpression `json:"expression,omitempty"`
}

// NewActivityDefinitionDynamicValue creates a new ActivityDefinitionDynamicValue instance
func NewActivityDefinitionDynamicValue() *ActivityDefinitionDynamicValue {
	return &ActivityDefinitionDynamicValue{}
}

// FromJSON populates ActivityDefinitionDynamicValue from JSON data
func (m *ActivityDefinitionDynamicValue) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ActivityDefinitionDynamicValue to JSON data
func (m *ActivityDefinitionDynamicValue) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ActivityDefinitionDynamicValue
func (m *ActivityDefinitionDynamicValue) Clone() *ActivityDefinitionDynamicValue {
	if m == nil { return nil }
	return &ActivityDefinitionDynamicValue{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Path: m.Path.Clone(),
		Expression: m.Expression.Clone(),
	}
}

// Equals checks for equality with another ActivityDefinitionDynamicValue instance
func (m *ActivityDefinitionDynamicValue) Equals(other *ActivityDefinitionDynamicValue) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Path.Equals(other.Path) { return false }
	if !m.Expression.Equals(other.Expression) { return false }
	return true
}

