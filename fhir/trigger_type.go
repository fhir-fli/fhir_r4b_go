// Code generated by FHIR Generator. DO NOT EDIT.
// The type of trigger.
package fhir_r4b_go
// TriggerType represents the FHIR ValueSet as an enumeration
type TriggerType struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	TriggerType_Named_event = "named-event" // Named Event: The trigger occurs in response to a specific named event, and no other information about the trigger is specified. Named events are completely pre-coordinated, and the formal semantics of the trigger are not provided.
	TriggerType_Periodic = "periodic" // Periodic: The trigger occurs at a specific time or periodically as described by a timing or schedule. A periodic event cannot have any data elements, but may have a name assigned as a shorthand for the event.
	TriggerType_Data_changed = "data-changed" // Data Changed: The trigger occurs whenever data of a particular type is changed in any way, either added, modified, or removed.
	TriggerType_Data_added = "data-added" // Data Added: The trigger occurs whenever data of a particular type is added.
	TriggerType_Data_modified = "data-modified" // Data Updated: The trigger occurs whenever data of a particular type is modified.
	TriggerType_Data_removed = "data-removed" // Data Removed: The trigger occurs whenever data of a particular type is removed.
	TriggerType_Data_accessed = "data-accessed" // Data Accessed: The trigger occurs whenever data of a particular type is accessed.
	TriggerType_Data_access_ended = "data-access-ended" // Data Access Ended: The trigger occurs whenever access to data of a particular type is completed.
)

// Clone creates a deep copy of the enum
func (e TriggerType) Clone() *TriggerType {
	return &TriggerType{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *TriggerType) Equals(other *TriggerType) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

