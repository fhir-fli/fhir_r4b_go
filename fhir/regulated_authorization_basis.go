// Code generated by FHIR Generator. DO NOT EDIT.
// A legal or regulatory framework against which an authorization is granted, or other reasons for it.
package fhir_r4b_go
// RegulatedAuthorizationBasis represents the FHIR ValueSet as an enumeration
type RegulatedAuthorizationBasis struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	RegulatedAuthorizationBasis_Full = "Full" // Full application: 
	RegulatedAuthorizationBasis_NewSubstance = "NewSubstance" // New active substance: 
	RegulatedAuthorizationBasis_KnownSubstance = "KnownSubstance" // Known active substance: 
	RegulatedAuthorizationBasis_SimilarBiological = "SimilarBiological" // Similar biological application: 
	RegulatedAuthorizationBasis_Well_establishedUse = "Well-establishedUse" // Well-established use application: 
	RegulatedAuthorizationBasis_TraditionalUse = "TraditionalUse" // Traditional use registration for herbal medicinal product application: 
	RegulatedAuthorizationBasis_Bibliographical = "Bibliographical" // Bibliographical application (stand-alone): 
	RegulatedAuthorizationBasis_KnownHumanBlood = "KnownHumanBlood" // Known human blood/plasma derived ancillary medicinal substance: 
	RegulatedAuthorizationBasis_TemporaryUse = "TemporaryUse" // Authorisations for temporary use: 
	RegulatedAuthorizationBasis_ParallelTrade = "ParallelTrade" // Parallel traded products: 
)

// Clone creates a deep copy of the enum
func (e RegulatedAuthorizationBasis) Clone() *RegulatedAuthorizationBasis {
	return &RegulatedAuthorizationBasis{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *RegulatedAuthorizationBasis) Equals(other *RegulatedAuthorizationBasis) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

