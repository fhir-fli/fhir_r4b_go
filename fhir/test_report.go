// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// TestReport
// A summary of information based on the results of executing a TestScript.
type TestReport struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier *Identifier `json:"identifier,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Status *TestReportStatus `json:"status,omitempty"`
	TestScript *Reference `json:"testscript,omitempty"`
	Result *TestReportResult `json:"result,omitempty"`
	Score *FhirDecimal `json:"score,omitempty"`
	Tester *FhirString `json:"tester,omitempty"`
	Issued *FhirDateTime `json:"issued,omitempty"`
	Participant []*TestReportParticipant `json:"participant,omitempty"`
	Setup *TestReportSetup `json:"setup,omitempty"`
	Test []*TestReportTest `json:"test,omitempty"`
	Teardown *TestReportTeardown `json:"teardown,omitempty"`
}

// NewTestReport creates a new TestReport instance
func NewTestReport() *TestReport {
	return &TestReport{}
}

// FromJSON populates TestReport from JSON data
func (m *TestReport) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReport to JSON data
func (m *TestReport) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestReport
func (m *TestReport) Clone() *TestReport {
	if m == nil { return nil }
	return &TestReport{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: m.Identifier.Clone(),
		Name: m.Name.Clone(),
		Status: m.Status.Clone(),
		TestScript: m.TestScript.Clone(),
		Result: m.Result.Clone(),
		Score: m.Score.Clone(),
		Tester: m.Tester.Clone(),
		Issued: m.Issued.Clone(),
		Participant: cloneSlices(m.Participant),
		Setup: m.Setup.Clone(),
		Test: cloneSlices(m.Test),
		Teardown: m.Teardown.Clone(),
	}
}

// Equals checks for equality with another TestReport instance
func (m *TestReport) Equals(other *TestReport) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Identifier.Equals(other.Identifier) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.TestScript.Equals(other.TestScript) { return false }
	if !m.Result.Equals(other.Result) { return false }
	if !m.Score.Equals(other.Score) { return false }
	if !m.Tester.Equals(other.Tester) { return false }
	if !m.Issued.Equals(other.Issued) { return false }
	if !compareSlices(m.Participant, other.Participant) { return false }
	if !m.Setup.Equals(other.Setup) { return false }
	if !compareSlices(m.Test, other.Test) { return false }
	if !m.Teardown.Equals(other.Teardown) { return false }
	return true
}

// TestReportParticipant
// A participant in the test execution, either the execution engine, a client, or a server.
type TestReportParticipant struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Type *TestReportParticipantType `json:"type,omitempty"`
	Uri *FhirUri `json:"uri,omitempty"`
	Display *FhirString `json:"display,omitempty"`
}

// NewTestReportParticipant creates a new TestReportParticipant instance
func NewTestReportParticipant() *TestReportParticipant {
	return &TestReportParticipant{}
}

// FromJSON populates TestReportParticipant from JSON data
func (m *TestReportParticipant) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportParticipant to JSON data
func (m *TestReportParticipant) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestReportParticipant
func (m *TestReportParticipant) Clone() *TestReportParticipant {
	if m == nil { return nil }
	return &TestReportParticipant{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Type: m.Type.Clone(),
		Uri: m.Uri.Clone(),
		Display: m.Display.Clone(),
	}
}

// Equals checks for equality with another TestReportParticipant instance
func (m *TestReportParticipant) Equals(other *TestReportParticipant) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Uri.Equals(other.Uri) { return false }
	if !m.Display.Equals(other.Display) { return false }
	return true
}

// TestReportSetup
// The results of the series of required setup operations before the tests were executed.
type TestReportSetup struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Action []*TestReportAction `json:"action,omitempty"`
}

// NewTestReportSetup creates a new TestReportSetup instance
func NewTestReportSetup() *TestReportSetup {
	return &TestReportSetup{}
}

// FromJSON populates TestReportSetup from JSON data
func (m *TestReportSetup) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportSetup to JSON data
func (m *TestReportSetup) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestReportSetup
func (m *TestReportSetup) Clone() *TestReportSetup {
	if m == nil { return nil }
	return &TestReportSetup{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Action: cloneSlices(m.Action),
	}
}

// Equals checks for equality with another TestReportSetup instance
func (m *TestReportSetup) Equals(other *TestReportSetup) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Action, other.Action) { return false }
	return true
}

// TestReportAction
// Action would contain either an operation or an assertion.
type TestReportAction struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Operation *TestReportOperation `json:"operation,omitempty"`
	Assert_ *TestReportAssert `json:"assert,omitempty"`
}

// NewTestReportAction creates a new TestReportAction instance
func NewTestReportAction() *TestReportAction {
	return &TestReportAction{}
}

// FromJSON populates TestReportAction from JSON data
func (m *TestReportAction) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportAction to JSON data
func (m *TestReportAction) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestReportAction
func (m *TestReportAction) Clone() *TestReportAction {
	if m == nil { return nil }
	return &TestReportAction{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Operation: m.Operation.Clone(),
		Assert_: m.Assert_.Clone(),
	}
}

// Equals checks for equality with another TestReportAction instance
func (m *TestReportAction) Equals(other *TestReportAction) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Operation.Equals(other.Operation) { return false }
	if !m.Assert_.Equals(other.Assert_) { return false }
	return true
}

// TestReportOperation
// The operation performed.
type TestReportOperation struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Result *TestReportActionResult `json:"result,omitempty"`
	Message *FhirMarkdown `json:"message,omitempty"`
	Detail *FhirUri `json:"detail,omitempty"`
}

// NewTestReportOperation creates a new TestReportOperation instance
func NewTestReportOperation() *TestReportOperation {
	return &TestReportOperation{}
}

// FromJSON populates TestReportOperation from JSON data
func (m *TestReportOperation) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportOperation to JSON data
func (m *TestReportOperation) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestReportOperation
func (m *TestReportOperation) Clone() *TestReportOperation {
	if m == nil { return nil }
	return &TestReportOperation{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Result: m.Result.Clone(),
		Message: m.Message.Clone(),
		Detail: m.Detail.Clone(),
	}
}

// Equals checks for equality with another TestReportOperation instance
func (m *TestReportOperation) Equals(other *TestReportOperation) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Result.Equals(other.Result) { return false }
	if !m.Message.Equals(other.Message) { return false }
	if !m.Detail.Equals(other.Detail) { return false }
	return true
}

// TestReportAssert
// The results of the assertion performed on the previous operations.
type TestReportAssert struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Result *TestReportActionResult `json:"result,omitempty"`
	Message *FhirMarkdown `json:"message,omitempty"`
	Detail *FhirString `json:"detail,omitempty"`
}

// NewTestReportAssert creates a new TestReportAssert instance
func NewTestReportAssert() *TestReportAssert {
	return &TestReportAssert{}
}

// FromJSON populates TestReportAssert from JSON data
func (m *TestReportAssert) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportAssert to JSON data
func (m *TestReportAssert) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestReportAssert
func (m *TestReportAssert) Clone() *TestReportAssert {
	if m == nil { return nil }
	return &TestReportAssert{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Result: m.Result.Clone(),
		Message: m.Message.Clone(),
		Detail: m.Detail.Clone(),
	}
}

// Equals checks for equality with another TestReportAssert instance
func (m *TestReportAssert) Equals(other *TestReportAssert) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Result.Equals(other.Result) { return false }
	if !m.Message.Equals(other.Message) { return false }
	if !m.Detail.Equals(other.Detail) { return false }
	return true
}

// TestReportTest
// A test executed from the test script.
type TestReportTest struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Action []*TestReportAction `json:"action,omitempty"`
}

// NewTestReportTest creates a new TestReportTest instance
func NewTestReportTest() *TestReportTest {
	return &TestReportTest{}
}

// FromJSON populates TestReportTest from JSON data
func (m *TestReportTest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportTest to JSON data
func (m *TestReportTest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestReportTest
func (m *TestReportTest) Clone() *TestReportTest {
	if m == nil { return nil }
	return &TestReportTest{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Name: m.Name.Clone(),
		Description: m.Description.Clone(),
		Action: cloneSlices(m.Action),
	}
}

// Equals checks for equality with another TestReportTest instance
func (m *TestReportTest) Equals(other *TestReportTest) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.Action, other.Action) { return false }
	return true
}

// TestReportAction1
// Action would contain either an operation or an assertion.
type TestReportAction1 struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Operation *TestReportOperation `json:"operation,omitempty"`
	Assert_ *TestReportAssert `json:"assert,omitempty"`
}

// NewTestReportAction1 creates a new TestReportAction1 instance
func NewTestReportAction1() *TestReportAction1 {
	return &TestReportAction1{}
}

// FromJSON populates TestReportAction1 from JSON data
func (m *TestReportAction1) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportAction1 to JSON data
func (m *TestReportAction1) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestReportAction1
func (m *TestReportAction1) Clone() *TestReportAction1 {
	if m == nil { return nil }
	return &TestReportAction1{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Operation: m.Operation.Clone(),
		Assert_: m.Assert_.Clone(),
	}
}

// Equals checks for equality with another TestReportAction1 instance
func (m *TestReportAction1) Equals(other *TestReportAction1) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Operation.Equals(other.Operation) { return false }
	if !m.Assert_.Equals(other.Assert_) { return false }
	return true
}

// TestReportTeardown
// The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
type TestReportTeardown struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Action []*TestReportAction `json:"action,omitempty"`
}

// NewTestReportTeardown creates a new TestReportTeardown instance
func NewTestReportTeardown() *TestReportTeardown {
	return &TestReportTeardown{}
}

// FromJSON populates TestReportTeardown from JSON data
func (m *TestReportTeardown) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportTeardown to JSON data
func (m *TestReportTeardown) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestReportTeardown
func (m *TestReportTeardown) Clone() *TestReportTeardown {
	if m == nil { return nil }
	return &TestReportTeardown{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Action: cloneSlices(m.Action),
	}
}

// Equals checks for equality with another TestReportTeardown instance
func (m *TestReportTeardown) Equals(other *TestReportTeardown) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Action, other.Action) { return false }
	return true
}

// TestReportAction2
// The teardown action will only contain an operation.
type TestReportAction2 struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Operation *TestReportOperation `json:"operation,omitempty"`
}

// NewTestReportAction2 creates a new TestReportAction2 instance
func NewTestReportAction2() *TestReportAction2 {
	return &TestReportAction2{}
}

// FromJSON populates TestReportAction2 from JSON data
func (m *TestReportAction2) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportAction2 to JSON data
func (m *TestReportAction2) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestReportAction2
func (m *TestReportAction2) Clone() *TestReportAction2 {
	if m == nil { return nil }
	return &TestReportAction2{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Operation: m.Operation.Clone(),
	}
}

// Equals checks for equality with another TestReportAction2 instance
func (m *TestReportAction2) Equals(other *TestReportAction2) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Operation.Equals(other.Operation) { return false }
	return true
}

