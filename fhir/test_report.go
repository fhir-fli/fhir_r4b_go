// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// TestReport
// A summary of information based on the results of executing a TestScript.
type TestReport struct {
	DomainResource
	// id
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Id FhirString `json:"id,omitempty"`
	// meta
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta FhirMeta `json:"meta,omitempty"`
	// implicitRules
	// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ImplicitRules FhirUri `json:"implicitRules,omitempty"`
	// language
	// The base language in which the resource is written.
	Language CommonLanguages `json:"language,omitempty"`
	// text
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text Narrative `json:"text,omitempty"`
	// contained
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []Resource `json:"contained,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// identifier
	// Identifier for the TestScript assigned for external purposes outside the context of FHIR.
	Identifier Identifier `json:"identifier,omitempty"`
	// name
	// A free text natural language name identifying the executed TestScript.
	Name FhirString `json:"name,omitempty"`
	// status
	// The current state of this test report.
	Status TestReportStatus `json:"status,omitempty"`
	// testScript
	// Ideally this is an absolute URL that is used to identify the version-specific TestScript that was executed, matching the `TestScript.url`.
	TestScript Reference `json:"testScript,omitempty"`
	// result
	// The overall result from the execution of the TestScript.
	Result TestReportResult `json:"result,omitempty"`
	// score
	// The final score (percentage of tests passed) resulting from the execution of the TestScript.
	Score FhirDecimal `json:"score,omitempty"`
	// tester
	// Name of the tester producing this report (Organization or individual).
	Tester FhirString `json:"tester,omitempty"`
	// issued
	// When the TestScript was executed and this TestReport was generated.
	Issued FhirDateTime `json:"issued,omitempty"`
	// participant
	// A participant in the test execution, either the execution engine, a client, or a server.
	Participant []TestReportParticipant `json:"participant,omitempty"`
	// setup
	// The results of the series of required setup operations before the tests were executed.
	Setup TestReportSetup `json:"setup,omitempty"`
	// test
	// A test executed from the test script.
	Test []TestReportTest `json:"test,omitempty"`
	// teardown
	// The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
	Teardown TestReportTeardown `json:"teardown,omitempty"`
}

// NewTestReport creates a new TestReport instance
func NewTestReport(
	id FhirString,
	meta FhirMeta,
	implicitRules FhirUri,
	language CommonLanguages,
	text Narrative,
	contained []Resource,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	identifier Identifier,
	name FhirString,
	status TestReportStatus,
	testScript Reference,
	result TestReportResult,
	score FhirDecimal,
	tester FhirString,
	issued FhirDateTime,
	participant []TestReportParticipant,
	setup TestReportSetup,
	test []TestReportTest,
	teardown TestReportTeardown,
) *TestReport {
	return &TestReport{
		Id: id,
		Meta: meta,
		ImplicitRules: implicitRules,
		Language: language,
		Text: text,
		Contained: contained,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Identifier: identifier,
		Name: name,
		Status: status,
		TestScript: testScript,
		Result: result,
		Score: score,
		Tester: tester,
		Issued: issued,
		Participant: participant,
		Setup: setup,
		Test: test,
		Teardown: teardown,
	}
}
// FromJSON populates TestReport from JSON data
func (m *TestReport) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReport to JSON data
func (m *TestReport) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of TestReport
func (m *TestReport) CopyWith(
	id *FhirString,
	meta *FhirMeta,
	implicitRules *FhirUri,
	language *CommonLanguages,
	text *Narrative,
	contained *[]Resource,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	identifier *Identifier,
	name *FhirString,
	status *TestReportStatus,
	testScript *Reference,
	result *TestReportResult,
	score *FhirDecimal,
	tester *FhirString,
	issued *FhirDateTime,
	participant *[]TestReportParticipant,
	setup *TestReportSetup,
	test *[]TestReportTest,
	teardown *TestReportTeardown,
) *TestReport {
	return &TestReport{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Meta: func() FhirMeta {
			if meta != nil { return *meta }
			return m.Meta
		}(),
		ImplicitRules: func() FhirUri {
			if implicitRules != nil { return *implicitRules }
			return m.ImplicitRules
		}(),
		Language: func() CommonLanguages {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() Narrative {
			if text != nil { return *text }
			return m.Text
		}(),
		Contained: func() []Resource {
			if contained != nil { return *contained }
			return m.Contained
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Identifier: func() Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		Name: func() FhirString {
			if name != nil { return *name }
			return m.Name
		}(),
		Status: func() TestReportStatus {
			if status != nil { return *status }
			return m.Status
		}(),
		TestScript: func() Reference {
			if testScript != nil { return *testScript }
			return m.TestScript
		}(),
		Result: func() TestReportResult {
			if result != nil { return *result }
			return m.Result
		}(),
		Score: func() FhirDecimal {
			if score != nil { return *score }
			return m.Score
		}(),
		Tester: func() FhirString {
			if tester != nil { return *tester }
			return m.Tester
		}(),
		Issued: func() FhirDateTime {
			if issued != nil { return *issued }
			return m.Issued
		}(),
		Participant: func() []TestReportParticipant {
			if participant != nil { return *participant }
			return m.Participant
		}(),
		Setup: func() TestReportSetup {
			if setup != nil { return *setup }
			return m.Setup
		}(),
		Test: func() []TestReportTest {
			if test != nil { return *test }
			return m.Test
		}(),
		Teardown: func() TestReportTeardown {
			if teardown != nil { return *teardown }
			return m.Teardown
		}(),
	}
}
// TestReportParticipant
// A participant in the test execution, either the execution engine, a client, or a server.
type TestReportParticipant struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// The type of participant.
	Type_ TestReportParticipantType `json:"type,omitempty"`
	// uri
	// The uri of the participant. An absolute URL is preferred.
	Uri FhirUri `json:"uri,omitempty"`
	// display
	// The display name of the participant.
	Display FhirString `json:"display,omitempty"`
}

// NewTestReportParticipant creates a new TestReportParticipant instance
func NewTestReportParticipant(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ TestReportParticipantType,
	uri FhirUri,
	display FhirString,
) *TestReportParticipant {
	return &TestReportParticipant{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		Uri: uri,
		Display: display,
	}
}
// FromJSON populates TestReportParticipant from JSON data
func (m *TestReportParticipant) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportParticipant to JSON data
func (m *TestReportParticipant) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of TestReportParticipant
func (m *TestReportParticipant) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *TestReportParticipantType,
	uri *FhirUri,
	display *FhirString,
) *TestReportParticipant {
	return &TestReportParticipant{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() TestReportParticipantType {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Uri: func() FhirUri {
			if uri != nil { return *uri }
			return m.Uri
		}(),
		Display: func() FhirString {
			if display != nil { return *display }
			return m.Display
		}(),
	}
}
// TestReportSetup
// The results of the series of required setup operations before the tests were executed.
type TestReportSetup struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// action
	// Action would contain either an operation or an assertion.
	Action []TestReportAction `json:"action,omitempty"`
}

// NewTestReportSetup creates a new TestReportSetup instance
func NewTestReportSetup(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	action []TestReportAction,
) *TestReportSetup {
	return &TestReportSetup{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Action: action,
	}
}
// FromJSON populates TestReportSetup from JSON data
func (m *TestReportSetup) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportSetup to JSON data
func (m *TestReportSetup) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of TestReportSetup
func (m *TestReportSetup) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	action *[]TestReportAction,
) *TestReportSetup {
	return &TestReportSetup{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Action: func() []TestReportAction {
			if action != nil { return *action }
			return m.Action
		}(),
	}
}
// TestReportAction
// Action would contain either an operation or an assertion.
type TestReportAction struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// operation
	// The operation performed.
	Operation TestReportOperation `json:"operation,omitempty"`
	// assert
	// The results of the assertion performed on the previous operations.
	Assert_ TestReportAssert `json:"assert,omitempty"`
}

// NewTestReportAction creates a new TestReportAction instance
func NewTestReportAction(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	operation TestReportOperation,
	assert_ TestReportAssert,
) *TestReportAction {
	return &TestReportAction{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Operation: operation,
		Assert_: assert_,
	}
}
// FromJSON populates TestReportAction from JSON data
func (m *TestReportAction) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportAction to JSON data
func (m *TestReportAction) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of TestReportAction
func (m *TestReportAction) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	operation *TestReportOperation,
	assert_ *TestReportAssert,
) *TestReportAction {
	return &TestReportAction{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Operation: func() TestReportOperation {
			if operation != nil { return *operation }
			return m.Operation
		}(),
		Assert_: func() TestReportAssert {
			if assert_ != nil { return *assert_ }
			return m.Assert_
		}(),
	}
}
// TestReportOperation
// The operation performed.
type TestReportOperation struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// result
	// The result of this operation.
	Result TestReportActionResult `json:"result,omitempty"`
	// message
	// An explanatory message associated with the result.
	Message FhirMarkdown `json:"message,omitempty"`
	// detail
	// A link to further details on the result.
	Detail FhirUri `json:"detail,omitempty"`
}

// NewTestReportOperation creates a new TestReportOperation instance
func NewTestReportOperation(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	result TestReportActionResult,
	message FhirMarkdown,
	detail FhirUri,
) *TestReportOperation {
	return &TestReportOperation{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Result: result,
		Message: message,
		Detail: detail,
	}
}
// FromJSON populates TestReportOperation from JSON data
func (m *TestReportOperation) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportOperation to JSON data
func (m *TestReportOperation) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of TestReportOperation
func (m *TestReportOperation) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	result *TestReportActionResult,
	message *FhirMarkdown,
	detail *FhirUri,
) *TestReportOperation {
	return &TestReportOperation{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Result: func() TestReportActionResult {
			if result != nil { return *result }
			return m.Result
		}(),
		Message: func() FhirMarkdown {
			if message != nil { return *message }
			return m.Message
		}(),
		Detail: func() FhirUri {
			if detail != nil { return *detail }
			return m.Detail
		}(),
	}
}
// TestReportAssert
// The results of the assertion performed on the previous operations.
type TestReportAssert struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// result
	// The result of this assertion.
	Result TestReportActionResult `json:"result,omitempty"`
	// message
	// An explanatory message associated with the result.
	Message FhirMarkdown `json:"message,omitempty"`
	// detail
	// A link to further details on the result.
	Detail FhirString `json:"detail,omitempty"`
}

// NewTestReportAssert creates a new TestReportAssert instance
func NewTestReportAssert(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	result TestReportActionResult,
	message FhirMarkdown,
	detail FhirString,
) *TestReportAssert {
	return &TestReportAssert{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Result: result,
		Message: message,
		Detail: detail,
	}
}
// FromJSON populates TestReportAssert from JSON data
func (m *TestReportAssert) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportAssert to JSON data
func (m *TestReportAssert) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of TestReportAssert
func (m *TestReportAssert) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	result *TestReportActionResult,
	message *FhirMarkdown,
	detail *FhirString,
) *TestReportAssert {
	return &TestReportAssert{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Result: func() TestReportActionResult {
			if result != nil { return *result }
			return m.Result
		}(),
		Message: func() FhirMarkdown {
			if message != nil { return *message }
			return m.Message
		}(),
		Detail: func() FhirString {
			if detail != nil { return *detail }
			return m.Detail
		}(),
	}
}
// TestReportTest
// A test executed from the test script.
type TestReportTest struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// name
	// The name of this test used for tracking/logging purposes by test engines.
	Name FhirString `json:"name,omitempty"`
	// description
	// A short description of the test used by test engines for tracking and reporting purposes.
	Description FhirString `json:"description,omitempty"`
	// action
	// Action would contain either an operation or an assertion.
	Action []TestReportAction `json:"action,omitempty"`
}

// NewTestReportTest creates a new TestReportTest instance
func NewTestReportTest(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	name FhirString,
	description FhirString,
	action []TestReportAction,
) *TestReportTest {
	return &TestReportTest{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Name: name,
		Description: description,
		Action: action,
	}
}
// FromJSON populates TestReportTest from JSON data
func (m *TestReportTest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportTest to JSON data
func (m *TestReportTest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of TestReportTest
func (m *TestReportTest) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	name *FhirString,
	description *FhirString,
	action *[]TestReportAction,
) *TestReportTest {
	return &TestReportTest{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Name: func() FhirString {
			if name != nil { return *name }
			return m.Name
		}(),
		Description: func() FhirString {
			if description != nil { return *description }
			return m.Description
		}(),
		Action: func() []TestReportAction {
			if action != nil { return *action }
			return m.Action
		}(),
	}
}
// TestReportAction1
// Action would contain either an operation or an assertion.
type TestReportAction1 struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// operation
	// An operation would involve a REST request to a server.
	Operation TestReportOperation `json:"operation,omitempty"`
	// assert
	// The results of the assertion performed on the previous operations.
	Assert_ TestReportAssert `json:"assert,omitempty"`
}

// NewTestReportAction1 creates a new TestReportAction1 instance
func NewTestReportAction1(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	operation TestReportOperation,
	assert_ TestReportAssert,
) *TestReportAction1 {
	return &TestReportAction1{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Operation: operation,
		Assert_: assert_,
	}
}
// FromJSON populates TestReportAction1 from JSON data
func (m *TestReportAction1) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportAction1 to JSON data
func (m *TestReportAction1) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of TestReportAction1
func (m *TestReportAction1) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	operation *TestReportOperation,
	assert_ *TestReportAssert,
) *TestReportAction1 {
	return &TestReportAction1{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Operation: func() TestReportOperation {
			if operation != nil { return *operation }
			return m.Operation
		}(),
		Assert_: func() TestReportAssert {
			if assert_ != nil { return *assert_ }
			return m.Assert_
		}(),
	}
}
// TestReportTeardown
// The results of the series of operations required to clean up after all the tests were executed (successfully or otherwise).
type TestReportTeardown struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// action
	// The teardown action will only contain an operation.
	Action []TestReportAction `json:"action,omitempty"`
}

// NewTestReportTeardown creates a new TestReportTeardown instance
func NewTestReportTeardown(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	action []TestReportAction,
) *TestReportTeardown {
	return &TestReportTeardown{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Action: action,
	}
}
// FromJSON populates TestReportTeardown from JSON data
func (m *TestReportTeardown) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportTeardown to JSON data
func (m *TestReportTeardown) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of TestReportTeardown
func (m *TestReportTeardown) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	action *[]TestReportAction,
) *TestReportTeardown {
	return &TestReportTeardown{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Action: func() []TestReportAction {
			if action != nil { return *action }
			return m.Action
		}(),
	}
}
// TestReportAction2
// The teardown action will only contain an operation.
type TestReportAction2 struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// operation
	// An operation would involve a REST request to a server.
	Operation TestReportOperation `json:"operation,omitempty"`
}

// NewTestReportAction2 creates a new TestReportAction2 instance
func NewTestReportAction2(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	operation TestReportOperation,
) *TestReportAction2 {
	return &TestReportAction2{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Operation: operation,
	}
}
// FromJSON populates TestReportAction2 from JSON data
func (m *TestReportAction2) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestReportAction2 to JSON data
func (m *TestReportAction2) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of TestReportAction2
func (m *TestReportAction2) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	operation *TestReportOperation,
) *TestReportAction2 {
	return &TestReportAction2{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Operation: func() TestReportOperation {
			if operation != nil { return *operation }
			return m.Operation
		}(),
	}
}
