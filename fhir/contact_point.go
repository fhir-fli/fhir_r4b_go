// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// ContactPoint
// Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
type ContactPoint struct {
	DataType
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// system
	// Telecommunications form for contact point - what communications system is required to make use of the contact.
	System ContactPointSystem `json:"system,omitempty"`
	// value
	// The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address).
	Value FhirString `json:"value,omitempty"`
	// use
	// Identifies the purpose for the contact point.
	Use ContactPointUse `json:"use,omitempty"`
	// rank
	// Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.
	Rank FhirPositiveInt `json:"rank,omitempty"`
	// period
	// Time period when the contact point was/is in use.
	Period Period `json:"period,omitempty"`
}

// NewContactPoint creates a new ContactPoint instance
func NewContactPoint(
	id FhirString,
	extension_ []FhirExtension,
	system ContactPointSystem,
	value FhirString,
	use ContactPointUse,
	rank FhirPositiveInt,
	period Period,
) *ContactPoint {
	return &ContactPoint{
		Id: id,
		Extension_: extension_,
		System: system,
		Value: value,
		Use: use,
		Rank: rank,
		Period: period,
	}
}
// FromJSON populates ContactPoint from JSON data
func (m *ContactPoint) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ContactPoint to JSON data
func (m *ContactPoint) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ContactPoint
func (m *ContactPoint) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	system *ContactPointSystem,
	value *FhirString,
	use *ContactPointUse,
	rank *FhirPositiveInt,
	period *Period,
) *ContactPoint {
	return &ContactPoint{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		System: func() ContactPointSystem {
			if system != nil { return *system }
			return m.System
		}(),
		Value: func() FhirString {
			if value != nil { return *value }
			return m.Value
		}(),
		Use: func() ContactPointUse {
			if use != nil { return *use }
			return m.Use
		}(),
		Rank: func() FhirPositiveInt {
			if rank != nil { return *rank }
			return m.Rank
		}(),
		Period: func() Period {
			if period != nil { return *period }
			return m.Period
		}(),
	}
}
