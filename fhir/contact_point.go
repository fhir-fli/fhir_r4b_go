// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// ContactPoint
// Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
type ContactPoint struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	System *ContactPointSystem `json:"system,omitempty"`
	Value *FhirString `json:"value,omitempty"`
	Use *ContactPointUse `json:"use,omitempty"`
	Rank *FhirPositiveInt `json:"rank,omitempty"`
	Period *Period `json:"period,omitempty"`
}

// NewContactPoint creates a new ContactPoint instance
func NewContactPoint() *ContactPoint {
	return &ContactPoint{}
}

// FromJSON populates ContactPoint from JSON data
func (m *ContactPoint) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ContactPoint to JSON data
func (m *ContactPoint) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ContactPoint
func (m *ContactPoint) Clone() *ContactPoint {
	if m == nil { return nil }
	return &ContactPoint{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		System: m.System.Clone(),
		Value: m.Value.Clone(),
		Use: m.Use.Clone(),
		Rank: m.Rank.Clone(),
		Period: m.Period.Clone(),
	}
}

// Equals checks for equality with another ContactPoint instance
func (m *ContactPoint) Equals(other *ContactPoint) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.System.Equals(other.System) { return false }
	if !m.Value.Equals(other.Value) { return false }
	if !m.Use.Equals(other.Use) { return false }
	if !m.Rank.Equals(other.Rank) { return false }
	if !m.Period.Equals(other.Period) { return false }
	return true
}

