// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// DocumentManifest
// A collection of documents compiled for a purpose together with metadata that applies to the collection.
type DocumentManifest struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	MasterIdentifier *Identifier `json:"masteridentifier,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *DocumentReferenceStatus `json:"status,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	Subject *Reference `json:"subject,omitempty"`
	Created *FhirDateTime `json:"created,omitempty"`
	Author []*Reference `json:"author,omitempty"`
	Recipient []*Reference `json:"recipient,omitempty"`
	Source *FhirUri `json:"source,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Content []*Reference `json:"content,omitempty"`
	Related []*DocumentManifestRelated `json:"related,omitempty"`
}

// NewDocumentManifest creates a new DocumentManifest instance
func NewDocumentManifest() *DocumentManifest {
	return &DocumentManifest{}
}

// FromJSON populates DocumentManifest from JSON data
func (m *DocumentManifest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DocumentManifest to JSON data
func (m *DocumentManifest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of DocumentManifest
func (m *DocumentManifest) Clone() *DocumentManifest {
	if m == nil { return nil }
	return &DocumentManifest{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		MasterIdentifier: m.MasterIdentifier.Clone(),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		Type: m.Type.Clone(),
		Subject: m.Subject.Clone(),
		Created: m.Created.Clone(),
		Author: cloneSlices(m.Author),
		Recipient: cloneSlices(m.Recipient),
		Source: m.Source.Clone(),
		Description: m.Description.Clone(),
		Content: cloneSlices(m.Content),
		Related: cloneSlices(m.Related),
	}
}

// Equals checks for equality with another DocumentManifest instance
func (m *DocumentManifest) Equals(other *DocumentManifest) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.MasterIdentifier.Equals(other.MasterIdentifier) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Subject.Equals(other.Subject) { return false }
	if !m.Created.Equals(other.Created) { return false }
	if !compareSlices(m.Author, other.Author) { return false }
	if !compareSlices(m.Recipient, other.Recipient) { return false }
	if !m.Source.Equals(other.Source) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.Content, other.Content) { return false }
	if !compareSlices(m.Related, other.Related) { return false }
	return true
}

// DocumentManifestRelated
// Related identifiers or resources associated with the DocumentManifest.
type DocumentManifestRelated struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier *Identifier `json:"identifier,omitempty"`
	Ref *Reference `json:"ref,omitempty"`
}

// NewDocumentManifestRelated creates a new DocumentManifestRelated instance
func NewDocumentManifestRelated() *DocumentManifestRelated {
	return &DocumentManifestRelated{}
}

// FromJSON populates DocumentManifestRelated from JSON data
func (m *DocumentManifestRelated) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DocumentManifestRelated to JSON data
func (m *DocumentManifestRelated) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of DocumentManifestRelated
func (m *DocumentManifestRelated) Clone() *DocumentManifestRelated {
	if m == nil { return nil }
	return &DocumentManifestRelated{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: m.Identifier.Clone(),
		Ref: m.Ref.Clone(),
	}
}

// Equals checks for equality with another DocumentManifestRelated instance
func (m *DocumentManifestRelated) Equals(other *DocumentManifestRelated) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Identifier.Equals(other.Identifier) { return false }
	if !m.Ref.Equals(other.Ref) { return false }
	return true
}

