// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// VerificationResult
// Describes validation requirements, source(s), status and dates for one or more elements.
type VerificationResult struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Target []*Reference `json:"target,omitempty"`
	TargetLocation []*FhirString `json:"targetlocation,omitempty"`
	Need *CodeableConcept `json:"need,omitempty"`
	Status *Status `json:"status,omitempty"`
	StatusDate *FhirDateTime `json:"statusdate,omitempty"`
	ValidationType *CodeableConcept `json:"validationtype,omitempty"`
	ValidationProcess []*CodeableConcept `json:"validationprocess,omitempty"`
	Frequency *Timing `json:"frequency,omitempty"`
	LastPerformed *FhirDateTime `json:"lastperformed,omitempty"`
	NextScheduled *FhirDate `json:"nextscheduled,omitempty"`
	FailureAction *CodeableConcept `json:"failureaction,omitempty"`
	PrimarySource []*VerificationResultPrimarySource `json:"primarysource,omitempty"`
	Attestation *VerificationResultAttestation `json:"attestation,omitempty"`
	Validator []*VerificationResultValidator `json:"validator,omitempty"`
}

// NewVerificationResult creates a new VerificationResult instance
func NewVerificationResult() *VerificationResult {
	return &VerificationResult{}
}

// FromJSON populates VerificationResult from JSON data
func (m *VerificationResult) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts VerificationResult to JSON data
func (m *VerificationResult) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of VerificationResult
func (m *VerificationResult) Clone() *VerificationResult {
	if m == nil { return nil }
	return &VerificationResult{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Target: cloneSlices(m.Target),
		TargetLocation: cloneSlices(m.TargetLocation),
		Need: m.Need.Clone(),
		Status: m.Status.Clone(),
		StatusDate: m.StatusDate.Clone(),
		ValidationType: m.ValidationType.Clone(),
		ValidationProcess: cloneSlices(m.ValidationProcess),
		Frequency: m.Frequency.Clone(),
		LastPerformed: m.LastPerformed.Clone(),
		NextScheduled: m.NextScheduled.Clone(),
		FailureAction: m.FailureAction.Clone(),
		PrimarySource: cloneSlices(m.PrimarySource),
		Attestation: m.Attestation.Clone(),
		Validator: cloneSlices(m.Validator),
	}
}

// Equals checks for equality with another VerificationResult instance
func (m *VerificationResult) Equals(other *VerificationResult) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Target, other.Target) { return false }
	if !compareSlices(m.TargetLocation, other.TargetLocation) { return false }
	if !m.Need.Equals(other.Need) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.StatusDate.Equals(other.StatusDate) { return false }
	if !m.ValidationType.Equals(other.ValidationType) { return false }
	if !compareSlices(m.ValidationProcess, other.ValidationProcess) { return false }
	if !m.Frequency.Equals(other.Frequency) { return false }
	if !m.LastPerformed.Equals(other.LastPerformed) { return false }
	if !m.NextScheduled.Equals(other.NextScheduled) { return false }
	if !m.FailureAction.Equals(other.FailureAction) { return false }
	if !compareSlices(m.PrimarySource, other.PrimarySource) { return false }
	if !m.Attestation.Equals(other.Attestation) { return false }
	if !compareSlices(m.Validator, other.Validator) { return false }
	return true
}

// VerificationResultPrimarySource
// Information about the primary source(s) involved in validation.
type VerificationResultPrimarySource struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Who *Reference `json:"who,omitempty"`
	Type []*CodeableConcept `json:"type,omitempty"`
	CommunicationMethod []*CodeableConcept `json:"communicationmethod,omitempty"`
	ValidationStatus *CodeableConcept `json:"validationstatus,omitempty"`
	ValidationDate *FhirDateTime `json:"validationdate,omitempty"`
	CanPushUpdates *CodeableConcept `json:"canpushupdates,omitempty"`
	PushTypeAvailable []*CodeableConcept `json:"pushtypeavailable,omitempty"`
}

// NewVerificationResultPrimarySource creates a new VerificationResultPrimarySource instance
func NewVerificationResultPrimarySource() *VerificationResultPrimarySource {
	return &VerificationResultPrimarySource{}
}

// FromJSON populates VerificationResultPrimarySource from JSON data
func (m *VerificationResultPrimarySource) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts VerificationResultPrimarySource to JSON data
func (m *VerificationResultPrimarySource) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of VerificationResultPrimarySource
func (m *VerificationResultPrimarySource) Clone() *VerificationResultPrimarySource {
	if m == nil { return nil }
	return &VerificationResultPrimarySource{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Who: m.Who.Clone(),
		Type: cloneSlices(m.Type),
		CommunicationMethod: cloneSlices(m.CommunicationMethod),
		ValidationStatus: m.ValidationStatus.Clone(),
		ValidationDate: m.ValidationDate.Clone(),
		CanPushUpdates: m.CanPushUpdates.Clone(),
		PushTypeAvailable: cloneSlices(m.PushTypeAvailable),
	}
}

// Equals checks for equality with another VerificationResultPrimarySource instance
func (m *VerificationResultPrimarySource) Equals(other *VerificationResultPrimarySource) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Who.Equals(other.Who) { return false }
	if !compareSlices(m.Type, other.Type) { return false }
	if !compareSlices(m.CommunicationMethod, other.CommunicationMethod) { return false }
	if !m.ValidationStatus.Equals(other.ValidationStatus) { return false }
	if !m.ValidationDate.Equals(other.ValidationDate) { return false }
	if !m.CanPushUpdates.Equals(other.CanPushUpdates) { return false }
	if !compareSlices(m.PushTypeAvailable, other.PushTypeAvailable) { return false }
	return true
}

// VerificationResultAttestation
// Information about the entity attesting to information.
type VerificationResultAttestation struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Who *Reference `json:"who,omitempty"`
	OnBehalfOf *Reference `json:"onbehalfof,omitempty"`
	CommunicationMethod *CodeableConcept `json:"communicationmethod,omitempty"`
	Date *FhirDate `json:"date,omitempty"`
	SourceIdentityCertificate *FhirString `json:"sourceidentitycertificate,omitempty"`
	ProxyIdentityCertificate *FhirString `json:"proxyidentitycertificate,omitempty"`
	ProxySignature *Signature `json:"proxysignature,omitempty"`
	SourceSignature *Signature `json:"sourcesignature,omitempty"`
}

// NewVerificationResultAttestation creates a new VerificationResultAttestation instance
func NewVerificationResultAttestation() *VerificationResultAttestation {
	return &VerificationResultAttestation{}
}

// FromJSON populates VerificationResultAttestation from JSON data
func (m *VerificationResultAttestation) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts VerificationResultAttestation to JSON data
func (m *VerificationResultAttestation) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of VerificationResultAttestation
func (m *VerificationResultAttestation) Clone() *VerificationResultAttestation {
	if m == nil { return nil }
	return &VerificationResultAttestation{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Who: m.Who.Clone(),
		OnBehalfOf: m.OnBehalfOf.Clone(),
		CommunicationMethod: m.CommunicationMethod.Clone(),
		Date: m.Date.Clone(),
		SourceIdentityCertificate: m.SourceIdentityCertificate.Clone(),
		ProxyIdentityCertificate: m.ProxyIdentityCertificate.Clone(),
		ProxySignature: m.ProxySignature.Clone(),
		SourceSignature: m.SourceSignature.Clone(),
	}
}

// Equals checks for equality with another VerificationResultAttestation instance
func (m *VerificationResultAttestation) Equals(other *VerificationResultAttestation) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Who.Equals(other.Who) { return false }
	if !m.OnBehalfOf.Equals(other.OnBehalfOf) { return false }
	if !m.CommunicationMethod.Equals(other.CommunicationMethod) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.SourceIdentityCertificate.Equals(other.SourceIdentityCertificate) { return false }
	if !m.ProxyIdentityCertificate.Equals(other.ProxyIdentityCertificate) { return false }
	if !m.ProxySignature.Equals(other.ProxySignature) { return false }
	if !m.SourceSignature.Equals(other.SourceSignature) { return false }
	return true
}

// VerificationResultValidator
// Information about the entity validating information.
type VerificationResultValidator struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Organization *Reference `json:"organization,omitempty"`
	IdentityCertificate *FhirString `json:"identitycertificate,omitempty"`
	AttestationSignature *Signature `json:"attestationsignature,omitempty"`
}

// NewVerificationResultValidator creates a new VerificationResultValidator instance
func NewVerificationResultValidator() *VerificationResultValidator {
	return &VerificationResultValidator{}
}

// FromJSON populates VerificationResultValidator from JSON data
func (m *VerificationResultValidator) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts VerificationResultValidator to JSON data
func (m *VerificationResultValidator) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of VerificationResultValidator
func (m *VerificationResultValidator) Clone() *VerificationResultValidator {
	if m == nil { return nil }
	return &VerificationResultValidator{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Organization: m.Organization.Clone(),
		IdentityCertificate: m.IdentityCertificate.Clone(),
		AttestationSignature: m.AttestationSignature.Clone(),
	}
}

// Equals checks for equality with another VerificationResultValidator instance
func (m *VerificationResultValidator) Equals(other *VerificationResultValidator) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Organization.Equals(other.Organization) { return false }
	if !m.IdentityCertificate.Equals(other.IdentityCertificate) { return false }
	if !m.AttestationSignature.Equals(other.AttestationSignature) { return false }
	return true
}

