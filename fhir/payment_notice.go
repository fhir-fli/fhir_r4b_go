// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// PaymentNotice
// This resource provides the status of the payment for goods and services rendered, and the request and response resource references.
type PaymentNotice struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *FinancialResourceStatusCodes `json:"status,omitempty"`
	Request *Reference `json:"request,omitempty"`
	Response *Reference `json:"response,omitempty"`
	Created *FhirDateTime `json:"created,omitempty"`
	Provider *Reference `json:"provider,omitempty"`
	Payment *Reference `json:"payment,omitempty"`
	PaymentDate *FhirDate `json:"paymentdate,omitempty"`
	Payee *Reference `json:"payee,omitempty"`
	Recipient *Reference `json:"recipient,omitempty"`
	Amount *Money `json:"amount,omitempty"`
	PaymentStatus *CodeableConcept `json:"paymentstatus,omitempty"`
}

// NewPaymentNotice creates a new PaymentNotice instance
func NewPaymentNotice() *PaymentNotice {
	return &PaymentNotice{}
}

// FromJSON populates PaymentNotice from JSON data
func (m *PaymentNotice) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PaymentNotice to JSON data
func (m *PaymentNotice) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of PaymentNotice
func (m *PaymentNotice) Clone() *PaymentNotice {
	if m == nil { return nil }
	return &PaymentNotice{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		Request: m.Request.Clone(),
		Response: m.Response.Clone(),
		Created: m.Created.Clone(),
		Provider: m.Provider.Clone(),
		Payment: m.Payment.Clone(),
		PaymentDate: m.PaymentDate.Clone(),
		Payee: m.Payee.Clone(),
		Recipient: m.Recipient.Clone(),
		Amount: m.Amount.Clone(),
		PaymentStatus: m.PaymentStatus.Clone(),
	}
}

// Equals checks for equality with another PaymentNotice instance
func (m *PaymentNotice) Equals(other *PaymentNotice) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Request.Equals(other.Request) { return false }
	if !m.Response.Equals(other.Response) { return false }
	if !m.Created.Equals(other.Created) { return false }
	if !m.Provider.Equals(other.Provider) { return false }
	if !m.Payment.Equals(other.Payment) { return false }
	if !m.PaymentDate.Equals(other.PaymentDate) { return false }
	if !m.Payee.Equals(other.Payee) { return false }
	if !m.Recipient.Equals(other.Recipient) { return false }
	if !m.Amount.Equals(other.Amount) { return false }
	if !m.PaymentStatus.Equals(other.PaymentStatus) { return false }
	return true
}

