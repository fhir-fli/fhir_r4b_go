// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// ImplementationGuide
// A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
type ImplementationGuide struct {
	CanonicalResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Url *FhirUri `json:"url,omitempty"`
	Version *FhirString `json:"version,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	Experimental *FhirBoolean `json:"experimental,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Publisher *FhirString `json:"publisher,omitempty"`
	Contact []*ContactDetail `json:"contact,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	UseContext []*UsageContext `json:"usecontext,omitempty"`
	Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`
	Copyright *FhirMarkdown `json:"copyright,omitempty"`
	PackageId *FhirId `json:"packageid,omitempty"`
	License *SPDXLicense `json:"license,omitempty"`
	FhirVersion []*FHIRVersion `json:"fhirversion,omitempty"`
	DependsOn []*ImplementationGuideDependsOn `json:"dependson,omitempty"`
	Global []*ImplementationGuideGlobal `json:"global,omitempty"`
	Definition *ImplementationGuideDefinition `json:"definition,omitempty"`
	Manifest *ImplementationGuideManifest `json:"manifest,omitempty"`
}

// NewImplementationGuide creates a new ImplementationGuide instance
func NewImplementationGuide() *ImplementationGuide {
	return &ImplementationGuide{}
}

// FromJSON populates ImplementationGuide from JSON data
func (m *ImplementationGuide) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuide to JSON data
func (m *ImplementationGuide) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ImplementationGuide
func (m *ImplementationGuide) Clone() *ImplementationGuide {
	if m == nil { return nil }
	return &ImplementationGuide{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Url: m.Url.Clone(),
		Version: m.Version.Clone(),
		Name: m.Name.Clone(),
		Title: m.Title.Clone(),
		Status: m.Status.Clone(),
		Experimental: m.Experimental.Clone(),
		Date: m.Date.Clone(),
		Publisher: m.Publisher.Clone(),
		Contact: cloneSlices(m.Contact),
		Description: m.Description.Clone(),
		UseContext: cloneSlices(m.UseContext),
		Jurisdiction: cloneSlices(m.Jurisdiction),
		Copyright: m.Copyright.Clone(),
		PackageId: m.PackageId.Clone(),
		License: m.License.Clone(),
		FhirVersion: cloneSlices(m.FhirVersion),
		DependsOn: cloneSlices(m.DependsOn),
		Global: cloneSlices(m.Global),
		Definition: m.Definition.Clone(),
		Manifest: m.Manifest.Clone(),
	}
}

// Equals checks for equality with another ImplementationGuide instance
func (m *ImplementationGuide) Equals(other *ImplementationGuide) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !m.Version.Equals(other.Version) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Experimental.Equals(other.Experimental) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Publisher.Equals(other.Publisher) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.UseContext, other.UseContext) { return false }
	if !compareSlices(m.Jurisdiction, other.Jurisdiction) { return false }
	if !m.Copyright.Equals(other.Copyright) { return false }
	if !m.PackageId.Equals(other.PackageId) { return false }
	if !m.License.Equals(other.License) { return false }
	if !compareSlices(m.FhirVersion, other.FhirVersion) { return false }
	if !compareSlices(m.DependsOn, other.DependsOn) { return false }
	if !compareSlices(m.Global, other.Global) { return false }
	if !m.Definition.Equals(other.Definition) { return false }
	if !m.Manifest.Equals(other.Manifest) { return false }
	return true
}

// ImplementationGuideDependsOn
// Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
type ImplementationGuideDependsOn struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Uri *FhirCanonical `json:"uri,omitempty"`
	PackageId *FhirId `json:"packageid,omitempty"`
	Version *FhirString `json:"version,omitempty"`
}

// NewImplementationGuideDependsOn creates a new ImplementationGuideDependsOn instance
func NewImplementationGuideDependsOn() *ImplementationGuideDependsOn {
	return &ImplementationGuideDependsOn{}
}

// FromJSON populates ImplementationGuideDependsOn from JSON data
func (m *ImplementationGuideDependsOn) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideDependsOn to JSON data
func (m *ImplementationGuideDependsOn) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ImplementationGuideDependsOn
func (m *ImplementationGuideDependsOn) Clone() *ImplementationGuideDependsOn {
	if m == nil { return nil }
	return &ImplementationGuideDependsOn{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Uri: m.Uri.Clone(),
		PackageId: m.PackageId.Clone(),
		Version: m.Version.Clone(),
	}
}

// Equals checks for equality with another ImplementationGuideDependsOn instance
func (m *ImplementationGuideDependsOn) Equals(other *ImplementationGuideDependsOn) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Uri.Equals(other.Uri) { return false }
	if !m.PackageId.Equals(other.PackageId) { return false }
	if !m.Version.Equals(other.Version) { return false }
	return true
}

// ImplementationGuideGlobal
// A set of profiles that all resources covered by this implementation guide must conform to.
type ImplementationGuideGlobal struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Type *FhirCode `json:"type,omitempty"`
	Profile *FhirCanonical `json:"profile,omitempty"`
}

// NewImplementationGuideGlobal creates a new ImplementationGuideGlobal instance
func NewImplementationGuideGlobal() *ImplementationGuideGlobal {
	return &ImplementationGuideGlobal{}
}

// FromJSON populates ImplementationGuideGlobal from JSON data
func (m *ImplementationGuideGlobal) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideGlobal to JSON data
func (m *ImplementationGuideGlobal) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ImplementationGuideGlobal
func (m *ImplementationGuideGlobal) Clone() *ImplementationGuideGlobal {
	if m == nil { return nil }
	return &ImplementationGuideGlobal{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Type: m.Type.Clone(),
		Profile: m.Profile.Clone(),
	}
}

// Equals checks for equality with another ImplementationGuideGlobal instance
func (m *ImplementationGuideGlobal) Equals(other *ImplementationGuideGlobal) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Profile.Equals(other.Profile) { return false }
	return true
}

// ImplementationGuideDefinition
// The information needed by an IG publisher tool to publish the whole implementation guide.
type ImplementationGuideDefinition struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Grouping []*ImplementationGuideGrouping `json:"grouping,omitempty"`
	Resource []*ImplementationGuideResource `json:"resource,omitempty"`
	Page *ImplementationGuidePage `json:"page,omitempty"`
	Parameter []*ImplementationGuideParameter `json:"parameter,omitempty"`
	Template []*ImplementationGuideTemplate `json:"template,omitempty"`
}

// NewImplementationGuideDefinition creates a new ImplementationGuideDefinition instance
func NewImplementationGuideDefinition() *ImplementationGuideDefinition {
	return &ImplementationGuideDefinition{}
}

// FromJSON populates ImplementationGuideDefinition from JSON data
func (m *ImplementationGuideDefinition) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideDefinition to JSON data
func (m *ImplementationGuideDefinition) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ImplementationGuideDefinition
func (m *ImplementationGuideDefinition) Clone() *ImplementationGuideDefinition {
	if m == nil { return nil }
	return &ImplementationGuideDefinition{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Grouping: cloneSlices(m.Grouping),
		Resource: cloneSlices(m.Resource),
		Page: m.Page.Clone(),
		Parameter: cloneSlices(m.Parameter),
		Template: cloneSlices(m.Template),
	}
}

// Equals checks for equality with another ImplementationGuideDefinition instance
func (m *ImplementationGuideDefinition) Equals(other *ImplementationGuideDefinition) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Grouping, other.Grouping) { return false }
	if !compareSlices(m.Resource, other.Resource) { return false }
	if !m.Page.Equals(other.Page) { return false }
	if !compareSlices(m.Parameter, other.Parameter) { return false }
	if !compareSlices(m.Template, other.Template) { return false }
	return true
}

// ImplementationGuideGrouping
// A logical group of resources. Logical groups can be used when building pages.
type ImplementationGuideGrouping struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Description *FhirString `json:"description,omitempty"`
}

// NewImplementationGuideGrouping creates a new ImplementationGuideGrouping instance
func NewImplementationGuideGrouping() *ImplementationGuideGrouping {
	return &ImplementationGuideGrouping{}
}

// FromJSON populates ImplementationGuideGrouping from JSON data
func (m *ImplementationGuideGrouping) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideGrouping to JSON data
func (m *ImplementationGuideGrouping) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ImplementationGuideGrouping
func (m *ImplementationGuideGrouping) Clone() *ImplementationGuideGrouping {
	if m == nil { return nil }
	return &ImplementationGuideGrouping{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Name: m.Name.Clone(),
		Description: m.Description.Clone(),
	}
}

// Equals checks for equality with another ImplementationGuideGrouping instance
func (m *ImplementationGuideGrouping) Equals(other *ImplementationGuideGrouping) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Description.Equals(other.Description) { return false }
	return true
}

// ImplementationGuideResource
// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
type ImplementationGuideResource struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Reference *Reference `json:"reference,omitempty"`
	FhirVersion []*FHIRVersion `json:"fhirversion,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	ExampleBoolean *FhirBoolean `json:"exampleboolean,omitempty"`
	ExampleCanonical *FhirCanonical `json:"examplecanonical,omitempty"`
	GroupingId *FhirId `json:"groupingid,omitempty"`
}

// NewImplementationGuideResource creates a new ImplementationGuideResource instance
func NewImplementationGuideResource() *ImplementationGuideResource {
	return &ImplementationGuideResource{}
}

// FromJSON populates ImplementationGuideResource from JSON data
func (m *ImplementationGuideResource) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideResource to JSON data
func (m *ImplementationGuideResource) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ImplementationGuideResource
func (m *ImplementationGuideResource) Clone() *ImplementationGuideResource {
	if m == nil { return nil }
	return &ImplementationGuideResource{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Reference: m.Reference.Clone(),
		FhirVersion: cloneSlices(m.FhirVersion),
		Name: m.Name.Clone(),
		Description: m.Description.Clone(),
		ExampleBoolean: m.ExampleBoolean.Clone(),
		ExampleCanonical: m.ExampleCanonical.Clone(),
		GroupingId: m.GroupingId.Clone(),
	}
}

// Equals checks for equality with another ImplementationGuideResource instance
func (m *ImplementationGuideResource) Equals(other *ImplementationGuideResource) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Reference.Equals(other.Reference) { return false }
	if !compareSlices(m.FhirVersion, other.FhirVersion) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.ExampleBoolean.Equals(other.ExampleBoolean) { return false }
	if !m.ExampleCanonical.Equals(other.ExampleCanonical) { return false }
	if !m.GroupingId.Equals(other.GroupingId) { return false }
	return true
}

// ImplementationGuidePage
// A page / section in the implementation guide. The root page is the implementation guide home page.
type ImplementationGuidePage struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	NameUrl *FhirUrl `json:"nameurl,omitempty"`
	NameReference *Reference `json:"namereference,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	Generation *GuidePageGeneration `json:"generation,omitempty"`
	Page []*ImplementationGuidePage `json:"page,omitempty"`
}

// NewImplementationGuidePage creates a new ImplementationGuidePage instance
func NewImplementationGuidePage() *ImplementationGuidePage {
	return &ImplementationGuidePage{}
}

// FromJSON populates ImplementationGuidePage from JSON data
func (m *ImplementationGuidePage) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuidePage to JSON data
func (m *ImplementationGuidePage) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ImplementationGuidePage
func (m *ImplementationGuidePage) Clone() *ImplementationGuidePage {
	if m == nil { return nil }
	return &ImplementationGuidePage{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		NameUrl: m.NameUrl.Clone(),
		NameReference: m.NameReference.Clone(),
		Title: m.Title.Clone(),
		Generation: m.Generation.Clone(),
		Page: cloneSlices(m.Page),
	}
}

// Equals checks for equality with another ImplementationGuidePage instance
func (m *ImplementationGuidePage) Equals(other *ImplementationGuidePage) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.NameUrl.Equals(other.NameUrl) { return false }
	if !m.NameReference.Equals(other.NameReference) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !m.Generation.Equals(other.Generation) { return false }
	if !compareSlices(m.Page, other.Page) { return false }
	return true
}

// ImplementationGuideParameter
// Defines how IG is built by tools.
type ImplementationGuideParameter struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *GuideParameterCode `json:"code,omitempty"`
	Value *FhirString `json:"value,omitempty"`
}

// NewImplementationGuideParameter creates a new ImplementationGuideParameter instance
func NewImplementationGuideParameter() *ImplementationGuideParameter {
	return &ImplementationGuideParameter{}
}

// FromJSON populates ImplementationGuideParameter from JSON data
func (m *ImplementationGuideParameter) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideParameter to JSON data
func (m *ImplementationGuideParameter) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ImplementationGuideParameter
func (m *ImplementationGuideParameter) Clone() *ImplementationGuideParameter {
	if m == nil { return nil }
	return &ImplementationGuideParameter{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		Value: m.Value.Clone(),
	}
}

// Equals checks for equality with another ImplementationGuideParameter instance
func (m *ImplementationGuideParameter) Equals(other *ImplementationGuideParameter) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Value.Equals(other.Value) { return false }
	return true
}

// ImplementationGuideTemplate
// A template for building resources.
type ImplementationGuideTemplate struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *FhirCode `json:"code,omitempty"`
	Source *FhirString `json:"source,omitempty"`
	Scope *FhirString `json:"scope,omitempty"`
}

// NewImplementationGuideTemplate creates a new ImplementationGuideTemplate instance
func NewImplementationGuideTemplate() *ImplementationGuideTemplate {
	return &ImplementationGuideTemplate{}
}

// FromJSON populates ImplementationGuideTemplate from JSON data
func (m *ImplementationGuideTemplate) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideTemplate to JSON data
func (m *ImplementationGuideTemplate) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ImplementationGuideTemplate
func (m *ImplementationGuideTemplate) Clone() *ImplementationGuideTemplate {
	if m == nil { return nil }
	return &ImplementationGuideTemplate{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		Source: m.Source.Clone(),
		Scope: m.Scope.Clone(),
	}
}

// Equals checks for equality with another ImplementationGuideTemplate instance
func (m *ImplementationGuideTemplate) Equals(other *ImplementationGuideTemplate) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Source.Equals(other.Source) { return false }
	if !m.Scope.Equals(other.Scope) { return false }
	return true
}

// ImplementationGuideManifest
// Information about an assembled implementation guide, created by the publication tooling.
type ImplementationGuideManifest struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Rendering *FhirUrl `json:"rendering,omitempty"`
	Resource []*ImplementationGuideResource `json:"resource,omitempty"`
	Page []*ImplementationGuidePage `json:"page,omitempty"`
	Image []*FhirString `json:"image,omitempty"`
	Other []*FhirString `json:"other,omitempty"`
}

// NewImplementationGuideManifest creates a new ImplementationGuideManifest instance
func NewImplementationGuideManifest() *ImplementationGuideManifest {
	return &ImplementationGuideManifest{}
}

// FromJSON populates ImplementationGuideManifest from JSON data
func (m *ImplementationGuideManifest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideManifest to JSON data
func (m *ImplementationGuideManifest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ImplementationGuideManifest
func (m *ImplementationGuideManifest) Clone() *ImplementationGuideManifest {
	if m == nil { return nil }
	return &ImplementationGuideManifest{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Rendering: m.Rendering.Clone(),
		Resource: cloneSlices(m.Resource),
		Page: cloneSlices(m.Page),
		Image: cloneSlices(m.Image),
		Other: cloneSlices(m.Other),
	}
}

// Equals checks for equality with another ImplementationGuideManifest instance
func (m *ImplementationGuideManifest) Equals(other *ImplementationGuideManifest) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Rendering.Equals(other.Rendering) { return false }
	if !compareSlices(m.Resource, other.Resource) { return false }
	if !compareSlices(m.Page, other.Page) { return false }
	if !compareSlices(m.Image, other.Image) { return false }
	if !compareSlices(m.Other, other.Other) { return false }
	return true
}

// ImplementationGuideResource1
// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
type ImplementationGuideResource1 struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Reference *Reference `json:"reference,omitempty"`
	ExampleBoolean *FhirBoolean `json:"exampleboolean,omitempty"`
	ExampleCanonical *FhirCanonical `json:"examplecanonical,omitempty"`
	RelativePath *FhirUrl `json:"relativepath,omitempty"`
}

// NewImplementationGuideResource1 creates a new ImplementationGuideResource1 instance
func NewImplementationGuideResource1() *ImplementationGuideResource1 {
	return &ImplementationGuideResource1{}
}

// FromJSON populates ImplementationGuideResource1 from JSON data
func (m *ImplementationGuideResource1) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideResource1 to JSON data
func (m *ImplementationGuideResource1) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ImplementationGuideResource1
func (m *ImplementationGuideResource1) Clone() *ImplementationGuideResource1 {
	if m == nil { return nil }
	return &ImplementationGuideResource1{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Reference: m.Reference.Clone(),
		ExampleBoolean: m.ExampleBoolean.Clone(),
		ExampleCanonical: m.ExampleCanonical.Clone(),
		RelativePath: m.RelativePath.Clone(),
	}
}

// Equals checks for equality with another ImplementationGuideResource1 instance
func (m *ImplementationGuideResource1) Equals(other *ImplementationGuideResource1) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Reference.Equals(other.Reference) { return false }
	if !m.ExampleBoolean.Equals(other.ExampleBoolean) { return false }
	if !m.ExampleCanonical.Equals(other.ExampleCanonical) { return false }
	if !m.RelativePath.Equals(other.RelativePath) { return false }
	return true
}

// ImplementationGuidePage1
// Information about a page within the IG.
type ImplementationGuidePage1 struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	Anchor []*FhirString `json:"anchor,omitempty"`
}

// NewImplementationGuidePage1 creates a new ImplementationGuidePage1 instance
func NewImplementationGuidePage1() *ImplementationGuidePage1 {
	return &ImplementationGuidePage1{}
}

// FromJSON populates ImplementationGuidePage1 from JSON data
func (m *ImplementationGuidePage1) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuidePage1 to JSON data
func (m *ImplementationGuidePage1) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ImplementationGuidePage1
func (m *ImplementationGuidePage1) Clone() *ImplementationGuidePage1 {
	if m == nil { return nil }
	return &ImplementationGuidePage1{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Name: m.Name.Clone(),
		Title: m.Title.Clone(),
		Anchor: cloneSlices(m.Anchor),
	}
}

// Equals checks for equality with another ImplementationGuidePage1 instance
func (m *ImplementationGuidePage1) Equals(other *ImplementationGuidePage1) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !compareSlices(m.Anchor, other.Anchor) { return false }
	return true
}

