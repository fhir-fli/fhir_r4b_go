// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// ImplementationGuide
// A set of rules of how a particular interoperability or standards problem is solved - typically through the use of FHIR resources. This resource is used to gather all the parts of an implementation guide into a logical whole and to publish a computable definition of all the parts.
type ImplementationGuide struct {
	CanonicalResource
	// id
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Id FhirString `json:"id,omitempty"`
	// meta
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta FhirMeta `json:"meta,omitempty"`
	// implicitRules
	// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ImplicitRules FhirUri `json:"implicitRules,omitempty"`
	// language
	// The base language in which the resource is written.
	Language CommonLanguages `json:"language,omitempty"`
	// text
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text Narrative `json:"text,omitempty"`
	// contained
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []Resource `json:"contained,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// url
	// An absolute URI that is used to identify this implementation guide when it is referenced in a specification, model, design or an instance; also called its canonical identifier. This SHOULD be globally unique and SHOULD be a literal address at which at which an authoritative instance of this implementation guide is (or will be) published. This URL can be the target of a canonical reference. It SHALL remain the same when the implementation guide is stored on different servers.
	Url FhirUri `json:"url,omitempty"`
	// version
	// The identifier that is used to identify this version of the implementation guide when it is referenced in a specification, model, design or instance. This is an arbitrary value managed by the implementation guide author and is not expected to be globally unique. For example, it might be a timestamp (e.g. yyyymmdd) if a managed version is not available. There is also no expectation that versions can be placed in a lexicographical sequence.
	Version FhirString `json:"version,omitempty"`
	// name
	// A natural language name identifying the implementation guide. This name should be usable as an identifier for the module by machine processing applications such as code generation.
	Name FhirString `json:"name,omitempty"`
	// title
	// A short, descriptive, user-friendly title for the implementation guide.
	Title FhirString `json:"title,omitempty"`
	// status
	// The status of this implementation guide. Enables tracking the life-cycle of the content.
	Status PublicationStatus `json:"status,omitempty"`
	// experimental
	// A Boolean value to indicate that this implementation guide is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.
	Experimental FhirBoolean `json:"experimental,omitempty"`
	// date
	// The date  (and optionally time) when the implementation guide was published. The date must change when the business version changes and it must change if the status code changes. In addition, it should change when the substantive content of the implementation guide changes.
	Date FhirDateTime `json:"date,omitempty"`
	// publisher
	// The name of the organization or individual that published the implementation guide.
	Publisher FhirString `json:"publisher,omitempty"`
	// contact
	// Contact details to assist a user in finding and communicating with the publisher.
	Contact []ContactDetail `json:"contact,omitempty"`
	// description
	// A free text natural language description of the implementation guide from a consumer's perspective.
	Description FhirMarkdown `json:"description,omitempty"`
	// useContext
	// The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate implementation guide instances.
	UseContext []UsageContext `json:"useContext,omitempty"`
	// jurisdiction
	// A legal or geographic region in which the implementation guide is intended to be used.
	Jurisdiction []CodeableConcept `json:"jurisdiction,omitempty"`
	// copyright
	// A copyright statement relating to the implementation guide and/or its contents. Copyright statements are generally legal restrictions on the use and publishing of the implementation guide.
	Copyright FhirMarkdown `json:"copyright,omitempty"`
	// packageId
	// The NPM package name for this Implementation Guide, used in the NPM package distribution, which is the primary mechanism by which FHIR based tooling manages IG dependencies. This value must be globally unique, and should be assigned with care.
	PackageId FhirId `json:"packageId,omitempty"`
	// license
	// The license that applies to this Implementation Guide, using an SPDX license code, or 'not-open-source'.
	License SPDXLicense `json:"license,omitempty"`
	// fhirVersion
	// The version(s) of the FHIR specification that this ImplementationGuide targets - e.g. describes how to use. The value of this element is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.3.0 for this version.
	FhirVersion []FHIRVersion `json:"fhirVersion,omitempty"`
	// dependsOn
	// Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
	DependsOn []ImplementationGuideDependsOn `json:"dependsOn,omitempty"`
	// global
	// A set of profiles that all resources covered by this implementation guide must conform to.
	Global []ImplementationGuideGlobal `json:"global,omitempty"`
	// definition
	// The information needed by an IG publisher tool to publish the whole implementation guide.
	Definition ImplementationGuideDefinition `json:"definition,omitempty"`
	// manifest
	// Information about an assembled implementation guide, created by the publication tooling.
	Manifest ImplementationGuideManifest `json:"manifest,omitempty"`
}

// NewImplementationGuide creates a new ImplementationGuide instance
func NewImplementationGuide(
	id FhirString,
	meta FhirMeta,
	implicitRules FhirUri,
	language CommonLanguages,
	text Narrative,
	contained []Resource,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	url FhirUri,
	version FhirString,
	name FhirString,
	title FhirString,
	status PublicationStatus,
	experimental FhirBoolean,
	date FhirDateTime,
	publisher FhirString,
	contact []ContactDetail,
	description FhirMarkdown,
	useContext []UsageContext,
	jurisdiction []CodeableConcept,
	copyright FhirMarkdown,
	packageId FhirId,
	license SPDXLicense,
	fhirVersion []FHIRVersion,
	dependsOn []ImplementationGuideDependsOn,
	global []ImplementationGuideGlobal,
	definition ImplementationGuideDefinition,
	manifest ImplementationGuideManifest,
) *ImplementationGuide {
	return &ImplementationGuide{
		Id: id,
		Meta: meta,
		ImplicitRules: implicitRules,
		Language: language,
		Text: text,
		Contained: contained,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Url: url,
		Version: version,
		Name: name,
		Title: title,
		Status: status,
		Experimental: experimental,
		Date: date,
		Publisher: publisher,
		Contact: contact,
		Description: description,
		UseContext: useContext,
		Jurisdiction: jurisdiction,
		Copyright: copyright,
		PackageId: packageId,
		License: license,
		FhirVersion: fhirVersion,
		DependsOn: dependsOn,
		Global: global,
		Definition: definition,
		Manifest: manifest,
	}
}
// FromJSON populates ImplementationGuide from JSON data
func (m *ImplementationGuide) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuide to JSON data
func (m *ImplementationGuide) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImplementationGuide
func (m *ImplementationGuide) CopyWith(
	id *FhirString,
	meta *FhirMeta,
	implicitRules *FhirUri,
	language *CommonLanguages,
	text *Narrative,
	contained *[]Resource,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	url *FhirUri,
	version *FhirString,
	name *FhirString,
	title *FhirString,
	status *PublicationStatus,
	experimental *FhirBoolean,
	date *FhirDateTime,
	publisher *FhirString,
	contact *[]ContactDetail,
	description *FhirMarkdown,
	useContext *[]UsageContext,
	jurisdiction *[]CodeableConcept,
	copyright *FhirMarkdown,
	packageId *FhirId,
	license *SPDXLicense,
	fhirVersion *[]FHIRVersion,
	dependsOn *[]ImplementationGuideDependsOn,
	global *[]ImplementationGuideGlobal,
	definition *ImplementationGuideDefinition,
	manifest *ImplementationGuideManifest,
) *ImplementationGuide {
	return &ImplementationGuide{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Meta: func() FhirMeta {
			if meta != nil { return *meta }
			return m.Meta
		}(),
		ImplicitRules: func() FhirUri {
			if implicitRules != nil { return *implicitRules }
			return m.ImplicitRules
		}(),
		Language: func() CommonLanguages {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() Narrative {
			if text != nil { return *text }
			return m.Text
		}(),
		Contained: func() []Resource {
			if contained != nil { return *contained }
			return m.Contained
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Url: func() FhirUri {
			if url != nil { return *url }
			return m.Url
		}(),
		Version: func() FhirString {
			if version != nil { return *version }
			return m.Version
		}(),
		Name: func() FhirString {
			if name != nil { return *name }
			return m.Name
		}(),
		Title: func() FhirString {
			if title != nil { return *title }
			return m.Title
		}(),
		Status: func() PublicationStatus {
			if status != nil { return *status }
			return m.Status
		}(),
		Experimental: func() FhirBoolean {
			if experimental != nil { return *experimental }
			return m.Experimental
		}(),
		Date: func() FhirDateTime {
			if date != nil { return *date }
			return m.Date
		}(),
		Publisher: func() FhirString {
			if publisher != nil { return *publisher }
			return m.Publisher
		}(),
		Contact: func() []ContactDetail {
			if contact != nil { return *contact }
			return m.Contact
		}(),
		Description: func() FhirMarkdown {
			if description != nil { return *description }
			return m.Description
		}(),
		UseContext: func() []UsageContext {
			if useContext != nil { return *useContext }
			return m.UseContext
		}(),
		Jurisdiction: func() []CodeableConcept {
			if jurisdiction != nil { return *jurisdiction }
			return m.Jurisdiction
		}(),
		Copyright: func() FhirMarkdown {
			if copyright != nil { return *copyright }
			return m.Copyright
		}(),
		PackageId: func() FhirId {
			if packageId != nil { return *packageId }
			return m.PackageId
		}(),
		License: func() SPDXLicense {
			if license != nil { return *license }
			return m.License
		}(),
		FhirVersion: func() []FHIRVersion {
			if fhirVersion != nil { return *fhirVersion }
			return m.FhirVersion
		}(),
		DependsOn: func() []ImplementationGuideDependsOn {
			if dependsOn != nil { return *dependsOn }
			return m.DependsOn
		}(),
		Global: func() []ImplementationGuideGlobal {
			if global != nil { return *global }
			return m.Global
		}(),
		Definition: func() ImplementationGuideDefinition {
			if definition != nil { return *definition }
			return m.Definition
		}(),
		Manifest: func() ImplementationGuideManifest {
			if manifest != nil { return *manifest }
			return m.Manifest
		}(),
	}
}
// ImplementationGuideDependsOn
// Another implementation guide that this implementation depends on. Typically, an implementation guide uses value sets, profiles etc.defined in other implementation guides.
type ImplementationGuideDependsOn struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// uri
	// A canonical reference to the Implementation guide for the dependency.
	Uri FhirCanonical `json:"uri,omitempty"`
	// packageId
	// The NPM package name for the Implementation Guide that this IG depends on.
	PackageId FhirId `json:"packageId,omitempty"`
	// version
	// The version of the IG that is depended on, when the correct version is required to understand the IG correctly.
	Version FhirString `json:"version,omitempty"`
}

// NewImplementationGuideDependsOn creates a new ImplementationGuideDependsOn instance
func NewImplementationGuideDependsOn(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	uri FhirCanonical,
	packageId FhirId,
	version FhirString,
) *ImplementationGuideDependsOn {
	return &ImplementationGuideDependsOn{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Uri: uri,
		PackageId: packageId,
		Version: version,
	}
}
// FromJSON populates ImplementationGuideDependsOn from JSON data
func (m *ImplementationGuideDependsOn) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideDependsOn to JSON data
func (m *ImplementationGuideDependsOn) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImplementationGuideDependsOn
func (m *ImplementationGuideDependsOn) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	uri *FhirCanonical,
	packageId *FhirId,
	version *FhirString,
) *ImplementationGuideDependsOn {
	return &ImplementationGuideDependsOn{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Uri: func() FhirCanonical {
			if uri != nil { return *uri }
			return m.Uri
		}(),
		PackageId: func() FhirId {
			if packageId != nil { return *packageId }
			return m.PackageId
		}(),
		Version: func() FhirString {
			if version != nil { return *version }
			return m.Version
		}(),
	}
}
// ImplementationGuideGlobal
// A set of profiles that all resources covered by this implementation guide must conform to.
type ImplementationGuideGlobal struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// The type of resource that all instances must conform to.
	Type_ FhirCode `json:"type,omitempty"`
	// profile
	// A reference to the profile that all instances must conform to.
	Profile FhirCanonical `json:"profile,omitempty"`
}

// NewImplementationGuideGlobal creates a new ImplementationGuideGlobal instance
func NewImplementationGuideGlobal(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ FhirCode,
	profile FhirCanonical,
) *ImplementationGuideGlobal {
	return &ImplementationGuideGlobal{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		Profile: profile,
	}
}
// FromJSON populates ImplementationGuideGlobal from JSON data
func (m *ImplementationGuideGlobal) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideGlobal to JSON data
func (m *ImplementationGuideGlobal) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImplementationGuideGlobal
func (m *ImplementationGuideGlobal) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *FhirCode,
	profile *FhirCanonical,
) *ImplementationGuideGlobal {
	return &ImplementationGuideGlobal{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() FhirCode {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Profile: func() FhirCanonical {
			if profile != nil { return *profile }
			return m.Profile
		}(),
	}
}
// ImplementationGuideDefinition
// The information needed by an IG publisher tool to publish the whole implementation guide.
type ImplementationGuideDefinition struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// grouping
	// A logical group of resources. Logical groups can be used when building pages.
	Grouping []ImplementationGuideGrouping `json:"grouping,omitempty"`
	// resource
	// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
	Resource []ImplementationGuideResource `json:"resource,omitempty"`
	// page
	// A page / section in the implementation guide. The root page is the implementation guide home page.
	Page ImplementationGuidePage `json:"page,omitempty"`
	// parameter
	// Defines how IG is built by tools.
	Parameter []ImplementationGuideParameter `json:"parameter,omitempty"`
	// template
	// A template for building resources.
	Template []ImplementationGuideTemplate `json:"template,omitempty"`
}

// NewImplementationGuideDefinition creates a new ImplementationGuideDefinition instance
func NewImplementationGuideDefinition(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	grouping []ImplementationGuideGrouping,
	resource []ImplementationGuideResource,
	page ImplementationGuidePage,
	parameter []ImplementationGuideParameter,
	template []ImplementationGuideTemplate,
) *ImplementationGuideDefinition {
	return &ImplementationGuideDefinition{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Grouping: grouping,
		Resource: resource,
		Page: page,
		Parameter: parameter,
		Template: template,
	}
}
// FromJSON populates ImplementationGuideDefinition from JSON data
func (m *ImplementationGuideDefinition) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideDefinition to JSON data
func (m *ImplementationGuideDefinition) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImplementationGuideDefinition
func (m *ImplementationGuideDefinition) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	grouping *[]ImplementationGuideGrouping,
	resource *[]ImplementationGuideResource,
	page *ImplementationGuidePage,
	parameter *[]ImplementationGuideParameter,
	template *[]ImplementationGuideTemplate,
) *ImplementationGuideDefinition {
	return &ImplementationGuideDefinition{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Grouping: func() []ImplementationGuideGrouping {
			if grouping != nil { return *grouping }
			return m.Grouping
		}(),
		Resource: func() []ImplementationGuideResource {
			if resource != nil { return *resource }
			return m.Resource
		}(),
		Page: func() ImplementationGuidePage {
			if page != nil { return *page }
			return m.Page
		}(),
		Parameter: func() []ImplementationGuideParameter {
			if parameter != nil { return *parameter }
			return m.Parameter
		}(),
		Template: func() []ImplementationGuideTemplate {
			if template != nil { return *template }
			return m.Template
		}(),
	}
}
// ImplementationGuideGrouping
// A logical group of resources. Logical groups can be used when building pages.
type ImplementationGuideGrouping struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// name
	// The human-readable title to display for the package of resources when rendering the implementation guide.
	Name FhirString `json:"name,omitempty"`
	// description
	// Human readable text describing the package.
	Description FhirString `json:"description,omitempty"`
}

// NewImplementationGuideGrouping creates a new ImplementationGuideGrouping instance
func NewImplementationGuideGrouping(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	name FhirString,
	description FhirString,
) *ImplementationGuideGrouping {
	return &ImplementationGuideGrouping{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Name: name,
		Description: description,
	}
}
// FromJSON populates ImplementationGuideGrouping from JSON data
func (m *ImplementationGuideGrouping) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideGrouping to JSON data
func (m *ImplementationGuideGrouping) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImplementationGuideGrouping
func (m *ImplementationGuideGrouping) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	name *FhirString,
	description *FhirString,
) *ImplementationGuideGrouping {
	return &ImplementationGuideGrouping{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Name: func() FhirString {
			if name != nil { return *name }
			return m.Name
		}(),
		Description: func() FhirString {
			if description != nil { return *description }
			return m.Description
		}(),
	}
}
// ImplementationGuideResource
// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
type ImplementationGuideResource struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// reference
	// Where this resource is found.
	Reference Reference `json:"reference,omitempty"`
	// fhirVersion
	// Indicates the FHIR Version(s) this artifact is intended to apply to. If no versions are specified, the resource is assumed to apply to all the versions stated in ImplementationGuide.fhirVersion.
	FhirVersion []FHIRVersion `json:"fhirVersion,omitempty"`
	// name
	// A human assigned name for the resource. All resources SHOULD have a name, but the name may be extracted from the resource (e.g. ValueSet.name).
	Name FhirString `json:"name,omitempty"`
	// description
	// A description of the reason that a resource has been included in the implementation guide.
	Description FhirString `json:"description,omitempty"`
	// exampleBoolean
	// If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
	ExampleBoolean FhirBoolean `json:"exampleBoolean,omitempty"`
	// exampleCanonical
	// If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
	ExampleCanonical FhirCanonical `json:"exampleCanonical,omitempty"`
	// groupingId
	// Reference to the id of the grouping this resource appears in.
	GroupingId FhirId `json:"groupingId,omitempty"`
}

// NewImplementationGuideResource creates a new ImplementationGuideResource instance
func NewImplementationGuideResource(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	reference Reference,
	fhirVersion []FHIRVersion,
	name FhirString,
	description FhirString,
	exampleBoolean FhirBoolean,
	exampleCanonical FhirCanonical,
	groupingId FhirId,
) *ImplementationGuideResource {
	return &ImplementationGuideResource{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Reference: reference,
		FhirVersion: fhirVersion,
		Name: name,
		Description: description,
		ExampleBoolean: exampleBoolean,
		ExampleCanonical: exampleCanonical,
		GroupingId: groupingId,
	}
}
// FromJSON populates ImplementationGuideResource from JSON data
func (m *ImplementationGuideResource) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideResource to JSON data
func (m *ImplementationGuideResource) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImplementationGuideResource
func (m *ImplementationGuideResource) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	reference *Reference,
	fhirVersion *[]FHIRVersion,
	name *FhirString,
	description *FhirString,
	exampleBoolean *FhirBoolean,
	exampleCanonical *FhirCanonical,
	groupingId *FhirId,
) *ImplementationGuideResource {
	return &ImplementationGuideResource{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Reference: func() Reference {
			if reference != nil { return *reference }
			return m.Reference
		}(),
		FhirVersion: func() []FHIRVersion {
			if fhirVersion != nil { return *fhirVersion }
			return m.FhirVersion
		}(),
		Name: func() FhirString {
			if name != nil { return *name }
			return m.Name
		}(),
		Description: func() FhirString {
			if description != nil { return *description }
			return m.Description
		}(),
		ExampleBoolean: func() FhirBoolean {
			if exampleBoolean != nil { return *exampleBoolean }
			return m.ExampleBoolean
		}(),
		ExampleCanonical: func() FhirCanonical {
			if exampleCanonical != nil { return *exampleCanonical }
			return m.ExampleCanonical
		}(),
		GroupingId: func() FhirId {
			if groupingId != nil { return *groupingId }
			return m.GroupingId
		}(),
	}
}
// ImplementationGuidePage
// A page / section in the implementation guide. The root page is the implementation guide home page.
type ImplementationGuidePage struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// nameUrl
	// The source address for the page.
	NameUrl FhirUrl `json:"nameUrl,omitempty"`
	// nameReference
	// The source address for the page.
	NameReference Reference `json:"nameReference,omitempty"`
	// title
	// A short title used to represent this page in navigational structures such as table of contents, bread crumbs, etc.
	Title FhirString `json:"title,omitempty"`
	// generation
	// A code that indicates how the page is generated.
	Generation GuidePageGeneration `json:"generation,omitempty"`
	// page
	// Nested Pages/Sections under this page.
	Page []ImplementationGuidePage `json:"page,omitempty"`
}

// NewImplementationGuidePage creates a new ImplementationGuidePage instance
func NewImplementationGuidePage(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	nameUrl FhirUrl,
	nameReference Reference,
	title FhirString,
	generation GuidePageGeneration,
	page []ImplementationGuidePage,
) *ImplementationGuidePage {
	return &ImplementationGuidePage{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		NameUrl: nameUrl,
		NameReference: nameReference,
		Title: title,
		Generation: generation,
		Page: page,
	}
}
// FromJSON populates ImplementationGuidePage from JSON data
func (m *ImplementationGuidePage) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuidePage to JSON data
func (m *ImplementationGuidePage) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImplementationGuidePage
func (m *ImplementationGuidePage) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	nameUrl *FhirUrl,
	nameReference *Reference,
	title *FhirString,
	generation *GuidePageGeneration,
	page *[]ImplementationGuidePage,
) *ImplementationGuidePage {
	return &ImplementationGuidePage{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		NameUrl: func() FhirUrl {
			if nameUrl != nil { return *nameUrl }
			return m.NameUrl
		}(),
		NameReference: func() Reference {
			if nameReference != nil { return *nameReference }
			return m.NameReference
		}(),
		Title: func() FhirString {
			if title != nil { return *title }
			return m.Title
		}(),
		Generation: func() GuidePageGeneration {
			if generation != nil { return *generation }
			return m.Generation
		}(),
		Page: func() []ImplementationGuidePage {
			if page != nil { return *page }
			return m.Page
		}(),
	}
}
// ImplementationGuideParameter
// Defines how IG is built by tools.
type ImplementationGuideParameter struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// code
	// apply | path-resource | path-pages | path-tx-cache | expansion-parameter | rule-broken-links | generate-xml | generate-json | generate-turtle | html-template.
	Code GuideParameterCode `json:"code,omitempty"`
	// value
	// Value for named type.
	Value FhirString `json:"value,omitempty"`
}

// NewImplementationGuideParameter creates a new ImplementationGuideParameter instance
func NewImplementationGuideParameter(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	code GuideParameterCode,
	value FhirString,
) *ImplementationGuideParameter {
	return &ImplementationGuideParameter{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Code: code,
		Value: value,
	}
}
// FromJSON populates ImplementationGuideParameter from JSON data
func (m *ImplementationGuideParameter) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideParameter to JSON data
func (m *ImplementationGuideParameter) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImplementationGuideParameter
func (m *ImplementationGuideParameter) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	code *GuideParameterCode,
	value *FhirString,
) *ImplementationGuideParameter {
	return &ImplementationGuideParameter{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Code: func() GuideParameterCode {
			if code != nil { return *code }
			return m.Code
		}(),
		Value: func() FhirString {
			if value != nil { return *value }
			return m.Value
		}(),
	}
}
// ImplementationGuideTemplate
// A template for building resources.
type ImplementationGuideTemplate struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// code
	// Type of template specified.
	Code FhirCode `json:"code,omitempty"`
	// source
	// The source location for the template.
	Source FhirString `json:"source,omitempty"`
	// scope
	// The scope in which the template applies.
	Scope FhirString `json:"scope,omitempty"`
}

// NewImplementationGuideTemplate creates a new ImplementationGuideTemplate instance
func NewImplementationGuideTemplate(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	code FhirCode,
	source FhirString,
	scope FhirString,
) *ImplementationGuideTemplate {
	return &ImplementationGuideTemplate{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Code: code,
		Source: source,
		Scope: scope,
	}
}
// FromJSON populates ImplementationGuideTemplate from JSON data
func (m *ImplementationGuideTemplate) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideTemplate to JSON data
func (m *ImplementationGuideTemplate) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImplementationGuideTemplate
func (m *ImplementationGuideTemplate) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	code *FhirCode,
	source *FhirString,
	scope *FhirString,
) *ImplementationGuideTemplate {
	return &ImplementationGuideTemplate{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Code: func() FhirCode {
			if code != nil { return *code }
			return m.Code
		}(),
		Source: func() FhirString {
			if source != nil { return *source }
			return m.Source
		}(),
		Scope: func() FhirString {
			if scope != nil { return *scope }
			return m.Scope
		}(),
	}
}
// ImplementationGuideManifest
// Information about an assembled implementation guide, created by the publication tooling.
type ImplementationGuideManifest struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// rendering
	// A pointer to official web page, PDF or other rendering of the implementation guide.
	Rendering FhirUrl `json:"rendering,omitempty"`
	// resource
	// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
	Resource []ImplementationGuideResource `json:"resource,omitempty"`
	// page
	// Information about a page within the IG.
	Page []ImplementationGuidePage `json:"page,omitempty"`
	// image
	// Indicates a relative path to an image that exists within the IG.
	Image []FhirString `json:"image,omitempty"`
	// other
	// Indicates the relative path of an additional non-page, non-image file that is part of the IG - e.g. zip, jar and similar files that could be the target of a hyperlink in a derived IG.
	Other []FhirString `json:"other,omitempty"`
}

// NewImplementationGuideManifest creates a new ImplementationGuideManifest instance
func NewImplementationGuideManifest(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	rendering FhirUrl,
	resource []ImplementationGuideResource,
	page []ImplementationGuidePage,
	image []FhirString,
	other []FhirString,
) *ImplementationGuideManifest {
	return &ImplementationGuideManifest{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Rendering: rendering,
		Resource: resource,
		Page: page,
		Image: image,
		Other: other,
	}
}
// FromJSON populates ImplementationGuideManifest from JSON data
func (m *ImplementationGuideManifest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideManifest to JSON data
func (m *ImplementationGuideManifest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImplementationGuideManifest
func (m *ImplementationGuideManifest) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	rendering *FhirUrl,
	resource *[]ImplementationGuideResource,
	page *[]ImplementationGuidePage,
	image *[]FhirString,
	other *[]FhirString,
) *ImplementationGuideManifest {
	return &ImplementationGuideManifest{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Rendering: func() FhirUrl {
			if rendering != nil { return *rendering }
			return m.Rendering
		}(),
		Resource: func() []ImplementationGuideResource {
			if resource != nil { return *resource }
			return m.Resource
		}(),
		Page: func() []ImplementationGuidePage {
			if page != nil { return *page }
			return m.Page
		}(),
		Image: func() []FhirString {
			if image != nil { return *image }
			return m.Image
		}(),
		Other: func() []FhirString {
			if other != nil { return *other }
			return m.Other
		}(),
	}
}
// ImplementationGuideResource1
// A resource that is part of the implementation guide. Conformance resources (value set, structure definition, capability statements etc.) are obvious candidates for inclusion, but any kind of resource can be included as an example resource.
type ImplementationGuideResource1 struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// reference
	// Where this resource is found.
	Reference Reference `json:"reference,omitempty"`
	// exampleBoolean
	// If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
	ExampleBoolean FhirBoolean `json:"exampleBoolean,omitempty"`
	// exampleCanonical
	// If true or a reference, indicates the resource is an example instance.  If a reference is present, indicates that the example is an example of the specified profile.
	ExampleCanonical FhirCanonical `json:"exampleCanonical,omitempty"`
	// relativePath
	// The relative path for primary page for this resource within the IG.
	RelativePath FhirUrl `json:"relativePath,omitempty"`
}

// NewImplementationGuideResource1 creates a new ImplementationGuideResource1 instance
func NewImplementationGuideResource1(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	reference Reference,
	exampleBoolean FhirBoolean,
	exampleCanonical FhirCanonical,
	relativePath FhirUrl,
) *ImplementationGuideResource1 {
	return &ImplementationGuideResource1{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Reference: reference,
		ExampleBoolean: exampleBoolean,
		ExampleCanonical: exampleCanonical,
		RelativePath: relativePath,
	}
}
// FromJSON populates ImplementationGuideResource1 from JSON data
func (m *ImplementationGuideResource1) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuideResource1 to JSON data
func (m *ImplementationGuideResource1) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImplementationGuideResource1
func (m *ImplementationGuideResource1) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	reference *Reference,
	exampleBoolean *FhirBoolean,
	exampleCanonical *FhirCanonical,
	relativePath *FhirUrl,
) *ImplementationGuideResource1 {
	return &ImplementationGuideResource1{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Reference: func() Reference {
			if reference != nil { return *reference }
			return m.Reference
		}(),
		ExampleBoolean: func() FhirBoolean {
			if exampleBoolean != nil { return *exampleBoolean }
			return m.ExampleBoolean
		}(),
		ExampleCanonical: func() FhirCanonical {
			if exampleCanonical != nil { return *exampleCanonical }
			return m.ExampleCanonical
		}(),
		RelativePath: func() FhirUrl {
			if relativePath != nil { return *relativePath }
			return m.RelativePath
		}(),
	}
}
// ImplementationGuidePage1
// Information about a page within the IG.
type ImplementationGuidePage1 struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// name
	// Relative path to the page.
	Name FhirString `json:"name,omitempty"`
	// title
	// Label for the page intended for human display.
	Title FhirString `json:"title,omitempty"`
	// anchor
	// The name of an anchor available on the page.
	Anchor []FhirString `json:"anchor,omitempty"`
}

// NewImplementationGuidePage1 creates a new ImplementationGuidePage1 instance
func NewImplementationGuidePage1(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	name FhirString,
	title FhirString,
	anchor []FhirString,
) *ImplementationGuidePage1 {
	return &ImplementationGuidePage1{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Name: name,
		Title: title,
		Anchor: anchor,
	}
}
// FromJSON populates ImplementationGuidePage1 from JSON data
func (m *ImplementationGuidePage1) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImplementationGuidePage1 to JSON data
func (m *ImplementationGuidePage1) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ImplementationGuidePage1
func (m *ImplementationGuidePage1) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	name *FhirString,
	title *FhirString,
	anchor *[]FhirString,
) *ImplementationGuidePage1 {
	return &ImplementationGuidePage1{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Name: func() FhirString {
			if name != nil { return *name }
			return m.Name
		}(),
		Title: func() FhirString {
			if title != nil { return *title }
			return m.Title
		}(),
		Anchor: func() []FhirString {
			if anchor != nil { return *anchor }
			return m.Anchor
		}(),
	}
}
