// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// Device
// A type of a manufactured item that is used in the provision of healthcare without being substantially changed through that activity. The device may be a medical or non-medical device.
type Device struct {
	DomainResource
	// id
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Id FhirString `json:"id,omitempty"`
	// meta
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta FhirMeta `json:"meta,omitempty"`
	// implicitRules
	// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ImplicitRules FhirUri `json:"implicitRules,omitempty"`
	// language
	// The base language in which the resource is written.
	Language CommonLanguages `json:"language,omitempty"`
	// text
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text Narrative `json:"text,omitempty"`
	// contained
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []Resource `json:"contained,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// identifier
	// Unique instance identifiers assigned to a device by manufacturers other organizations or owners.
	Identifier []Identifier `json:"identifier,omitempty"`
	// definition
	// The reference to the definition for the device.
	Definition Reference `json:"definition,omitempty"`
	// udiCarrier
	// Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
	UdiCarrier []DeviceUdiCarrier `json:"udiCarrier,omitempty"`
	// status
	// Status of the Device availability.
	Status FHIRDeviceStatus `json:"status,omitempty"`
	// statusReason
	// Reason for the dtatus of the Device availability.
	StatusReason []CodeableConcept `json:"statusReason,omitempty"`
	// distinctIdentifier
	// The distinct identification string as required by regulation for a human cell, tissue, or cellular and tissue-based product.
	DistinctIdentifier FhirString `json:"distinctIdentifier,omitempty"`
	// manufacturer
	// A name of the manufacturer.
	Manufacturer FhirString `json:"manufacturer,omitempty"`
	// manufactureDate
	// The date and time when the device was manufactured.
	ManufactureDate FhirDateTime `json:"manufactureDate,omitempty"`
	// expirationDate
	// The date and time beyond which this device is no longer valid or should not be used (if applicable).
	ExpirationDate FhirDateTime `json:"expirationDate,omitempty"`
	// lotNumber
	// Lot number assigned by the manufacturer.
	LotNumber FhirString `json:"lotNumber,omitempty"`
	// serialNumber
	// The serial number assigned by the organization when the device was manufactured.
	SerialNumber FhirString `json:"serialNumber,omitempty"`
	// deviceName
	// This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
	DeviceName []DeviceDeviceName `json:"deviceName,omitempty"`
	// modelNumber
	// The manufacturer's model number for the device.
	ModelNumber FhirString `json:"modelNumber,omitempty"`
	// partNumber
	// The part number or catalog number of the device.
	PartNumber FhirString `json:"partNumber,omitempty"`
	// type
	// The kind or type of device.
	Type_ CodeableConcept `json:"type,omitempty"`
	// specialization
	// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
	Specialization []DeviceSpecialization `json:"specialization,omitempty"`
	// version
	// The actual design of the device or software version running on the device.
	Version []DeviceVersion `json:"version,omitempty"`
	// property
	// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
	Property []DeviceProperty `json:"property,omitempty"`
	// patient
	// Patient information, If the device is affixed to a person.
	Patient Reference `json:"patient,omitempty"`
	// owner
	// An organization that is responsible for the provision and ongoing maintenance of the device.
	Owner Reference `json:"owner,omitempty"`
	// contact
	// Contact details for an organization or a particular human that is responsible for the device.
	Contact []ContactPoint `json:"contact,omitempty"`
	// location
	// The place where the device can be found.
	Location Reference `json:"location,omitempty"`
	// url
	// A network address on which the device may be contacted directly.
	Url FhirUri `json:"url,omitempty"`
	// note
	// Descriptive information, usage information or implantation information that is not captured in an existing element.
	Note []Annotation `json:"note,omitempty"`
	// safety
	// Provides additional safety characteristics about a medical device.  For example devices containing latex.
	Safety []CodeableConcept `json:"safety,omitempty"`
	// parent
	// The device that this device is attached to or is part of.
	Parent Reference `json:"parent,omitempty"`
}

// NewDevice creates a new Device instance
func NewDevice(
	id FhirString,
	meta FhirMeta,
	implicitRules FhirUri,
	language CommonLanguages,
	text Narrative,
	contained []Resource,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	identifier []Identifier,
	definition Reference,
	udiCarrier []DeviceUdiCarrier,
	status FHIRDeviceStatus,
	statusReason []CodeableConcept,
	distinctIdentifier FhirString,
	manufacturer FhirString,
	manufactureDate FhirDateTime,
	expirationDate FhirDateTime,
	lotNumber FhirString,
	serialNumber FhirString,
	deviceName []DeviceDeviceName,
	modelNumber FhirString,
	partNumber FhirString,
	type_ CodeableConcept,
	specialization []DeviceSpecialization,
	version []DeviceVersion,
	property []DeviceProperty,
	patient Reference,
	owner Reference,
	contact []ContactPoint,
	location Reference,
	url FhirUri,
	note []Annotation,
	safety []CodeableConcept,
	parent Reference,
) *Device {
	return &Device{
		Id: id,
		Meta: meta,
		ImplicitRules: implicitRules,
		Language: language,
		Text: text,
		Contained: contained,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Identifier: identifier,
		Definition: definition,
		UdiCarrier: udiCarrier,
		Status: status,
		StatusReason: statusReason,
		DistinctIdentifier: distinctIdentifier,
		Manufacturer: manufacturer,
		ManufactureDate: manufactureDate,
		ExpirationDate: expirationDate,
		LotNumber: lotNumber,
		SerialNumber: serialNumber,
		DeviceName: deviceName,
		ModelNumber: modelNumber,
		PartNumber: partNumber,
		Type_: type_,
		Specialization: specialization,
		Version: version,
		Property: property,
		Patient: patient,
		Owner: owner,
		Contact: contact,
		Location: location,
		Url: url,
		Note: note,
		Safety: safety,
		Parent: parent,
	}
}
// FromJSON populates Device from JSON data
func (m *Device) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Device to JSON data
func (m *Device) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of Device
func (m *Device) CopyWith(
	id *FhirString,
	meta *FhirMeta,
	implicitRules *FhirUri,
	language *CommonLanguages,
	text *Narrative,
	contained *[]Resource,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	identifier *[]Identifier,
	definition *Reference,
	udiCarrier *[]DeviceUdiCarrier,
	status *FHIRDeviceStatus,
	statusReason *[]CodeableConcept,
	distinctIdentifier *FhirString,
	manufacturer *FhirString,
	manufactureDate *FhirDateTime,
	expirationDate *FhirDateTime,
	lotNumber *FhirString,
	serialNumber *FhirString,
	deviceName *[]DeviceDeviceName,
	modelNumber *FhirString,
	partNumber *FhirString,
	type_ *CodeableConcept,
	specialization *[]DeviceSpecialization,
	version *[]DeviceVersion,
	property *[]DeviceProperty,
	patient *Reference,
	owner *Reference,
	contact *[]ContactPoint,
	location *Reference,
	url *FhirUri,
	note *[]Annotation,
	safety *[]CodeableConcept,
	parent *Reference,
) *Device {
	return &Device{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Meta: func() FhirMeta {
			if meta != nil { return *meta }
			return m.Meta
		}(),
		ImplicitRules: func() FhirUri {
			if implicitRules != nil { return *implicitRules }
			return m.ImplicitRules
		}(),
		Language: func() CommonLanguages {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() Narrative {
			if text != nil { return *text }
			return m.Text
		}(),
		Contained: func() []Resource {
			if contained != nil { return *contained }
			return m.Contained
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		Definition: func() Reference {
			if definition != nil { return *definition }
			return m.Definition
		}(),
		UdiCarrier: func() []DeviceUdiCarrier {
			if udiCarrier != nil { return *udiCarrier }
			return m.UdiCarrier
		}(),
		Status: func() FHIRDeviceStatus {
			if status != nil { return *status }
			return m.Status
		}(),
		StatusReason: func() []CodeableConcept {
			if statusReason != nil { return *statusReason }
			return m.StatusReason
		}(),
		DistinctIdentifier: func() FhirString {
			if distinctIdentifier != nil { return *distinctIdentifier }
			return m.DistinctIdentifier
		}(),
		Manufacturer: func() FhirString {
			if manufacturer != nil { return *manufacturer }
			return m.Manufacturer
		}(),
		ManufactureDate: func() FhirDateTime {
			if manufactureDate != nil { return *manufactureDate }
			return m.ManufactureDate
		}(),
		ExpirationDate: func() FhirDateTime {
			if expirationDate != nil { return *expirationDate }
			return m.ExpirationDate
		}(),
		LotNumber: func() FhirString {
			if lotNumber != nil { return *lotNumber }
			return m.LotNumber
		}(),
		SerialNumber: func() FhirString {
			if serialNumber != nil { return *serialNumber }
			return m.SerialNumber
		}(),
		DeviceName: func() []DeviceDeviceName {
			if deviceName != nil { return *deviceName }
			return m.DeviceName
		}(),
		ModelNumber: func() FhirString {
			if modelNumber != nil { return *modelNumber }
			return m.ModelNumber
		}(),
		PartNumber: func() FhirString {
			if partNumber != nil { return *partNumber }
			return m.PartNumber
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Specialization: func() []DeviceSpecialization {
			if specialization != nil { return *specialization }
			return m.Specialization
		}(),
		Version: func() []DeviceVersion {
			if version != nil { return *version }
			return m.Version
		}(),
		Property: func() []DeviceProperty {
			if property != nil { return *property }
			return m.Property
		}(),
		Patient: func() Reference {
			if patient != nil { return *patient }
			return m.Patient
		}(),
		Owner: func() Reference {
			if owner != nil { return *owner }
			return m.Owner
		}(),
		Contact: func() []ContactPoint {
			if contact != nil { return *contact }
			return m.Contact
		}(),
		Location: func() Reference {
			if location != nil { return *location }
			return m.Location
		}(),
		Url: func() FhirUri {
			if url != nil { return *url }
			return m.Url
		}(),
		Note: func() []Annotation {
			if note != nil { return *note }
			return m.Note
		}(),
		Safety: func() []CodeableConcept {
			if safety != nil { return *safety }
			return m.Safety
		}(),
		Parent: func() Reference {
			if parent != nil { return *parent }
			return m.Parent
		}(),
	}
}
// DeviceUdiCarrier
// Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
type DeviceUdiCarrier struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// deviceIdentifier
	// The device identifier (DI) is a mandatory, fixed portion of a UDI that identifies the labeler and the specific version or model of a device.
	DeviceIdentifier FhirString `json:"deviceIdentifier,omitempty"`
	// issuer
	// Organization that is charged with issuing UDIs for devices.  For example, the US FDA issuers include :
// 1) GS1: 
// http://hl7.org/fhir/NamingSystem/gs1-di, 
// 2) HIBCC:
// http://hl7.org/fhir/NamingSystem/hibcc-dI, 
// 3) ICCBBA for blood containers:
// http://hl7.org/fhir/NamingSystem/iccbba-blood-di, 
// 4) ICCBA for other devices:
// http://hl7.org/fhir/NamingSystem/iccbba-other-di.
	Issuer FhirUri `json:"issuer,omitempty"`
	// jurisdiction
	// The identity of the authoritative source for UDI generation within a  jurisdiction.  All UDIs are globally unique within a single namespace with the appropriate repository uri as the system.  For example,  UDIs of devices managed in the U.S. by the FDA, the value is  http://hl7.org/fhir/NamingSystem/fda-udi.
	Jurisdiction FhirUri `json:"jurisdiction,omitempty"`
	// carrierAIDC
	// The full UDI carrier of the Automatic Identification and Data Capture (AIDC) technology representation of the barcode string as printed on the packaging of the device - e.g., a barcode or RFID.   Because of limitations on character sets in XML and the need to round-trip JSON data through XML, AIDC Formats *SHALL* be base64 encoded.
	CarrierAIDC FhirBase64Binary `json:"carrierAIDC,omitempty"`
	// carrierHRF
	// The full UDI carrier as the human readable form (HRF) representation of the barcode string as printed on the packaging of the device.
	CarrierHRF FhirString `json:"carrierHRF,omitempty"`
	// entryType
	// A coded entry to indicate how the data was entered.
	EntryType UDIEntryType `json:"entryType,omitempty"`
}

// NewDeviceUdiCarrier creates a new DeviceUdiCarrier instance
func NewDeviceUdiCarrier(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	deviceIdentifier FhirString,
	issuer FhirUri,
	jurisdiction FhirUri,
	carrierAIDC FhirBase64Binary,
	carrierHRF FhirString,
	entryType UDIEntryType,
) *DeviceUdiCarrier {
	return &DeviceUdiCarrier{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		DeviceIdentifier: deviceIdentifier,
		Issuer: issuer,
		Jurisdiction: jurisdiction,
		CarrierAIDC: carrierAIDC,
		CarrierHRF: carrierHRF,
		EntryType: entryType,
	}
}
// FromJSON populates DeviceUdiCarrier from JSON data
func (m *DeviceUdiCarrier) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DeviceUdiCarrier to JSON data
func (m *DeviceUdiCarrier) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DeviceUdiCarrier
func (m *DeviceUdiCarrier) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	deviceIdentifier *FhirString,
	issuer *FhirUri,
	jurisdiction *FhirUri,
	carrierAIDC *FhirBase64Binary,
	carrierHRF *FhirString,
	entryType *UDIEntryType,
) *DeviceUdiCarrier {
	return &DeviceUdiCarrier{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		DeviceIdentifier: func() FhirString {
			if deviceIdentifier != nil { return *deviceIdentifier }
			return m.DeviceIdentifier
		}(),
		Issuer: func() FhirUri {
			if issuer != nil { return *issuer }
			return m.Issuer
		}(),
		Jurisdiction: func() FhirUri {
			if jurisdiction != nil { return *jurisdiction }
			return m.Jurisdiction
		}(),
		CarrierAIDC: func() FhirBase64Binary {
			if carrierAIDC != nil { return *carrierAIDC }
			return m.CarrierAIDC
		}(),
		CarrierHRF: func() FhirString {
			if carrierHRF != nil { return *carrierHRF }
			return m.CarrierHRF
		}(),
		EntryType: func() UDIEntryType {
			if entryType != nil { return *entryType }
			return m.EntryType
		}(),
	}
}
// DeviceDeviceName
// This represents the manufacturer's name of the device as provided by the device, from a UDI label, or by a person describing the Device.  This typically would be used when a person provides the name(s) or when the device represents one of the names available from DeviceDefinition.
type DeviceDeviceName struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// name
	// The name that identifies the device.
	Name FhirString `json:"name,omitempty"`
	// type
	// The type of deviceName.
// UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
	Type_ DeviceNameType `json:"type,omitempty"`
}

// NewDeviceDeviceName creates a new DeviceDeviceName instance
func NewDeviceDeviceName(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	name FhirString,
	type_ DeviceNameType,
) *DeviceDeviceName {
	return &DeviceDeviceName{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Name: name,
		Type_: type_,
	}
}
// FromJSON populates DeviceDeviceName from JSON data
func (m *DeviceDeviceName) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DeviceDeviceName to JSON data
func (m *DeviceDeviceName) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DeviceDeviceName
func (m *DeviceDeviceName) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	name *FhirString,
	type_ *DeviceNameType,
) *DeviceDeviceName {
	return &DeviceDeviceName{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Name: func() FhirString {
			if name != nil { return *name }
			return m.Name
		}(),
		Type_: func() DeviceNameType {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
	}
}
// DeviceSpecialization
// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
type DeviceSpecialization struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// systemType
	// The standard that is used to operate and communicate.
	SystemType CodeableConcept `json:"systemType,omitempty"`
	// version
	// The version of the standard that is used to operate and communicate.
	Version FhirString `json:"version,omitempty"`
}

// NewDeviceSpecialization creates a new DeviceSpecialization instance
func NewDeviceSpecialization(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	systemType CodeableConcept,
	version FhirString,
) *DeviceSpecialization {
	return &DeviceSpecialization{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		SystemType: systemType,
		Version: version,
	}
}
// FromJSON populates DeviceSpecialization from JSON data
func (m *DeviceSpecialization) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DeviceSpecialization to JSON data
func (m *DeviceSpecialization) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DeviceSpecialization
func (m *DeviceSpecialization) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	systemType *CodeableConcept,
	version *FhirString,
) *DeviceSpecialization {
	return &DeviceSpecialization{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		SystemType: func() CodeableConcept {
			if systemType != nil { return *systemType }
			return m.SystemType
		}(),
		Version: func() FhirString {
			if version != nil { return *version }
			return m.Version
		}(),
	}
}
// DeviceVersion
// The actual design of the device or software version running on the device.
type DeviceVersion struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// The type of the device version, e.g. manufacturer, approved, internal.
	Type_ CodeableConcept `json:"type,omitempty"`
	// component
	// A single component of the device version.
	Component Identifier `json:"component,omitempty"`
	// value
	// The version text.
	Value FhirString `json:"value,omitempty"`
}

// NewDeviceVersion creates a new DeviceVersion instance
func NewDeviceVersion(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ CodeableConcept,
	component Identifier,
	value FhirString,
) *DeviceVersion {
	return &DeviceVersion{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		Component: component,
		Value: value,
	}
}
// FromJSON populates DeviceVersion from JSON data
func (m *DeviceVersion) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DeviceVersion to JSON data
func (m *DeviceVersion) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DeviceVersion
func (m *DeviceVersion) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *CodeableConcept,
	component *Identifier,
	value *FhirString,
) *DeviceVersion {
	return &DeviceVersion{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Component: func() Identifier {
			if component != nil { return *component }
			return m.Component
		}(),
		Value: func() FhirString {
			if value != nil { return *value }
			return m.Value
		}(),
	}
}
// DeviceProperty
// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
type DeviceProperty struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
	Type_ CodeableConcept `json:"type,omitempty"`
	// valueQuantity
	// Property value as a quantity.
	ValueQuantity []Quantity `json:"valueQuantity,omitempty"`
	// valueCode
	// Property value as a code, e.g., NTP4 (synced to NTP).
	ValueCode []CodeableConcept `json:"valueCode,omitempty"`
}

// NewDeviceProperty creates a new DeviceProperty instance
func NewDeviceProperty(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ CodeableConcept,
	valueQuantity []Quantity,
	valueCode []CodeableConcept,
) *DeviceProperty {
	return &DeviceProperty{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		ValueQuantity: valueQuantity,
		ValueCode: valueCode,
	}
}
// FromJSON populates DeviceProperty from JSON data
func (m *DeviceProperty) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DeviceProperty to JSON data
func (m *DeviceProperty) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DeviceProperty
func (m *DeviceProperty) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *CodeableConcept,
	valueQuantity *[]Quantity,
	valueCode *[]CodeableConcept,
) *DeviceProperty {
	return &DeviceProperty{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		ValueQuantity: func() []Quantity {
			if valueQuantity != nil { return *valueQuantity }
			return m.ValueQuantity
		}(),
		ValueCode: func() []CodeableConcept {
			if valueCode != nil { return *valueCode }
			return m.ValueCode
		}(),
	}
}
