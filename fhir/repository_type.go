// Code generated by FHIR Generator. DO NOT EDIT.
// Type for access of external URI.
package fhir_r4b_go

// RepositoryType represents the FHIR ValueSet as an enumeration
type RepositoryType int

const (
	// Click and see: When URL is clicked, the resource can be seen directly (by webpage or by download link format).
	RepositoryType_Directlink RepositoryType = iota
	// The URL is the RESTful or other kind of API that can access to the result.: When the API method (e.g. [base_url]/[parameter]) related with the URL of the website is executed, the resource can be seen directly (usually in JSON or XML format).
	RepositoryType_Openapi RepositoryType = iota
	// Result cannot be access unless an account is logged in: When logged into the website, the resource can be seen.
	RepositoryType_Login RepositoryType = iota
	// Result need to be fetched with API and need LOGIN( or cookies are required when visiting the link of resource): When logged in and follow the API in the website related with URL, the resource can be seen.
	RepositoryType_Oauth RepositoryType = iota
	// Some other complicated or particular way to get resource from URL.: Some other complicated or particular way to get resource from URL.
	RepositoryType_Other RepositoryType = iota
)

// String converts the enum to its string representation
func (e RepositoryType) String() string {
	switch e {
	case RepositoryType_Directlink: return "Click and see"
	case RepositoryType_Openapi: return "The URL is the RESTful or other kind of API that can access to the result."
	case RepositoryType_Login: return "Result cannot be access unless an account is logged in"
	case RepositoryType_Oauth: return "Result need to be fetched with API and need LOGIN( or cookies are required when visiting the link of resource)"
	case RepositoryType_Other: return "Some other complicated or particular way to get resource from URL."
	default: return "Unknown"
	}
}

