// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// TestScript
// A structured set of tests against a FHIR server or client implementation to determine compliance against the FHIR specification.
type TestScript struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Url *FhirUri `json:"url,omitempty"`
	Identifier *Identifier `json:"identifier,omitempty"`
	Version *FhirString `json:"version,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	Experimental *FhirBoolean `json:"experimental,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Publisher *FhirString `json:"publisher,omitempty"`
	Contact []*ContactDetail `json:"contact,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	UseContext []*UsageContext `json:"usecontext,omitempty"`
	Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`
	Purpose *FhirMarkdown `json:"purpose,omitempty"`
	Copyright *FhirMarkdown `json:"copyright,omitempty"`
	Origin []*TestScriptOrigin `json:"origin,omitempty"`
	Destination []*TestScriptDestination `json:"destination,omitempty"`
	Metadata *TestScriptMetadata `json:"metadata,omitempty"`
	Fixture []*TestScriptFixture `json:"fixture,omitempty"`
	Profile []*Reference `json:"profile,omitempty"`
	Variable []*TestScriptVariable `json:"variable,omitempty"`
	Setup *TestScriptSetup `json:"setup,omitempty"`
	Test []*TestScriptTest `json:"test,omitempty"`
	Teardown *TestScriptTeardown `json:"teardown,omitempty"`
}

// NewTestScript creates a new TestScript instance
func NewTestScript() *TestScript {
	return &TestScript{}
}

// FromJSON populates TestScript from JSON data
func (m *TestScript) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScript to JSON data
func (m *TestScript) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScript
func (m *TestScript) Clone() *TestScript {
	if m == nil { return nil }
	return &TestScript{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Url: m.Url.Clone(),
		Identifier: m.Identifier.Clone(),
		Version: m.Version.Clone(),
		Name: m.Name.Clone(),
		Title: m.Title.Clone(),
		Status: m.Status.Clone(),
		Experimental: m.Experimental.Clone(),
		Date: m.Date.Clone(),
		Publisher: m.Publisher.Clone(),
		Contact: cloneSlices(m.Contact),
		Description: m.Description.Clone(),
		UseContext: cloneSlices(m.UseContext),
		Jurisdiction: cloneSlices(m.Jurisdiction),
		Purpose: m.Purpose.Clone(),
		Copyright: m.Copyright.Clone(),
		Origin: cloneSlices(m.Origin),
		Destination: cloneSlices(m.Destination),
		Metadata: m.Metadata.Clone(),
		Fixture: cloneSlices(m.Fixture),
		Profile: cloneSlices(m.Profile),
		Variable: cloneSlices(m.Variable),
		Setup: m.Setup.Clone(),
		Test: cloneSlices(m.Test),
		Teardown: m.Teardown.Clone(),
	}
}

// Equals checks for equality with another TestScript instance
func (m *TestScript) Equals(other *TestScript) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !m.Identifier.Equals(other.Identifier) { return false }
	if !m.Version.Equals(other.Version) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Experimental.Equals(other.Experimental) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Publisher.Equals(other.Publisher) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.UseContext, other.UseContext) { return false }
	if !compareSlices(m.Jurisdiction, other.Jurisdiction) { return false }
	if !m.Purpose.Equals(other.Purpose) { return false }
	if !m.Copyright.Equals(other.Copyright) { return false }
	if !compareSlices(m.Origin, other.Origin) { return false }
	if !compareSlices(m.Destination, other.Destination) { return false }
	if !m.Metadata.Equals(other.Metadata) { return false }
	if !compareSlices(m.Fixture, other.Fixture) { return false }
	if !compareSlices(m.Profile, other.Profile) { return false }
	if !compareSlices(m.Variable, other.Variable) { return false }
	if !m.Setup.Equals(other.Setup) { return false }
	if !compareSlices(m.Test, other.Test) { return false }
	if !m.Teardown.Equals(other.Teardown) { return false }
	return true
}

// TestScriptOrigin
// An abstract server used in operations within this test script in the origin element.
type TestScriptOrigin struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Index *FhirInteger `json:"index,omitempty"`
	Profile *Coding `json:"profile,omitempty"`
}

// NewTestScriptOrigin creates a new TestScriptOrigin instance
func NewTestScriptOrigin() *TestScriptOrigin {
	return &TestScriptOrigin{}
}

// FromJSON populates TestScriptOrigin from JSON data
func (m *TestScriptOrigin) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScriptOrigin to JSON data
func (m *TestScriptOrigin) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScriptOrigin
func (m *TestScriptOrigin) Clone() *TestScriptOrigin {
	if m == nil { return nil }
	return &TestScriptOrigin{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Index: m.Index.Clone(),
		Profile: m.Profile.Clone(),
	}
}

// Equals checks for equality with another TestScriptOrigin instance
func (m *TestScriptOrigin) Equals(other *TestScriptOrigin) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Index.Equals(other.Index) { return false }
	if !m.Profile.Equals(other.Profile) { return false }
	return true
}

// TestScriptDestination
// An abstract server used in operations within this test script in the destination element.
type TestScriptDestination struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Index *FhirInteger `json:"index,omitempty"`
	Profile *Coding `json:"profile,omitempty"`
}

// NewTestScriptDestination creates a new TestScriptDestination instance
func NewTestScriptDestination() *TestScriptDestination {
	return &TestScriptDestination{}
}

// FromJSON populates TestScriptDestination from JSON data
func (m *TestScriptDestination) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScriptDestination to JSON data
func (m *TestScriptDestination) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScriptDestination
func (m *TestScriptDestination) Clone() *TestScriptDestination {
	if m == nil { return nil }
	return &TestScriptDestination{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Index: m.Index.Clone(),
		Profile: m.Profile.Clone(),
	}
}

// Equals checks for equality with another TestScriptDestination instance
func (m *TestScriptDestination) Equals(other *TestScriptDestination) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Index.Equals(other.Index) { return false }
	if !m.Profile.Equals(other.Profile) { return false }
	return true
}

// TestScriptMetadata
// The required capability must exist and are assumed to function correctly on the FHIR server being tested.
type TestScriptMetadata struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Link []*TestScriptLink `json:"link,omitempty"`
	Capability []*TestScriptCapability `json:"capability,omitempty"`
}

// NewTestScriptMetadata creates a new TestScriptMetadata instance
func NewTestScriptMetadata() *TestScriptMetadata {
	return &TestScriptMetadata{}
}

// FromJSON populates TestScriptMetadata from JSON data
func (m *TestScriptMetadata) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScriptMetadata to JSON data
func (m *TestScriptMetadata) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScriptMetadata
func (m *TestScriptMetadata) Clone() *TestScriptMetadata {
	if m == nil { return nil }
	return &TestScriptMetadata{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Link: cloneSlices(m.Link),
		Capability: cloneSlices(m.Capability),
	}
}

// Equals checks for equality with another TestScriptMetadata instance
func (m *TestScriptMetadata) Equals(other *TestScriptMetadata) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Link, other.Link) { return false }
	if !compareSlices(m.Capability, other.Capability) { return false }
	return true
}

// TestScriptLink
// A link to the FHIR specification that this test is covering.
type TestScriptLink struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Url *FhirUri `json:"url,omitempty"`
	Description *FhirString `json:"description,omitempty"`
}

// NewTestScriptLink creates a new TestScriptLink instance
func NewTestScriptLink() *TestScriptLink {
	return &TestScriptLink{}
}

// FromJSON populates TestScriptLink from JSON data
func (m *TestScriptLink) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScriptLink to JSON data
func (m *TestScriptLink) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScriptLink
func (m *TestScriptLink) Clone() *TestScriptLink {
	if m == nil { return nil }
	return &TestScriptLink{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Url: m.Url.Clone(),
		Description: m.Description.Clone(),
	}
}

// Equals checks for equality with another TestScriptLink instance
func (m *TestScriptLink) Equals(other *TestScriptLink) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !m.Description.Equals(other.Description) { return false }
	return true
}

// TestScriptCapability
// Capabilities that must exist and are assumed to function correctly on the FHIR server being tested.
type TestScriptCapability struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Required_ *FhirBoolean `json:"required,omitempty"`
	Validated *FhirBoolean `json:"validated,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Origin []*FhirInteger `json:"origin,omitempty"`
	Destination *FhirInteger `json:"destination,omitempty"`
	Link []*FhirUri `json:"link,omitempty"`
	Capabilities *FhirCanonical `json:"capabilities,omitempty"`
}

// NewTestScriptCapability creates a new TestScriptCapability instance
func NewTestScriptCapability() *TestScriptCapability {
	return &TestScriptCapability{}
}

// FromJSON populates TestScriptCapability from JSON data
func (m *TestScriptCapability) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScriptCapability to JSON data
func (m *TestScriptCapability) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScriptCapability
func (m *TestScriptCapability) Clone() *TestScriptCapability {
	if m == nil { return nil }
	return &TestScriptCapability{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Required_: m.Required_.Clone(),
		Validated: m.Validated.Clone(),
		Description: m.Description.Clone(),
		Origin: cloneSlices(m.Origin),
		Destination: m.Destination.Clone(),
		Link: cloneSlices(m.Link),
		Capabilities: m.Capabilities.Clone(),
	}
}

// Equals checks for equality with another TestScriptCapability instance
func (m *TestScriptCapability) Equals(other *TestScriptCapability) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Required_.Equals(other.Required_) { return false }
	if !m.Validated.Equals(other.Validated) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.Origin, other.Origin) { return false }
	if !m.Destination.Equals(other.Destination) { return false }
	if !compareSlices(m.Link, other.Link) { return false }
	if !m.Capabilities.Equals(other.Capabilities) { return false }
	return true
}

// TestScriptFixture
// Fixture in the test script - by reference (uri). All fixtures are required for the test script to execute.
type TestScriptFixture struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Autocreate *FhirBoolean `json:"autocreate,omitempty"`
	Autodelete *FhirBoolean `json:"autodelete,omitempty"`
	Resource *Reference `json:"resource,omitempty"`
}

// NewTestScriptFixture creates a new TestScriptFixture instance
func NewTestScriptFixture() *TestScriptFixture {
	return &TestScriptFixture{}
}

// FromJSON populates TestScriptFixture from JSON data
func (m *TestScriptFixture) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScriptFixture to JSON data
func (m *TestScriptFixture) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScriptFixture
func (m *TestScriptFixture) Clone() *TestScriptFixture {
	if m == nil { return nil }
	return &TestScriptFixture{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Autocreate: m.Autocreate.Clone(),
		Autodelete: m.Autodelete.Clone(),
		Resource: m.Resource.Clone(),
	}
}

// Equals checks for equality with another TestScriptFixture instance
func (m *TestScriptFixture) Equals(other *TestScriptFixture) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Autocreate.Equals(other.Autocreate) { return false }
	if !m.Autodelete.Equals(other.Autodelete) { return false }
	if !m.Resource.Equals(other.Resource) { return false }
	return true
}

// TestScriptVariable
// Variable is set based either on element value in response body or on header field value in the response headers.
type TestScriptVariable struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	DefaultValue *FhirString `json:"defaultvalue,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Expression *FhirString `json:"expression,omitempty"`
	HeaderField *FhirString `json:"headerfield,omitempty"`
	Hint *FhirString `json:"hint,omitempty"`
	Path *FhirString `json:"path,omitempty"`
	SourceId *FhirId `json:"sourceid,omitempty"`
}

// NewTestScriptVariable creates a new TestScriptVariable instance
func NewTestScriptVariable() *TestScriptVariable {
	return &TestScriptVariable{}
}

// FromJSON populates TestScriptVariable from JSON data
func (m *TestScriptVariable) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScriptVariable to JSON data
func (m *TestScriptVariable) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScriptVariable
func (m *TestScriptVariable) Clone() *TestScriptVariable {
	if m == nil { return nil }
	return &TestScriptVariable{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Name: m.Name.Clone(),
		DefaultValue: m.DefaultValue.Clone(),
		Description: m.Description.Clone(),
		Expression: m.Expression.Clone(),
		HeaderField: m.HeaderField.Clone(),
		Hint: m.Hint.Clone(),
		Path: m.Path.Clone(),
		SourceId: m.SourceId.Clone(),
	}
}

// Equals checks for equality with another TestScriptVariable instance
func (m *TestScriptVariable) Equals(other *TestScriptVariable) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.DefaultValue.Equals(other.DefaultValue) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.Expression.Equals(other.Expression) { return false }
	if !m.HeaderField.Equals(other.HeaderField) { return false }
	if !m.Hint.Equals(other.Hint) { return false }
	if !m.Path.Equals(other.Path) { return false }
	if !m.SourceId.Equals(other.SourceId) { return false }
	return true
}

// TestScriptSetup
// A series of required setup operations before tests are executed.
type TestScriptSetup struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Action []*TestScriptAction `json:"action,omitempty"`
}

// NewTestScriptSetup creates a new TestScriptSetup instance
func NewTestScriptSetup() *TestScriptSetup {
	return &TestScriptSetup{}
}

// FromJSON populates TestScriptSetup from JSON data
func (m *TestScriptSetup) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScriptSetup to JSON data
func (m *TestScriptSetup) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScriptSetup
func (m *TestScriptSetup) Clone() *TestScriptSetup {
	if m == nil { return nil }
	return &TestScriptSetup{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Action: cloneSlices(m.Action),
	}
}

// Equals checks for equality with another TestScriptSetup instance
func (m *TestScriptSetup) Equals(other *TestScriptSetup) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Action, other.Action) { return false }
	return true
}

// TestScriptAction
// Action would contain either an operation or an assertion.
type TestScriptAction struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Operation *TestScriptOperation `json:"operation,omitempty"`
	Assert_ *TestScriptAssert `json:"assert,omitempty"`
}

// NewTestScriptAction creates a new TestScriptAction instance
func NewTestScriptAction() *TestScriptAction {
	return &TestScriptAction{}
}

// FromJSON populates TestScriptAction from JSON data
func (m *TestScriptAction) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScriptAction to JSON data
func (m *TestScriptAction) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScriptAction
func (m *TestScriptAction) Clone() *TestScriptAction {
	if m == nil { return nil }
	return &TestScriptAction{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Operation: m.Operation.Clone(),
		Assert_: m.Assert_.Clone(),
	}
}

// Equals checks for equality with another TestScriptAction instance
func (m *TestScriptAction) Equals(other *TestScriptAction) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Operation.Equals(other.Operation) { return false }
	if !m.Assert_.Equals(other.Assert_) { return false }
	return true
}

// TestScriptOperation
// The operation to perform.
type TestScriptOperation struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Type *Coding `json:"type,omitempty"`
	Resource *FhirCode `json:"resource,omitempty"`
	Label *FhirString `json:"label,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Accept *FhirCode `json:"accept,omitempty"`
	ContentType *FhirCode `json:"contenttype,omitempty"`
	Destination *FhirInteger `json:"destination,omitempty"`
	EncodeRequestUrl *FhirBoolean `json:"encoderequesturl,omitempty"`
	Method *TestScriptRequestMethodCode `json:"method,omitempty"`
	Origin *FhirInteger `json:"origin,omitempty"`
	Params *FhirString `json:"params,omitempty"`
	RequestHeader []*TestScriptRequestHeader `json:"requestheader,omitempty"`
	RequestId *FhirId `json:"requestid,omitempty"`
	ResponseId *FhirId `json:"responseid,omitempty"`
	SourceId *FhirId `json:"sourceid,omitempty"`
	TargetId *FhirId `json:"targetid,omitempty"`
	Url *FhirString `json:"url,omitempty"`
}

// NewTestScriptOperation creates a new TestScriptOperation instance
func NewTestScriptOperation() *TestScriptOperation {
	return &TestScriptOperation{}
}

// FromJSON populates TestScriptOperation from JSON data
func (m *TestScriptOperation) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScriptOperation to JSON data
func (m *TestScriptOperation) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScriptOperation
func (m *TestScriptOperation) Clone() *TestScriptOperation {
	if m == nil { return nil }
	return &TestScriptOperation{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Type: m.Type.Clone(),
		Resource: m.Resource.Clone(),
		Label: m.Label.Clone(),
		Description: m.Description.Clone(),
		Accept: m.Accept.Clone(),
		ContentType: m.ContentType.Clone(),
		Destination: m.Destination.Clone(),
		EncodeRequestUrl: m.EncodeRequestUrl.Clone(),
		Method: m.Method.Clone(),
		Origin: m.Origin.Clone(),
		Params: m.Params.Clone(),
		RequestHeader: cloneSlices(m.RequestHeader),
		RequestId: m.RequestId.Clone(),
		ResponseId: m.ResponseId.Clone(),
		SourceId: m.SourceId.Clone(),
		TargetId: m.TargetId.Clone(),
		Url: m.Url.Clone(),
	}
}

// Equals checks for equality with another TestScriptOperation instance
func (m *TestScriptOperation) Equals(other *TestScriptOperation) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Resource.Equals(other.Resource) { return false }
	if !m.Label.Equals(other.Label) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.Accept.Equals(other.Accept) { return false }
	if !m.ContentType.Equals(other.ContentType) { return false }
	if !m.Destination.Equals(other.Destination) { return false }
	if !m.EncodeRequestUrl.Equals(other.EncodeRequestUrl) { return false }
	if !m.Method.Equals(other.Method) { return false }
	if !m.Origin.Equals(other.Origin) { return false }
	if !m.Params.Equals(other.Params) { return false }
	if !compareSlices(m.RequestHeader, other.RequestHeader) { return false }
	if !m.RequestId.Equals(other.RequestId) { return false }
	if !m.ResponseId.Equals(other.ResponseId) { return false }
	if !m.SourceId.Equals(other.SourceId) { return false }
	if !m.TargetId.Equals(other.TargetId) { return false }
	if !m.Url.Equals(other.Url) { return false }
	return true
}

// TestScriptRequestHeader
// Header elements would be used to set HTTP headers.
type TestScriptRequestHeader struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Field *FhirString `json:"field,omitempty"`
	Value *FhirString `json:"value,omitempty"`
}

// NewTestScriptRequestHeader creates a new TestScriptRequestHeader instance
func NewTestScriptRequestHeader() *TestScriptRequestHeader {
	return &TestScriptRequestHeader{}
}

// FromJSON populates TestScriptRequestHeader from JSON data
func (m *TestScriptRequestHeader) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScriptRequestHeader to JSON data
func (m *TestScriptRequestHeader) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScriptRequestHeader
func (m *TestScriptRequestHeader) Clone() *TestScriptRequestHeader {
	if m == nil { return nil }
	return &TestScriptRequestHeader{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Field: m.Field.Clone(),
		Value: m.Value.Clone(),
	}
}

// Equals checks for equality with another TestScriptRequestHeader instance
func (m *TestScriptRequestHeader) Equals(other *TestScriptRequestHeader) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Field.Equals(other.Field) { return false }
	if !m.Value.Equals(other.Value) { return false }
	return true
}

// TestScriptAssert
// Evaluates the results of previous operations to determine if the server under test behaves appropriately.
type TestScriptAssert struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Label *FhirString `json:"label,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Direction *AssertionDirectionType `json:"direction,omitempty"`
	CompareToSourceId *FhirString `json:"comparetosourceid,omitempty"`
	CompareToSourceExpression *FhirString `json:"comparetosourceexpression,omitempty"`
	CompareToSourcePath *FhirString `json:"comparetosourcepath,omitempty"`
	ContentType *FhirCode `json:"contenttype,omitempty"`
	Expression *FhirString `json:"expression,omitempty"`
	HeaderField *FhirString `json:"headerfield,omitempty"`
	MinimumId *FhirString `json:"minimumid,omitempty"`
	NavigationLinks *FhirBoolean `json:"navigationlinks,omitempty"`
	Operator_ *AssertionOperatorType `json:"operator,omitempty"`
	Path *FhirString `json:"path,omitempty"`
	RequestMethod *TestScriptRequestMethodCode `json:"requestmethod,omitempty"`
	RequestURL *FhirString `json:"requesturl,omitempty"`
	Resource *FhirCode `json:"resource,omitempty"`
	Response *AssertionResponseTypes `json:"response,omitempty"`
	ResponseCode *FhirString `json:"responsecode,omitempty"`
	SourceId *FhirId `json:"sourceid,omitempty"`
	ValidateProfileId *FhirId `json:"validateprofileid,omitempty"`
	Value *FhirString `json:"value,omitempty"`
	WarningOnly *FhirBoolean `json:"warningonly,omitempty"`
}

// NewTestScriptAssert creates a new TestScriptAssert instance
func NewTestScriptAssert() *TestScriptAssert {
	return &TestScriptAssert{}
}

// FromJSON populates TestScriptAssert from JSON data
func (m *TestScriptAssert) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScriptAssert to JSON data
func (m *TestScriptAssert) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScriptAssert
func (m *TestScriptAssert) Clone() *TestScriptAssert {
	if m == nil { return nil }
	return &TestScriptAssert{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Label: m.Label.Clone(),
		Description: m.Description.Clone(),
		Direction: m.Direction.Clone(),
		CompareToSourceId: m.CompareToSourceId.Clone(),
		CompareToSourceExpression: m.CompareToSourceExpression.Clone(),
		CompareToSourcePath: m.CompareToSourcePath.Clone(),
		ContentType: m.ContentType.Clone(),
		Expression: m.Expression.Clone(),
		HeaderField: m.HeaderField.Clone(),
		MinimumId: m.MinimumId.Clone(),
		NavigationLinks: m.NavigationLinks.Clone(),
		Operator_: m.Operator_.Clone(),
		Path: m.Path.Clone(),
		RequestMethod: m.RequestMethod.Clone(),
		RequestURL: m.RequestURL.Clone(),
		Resource: m.Resource.Clone(),
		Response: m.Response.Clone(),
		ResponseCode: m.ResponseCode.Clone(),
		SourceId: m.SourceId.Clone(),
		ValidateProfileId: m.ValidateProfileId.Clone(),
		Value: m.Value.Clone(),
		WarningOnly: m.WarningOnly.Clone(),
	}
}

// Equals checks for equality with another TestScriptAssert instance
func (m *TestScriptAssert) Equals(other *TestScriptAssert) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Label.Equals(other.Label) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.Direction.Equals(other.Direction) { return false }
	if !m.CompareToSourceId.Equals(other.CompareToSourceId) { return false }
	if !m.CompareToSourceExpression.Equals(other.CompareToSourceExpression) { return false }
	if !m.CompareToSourcePath.Equals(other.CompareToSourcePath) { return false }
	if !m.ContentType.Equals(other.ContentType) { return false }
	if !m.Expression.Equals(other.Expression) { return false }
	if !m.HeaderField.Equals(other.HeaderField) { return false }
	if !m.MinimumId.Equals(other.MinimumId) { return false }
	if !m.NavigationLinks.Equals(other.NavigationLinks) { return false }
	if !m.Operator_.Equals(other.Operator_) { return false }
	if !m.Path.Equals(other.Path) { return false }
	if !m.RequestMethod.Equals(other.RequestMethod) { return false }
	if !m.RequestURL.Equals(other.RequestURL) { return false }
	if !m.Resource.Equals(other.Resource) { return false }
	if !m.Response.Equals(other.Response) { return false }
	if !m.ResponseCode.Equals(other.ResponseCode) { return false }
	if !m.SourceId.Equals(other.SourceId) { return false }
	if !m.ValidateProfileId.Equals(other.ValidateProfileId) { return false }
	if !m.Value.Equals(other.Value) { return false }
	if !m.WarningOnly.Equals(other.WarningOnly) { return false }
	return true
}

// TestScriptTest
// A test in this script.
type TestScriptTest struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Action []*TestScriptAction `json:"action,omitempty"`
}

// NewTestScriptTest creates a new TestScriptTest instance
func NewTestScriptTest() *TestScriptTest {
	return &TestScriptTest{}
}

// FromJSON populates TestScriptTest from JSON data
func (m *TestScriptTest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScriptTest to JSON data
func (m *TestScriptTest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScriptTest
func (m *TestScriptTest) Clone() *TestScriptTest {
	if m == nil { return nil }
	return &TestScriptTest{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Name: m.Name.Clone(),
		Description: m.Description.Clone(),
		Action: cloneSlices(m.Action),
	}
}

// Equals checks for equality with another TestScriptTest instance
func (m *TestScriptTest) Equals(other *TestScriptTest) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.Action, other.Action) { return false }
	return true
}

// TestScriptAction1
// Action would contain either an operation or an assertion.
type TestScriptAction1 struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Operation *TestScriptOperation `json:"operation,omitempty"`
	Assert_ *TestScriptAssert `json:"assert,omitempty"`
}

// NewTestScriptAction1 creates a new TestScriptAction1 instance
func NewTestScriptAction1() *TestScriptAction1 {
	return &TestScriptAction1{}
}

// FromJSON populates TestScriptAction1 from JSON data
func (m *TestScriptAction1) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScriptAction1 to JSON data
func (m *TestScriptAction1) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScriptAction1
func (m *TestScriptAction1) Clone() *TestScriptAction1 {
	if m == nil { return nil }
	return &TestScriptAction1{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Operation: m.Operation.Clone(),
		Assert_: m.Assert_.Clone(),
	}
}

// Equals checks for equality with another TestScriptAction1 instance
func (m *TestScriptAction1) Equals(other *TestScriptAction1) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Operation.Equals(other.Operation) { return false }
	if !m.Assert_.Equals(other.Assert_) { return false }
	return true
}

// TestScriptTeardown
// A series of operations required to clean up after all the tests are executed (successfully or otherwise).
type TestScriptTeardown struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Action []*TestScriptAction `json:"action,omitempty"`
}

// NewTestScriptTeardown creates a new TestScriptTeardown instance
func NewTestScriptTeardown() *TestScriptTeardown {
	return &TestScriptTeardown{}
}

// FromJSON populates TestScriptTeardown from JSON data
func (m *TestScriptTeardown) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScriptTeardown to JSON data
func (m *TestScriptTeardown) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScriptTeardown
func (m *TestScriptTeardown) Clone() *TestScriptTeardown {
	if m == nil { return nil }
	return &TestScriptTeardown{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Action: cloneSlices(m.Action),
	}
}

// Equals checks for equality with another TestScriptTeardown instance
func (m *TestScriptTeardown) Equals(other *TestScriptTeardown) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Action, other.Action) { return false }
	return true
}

// TestScriptAction2
// The teardown action will only contain an operation.
type TestScriptAction2 struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Operation *TestScriptOperation `json:"operation,omitempty"`
}

// NewTestScriptAction2 creates a new TestScriptAction2 instance
func NewTestScriptAction2() *TestScriptAction2 {
	return &TestScriptAction2{}
}

// FromJSON populates TestScriptAction2 from JSON data
func (m *TestScriptAction2) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts TestScriptAction2 to JSON data
func (m *TestScriptAction2) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of TestScriptAction2
func (m *TestScriptAction2) Clone() *TestScriptAction2 {
	if m == nil { return nil }
	return &TestScriptAction2{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Operation: m.Operation.Clone(),
	}
}

// Equals checks for equality with another TestScriptAction2 instance
func (m *TestScriptAction2) Equals(other *TestScriptAction2) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Operation.Equals(other.Operation) { return false }
	return true
}

