// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// Count
// A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.
type Count struct {
	Quantity
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// value
	// The value of the measured amount. The value includes an implicit precision in the presentation of the value.
	Value FhirDecimal `json:"value,omitempty"`
	// comparator
	// How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is "<" , then the real value is < stated value.
	Comparator QuantityComparator `json:"comparator,omitempty"`
	// unit
	// A human-readable form of the unit.
	Unit FhirString `json:"unit,omitempty"`
	// system
	// The identification of the system that provides the coded form of the unit.
	System FhirUri `json:"system,omitempty"`
	// code
	// A computer processable form of the unit in some unit representation system.
	Code FhirCode `json:"code,omitempty"`
}

// NewCount creates a new Count instance
func NewCount(
	id FhirString,
	extension_ []FhirExtension,
	value FhirDecimal,
	comparator QuantityComparator,
	unit FhirString,
	system FhirUri,
	code FhirCode,
) *Count {
	return &Count{
		Id: id,
		Extension_: extension_,
		Value: value,
		Comparator: comparator,
		Unit: unit,
		System: system,
		Code: code,
	}
}
// FromJSON populates Count from JSON data
func (m *Count) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Count to JSON data
func (m *Count) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of Count
func (m *Count) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	value *FhirDecimal,
	comparator *QuantityComparator,
	unit *FhirString,
	system *FhirUri,
	code *FhirCode,
) *Count {
	return &Count{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		Value: func() FhirDecimal {
			if value != nil { return *value }
			return m.Value
		}(),
		Comparator: func() QuantityComparator {
			if comparator != nil { return *comparator }
			return m.Comparator
		}(),
		Unit: func() FhirString {
			if unit != nil { return *unit }
			return m.Unit
		}(),
		System: func() FhirUri {
			if system != nil { return *system }
			return m.System
		}(),
		Code: func() FhirCode {
			if code != nil { return *code }
			return m.Code
		}(),
	}
}
