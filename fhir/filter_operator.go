// Code generated by FHIR Generator. DO NOT EDIT.
// The kind of operation to perform as a part of a property based filter.
package fhir_r4b_go

// FilterOperator represents the FHIR ValueSet as an enumeration
type FilterOperator int

const (
	// Equals: The specified property of the code equals the provided value.
	FilterOperator__ FilterOperator = iota
	// Is A (by subsumption): Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, including the provided concept itself (include descendant codes and self).
	FilterOperator_Is_a FilterOperator = iota
	// Descendent Of (by subsumption): Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, excluding the provided concept itself i.e. include descendant codes only).
	FilterOperator_Descendent_of FilterOperator = iota
	// Not (Is A) (by subsumption): The specified property of the code does not have an is-a relationship with the provided value.
	FilterOperator_Is_not_a FilterOperator = iota
	// Regular Expression: The specified property of the code matches the regex specified in the provided value.
	FilterOperator_Regex FilterOperator = iota
	// In Set: The specified property of the code is in the set of codes or concepts specified in the provided value (comma separated list).
	FilterOperator_In FilterOperator = iota
	// Not in Set: The specified property of the code is not in the set of codes or concepts specified in the provided value (comma separated list).
	FilterOperator_Not_in FilterOperator = iota
	// Generalizes (by Subsumption): Includes all concept ids that have a transitive is-a relationship from the concept Id provided as the value, including the provided concept itself (i.e. include ancestor codes and self).
	FilterOperator_Generalizes FilterOperator = iota
	// Exists: The specified property of the code has at least one value (if the specified value is true; if the specified value is false, then matches when the specified property of the code has no values).
	FilterOperator_Exists FilterOperator = iota
)

// String converts the enum to its string representation
func (e FilterOperator) String() string {
	switch e {
	case FilterOperator__: return "Equals"
	case FilterOperator_Is_a: return "Is A (by subsumption)"
	case FilterOperator_Descendent_of: return "Descendent Of (by subsumption)"
	case FilterOperator_Is_not_a: return "Not (Is A) (by subsumption)"
	case FilterOperator_Regex: return "Regular Expression"
	case FilterOperator_In: return "In Set"
	case FilterOperator_Not_in: return "Not in Set"
	case FilterOperator_Generalizes: return "Generalizes (by Subsumption)"
	case FilterOperator_Exists: return "Exists"
	default: return "Unknown"
	}
}

