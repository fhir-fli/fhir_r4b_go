// Code generated by FHIR Generator. DO NOT EDIT.
// The kind of operation to perform as a part of a property based filter.
package fhir_r4b_go
// FilterOperator represents the FHIR ValueSet as an enumeration
type FilterOperator struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	FilterOperator_Equals = "=" // Equals: The specified property of the code equals the provided value.
	FilterOperator_Is_a = "is-a" // Is A (by subsumption): Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, including the provided concept itself (include descendant codes and self).
	FilterOperator_Descendent_of = "descendent-of" // Descendent Of (by subsumption): Includes all concept ids that have a transitive is-a relationship with the concept Id provided as the value, excluding the provided concept itself i.e. include descendant codes only).
	FilterOperator_Is_not_a = "is-not-a" // Not (Is A) (by subsumption): The specified property of the code does not have an is-a relationship with the provided value.
	FilterOperator_Regex = "regex" // Regular Expression: The specified property of the code matches the regex specified in the provided value.
	FilterOperator_In = "in" // In Set: The specified property of the code is in the set of codes or concepts specified in the provided value (comma separated list).
	FilterOperator_Not_in = "not-in" // Not in Set: The specified property of the code is not in the set of codes or concepts specified in the provided value (comma separated list).
	FilterOperator_Generalizes = "generalizes" // Generalizes (by Subsumption): Includes all concept ids that have a transitive is-a relationship from the concept Id provided as the value, including the provided concept itself (i.e. include ancestor codes and self).
	FilterOperator_Exists = "exists" // Exists: The specified property of the code has at least one value (if the specified value is true; if the specified value is false, then matches when the specified property of the code has no values).
)

// Clone creates a deep copy of the enum
func (e FilterOperator) Clone() *FilterOperator {
	return &FilterOperator{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *FilterOperator) Equals(other *FilterOperator) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

