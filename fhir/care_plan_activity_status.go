// Code generated by FHIR Generator. DO NOT EDIT.
// Codes that reflect the current state of a care plan activity within its overall life cycle.
package fhir_r4b_go
// CarePlanActivityStatus represents the FHIR ValueSet as an enumeration
type CarePlanActivityStatus struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	CarePlanActivityStatus_Not_started = "not-started" // Not Started: Care plan activity is planned but no action has yet been taken.
	CarePlanActivityStatus_Scheduled = "scheduled" // Scheduled: Appointment or other booking has occurred but activity has not yet begun.
	CarePlanActivityStatus_In_progress = "in-progress" // In Progress: Care plan activity has been started but is not yet complete.
	CarePlanActivityStatus_On_hold = "on-hold" // On Hold: Care plan activity was started but has temporarily ceased with an expectation of resumption at a future time.
	CarePlanActivityStatus_Completed = "completed" // Completed: Care plan activity has been completed (more or less) as planned.
	CarePlanActivityStatus_Cancelled = "cancelled" // Cancelled: The planned care plan activity has been withdrawn.
	CarePlanActivityStatus_Stopped = "stopped" // Stopped: The planned care plan activity has been ended prior to completion after the activity was started.
	CarePlanActivityStatus_Unknown = "unknown" // Unknown: The current state of the care plan activity is not known. Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, but the authoring/source system does not know which one.
	CarePlanActivityStatus_Entered_in_error = "entered-in-error" // Entered in Error: Care plan activity was entered in error and voided.
)

// Clone creates a deep copy of the enum
func (e CarePlanActivityStatus) Clone() *CarePlanActivityStatus {
	return &CarePlanActivityStatus{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *CarePlanActivityStatus) Equals(other *CarePlanActivityStatus) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

