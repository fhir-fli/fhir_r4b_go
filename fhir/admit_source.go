// Code generated by FHIR Generator. DO NOT EDIT.
// This value set defines a set of codes that can be used to indicate from where the patient came in.
package fhir_r4b_go
// AdmitSource represents the FHIR ValueSet as an enumeration
type AdmitSource struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	AdmitSource_Hosp_trans = "hosp-trans" // Transferred from other hospital: The Patient has been transferred from another hospital for this encounter.
	AdmitSource_Emd = "emd" // From accident/emergency department: The patient has been transferred from the emergency department within the hospital. This is typically used in the transition to an inpatient encounter
	AdmitSource_Outp = "outp" // From outpatient department: The patient has been transferred from an outpatient department within the hospital.
	AdmitSource_Born = "born" // Born in hospital: The patient is a newborn and the encounter will track the baby related activities (as opposed to the Mothers encounter - that may be associated using the newborn encounters partof property)
	AdmitSource_Gp = "gp" // General Practitioner referral: The patient has been admitted due to a referred from a General Practitioner.
	AdmitSource_Mp = "mp" // Medical Practitioner/physician referral: The patient has been admitted due to a referred from a Specialist (as opposed to a General Practitioner).
	AdmitSource_Nursing = "nursing" // From nursing home: The patient has been transferred from a nursing home.
	AdmitSource_Psych = "psych" // From psychiatric hospital: The patient has been transferred from a psychiatric facility.
	AdmitSource_Rehab = "rehab" // From rehabilitation facility: The patient has been transferred from a rehabilitation facility or clinic.
	AdmitSource_Other = "other" // Other: The patient has been admitted from a source otherwise not specified here.
)

// Clone creates a deep copy of the enum
func (e AdmitSource) Clone() *AdmitSource {
	return &AdmitSource{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *AdmitSource) Equals(other *AdmitSource) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

