// Code generated by FHIR Generator. DO NOT EDIT.
// Possible group measure aggregates (E.g. Mean, Median).
package fhir_r4b_go

// GroupMeasure represents the FHIR ValueSet as an enumeration
type GroupMeasure int

const (
	// Mean: Aggregated using Mean of participant values.
	GroupMeasure_Mean GroupMeasure = iota
	// Median: Aggregated using Median of participant values.
	GroupMeasure_Median GroupMeasure = iota
	// Mean of Study Means: Aggregated using Mean of study mean values.
	GroupMeasure_Mean_of_mean GroupMeasure = iota
	// Mean of Study Medins: Aggregated using Mean of study median values.
	GroupMeasure_Mean_of_median GroupMeasure = iota
	// Median of Study Means: Aggregated using Median of study mean values.
	GroupMeasure_Median_of_mean GroupMeasure = iota
	// Median of Study Medians: Aggregated using Median of study median values.
	GroupMeasure_Median_of_median GroupMeasure = iota
)

// String converts the enum to its string representation
func (e GroupMeasure) String() string {
	switch e {
	case GroupMeasure_Mean: return "Mean"
	case GroupMeasure_Median: return "Median"
	case GroupMeasure_Mean_of_mean: return "Mean of Study Means"
	case GroupMeasure_Mean_of_median: return "Mean of Study Medins"
	case GroupMeasure_Median_of_mean: return "Median of Study Means"
	case GroupMeasure_Median_of_median: return "Median of Study Medians"
	default: return "Unknown"
	}
}

