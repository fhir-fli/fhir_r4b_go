// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// Condition
// A clinical condition, problem, diagnosis, or other event, situation, issue, or clinical concept that has risen to a level of concern.
type Condition struct {
	DomainResource
	// id
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Id FhirString `json:"id,omitempty"`
	// meta
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta FhirMeta `json:"meta,omitempty"`
	// implicitRules
	// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ImplicitRules FhirUri `json:"implicitRules,omitempty"`
	// language
	// The base language in which the resource is written.
	Language CommonLanguages `json:"language,omitempty"`
	// text
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text Narrative `json:"text,omitempty"`
	// contained
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []Resource `json:"contained,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// identifier
	// Business identifiers assigned to this condition by the performer or other systems which remain constant as the resource is updated and propagates from server to server.
	Identifier []Identifier `json:"identifier,omitempty"`
	// clinicalStatus
	// The clinical status of the condition.
	ClinicalStatus CodeableConcept `json:"clinicalStatus,omitempty"`
	// verificationStatus
	// The verification status to support the clinical status of the condition.
	VerificationStatus CodeableConcept `json:"verificationStatus,omitempty"`
	// category
	// A category assigned to the condition.
	Category []CodeableConcept `json:"category,omitempty"`
	// severity
	// A subjective assessment of the severity of the condition as evaluated by the clinician.
	Severity CodeableConcept `json:"severity,omitempty"`
	// code
	// Identification of the condition, problem or diagnosis.
	Code CodeableConcept `json:"code,omitempty"`
	// bodySite
	// The anatomical location where this condition manifests itself.
	BodySite []CodeableConcept `json:"bodySite,omitempty"`
	// subject
	// Indicates the patient or group who the condition record is associated with.
	Subject Reference `json:"subject,omitempty"`
	// encounter
	// The Encounter during which this Condition was created or to which the creation of this record is tightly associated.
	Encounter Reference `json:"encounter,omitempty"`
	// onsetDateTime
	// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
	OnsetDateTime FhirDateTime `json:"onsetDateTime,omitempty"`
	// onsetAge
	// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
	OnsetAge Age `json:"onsetAge,omitempty"`
	// onsetPeriod
	// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
	OnsetPeriod Period `json:"onsetPeriod,omitempty"`
	// onsetRange
	// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
	OnsetRange Range `json:"onsetRange,omitempty"`
	// onsetString
	// Estimated or actual date or date-time  the condition began, in the opinion of the clinician.
	OnsetString FhirString `json:"onsetString,omitempty"`
	// abatementDateTime
	// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
	AbatementDateTime FhirDateTime `json:"abatementDateTime,omitempty"`
	// abatementAge
	// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
	AbatementAge Age `json:"abatementAge,omitempty"`
	// abatementPeriod
	// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
	AbatementPeriod Period `json:"abatementPeriod,omitempty"`
	// abatementRange
	// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
	AbatementRange Range `json:"abatementRange,omitempty"`
	// abatementString
	// The date or estimated date that the condition resolved or went into remission. This is called "abatement" because of the many overloaded connotations associated with "remission" or "resolution" - Conditions are never really resolved, but they can abate.
	AbatementString FhirString `json:"abatementString,omitempty"`
	// recordedDate
	// The recordedDate represents when this particular Condition record was created in the system, which is often a system-generated date.
	RecordedDate FhirDateTime `json:"recordedDate,omitempty"`
	// recorder
	// Individual who recorded the record and takes responsibility for its content.
	Recorder Reference `json:"recorder,omitempty"`
	// asserter
	// Individual who is making the condition statement.
	Asserter Reference `json:"asserter,omitempty"`
	// stage
	// Clinical stage or grade of a condition. May include formal severity assessments.
	Stage []ConditionStage `json:"stage,omitempty"`
	// evidence
	// Supporting evidence / manifestations that are the basis of the Condition's verification status, such as evidence that confirmed or refuted the condition.
	Evidence []ConditionEvidence `json:"evidence,omitempty"`
	// note
	// Additional information about the Condition. This is a general notes/comments entry  for description of the Condition, its diagnosis and prognosis.
	Note []Annotation `json:"note,omitempty"`
}

// NewCondition creates a new Condition instance
func NewCondition(
	id FhirString,
	meta FhirMeta,
	implicitRules FhirUri,
	language CommonLanguages,
	text Narrative,
	contained []Resource,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	identifier []Identifier,
	clinicalStatus CodeableConcept,
	verificationStatus CodeableConcept,
	category []CodeableConcept,
	severity CodeableConcept,
	code CodeableConcept,
	bodySite []CodeableConcept,
	subject Reference,
	encounter Reference,
	onsetDateTime FhirDateTime,
	onsetAge Age,
	onsetPeriod Period,
	onsetRange Range,
	onsetString FhirString,
	abatementDateTime FhirDateTime,
	abatementAge Age,
	abatementPeriod Period,
	abatementRange Range,
	abatementString FhirString,
	recordedDate FhirDateTime,
	recorder Reference,
	asserter Reference,
	stage []ConditionStage,
	evidence []ConditionEvidence,
	note []Annotation,
) *Condition {
	return &Condition{
		Id: id,
		Meta: meta,
		ImplicitRules: implicitRules,
		Language: language,
		Text: text,
		Contained: contained,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Identifier: identifier,
		ClinicalStatus: clinicalStatus,
		VerificationStatus: verificationStatus,
		Category: category,
		Severity: severity,
		Code: code,
		BodySite: bodySite,
		Subject: subject,
		Encounter: encounter,
		OnsetDateTime: onsetDateTime,
		OnsetAge: onsetAge,
		OnsetPeriod: onsetPeriod,
		OnsetRange: onsetRange,
		OnsetString: onsetString,
		AbatementDateTime: abatementDateTime,
		AbatementAge: abatementAge,
		AbatementPeriod: abatementPeriod,
		AbatementRange: abatementRange,
		AbatementString: abatementString,
		RecordedDate: recordedDate,
		Recorder: recorder,
		Asserter: asserter,
		Stage: stage,
		Evidence: evidence,
		Note: note,
	}
}
// FromJSON populates Condition from JSON data
func (m *Condition) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Condition to JSON data
func (m *Condition) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of Condition
func (m *Condition) CopyWith(
	id *FhirString,
	meta *FhirMeta,
	implicitRules *FhirUri,
	language *CommonLanguages,
	text *Narrative,
	contained *[]Resource,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	identifier *[]Identifier,
	clinicalStatus *CodeableConcept,
	verificationStatus *CodeableConcept,
	category *[]CodeableConcept,
	severity *CodeableConcept,
	code *CodeableConcept,
	bodySite *[]CodeableConcept,
	subject *Reference,
	encounter *Reference,
	onsetDateTime *FhirDateTime,
	onsetAge *Age,
	onsetPeriod *Period,
	onsetRange *Range,
	onsetString *FhirString,
	abatementDateTime *FhirDateTime,
	abatementAge *Age,
	abatementPeriod *Period,
	abatementRange *Range,
	abatementString *FhirString,
	recordedDate *FhirDateTime,
	recorder *Reference,
	asserter *Reference,
	stage *[]ConditionStage,
	evidence *[]ConditionEvidence,
	note *[]Annotation,
) *Condition {
	return &Condition{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Meta: func() FhirMeta {
			if meta != nil { return *meta }
			return m.Meta
		}(),
		ImplicitRules: func() FhirUri {
			if implicitRules != nil { return *implicitRules }
			return m.ImplicitRules
		}(),
		Language: func() CommonLanguages {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() Narrative {
			if text != nil { return *text }
			return m.Text
		}(),
		Contained: func() []Resource {
			if contained != nil { return *contained }
			return m.Contained
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		ClinicalStatus: func() CodeableConcept {
			if clinicalStatus != nil { return *clinicalStatus }
			return m.ClinicalStatus
		}(),
		VerificationStatus: func() CodeableConcept {
			if verificationStatus != nil { return *verificationStatus }
			return m.VerificationStatus
		}(),
		Category: func() []CodeableConcept {
			if category != nil { return *category }
			return m.Category
		}(),
		Severity: func() CodeableConcept {
			if severity != nil { return *severity }
			return m.Severity
		}(),
		Code: func() CodeableConcept {
			if code != nil { return *code }
			return m.Code
		}(),
		BodySite: func() []CodeableConcept {
			if bodySite != nil { return *bodySite }
			return m.BodySite
		}(),
		Subject: func() Reference {
			if subject != nil { return *subject }
			return m.Subject
		}(),
		Encounter: func() Reference {
			if encounter != nil { return *encounter }
			return m.Encounter
		}(),
		OnsetDateTime: func() FhirDateTime {
			if onsetDateTime != nil { return *onsetDateTime }
			return m.OnsetDateTime
		}(),
		OnsetAge: func() Age {
			if onsetAge != nil { return *onsetAge }
			return m.OnsetAge
		}(),
		OnsetPeriod: func() Period {
			if onsetPeriod != nil { return *onsetPeriod }
			return m.OnsetPeriod
		}(),
		OnsetRange: func() Range {
			if onsetRange != nil { return *onsetRange }
			return m.OnsetRange
		}(),
		OnsetString: func() FhirString {
			if onsetString != nil { return *onsetString }
			return m.OnsetString
		}(),
		AbatementDateTime: func() FhirDateTime {
			if abatementDateTime != nil { return *abatementDateTime }
			return m.AbatementDateTime
		}(),
		AbatementAge: func() Age {
			if abatementAge != nil { return *abatementAge }
			return m.AbatementAge
		}(),
		AbatementPeriod: func() Period {
			if abatementPeriod != nil { return *abatementPeriod }
			return m.AbatementPeriod
		}(),
		AbatementRange: func() Range {
			if abatementRange != nil { return *abatementRange }
			return m.AbatementRange
		}(),
		AbatementString: func() FhirString {
			if abatementString != nil { return *abatementString }
			return m.AbatementString
		}(),
		RecordedDate: func() FhirDateTime {
			if recordedDate != nil { return *recordedDate }
			return m.RecordedDate
		}(),
		Recorder: func() Reference {
			if recorder != nil { return *recorder }
			return m.Recorder
		}(),
		Asserter: func() Reference {
			if asserter != nil { return *asserter }
			return m.Asserter
		}(),
		Stage: func() []ConditionStage {
			if stage != nil { return *stage }
			return m.Stage
		}(),
		Evidence: func() []ConditionEvidence {
			if evidence != nil { return *evidence }
			return m.Evidence
		}(),
		Note: func() []Annotation {
			if note != nil { return *note }
			return m.Note
		}(),
	}
}
// ConditionStage
// Clinical stage or grade of a condition. May include formal severity assessments.
type ConditionStage struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// summary
	// A simple summary of the stage such as "Stage 3". The determination of the stage is disease-specific.
	Summary CodeableConcept `json:"summary,omitempty"`
	// assessment
	// Reference to a formal record of the evidence on which the staging assessment is based.
	Assessment []Reference `json:"assessment,omitempty"`
	// type
	// The kind of staging, such as pathological or clinical staging.
	Type_ CodeableConcept `json:"type,omitempty"`
}

// NewConditionStage creates a new ConditionStage instance
func NewConditionStage(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	summary CodeableConcept,
	assessment []Reference,
	type_ CodeableConcept,
) *ConditionStage {
	return &ConditionStage{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Summary: summary,
		Assessment: assessment,
		Type_: type_,
	}
}
// FromJSON populates ConditionStage from JSON data
func (m *ConditionStage) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ConditionStage to JSON data
func (m *ConditionStage) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ConditionStage
func (m *ConditionStage) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	summary *CodeableConcept,
	assessment *[]Reference,
	type_ *CodeableConcept,
) *ConditionStage {
	return &ConditionStage{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Summary: func() CodeableConcept {
			if summary != nil { return *summary }
			return m.Summary
		}(),
		Assessment: func() []Reference {
			if assessment != nil { return *assessment }
			return m.Assessment
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
	}
}
// ConditionEvidence
// Supporting evidence / manifestations that are the basis of the Condition's verification status, such as evidence that confirmed or refuted the condition.
type ConditionEvidence struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// code
	// A manifestation or symptom that led to the recording of this condition.
	Code []CodeableConcept `json:"code,omitempty"`
	// detail
	// Links to other relevant information, including pathology reports.
	Detail []Reference `json:"detail,omitempty"`
}

// NewConditionEvidence creates a new ConditionEvidence instance
func NewConditionEvidence(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	code []CodeableConcept,
	detail []Reference,
) *ConditionEvidence {
	return &ConditionEvidence{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Code: code,
		Detail: detail,
	}
}
// FromJSON populates ConditionEvidence from JSON data
func (m *ConditionEvidence) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ConditionEvidence to JSON data
func (m *ConditionEvidence) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ConditionEvidence
func (m *ConditionEvidence) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	code *[]CodeableConcept,
	detail *[]Reference,
) *ConditionEvidence {
	return &ConditionEvidence{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Code: func() []CodeableConcept {
			if code != nil { return *code }
			return m.Code
		}(),
		Detail: func() []Reference {
			if detail != nil { return *detail }
			return m.Detail
		}(),
	}
}
