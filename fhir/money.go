// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// Money
// An amount of economic utility in some recognized currency.
type Money struct {
	DataType
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// value
	// Numerical value (with implicit precision).
	Value FhirDecimal `json:"value,omitempty"`
	// currency
	// ISO 4217 Currency Code.
	Currency FhirCode `json:"currency,omitempty"`
}

// NewMoney creates a new Money instance
func NewMoney(
	id FhirString,
	extension_ []FhirExtension,
	value FhirDecimal,
	currency FhirCode,
) *Money {
	return &Money{
		Id: id,
		Extension_: extension_,
		Value: value,
		Currency: currency,
	}
}
// FromJSON populates Money from JSON data
func (m *Money) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Money to JSON data
func (m *Money) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of Money
func (m *Money) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	value *FhirDecimal,
	currency *FhirCode,
) *Money {
	return &Money{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		Value: func() FhirDecimal {
			if value != nil { return *value }
			return m.Value
		}(),
		Currency: func() FhirCode {
			if currency != nil { return *currency }
			return m.Currency
		}(),
	}
}
