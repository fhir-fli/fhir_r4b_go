// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Person
// Demographics and administrative information about a person independent of a specific health-related context.
type Person struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Name []*HumanName `json:"name,omitempty"`
	Telecom []*ContactPoint `json:"telecom,omitempty"`
	Gender *AdministrativeGender `json:"gender,omitempty"`
	BirthDate *FhirDate `json:"birthdate,omitempty"`
	Address []*Address `json:"address,omitempty"`
	Photo *Attachment `json:"photo,omitempty"`
	ManagingOrganization *Reference `json:"managingorganization,omitempty"`
	Active *FhirBoolean `json:"active,omitempty"`
	Link []*PersonLink `json:"link,omitempty"`
}

// NewPerson creates a new Person instance
func NewPerson() *Person {
	return &Person{}
}

// FromJSON populates Person from JSON data
func (m *Person) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Person to JSON data
func (m *Person) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Person
func (m *Person) Clone() *Person {
	if m == nil { return nil }
	return &Person{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Name: cloneSlices(m.Name),
		Telecom: cloneSlices(m.Telecom),
		Gender: m.Gender.Clone(),
		BirthDate: m.BirthDate.Clone(),
		Address: cloneSlices(m.Address),
		Photo: m.Photo.Clone(),
		ManagingOrganization: m.ManagingOrganization.Clone(),
		Active: m.Active.Clone(),
		Link: cloneSlices(m.Link),
	}
}

// Equals checks for equality with another Person instance
func (m *Person) Equals(other *Person) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.Name, other.Name) { return false }
	if !compareSlices(m.Telecom, other.Telecom) { return false }
	if !m.Gender.Equals(other.Gender) { return false }
	if !m.BirthDate.Equals(other.BirthDate) { return false }
	if !compareSlices(m.Address, other.Address) { return false }
	if !m.Photo.Equals(other.Photo) { return false }
	if !m.ManagingOrganization.Equals(other.ManagingOrganization) { return false }
	if !m.Active.Equals(other.Active) { return false }
	if !compareSlices(m.Link, other.Link) { return false }
	return true
}

// PersonLink
// Link to a resource that concerns the same actual person.
type PersonLink struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Target *Reference `json:"target,omitempty"`
	Assurance *IdentityAssuranceLevel `json:"assurance,omitempty"`
}

// NewPersonLink creates a new PersonLink instance
func NewPersonLink() *PersonLink {
	return &PersonLink{}
}

// FromJSON populates PersonLink from JSON data
func (m *PersonLink) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PersonLink to JSON data
func (m *PersonLink) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of PersonLink
func (m *PersonLink) Clone() *PersonLink {
	if m == nil { return nil }
	return &PersonLink{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Target: m.Target.Clone(),
		Assurance: m.Assurance.Clone(),
	}
}

// Equals checks for equality with another PersonLink instance
func (m *PersonLink) Equals(other *PersonLink) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Target.Equals(other.Target) { return false }
	if !m.Assurance.Equals(other.Assurance) { return false }
	return true
}

