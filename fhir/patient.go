// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Patient
// Demographics and other administrative information about an individual or animal receiving care or other health-related services.
type Patient struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Active *FhirBoolean `json:"active,omitempty"`
	Name []*HumanName `json:"name,omitempty"`
	Telecom []*ContactPoint `json:"telecom,omitempty"`
	Gender *AdministrativeGender `json:"gender,omitempty"`
	BirthDate *FhirDate `json:"birthdate,omitempty"`
	DeceasedBoolean *FhirBoolean `json:"deceasedboolean,omitempty"`
	DeceasedDateTime *FhirDateTime `json:"deceaseddatetime,omitempty"`
	Address []*Address `json:"address,omitempty"`
	MaritalStatus *CodeableConcept `json:"maritalstatus,omitempty"`
	MultipleBirthBoolean *FhirBoolean `json:"multiplebirthboolean,omitempty"`
	MultipleBirthInteger *FhirInteger `json:"multiplebirthinteger,omitempty"`
	Photo []*Attachment `json:"photo,omitempty"`
	Contact []*PatientContact `json:"contact,omitempty"`
	Communication []*PatientCommunication `json:"communication,omitempty"`
	GeneralPractitioner []*Reference `json:"generalpractitioner,omitempty"`
	ManagingOrganization *Reference `json:"managingorganization,omitempty"`
	Link []*PatientLink `json:"link,omitempty"`
}

// NewPatient creates a new Patient instance
func NewPatient() *Patient {
	return &Patient{}
}

// FromJSON populates Patient from JSON data
func (m *Patient) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Patient to JSON data
func (m *Patient) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Patient
func (m *Patient) Clone() *Patient {
	if m == nil { return nil }
	return &Patient{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Active: m.Active.Clone(),
		Name: cloneSlices(m.Name),
		Telecom: cloneSlices(m.Telecom),
		Gender: m.Gender.Clone(),
		BirthDate: m.BirthDate.Clone(),
		DeceasedBoolean: m.DeceasedBoolean.Clone(),
		DeceasedDateTime: m.DeceasedDateTime.Clone(),
		Address: cloneSlices(m.Address),
		MaritalStatus: m.MaritalStatus.Clone(),
		MultipleBirthBoolean: m.MultipleBirthBoolean.Clone(),
		MultipleBirthInteger: m.MultipleBirthInteger.Clone(),
		Photo: cloneSlices(m.Photo),
		Contact: cloneSlices(m.Contact),
		Communication: cloneSlices(m.Communication),
		GeneralPractitioner: cloneSlices(m.GeneralPractitioner),
		ManagingOrganization: m.ManagingOrganization.Clone(),
		Link: cloneSlices(m.Link),
	}
}

// Equals checks for equality with another Patient instance
func (m *Patient) Equals(other *Patient) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Active.Equals(other.Active) { return false }
	if !compareSlices(m.Name, other.Name) { return false }
	if !compareSlices(m.Telecom, other.Telecom) { return false }
	if !m.Gender.Equals(other.Gender) { return false }
	if !m.BirthDate.Equals(other.BirthDate) { return false }
	if !m.DeceasedBoolean.Equals(other.DeceasedBoolean) { return false }
	if !m.DeceasedDateTime.Equals(other.DeceasedDateTime) { return false }
	if !compareSlices(m.Address, other.Address) { return false }
	if !m.MaritalStatus.Equals(other.MaritalStatus) { return false }
	if !m.MultipleBirthBoolean.Equals(other.MultipleBirthBoolean) { return false }
	if !m.MultipleBirthInteger.Equals(other.MultipleBirthInteger) { return false }
	if !compareSlices(m.Photo, other.Photo) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !compareSlices(m.Communication, other.Communication) { return false }
	if !compareSlices(m.GeneralPractitioner, other.GeneralPractitioner) { return false }
	if !m.ManagingOrganization.Equals(other.ManagingOrganization) { return false }
	if !compareSlices(m.Link, other.Link) { return false }
	return true
}

// PatientContact
// A contact party (e.g. guardian, partner, friend) for the patient.
type PatientContact struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Relationship []*CodeableConcept `json:"relationship,omitempty"`
	Name *HumanName `json:"name,omitempty"`
	Telecom []*ContactPoint `json:"telecom,omitempty"`
	Address *Address `json:"address,omitempty"`
	Gender *AdministrativeGender `json:"gender,omitempty"`
	Organization *Reference `json:"organization,omitempty"`
	Period *Period `json:"period,omitempty"`
}

// NewPatientContact creates a new PatientContact instance
func NewPatientContact() *PatientContact {
	return &PatientContact{}
}

// FromJSON populates PatientContact from JSON data
func (m *PatientContact) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PatientContact to JSON data
func (m *PatientContact) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of PatientContact
func (m *PatientContact) Clone() *PatientContact {
	if m == nil { return nil }
	return &PatientContact{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Relationship: cloneSlices(m.Relationship),
		Name: m.Name.Clone(),
		Telecom: cloneSlices(m.Telecom),
		Address: m.Address.Clone(),
		Gender: m.Gender.Clone(),
		Organization: m.Organization.Clone(),
		Period: m.Period.Clone(),
	}
}

// Equals checks for equality with another PatientContact instance
func (m *PatientContact) Equals(other *PatientContact) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Relationship, other.Relationship) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !compareSlices(m.Telecom, other.Telecom) { return false }
	if !m.Address.Equals(other.Address) { return false }
	if !m.Gender.Equals(other.Gender) { return false }
	if !m.Organization.Equals(other.Organization) { return false }
	if !m.Period.Equals(other.Period) { return false }
	return true
}

// PatientCommunication
// A language which may be used to communicate with the patient about his or her health.
type PatientCommunication struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Language *CodeableConcept `json:"language,omitempty"`
	Preferred *FhirBoolean `json:"preferred,omitempty"`
}

// NewPatientCommunication creates a new PatientCommunication instance
func NewPatientCommunication() *PatientCommunication {
	return &PatientCommunication{}
}

// FromJSON populates PatientCommunication from JSON data
func (m *PatientCommunication) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PatientCommunication to JSON data
func (m *PatientCommunication) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of PatientCommunication
func (m *PatientCommunication) Clone() *PatientCommunication {
	if m == nil { return nil }
	return &PatientCommunication{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Language: m.Language.Clone(),
		Preferred: m.Preferred.Clone(),
	}
}

// Equals checks for equality with another PatientCommunication instance
func (m *PatientCommunication) Equals(other *PatientCommunication) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Preferred.Equals(other.Preferred) { return false }
	return true
}

// PatientLink
// Link to another patient resource that concerns the same actual patient.
type PatientLink struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Other *Reference `json:"other,omitempty"`
	Type *LinkType `json:"type,omitempty"`
}

// NewPatientLink creates a new PatientLink instance
func NewPatientLink() *PatientLink {
	return &PatientLink{}
}

// FromJSON populates PatientLink from JSON data
func (m *PatientLink) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PatientLink to JSON data
func (m *PatientLink) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of PatientLink
func (m *PatientLink) Clone() *PatientLink {
	if m == nil { return nil }
	return &PatientLink{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Other: m.Other.Clone(),
		Type: m.Type.Clone(),
	}
}

// Equals checks for equality with another PatientLink instance
func (m *PatientLink) Equals(other *PatientLink) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Other.Equals(other.Other) { return false }
	if !m.Type.Equals(other.Type) { return false }
	return true
}

