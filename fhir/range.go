// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// Range
// A set of ordered Quantities defined by a low and high limit.
type Range struct {
	DataType
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// low
	// The low limit. The boundary is inclusive.
	Low Quantity `json:"low,omitempty"`
	// high
	// The high limit. The boundary is inclusive.
	High Quantity `json:"high,omitempty"`
}

// NewRange creates a new Range instance
func NewRange(
	id FhirString,
	extension_ []FhirExtension,
	low Quantity,
	high Quantity,
) *Range {
	return &Range{
		Id: id,
		Extension_: extension_,
		Low: low,
		High: high,
	}
}
// FromJSON populates Range from JSON data
func (m *Range) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Range to JSON data
func (m *Range) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of Range
func (m *Range) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	low *Quantity,
	high *Quantity,
) *Range {
	return &Range{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		Low: func() Quantity {
			if low != nil { return *low }
			return m.Low
		}(),
		High: func() Quantity {
			if high != nil { return *high }
			return m.High
		}(),
	}
}
