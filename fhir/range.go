// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Range
// A set of ordered Quantities defined by a low and high limit.
type Range struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Low *Quantity `json:"low,omitempty"`
	High *Quantity `json:"high,omitempty"`
}

// NewRange creates a new Range instance
func NewRange() *Range {
	return &Range{}
}

// FromJSON populates Range from JSON data
func (m *Range) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Range to JSON data
func (m *Range) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Range
func (m *Range) Clone() *Range {
	if m == nil { return nil }
	return &Range{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Low: m.Low.Clone(),
		High: m.High.Clone(),
	}
}

// Equals checks for equality with another Range instance
func (m *Range) Equals(other *Range) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Low.Equals(other.Low) { return false }
	if !m.High.Equals(other.High) { return false }
	return true
}

