// Code generated by FHIR Generator. DO NOT EDIT.
// This value set includes sample Coverage Copayment Type codes.
package fhir_r4b_go
// CoverageCopayTypeCodes represents the FHIR ValueSet as an enumeration
type CoverageCopayTypeCodes struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	CoverageCopayTypeCodes_Gpvisit = "gpvisit" // GP Office Visit: An office visit for a general practitioner of a discipline.
	CoverageCopayTypeCodes_Spvisit = "spvisit" // Specialist Office Visit: An office visit for a specialist practitioner of a discipline
	CoverageCopayTypeCodes_Emergency = "emergency" // Emergency: An episode in an emergency department.
	CoverageCopayTypeCodes_Inpthosp = "inpthosp" // Inpatient Hospital: An episode of an Inpatient hospital stay.
	CoverageCopayTypeCodes_Televisit = "televisit" // Tele-visit: A visit held where the patient is remote relative to the practitioner, e.g. by phone, computer or video conference.
	CoverageCopayTypeCodes_Urgentcare = "urgentcare" // Urgent Care: A visit to an urgent care facility - typically a community care clinic.
	CoverageCopayTypeCodes_Copaypct = "copaypct" // Copay Percentage: A standard percentage applied to all classes or service or product not otherwise specified.
	CoverageCopayTypeCodes_Copay = "copay" // Copay Amount: A standard fixed currency amount applied to all classes or service or product not otherwise specified.
	CoverageCopayTypeCodes_Deductible = "deductible" // Deductible: The accumulated amount of patient payment before the coverage begins to pay for services.
	CoverageCopayTypeCodes_Maxoutofpocket = "maxoutofpocket" // Maximum out of pocket: The maximum amout of payment for services which a patient, or family, is expected to incur - typically annually.
)

// Clone creates a deep copy of the enum
func (e CoverageCopayTypeCodes) Clone() *CoverageCopayTypeCodes {
	return &CoverageCopayTypeCodes{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *CoverageCopayTypeCodes) Equals(other *CoverageCopayTypeCodes) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

