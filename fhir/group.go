// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// FhirGroup
// Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
type FhirGroup struct {
	DomainResource
	// id
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Id FhirString `json:"id,omitempty"`
	// meta
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta FhirMeta `json:"meta,omitempty"`
	// implicitRules
	// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ImplicitRules FhirUri `json:"implicitRules,omitempty"`
	// language
	// The base language in which the resource is written.
	Language CommonLanguages `json:"language,omitempty"`
	// text
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text Narrative `json:"text,omitempty"`
	// contained
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []Resource `json:"contained,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// identifier
	// A unique business identifier for this group.
	Identifier []Identifier `json:"identifier,omitempty"`
	// active
	// Indicates whether the record for the group is available for use or is merely being retained for historical purposes.
	Active FhirBoolean `json:"active,omitempty"`
	// type
	// Identifies the broad classification of the kind of resources the group includes.
	Type_ GroupType `json:"type,omitempty"`
	// actual
	// If true, indicates that the resource refers to a specific group of real individuals.  If false, the group defines a set of intended individuals.
	Actual FhirBoolean `json:"actual,omitempty"`
	// code
	// Provides a specific type of resource the group includes; e.g. "cow", "syringe", etc.
	Code CodeableConcept `json:"code,omitempty"`
	// name
	// A label assigned to the group for human identification and communication.
	Name FhirString `json:"name,omitempty"`
	// quantity
	// A count of the number of resource instances that are part of the group.
	Quantity FhirUnsignedInt `json:"quantity,omitempty"`
	// managingEntity
	// Entity responsible for defining and maintaining Group characteristics and/or registered members.
	ManagingEntity Reference `json:"managingEntity,omitempty"`
	// characteristic
	// Identifies traits whose presence r absence is shared by members of the group.
	Characteristic []GroupCharacteristic `json:"characteristic,omitempty"`
	// member
	// Identifies the resource instances that are members of the group.
	Member []GroupMember `json:"member,omitempty"`
}

// NewFhirGroup creates a new FhirGroup instance
func NewFhirGroup(
	id FhirString,
	meta FhirMeta,
	implicitRules FhirUri,
	language CommonLanguages,
	text Narrative,
	contained []Resource,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	identifier []Identifier,
	active FhirBoolean,
	type_ GroupType,
	actual FhirBoolean,
	code CodeableConcept,
	name FhirString,
	quantity FhirUnsignedInt,
	managingEntity Reference,
	characteristic []GroupCharacteristic,
	member []GroupMember,
) *FhirGroup {
	return &FhirGroup{
		Id: id,
		Meta: meta,
		ImplicitRules: implicitRules,
		Language: language,
		Text: text,
		Contained: contained,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Identifier: identifier,
		Active: active,
		Type_: type_,
		Actual: actual,
		Code: code,
		Name: name,
		Quantity: quantity,
		ManagingEntity: managingEntity,
		Characteristic: characteristic,
		Member: member,
	}
}
// FromJSON populates FhirGroup from JSON data
func (m *FhirGroup) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts FhirGroup to JSON data
func (m *FhirGroup) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of FhirGroup
func (m *FhirGroup) CopyWith(
	id *FhirString,
	meta *FhirMeta,
	implicitRules *FhirUri,
	language *CommonLanguages,
	text *Narrative,
	contained *[]Resource,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	identifier *[]Identifier,
	active *FhirBoolean,
	type_ *GroupType,
	actual *FhirBoolean,
	code *CodeableConcept,
	name *FhirString,
	quantity *FhirUnsignedInt,
	managingEntity *Reference,
	characteristic *[]GroupCharacteristic,
	member *[]GroupMember,
) *FhirGroup {
	return &FhirGroup{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Meta: func() FhirMeta {
			if meta != nil { return *meta }
			return m.Meta
		}(),
		ImplicitRules: func() FhirUri {
			if implicitRules != nil { return *implicitRules }
			return m.ImplicitRules
		}(),
		Language: func() CommonLanguages {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() Narrative {
			if text != nil { return *text }
			return m.Text
		}(),
		Contained: func() []Resource {
			if contained != nil { return *contained }
			return m.Contained
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		Active: func() FhirBoolean {
			if active != nil { return *active }
			return m.Active
		}(),
		Type_: func() GroupType {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Actual: func() FhirBoolean {
			if actual != nil { return *actual }
			return m.Actual
		}(),
		Code: func() CodeableConcept {
			if code != nil { return *code }
			return m.Code
		}(),
		Name: func() FhirString {
			if name != nil { return *name }
			return m.Name
		}(),
		Quantity: func() FhirUnsignedInt {
			if quantity != nil { return *quantity }
			return m.Quantity
		}(),
		ManagingEntity: func() Reference {
			if managingEntity != nil { return *managingEntity }
			return m.ManagingEntity
		}(),
		Characteristic: func() []GroupCharacteristic {
			if characteristic != nil { return *characteristic }
			return m.Characteristic
		}(),
		Member: func() []GroupMember {
			if member != nil { return *member }
			return m.Member
		}(),
	}
}
// GroupCharacteristic
// Identifies traits whose presence r absence is shared by members of the group.
type GroupCharacteristic struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// code
	// A code that identifies the kind of trait being asserted.
	Code CodeableConcept `json:"code,omitempty"`
	// valueCodeableConcept
	// The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
	ValueCodeableConcept CodeableConcept `json:"valueCodeableConcept,omitempty"`
	// valueBoolean
	// The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
	ValueBoolean FhirBoolean `json:"valueBoolean,omitempty"`
	// valueQuantity
	// The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
	ValueQuantity Quantity `json:"valueQuantity,omitempty"`
	// valueRange
	// The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
	ValueRange Range `json:"valueRange,omitempty"`
	// valueReference
	// The value of the trait that holds (or does not hold - see 'exclude') for members of the group.
	ValueReference Reference `json:"valueReference,omitempty"`
	// exclude
	// If true, indicates the characteristic is one that is NOT held by members of the group.
	Exclude FhirBoolean `json:"exclude,omitempty"`
	// period
	// The period over which the characteristic is tested; e.g. the patient had an operation during the month of June.
	Period Period `json:"period,omitempty"`
}

// NewGroupCharacteristic creates a new GroupCharacteristic instance
func NewGroupCharacteristic(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	code CodeableConcept,
	valueCodeableConcept CodeableConcept,
	valueBoolean FhirBoolean,
	valueQuantity Quantity,
	valueRange Range,
	valueReference Reference,
	exclude FhirBoolean,
	period Period,
) *GroupCharacteristic {
	return &GroupCharacteristic{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Code: code,
		ValueCodeableConcept: valueCodeableConcept,
		ValueBoolean: valueBoolean,
		ValueQuantity: valueQuantity,
		ValueRange: valueRange,
		ValueReference: valueReference,
		Exclude: exclude,
		Period: period,
	}
}
// FromJSON populates GroupCharacteristic from JSON data
func (m *GroupCharacteristic) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts GroupCharacteristic to JSON data
func (m *GroupCharacteristic) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of GroupCharacteristic
func (m *GroupCharacteristic) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	code *CodeableConcept,
	valueCodeableConcept *CodeableConcept,
	valueBoolean *FhirBoolean,
	valueQuantity *Quantity,
	valueRange *Range,
	valueReference *Reference,
	exclude *FhirBoolean,
	period *Period,
) *GroupCharacteristic {
	return &GroupCharacteristic{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Code: func() CodeableConcept {
			if code != nil { return *code }
			return m.Code
		}(),
		ValueCodeableConcept: func() CodeableConcept {
			if valueCodeableConcept != nil { return *valueCodeableConcept }
			return m.ValueCodeableConcept
		}(),
		ValueBoolean: func() FhirBoolean {
			if valueBoolean != nil { return *valueBoolean }
			return m.ValueBoolean
		}(),
		ValueQuantity: func() Quantity {
			if valueQuantity != nil { return *valueQuantity }
			return m.ValueQuantity
		}(),
		ValueRange: func() Range {
			if valueRange != nil { return *valueRange }
			return m.ValueRange
		}(),
		ValueReference: func() Reference {
			if valueReference != nil { return *valueReference }
			return m.ValueReference
		}(),
		Exclude: func() FhirBoolean {
			if exclude != nil { return *exclude }
			return m.Exclude
		}(),
		Period: func() Period {
			if period != nil { return *period }
			return m.Period
		}(),
	}
}
// GroupMember
// Identifies the resource instances that are members of the group.
type GroupMember struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// entity
	// A reference to the entity that is a member of the group. Must be consistent with Group.type. If the entity is another group, then the type must be the same.
	Entity Reference `json:"entity,omitempty"`
	// period
	// The period that the member was in the group, if known.
	Period Period `json:"period,omitempty"`
	// inactive
	// A flag to indicate that the member is no longer in the group, but previously may have been a member.
	Inactive FhirBoolean `json:"inactive,omitempty"`
}

// NewGroupMember creates a new GroupMember instance
func NewGroupMember(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	entity Reference,
	period Period,
	inactive FhirBoolean,
) *GroupMember {
	return &GroupMember{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Entity: entity,
		Period: period,
		Inactive: inactive,
	}
}
// FromJSON populates GroupMember from JSON data
func (m *GroupMember) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts GroupMember to JSON data
func (m *GroupMember) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of GroupMember
func (m *GroupMember) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	entity *Reference,
	period *Period,
	inactive *FhirBoolean,
) *GroupMember {
	return &GroupMember{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Entity: func() Reference {
			if entity != nil { return *entity }
			return m.Entity
		}(),
		Period: func() Period {
			if period != nil { return *period }
			return m.Period
		}(),
		Inactive: func() FhirBoolean {
			if inactive != nil { return *inactive }
			return m.Inactive
		}(),
	}
}
