// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// SampledData
// A series of measurements taken by a device, with upper and lower limits. There may be more than one dimension in the data.
type SampledData struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Origin *Quantity `json:"origin,omitempty"`
	Period *FhirDecimal `json:"period,omitempty"`
	Factor *FhirDecimal `json:"factor,omitempty"`
	LowerLimit *FhirDecimal `json:"lowerlimit,omitempty"`
	UpperLimit *FhirDecimal `json:"upperlimit,omitempty"`
	Dimensions *FhirPositiveInt `json:"dimensions,omitempty"`
	Data *FhirString `json:"data,omitempty"`
}

// NewSampledData creates a new SampledData instance
func NewSampledData() *SampledData {
	return &SampledData{}
}

// FromJSON populates SampledData from JSON data
func (m *SampledData) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts SampledData to JSON data
func (m *SampledData) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of SampledData
func (m *SampledData) Clone() *SampledData {
	if m == nil { return nil }
	return &SampledData{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Origin: m.Origin.Clone(),
		Period: m.Period.Clone(),
		Factor: m.Factor.Clone(),
		LowerLimit: m.LowerLimit.Clone(),
		UpperLimit: m.UpperLimit.Clone(),
		Dimensions: m.Dimensions.Clone(),
		Data: m.Data.Clone(),
	}
}

// Equals checks for equality with another SampledData instance
func (m *SampledData) Equals(other *SampledData) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Origin.Equals(other.Origin) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !m.Factor.Equals(other.Factor) { return false }
	if !m.LowerLimit.Equals(other.LowerLimit) { return false }
	if !m.UpperLimit.Equals(other.UpperLimit) { return false }
	if !m.Dimensions.Equals(other.Dimensions) { return false }
	if !m.Data.Equals(other.Data) { return false }
	return true
}

