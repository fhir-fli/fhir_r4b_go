// Code generated by FHIR Generator. DO NOT EDIT.
// To describe the reason for the variant citation, such as version number or subpart specification.
package fhir_r4b_go
// CitedArtifactPartType represents the FHIR ValueSet as an enumeration
type CitedArtifactPartType struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	CitedArtifactPartType_Pages = "pages" // pages: Denotes specific page or pages of an article or artifact.
	CitedArtifactPartType_Sections = "sections" // sections: Denotes specific section or sections of an article or artifact.
	CitedArtifactPartType_Paragraphs = "paragraphs" // paragraphs: Denotes specific paragraph or paragraphs of an article or artifact.
	CitedArtifactPartType_Lines = "lines" // lines: Denotes specific line or lines of an article or artifact.
	CitedArtifactPartType_Tables = "tables" // tables: Denotes specific table or tables of an article or artifact.
	CitedArtifactPartType_Figures = "figures" // figures: Denotes specific figure or figures of an article or artifact.
	CitedArtifactPartType_Supplement = "supplement" // Supplement or Appendix: Used to denote a supplementary file, appendix, or additional part that is not a subpart of the primary article.
	CitedArtifactPartType_Supplement_subpart = "supplement-subpart" // Supplement or Appendix Subpart: Used to denote a subpart within a supplementary file or appendix.
	CitedArtifactPartType_Article_set = "article-set" // Part of an article set: Used to distinguish an individual article within an article set where the article set is a base citation.
)

// Clone creates a deep copy of the enum
func (e CitedArtifactPartType) Clone() *CitedArtifactPartType {
	return &CitedArtifactPartType{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *CitedArtifactPartType) Equals(other *CitedArtifactPartType) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

