// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// HumanName
// A human's name with the ability to identify parts and usage.
type HumanName struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Use *NameUse `json:"use,omitempty"`
	Text *FhirString `json:"text,omitempty"`
	Family *FhirString `json:"family,omitempty"`
	Given []*FhirString `json:"given,omitempty"`
	Prefix []*FhirString `json:"prefix,omitempty"`
	Suffix []*FhirString `json:"suffix,omitempty"`
	Period *Period `json:"period,omitempty"`
}

// NewHumanName creates a new HumanName instance
func NewHumanName() *HumanName {
	return &HumanName{}
}

// FromJSON populates HumanName from JSON data
func (m *HumanName) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts HumanName to JSON data
func (m *HumanName) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of HumanName
func (m *HumanName) Clone() *HumanName {
	if m == nil { return nil }
	return &HumanName{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Use: m.Use.Clone(),
		Text: m.Text.Clone(),
		Family: m.Family.Clone(),
		Given: cloneSlices(m.Given),
		Prefix: cloneSlices(m.Prefix),
		Suffix: cloneSlices(m.Suffix),
		Period: m.Period.Clone(),
	}
}

// Equals checks for equality with another HumanName instance
func (m *HumanName) Equals(other *HumanName) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Use.Equals(other.Use) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !m.Family.Equals(other.Family) { return false }
	if !compareSlices(m.Given, other.Given) { return false }
	if !compareSlices(m.Prefix, other.Prefix) { return false }
	if !compareSlices(m.Suffix, other.Suffix) { return false }
	if !m.Period.Equals(other.Period) { return false }
	return true
}

