// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// AppointmentResponse
// A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
type AppointmentResponse struct {
	DomainResource
	// id
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Id FhirString `json:"id,omitempty"`
	// meta
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta FhirMeta `json:"meta,omitempty"`
	// implicitRules
	// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ImplicitRules FhirUri `json:"implicitRules,omitempty"`
	// language
	// The base language in which the resource is written.
	Language CommonLanguages `json:"language,omitempty"`
	// text
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text Narrative `json:"text,omitempty"`
	// contained
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []Resource `json:"contained,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// identifier
	// This records identifiers associated with this appointment response concern that are defined by business processes and/ or used to refer to it when a direct URL reference to the resource itself is not appropriate.
	Identifier []Identifier `json:"identifier,omitempty"`
	// appointment
	// Appointment that this response is replying to.
	Appointment Reference `json:"appointment,omitempty"`
	// start
	// Date/Time that the appointment is to take place, or requested new start time.
	Start FhirInstant `json:"start,omitempty"`
	// end
	// This may be either the same as the appointment request to confirm the details of the appointment, or alternately a new time to request a re-negotiation of the end time.
	End FhirInstant `json:"end,omitempty"`
	// participantType
	// Role of participant in the appointment.
	ParticipantType []CodeableConcept `json:"participantType,omitempty"`
	// actor
	// A Person, Location, HealthcareService, or Device that is participating in the appointment.
	Actor Reference `json:"actor,omitempty"`
	// participantStatus
	// Participation status of the participant. When the status is declined or tentative if the start/end times are different to the appointment, then these times should be interpreted as a requested time change. When the status is accepted, the times can either be the time of the appointment (as a confirmation of the time) or can be empty.
	ParticipantStatus ParticipationStatus `json:"participantStatus,omitempty"`
	// comment
	// Additional comments about the appointment.
	Comment FhirString `json:"comment,omitempty"`
}

// NewAppointmentResponse creates a new AppointmentResponse instance
func NewAppointmentResponse(
	id FhirString,
	meta FhirMeta,
	implicitRules FhirUri,
	language CommonLanguages,
	text Narrative,
	contained []Resource,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	identifier []Identifier,
	appointment Reference,
	start FhirInstant,
	end FhirInstant,
	participantType []CodeableConcept,
	actor Reference,
	participantStatus ParticipationStatus,
	comment FhirString,
) *AppointmentResponse {
	return &AppointmentResponse{
		Id: id,
		Meta: meta,
		ImplicitRules: implicitRules,
		Language: language,
		Text: text,
		Contained: contained,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Identifier: identifier,
		Appointment: appointment,
		Start: start,
		End: end,
		ParticipantType: participantType,
		Actor: actor,
		ParticipantStatus: participantStatus,
		Comment: comment,
	}
}
// FromJSON populates AppointmentResponse from JSON data
func (m *AppointmentResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts AppointmentResponse to JSON data
func (m *AppointmentResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of AppointmentResponse
func (m *AppointmentResponse) CopyWith(
	id *FhirString,
	meta *FhirMeta,
	implicitRules *FhirUri,
	language *CommonLanguages,
	text *Narrative,
	contained *[]Resource,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	identifier *[]Identifier,
	appointment *Reference,
	start *FhirInstant,
	end *FhirInstant,
	participantType *[]CodeableConcept,
	actor *Reference,
	participantStatus *ParticipationStatus,
	comment *FhirString,
) *AppointmentResponse {
	return &AppointmentResponse{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Meta: func() FhirMeta {
			if meta != nil { return *meta }
			return m.Meta
		}(),
		ImplicitRules: func() FhirUri {
			if implicitRules != nil { return *implicitRules }
			return m.ImplicitRules
		}(),
		Language: func() CommonLanguages {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() Narrative {
			if text != nil { return *text }
			return m.Text
		}(),
		Contained: func() []Resource {
			if contained != nil { return *contained }
			return m.Contained
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		Appointment: func() Reference {
			if appointment != nil { return *appointment }
			return m.Appointment
		}(),
		Start: func() FhirInstant {
			if start != nil { return *start }
			return m.Start
		}(),
		End: func() FhirInstant {
			if end != nil { return *end }
			return m.End
		}(),
		ParticipantType: func() []CodeableConcept {
			if participantType != nil { return *participantType }
			return m.ParticipantType
		}(),
		Actor: func() Reference {
			if actor != nil { return *actor }
			return m.Actor
		}(),
		ParticipantStatus: func() ParticipationStatus {
			if participantStatus != nil { return *participantStatus }
			return m.ParticipantStatus
		}(),
		Comment: func() FhirString {
			if comment != nil { return *comment }
			return m.Comment
		}(),
	}
}
