// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// AppointmentResponse
// A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
type AppointmentResponse struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Appointment *Reference `json:"appointment,omitempty"`
	Start *FhirInstant `json:"start,omitempty"`
	End *FhirInstant `json:"end,omitempty"`
	ParticipantType []*CodeableConcept `json:"participanttype,omitempty"`
	Actor *Reference `json:"actor,omitempty"`
	ParticipantStatus *ParticipationStatus `json:"participantstatus,omitempty"`
	Comment *FhirString `json:"comment,omitempty"`
}

// NewAppointmentResponse creates a new AppointmentResponse instance
func NewAppointmentResponse() *AppointmentResponse {
	return &AppointmentResponse{}
}

// FromJSON populates AppointmentResponse from JSON data
func (m *AppointmentResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts AppointmentResponse to JSON data
func (m *AppointmentResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of AppointmentResponse
func (m *AppointmentResponse) Clone() *AppointmentResponse {
	if m == nil { return nil }
	return &AppointmentResponse{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Appointment: m.Appointment.Clone(),
		Start: m.Start.Clone(),
		End: m.End.Clone(),
		ParticipantType: cloneSlices(m.ParticipantType),
		Actor: m.Actor.Clone(),
		ParticipantStatus: m.ParticipantStatus.Clone(),
		Comment: m.Comment.Clone(),
	}
}

// Equals checks for equality with another AppointmentResponse instance
func (m *AppointmentResponse) Equals(other *AppointmentResponse) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Appointment.Equals(other.Appointment) { return false }
	if !m.Start.Equals(other.Start) { return false }
	if !m.End.Equals(other.End) { return false }
	if !compareSlices(m.ParticipantType, other.ParticipantType) { return false }
	if !m.Actor.Equals(other.Actor) { return false }
	if !m.ParticipantStatus.Equals(other.ParticipantStatus) { return false }
	if !m.Comment.Equals(other.Comment) { return false }
	return true
}

