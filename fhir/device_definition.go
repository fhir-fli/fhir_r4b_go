// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// DeviceDefinition
// The characteristics, operational status and capabilities of a medical-related component of a medical device.
type DeviceDefinition struct {
	DomainResource
	// id
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Id FhirString `json:"id,omitempty"`
	// meta
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta FhirMeta `json:"meta,omitempty"`
	// implicitRules
	// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ImplicitRules FhirUri `json:"implicitRules,omitempty"`
	// language
	// The base language in which the resource is written.
	Language CommonLanguages `json:"language,omitempty"`
	// text
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text Narrative `json:"text,omitempty"`
	// contained
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []Resource `json:"contained,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// identifier
	// Unique instance identifiers assigned to a device by the software, manufacturers, other organizations or owners. For example: handle ID.
	Identifier []Identifier `json:"identifier,omitempty"`
	// udiDeviceIdentifier
	// Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
	UdiDeviceIdentifier []DeviceDefinitionUdiDeviceIdentifier `json:"udiDeviceIdentifier,omitempty"`
	// manufacturerString
	// A name of the manufacturer.
	ManufacturerString FhirString `json:"manufacturerString,omitempty"`
	// manufacturerReference
	// A name of the manufacturer.
	ManufacturerReference Reference `json:"manufacturerReference,omitempty"`
	// deviceName
	// A name given to the device to identify it.
	DeviceName []DeviceDefinitionDeviceName `json:"deviceName,omitempty"`
	// modelNumber
	// The model number for the device.
	ModelNumber FhirString `json:"modelNumber,omitempty"`
	// type
	// What kind of device or device system this is.
	Type_ CodeableConcept `json:"type,omitempty"`
	// specialization
	// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
	Specialization []DeviceDefinitionSpecialization `json:"specialization,omitempty"`
	// version
	// The available versions of the device, e.g., software versions.
	Version []FhirString `json:"version,omitempty"`
	// safety
	// Safety characteristics of the device.
	Safety []CodeableConcept `json:"safety,omitempty"`
	// shelfLifeStorage
	// Shelf Life and storage information.
	ShelfLifeStorage []ProductShelfLife `json:"shelfLifeStorage,omitempty"`
	// physicalCharacteristics
	// Dimensions, color etc.
	PhysicalCharacteristics ProdCharacteristic `json:"physicalCharacteristics,omitempty"`
	// languageCode
	// Language code for the human-readable text strings produced by the device (all supported).
	LanguageCode []CodeableConcept `json:"languageCode,omitempty"`
	// capability
	// Device capabilities.
	Capability []DeviceDefinitionCapability `json:"capability,omitempty"`
	// property
	// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
	Property []DeviceDefinitionProperty `json:"property,omitempty"`
	// owner
	// An organization that is responsible for the provision and ongoing maintenance of the device.
	Owner Reference `json:"owner,omitempty"`
	// contact
	// Contact details for an organization or a particular human that is responsible for the device.
	Contact []ContactPoint `json:"contact,omitempty"`
	// url
	// A network address on which the device may be contacted directly.
	Url FhirUri `json:"url,omitempty"`
	// onlineInformation
	// Access to on-line information about the device.
	OnlineInformation FhirUri `json:"onlineInformation,omitempty"`
	// note
	// Descriptive information, usage information or implantation information that is not captured in an existing element.
	Note []Annotation `json:"note,omitempty"`
	// quantity
	// The quantity of the device present in the packaging (e.g. the number of devices present in a pack, or the number of devices in the same package of the medicinal product).
	Quantity Quantity `json:"quantity,omitempty"`
	// parentDevice
	// The parent device it can be part of.
	ParentDevice Reference `json:"parentDevice,omitempty"`
	// material
	// A substance used to create the material(s) of which the device is made.
	Material []DeviceDefinitionMaterial `json:"material,omitempty"`
}

// NewDeviceDefinition creates a new DeviceDefinition instance
func NewDeviceDefinition(
	id FhirString,
	meta FhirMeta,
	implicitRules FhirUri,
	language CommonLanguages,
	text Narrative,
	contained []Resource,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	identifier []Identifier,
	udiDeviceIdentifier []DeviceDefinitionUdiDeviceIdentifier,
	manufacturerString FhirString,
	manufacturerReference Reference,
	deviceName []DeviceDefinitionDeviceName,
	modelNumber FhirString,
	type_ CodeableConcept,
	specialization []DeviceDefinitionSpecialization,
	version []FhirString,
	safety []CodeableConcept,
	shelfLifeStorage []ProductShelfLife,
	physicalCharacteristics ProdCharacteristic,
	languageCode []CodeableConcept,
	capability []DeviceDefinitionCapability,
	property []DeviceDefinitionProperty,
	owner Reference,
	contact []ContactPoint,
	url FhirUri,
	onlineInformation FhirUri,
	note []Annotation,
	quantity Quantity,
	parentDevice Reference,
	material []DeviceDefinitionMaterial,
) *DeviceDefinition {
	return &DeviceDefinition{
		Id: id,
		Meta: meta,
		ImplicitRules: implicitRules,
		Language: language,
		Text: text,
		Contained: contained,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Identifier: identifier,
		UdiDeviceIdentifier: udiDeviceIdentifier,
		ManufacturerString: manufacturerString,
		ManufacturerReference: manufacturerReference,
		DeviceName: deviceName,
		ModelNumber: modelNumber,
		Type_: type_,
		Specialization: specialization,
		Version: version,
		Safety: safety,
		ShelfLifeStorage: shelfLifeStorage,
		PhysicalCharacteristics: physicalCharacteristics,
		LanguageCode: languageCode,
		Capability: capability,
		Property: property,
		Owner: owner,
		Contact: contact,
		Url: url,
		OnlineInformation: onlineInformation,
		Note: note,
		Quantity: quantity,
		ParentDevice: parentDevice,
		Material: material,
	}
}
// FromJSON populates DeviceDefinition from JSON data
func (m *DeviceDefinition) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DeviceDefinition to JSON data
func (m *DeviceDefinition) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DeviceDefinition
func (m *DeviceDefinition) CopyWith(
	id *FhirString,
	meta *FhirMeta,
	implicitRules *FhirUri,
	language *CommonLanguages,
	text *Narrative,
	contained *[]Resource,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	identifier *[]Identifier,
	udiDeviceIdentifier *[]DeviceDefinitionUdiDeviceIdentifier,
	manufacturerString *FhirString,
	manufacturerReference *Reference,
	deviceName *[]DeviceDefinitionDeviceName,
	modelNumber *FhirString,
	type_ *CodeableConcept,
	specialization *[]DeviceDefinitionSpecialization,
	version *[]FhirString,
	safety *[]CodeableConcept,
	shelfLifeStorage *[]ProductShelfLife,
	physicalCharacteristics *ProdCharacteristic,
	languageCode *[]CodeableConcept,
	capability *[]DeviceDefinitionCapability,
	property *[]DeviceDefinitionProperty,
	owner *Reference,
	contact *[]ContactPoint,
	url *FhirUri,
	onlineInformation *FhirUri,
	note *[]Annotation,
	quantity *Quantity,
	parentDevice *Reference,
	material *[]DeviceDefinitionMaterial,
) *DeviceDefinition {
	return &DeviceDefinition{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Meta: func() FhirMeta {
			if meta != nil { return *meta }
			return m.Meta
		}(),
		ImplicitRules: func() FhirUri {
			if implicitRules != nil { return *implicitRules }
			return m.ImplicitRules
		}(),
		Language: func() CommonLanguages {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() Narrative {
			if text != nil { return *text }
			return m.Text
		}(),
		Contained: func() []Resource {
			if contained != nil { return *contained }
			return m.Contained
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		UdiDeviceIdentifier: func() []DeviceDefinitionUdiDeviceIdentifier {
			if udiDeviceIdentifier != nil { return *udiDeviceIdentifier }
			return m.UdiDeviceIdentifier
		}(),
		ManufacturerString: func() FhirString {
			if manufacturerString != nil { return *manufacturerString }
			return m.ManufacturerString
		}(),
		ManufacturerReference: func() Reference {
			if manufacturerReference != nil { return *manufacturerReference }
			return m.ManufacturerReference
		}(),
		DeviceName: func() []DeviceDefinitionDeviceName {
			if deviceName != nil { return *deviceName }
			return m.DeviceName
		}(),
		ModelNumber: func() FhirString {
			if modelNumber != nil { return *modelNumber }
			return m.ModelNumber
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Specialization: func() []DeviceDefinitionSpecialization {
			if specialization != nil { return *specialization }
			return m.Specialization
		}(),
		Version: func() []FhirString {
			if version != nil { return *version }
			return m.Version
		}(),
		Safety: func() []CodeableConcept {
			if safety != nil { return *safety }
			return m.Safety
		}(),
		ShelfLifeStorage: func() []ProductShelfLife {
			if shelfLifeStorage != nil { return *shelfLifeStorage }
			return m.ShelfLifeStorage
		}(),
		PhysicalCharacteristics: func() ProdCharacteristic {
			if physicalCharacteristics != nil { return *physicalCharacteristics }
			return m.PhysicalCharacteristics
		}(),
		LanguageCode: func() []CodeableConcept {
			if languageCode != nil { return *languageCode }
			return m.LanguageCode
		}(),
		Capability: func() []DeviceDefinitionCapability {
			if capability != nil { return *capability }
			return m.Capability
		}(),
		Property: func() []DeviceDefinitionProperty {
			if property != nil { return *property }
			return m.Property
		}(),
		Owner: func() Reference {
			if owner != nil { return *owner }
			return m.Owner
		}(),
		Contact: func() []ContactPoint {
			if contact != nil { return *contact }
			return m.Contact
		}(),
		Url: func() FhirUri {
			if url != nil { return *url }
			return m.Url
		}(),
		OnlineInformation: func() FhirUri {
			if onlineInformation != nil { return *onlineInformation }
			return m.OnlineInformation
		}(),
		Note: func() []Annotation {
			if note != nil { return *note }
			return m.Note
		}(),
		Quantity: func() Quantity {
			if quantity != nil { return *quantity }
			return m.Quantity
		}(),
		ParentDevice: func() Reference {
			if parentDevice != nil { return *parentDevice }
			return m.ParentDevice
		}(),
		Material: func() []DeviceDefinitionMaterial {
			if material != nil { return *material }
			return m.Material
		}(),
	}
}
// DeviceDefinitionUdiDeviceIdentifier
// Unique device identifier (UDI) assigned to device label or package.  Note that the Device may include multiple udiCarriers as it either may include just the udiCarrier for the jurisdiction it is sold, or for multiple jurisdictions it could have been sold.
type DeviceDefinitionUdiDeviceIdentifier struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// deviceIdentifier
	// The identifier that is to be associated with every Device that references this DeviceDefintiion for the issuer and jurisdication porvided in the DeviceDefinition.udiDeviceIdentifier.
	DeviceIdentifier FhirString `json:"deviceIdentifier,omitempty"`
	// issuer
	// The organization that assigns the identifier algorithm.
	Issuer FhirUri `json:"issuer,omitempty"`
	// jurisdiction
	// The jurisdiction to which the deviceIdentifier applies.
	Jurisdiction FhirUri `json:"jurisdiction,omitempty"`
}

// NewDeviceDefinitionUdiDeviceIdentifier creates a new DeviceDefinitionUdiDeviceIdentifier instance
func NewDeviceDefinitionUdiDeviceIdentifier(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	deviceIdentifier FhirString,
	issuer FhirUri,
	jurisdiction FhirUri,
) *DeviceDefinitionUdiDeviceIdentifier {
	return &DeviceDefinitionUdiDeviceIdentifier{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		DeviceIdentifier: deviceIdentifier,
		Issuer: issuer,
		Jurisdiction: jurisdiction,
	}
}
// FromJSON populates DeviceDefinitionUdiDeviceIdentifier from JSON data
func (m *DeviceDefinitionUdiDeviceIdentifier) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DeviceDefinitionUdiDeviceIdentifier to JSON data
func (m *DeviceDefinitionUdiDeviceIdentifier) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DeviceDefinitionUdiDeviceIdentifier
func (m *DeviceDefinitionUdiDeviceIdentifier) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	deviceIdentifier *FhirString,
	issuer *FhirUri,
	jurisdiction *FhirUri,
) *DeviceDefinitionUdiDeviceIdentifier {
	return &DeviceDefinitionUdiDeviceIdentifier{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		DeviceIdentifier: func() FhirString {
			if deviceIdentifier != nil { return *deviceIdentifier }
			return m.DeviceIdentifier
		}(),
		Issuer: func() FhirUri {
			if issuer != nil { return *issuer }
			return m.Issuer
		}(),
		Jurisdiction: func() FhirUri {
			if jurisdiction != nil { return *jurisdiction }
			return m.Jurisdiction
		}(),
	}
}
// DeviceDefinitionDeviceName
// A name given to the device to identify it.
type DeviceDefinitionDeviceName struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// name
	// The name of the device.
	Name FhirString `json:"name,omitempty"`
	// type
	// The type of deviceName.
// UDILabelName | UserFriendlyName | PatientReportedName | ManufactureDeviceName | ModelName.
	Type_ DeviceNameType `json:"type,omitempty"`
}

// NewDeviceDefinitionDeviceName creates a new DeviceDefinitionDeviceName instance
func NewDeviceDefinitionDeviceName(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	name FhirString,
	type_ DeviceNameType,
) *DeviceDefinitionDeviceName {
	return &DeviceDefinitionDeviceName{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Name: name,
		Type_: type_,
	}
}
// FromJSON populates DeviceDefinitionDeviceName from JSON data
func (m *DeviceDefinitionDeviceName) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DeviceDefinitionDeviceName to JSON data
func (m *DeviceDefinitionDeviceName) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DeviceDefinitionDeviceName
func (m *DeviceDefinitionDeviceName) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	name *FhirString,
	type_ *DeviceNameType,
) *DeviceDefinitionDeviceName {
	return &DeviceDefinitionDeviceName{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Name: func() FhirString {
			if name != nil { return *name }
			return m.Name
		}(),
		Type_: func() DeviceNameType {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
	}
}
// DeviceDefinitionSpecialization
// The capabilities supported on a  device, the standards to which the device conforms for a particular purpose, and used for the communication.
type DeviceDefinitionSpecialization struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// systemType
	// The standard that is used to operate and communicate.
	SystemType FhirString `json:"systemType,omitempty"`
	// version
	// The version of the standard that is used to operate and communicate.
	Version FhirString `json:"version,omitempty"`
}

// NewDeviceDefinitionSpecialization creates a new DeviceDefinitionSpecialization instance
func NewDeviceDefinitionSpecialization(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	systemType FhirString,
	version FhirString,
) *DeviceDefinitionSpecialization {
	return &DeviceDefinitionSpecialization{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		SystemType: systemType,
		Version: version,
	}
}
// FromJSON populates DeviceDefinitionSpecialization from JSON data
func (m *DeviceDefinitionSpecialization) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DeviceDefinitionSpecialization to JSON data
func (m *DeviceDefinitionSpecialization) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DeviceDefinitionSpecialization
func (m *DeviceDefinitionSpecialization) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	systemType *FhirString,
	version *FhirString,
) *DeviceDefinitionSpecialization {
	return &DeviceDefinitionSpecialization{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		SystemType: func() FhirString {
			if systemType != nil { return *systemType }
			return m.SystemType
		}(),
		Version: func() FhirString {
			if version != nil { return *version }
			return m.Version
		}(),
	}
}
// DeviceDefinitionCapability
// Device capabilities.
type DeviceDefinitionCapability struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// Type of capability.
	Type_ CodeableConcept `json:"type,omitempty"`
	// description
	// Description of capability.
	Description []CodeableConcept `json:"description,omitempty"`
}

// NewDeviceDefinitionCapability creates a new DeviceDefinitionCapability instance
func NewDeviceDefinitionCapability(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ CodeableConcept,
	description []CodeableConcept,
) *DeviceDefinitionCapability {
	return &DeviceDefinitionCapability{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		Description: description,
	}
}
// FromJSON populates DeviceDefinitionCapability from JSON data
func (m *DeviceDefinitionCapability) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DeviceDefinitionCapability to JSON data
func (m *DeviceDefinitionCapability) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DeviceDefinitionCapability
func (m *DeviceDefinitionCapability) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *CodeableConcept,
	description *[]CodeableConcept,
) *DeviceDefinitionCapability {
	return &DeviceDefinitionCapability{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Description: func() []CodeableConcept {
			if description != nil { return *description }
			return m.Description
		}(),
	}
}
// DeviceDefinitionProperty
// The actual configuration settings of a device as it actually operates, e.g., regulation status, time properties.
type DeviceDefinitionProperty struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// type
	// Code that specifies the property DeviceDefinitionPropetyCode (Extensible).
	Type_ CodeableConcept `json:"type,omitempty"`
	// valueQuantity
	// Property value as a quantity.
	ValueQuantity []Quantity `json:"valueQuantity,omitempty"`
	// valueCode
	// Property value as a code, e.g., NTP4 (synced to NTP).
	ValueCode []CodeableConcept `json:"valueCode,omitempty"`
}

// NewDeviceDefinitionProperty creates a new DeviceDefinitionProperty instance
func NewDeviceDefinitionProperty(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	type_ CodeableConcept,
	valueQuantity []Quantity,
	valueCode []CodeableConcept,
) *DeviceDefinitionProperty {
	return &DeviceDefinitionProperty{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Type_: type_,
		ValueQuantity: valueQuantity,
		ValueCode: valueCode,
	}
}
// FromJSON populates DeviceDefinitionProperty from JSON data
func (m *DeviceDefinitionProperty) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DeviceDefinitionProperty to JSON data
func (m *DeviceDefinitionProperty) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DeviceDefinitionProperty
func (m *DeviceDefinitionProperty) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	type_ *CodeableConcept,
	valueQuantity *[]Quantity,
	valueCode *[]CodeableConcept,
) *DeviceDefinitionProperty {
	return &DeviceDefinitionProperty{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		ValueQuantity: func() []Quantity {
			if valueQuantity != nil { return *valueQuantity }
			return m.ValueQuantity
		}(),
		ValueCode: func() []CodeableConcept {
			if valueCode != nil { return *valueCode }
			return m.ValueCode
		}(),
	}
}
// DeviceDefinitionMaterial
// A substance used to create the material(s) of which the device is made.
type DeviceDefinitionMaterial struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// substance
	// The substance.
	Substance CodeableConcept `json:"substance,omitempty"`
	// alternate
	// Indicates an alternative material of the device.
	Alternate FhirBoolean `json:"alternate,omitempty"`
	// allergenicIndicator
	// Whether the substance is a known or suspected allergen.
	AllergenicIndicator FhirBoolean `json:"allergenicIndicator,omitempty"`
}

// NewDeviceDefinitionMaterial creates a new DeviceDefinitionMaterial instance
func NewDeviceDefinitionMaterial(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	substance CodeableConcept,
	alternate FhirBoolean,
	allergenicIndicator FhirBoolean,
) *DeviceDefinitionMaterial {
	return &DeviceDefinitionMaterial{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Substance: substance,
		Alternate: alternate,
		AllergenicIndicator: allergenicIndicator,
	}
}
// FromJSON populates DeviceDefinitionMaterial from JSON data
func (m *DeviceDefinitionMaterial) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DeviceDefinitionMaterial to JSON data
func (m *DeviceDefinitionMaterial) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DeviceDefinitionMaterial
func (m *DeviceDefinitionMaterial) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	substance *CodeableConcept,
	alternate *FhirBoolean,
	allergenicIndicator *FhirBoolean,
) *DeviceDefinitionMaterial {
	return &DeviceDefinitionMaterial{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Substance: func() CodeableConcept {
			if substance != nil { return *substance }
			return m.Substance
		}(),
		Alternate: func() FhirBoolean {
			if alternate != nil { return *alternate }
			return m.Alternate
		}(),
		AllergenicIndicator: func() FhirBoolean {
			if allergenicIndicator != nil { return *allergenicIndicator }
			return m.AllergenicIndicator
		}(),
	}
}
