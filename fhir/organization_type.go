// Code generated by FHIR Generator. DO NOT EDIT.
// This example value set defines a set of codes that can be used to indicate a type of organization.
package fhir_r4b_go
// OrganizationType represents the FHIR ValueSet as an enumeration
type OrganizationType struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	OrganizationType_Prov = "prov" // Healthcare Provider: An organization that provides healthcare services.
	OrganizationType_Dept = "dept" // Hospital Department: A department or ward within a hospital (Generally is not applicable to top level organizations)
	OrganizationType_Team = "team" // Organizational team: An organizational team is usually a grouping of practitioners that perform a specific function within an organization (which could be a top level organization, or a department).
	OrganizationType_Govt = "govt" // Government: A political body, often used when including organization records for government bodies such as a Federal Government, State or Local Government.
	OrganizationType_Ins = "ins" // Insurance Company: A company that provides insurance to its subscribers that may include healthcare related policies.
	OrganizationType_Pay = "pay" // Payer: A company, charity, or governmental organization, which processes claims and/or issues payments to providers on behalf of patients or groups of patients.
	OrganizationType_Edu = "edu" // Educational Institute: An educational institution that provides education or research facilities.
	OrganizationType_Reli = "reli" // Religious Institution: An organization that is identified as a part of a religious institution.
	OrganizationType_Crs = "crs" // Clinical Research Sponsor: An organization that is identified as a Pharmaceutical/Clinical Research Sponsor.
	OrganizationType_Cg = "cg" // Community Group: An un-incorporated community group.
	OrganizationType_Bus = "bus" // Non-Healthcare Business or Corporation: An organization that is a registered business or corporation but not identified by other types.
	OrganizationType_Other = "other" // Other: Other type of organization not already specified.
)

// Clone creates a deep copy of the enum
func (e OrganizationType) Clone() *OrganizationType {
	return &OrganizationType{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *OrganizationType) Equals(other *OrganizationType) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

