// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// ImmunizationEvaluation
// Describes a comparison of an immunization event against published recommendations to determine if the administration is "valid" in relation to those  recommendations.
type ImmunizationEvaluation struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *ImmunizationEvaluationStatusCodes `json:"status,omitempty"`
	Patient *Reference `json:"patient,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Authority *Reference `json:"authority,omitempty"`
	TargetDisease *CodeableConcept `json:"targetdisease,omitempty"`
	ImmunizationEvent *Reference `json:"immunizationevent,omitempty"`
	DoseStatus *CodeableConcept `json:"dosestatus,omitempty"`
	DoseStatusReason []*CodeableConcept `json:"dosestatusreason,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Series *FhirString `json:"series,omitempty"`
	DoseNumberPositiveInt *FhirPositiveInt `json:"dosenumberpositiveint,omitempty"`
	DoseNumberString *FhirString `json:"dosenumberstring,omitempty"`
	SeriesDosesPositiveInt *FhirPositiveInt `json:"seriesdosespositiveint,omitempty"`
	SeriesDosesString *FhirString `json:"seriesdosesstring,omitempty"`
}

// NewImmunizationEvaluation creates a new ImmunizationEvaluation instance
func NewImmunizationEvaluation() *ImmunizationEvaluation {
	return &ImmunizationEvaluation{}
}

// FromJSON populates ImmunizationEvaluation from JSON data
func (m *ImmunizationEvaluation) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ImmunizationEvaluation to JSON data
func (m *ImmunizationEvaluation) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ImmunizationEvaluation
func (m *ImmunizationEvaluation) Clone() *ImmunizationEvaluation {
	if m == nil { return nil }
	return &ImmunizationEvaluation{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		Patient: m.Patient.Clone(),
		Date: m.Date.Clone(),
		Authority: m.Authority.Clone(),
		TargetDisease: m.TargetDisease.Clone(),
		ImmunizationEvent: m.ImmunizationEvent.Clone(),
		DoseStatus: m.DoseStatus.Clone(),
		DoseStatusReason: cloneSlices(m.DoseStatusReason),
		Description: m.Description.Clone(),
		Series: m.Series.Clone(),
		DoseNumberPositiveInt: m.DoseNumberPositiveInt.Clone(),
		DoseNumberString: m.DoseNumberString.Clone(),
		SeriesDosesPositiveInt: m.SeriesDosesPositiveInt.Clone(),
		SeriesDosesString: m.SeriesDosesString.Clone(),
	}
}

// Equals checks for equality with another ImmunizationEvaluation instance
func (m *ImmunizationEvaluation) Equals(other *ImmunizationEvaluation) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Patient.Equals(other.Patient) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Authority.Equals(other.Authority) { return false }
	if !m.TargetDisease.Equals(other.TargetDisease) { return false }
	if !m.ImmunizationEvent.Equals(other.ImmunizationEvent) { return false }
	if !m.DoseStatus.Equals(other.DoseStatus) { return false }
	if !compareSlices(m.DoseStatusReason, other.DoseStatusReason) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.Series.Equals(other.Series) { return false }
	if !m.DoseNumberPositiveInt.Equals(other.DoseNumberPositiveInt) { return false }
	if !m.DoseNumberString.Equals(other.DoseNumberString) { return false }
	if !m.SeriesDosesPositiveInt.Equals(other.SeriesDosesPositiveInt) { return false }
	if !m.SeriesDosesString.Equals(other.SeriesDosesString) { return false }
	return true
}

