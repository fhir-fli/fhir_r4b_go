// Code generated by FHIR Generator. DO NOT EDIT.
// How a type relates to its baseDefinition.
package fhir_r4b_go
// TypeDerivationRule represents the FHIR ValueSet as an enumeration
type TypeDerivationRule struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	TypeDerivationRule_Specialization = "specialization" // Specialization: This definition defines a new type that adds additional elements to the base type.
	TypeDerivationRule_Constraint = "constraint" // Constraint: This definition adds additional rules to an existing concrete type.
)

// Clone creates a deep copy of the enum
func (e TypeDerivationRule) Clone() *TypeDerivationRule {
	return &TypeDerivationRule{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *TypeDerivationRule) Equals(other *TypeDerivationRule) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

