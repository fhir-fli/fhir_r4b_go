// Code generated by FHIR Generator. DO NOT EDIT.
// The value set to instantiate this attribute should be drawn from a terminologically robust code system that consists of or contains concepts to support describing the current status of the administered dose of vaccine.
package fhir_r4b_go
// ImmunizationStatusCodes represents the FHIR ValueSet as an enumeration
type ImmunizationStatusCodes struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	ImmunizationStatusCodes_Preparation = "preparation" // Preparation: The core event has not started yet, but some staging activities have begun (e.g. surgical suite preparation). Preparation stages may be tracked for billing purposes.
	ImmunizationStatusCodes_In_progress = "in-progress" // In Progress: The event is currently occurring.
	ImmunizationStatusCodes_Not_done = "not-done" // Not Done: The event was terminated prior to any activity beyond preparation. I.e. The 'main' activity has not yet begun. The boundary between preparatory and the 'main' activity is context-specific.
	ImmunizationStatusCodes_On_hold = "on-hold" // On Hold: The event has been temporarily stopped but is expected to resume in the future.
	ImmunizationStatusCodes_Stopped = "stopped" // Stopped: The event was terminated prior to the full completion of the intended activity but after at least some of the 'main' activity (beyond preparation) has occurred.
	ImmunizationStatusCodes_Completed = "completed" // Completed: The event has now concluded.
	ImmunizationStatusCodes_Entered_in_error = "entered-in-error" // Entered in Error: This electronic record should never have existed, though it is possible that real-world decisions were based on it. (If real-world activity has occurred, the status should be "stopped" rather than "entered-in-error".).
	ImmunizationStatusCodes_Unknown = "unknown" // Unknown: The authoring/source system does not know which of the status values currently applies for this event. Note: This concept is not to be used for "other" - one of the listed statuses is presumed to apply, but the authoring/source system does not know which.
)

// Clone creates a deep copy of the enum
func (e ImmunizationStatusCodes) Clone() *ImmunizationStatusCodes {
	return &ImmunizationStatusCodes{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *ImmunizationStatusCodes) Equals(other *ImmunizationStatusCodes) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

