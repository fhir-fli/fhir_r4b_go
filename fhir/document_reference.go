// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// DocumentReference
// A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
type DocumentReference struct {
	DomainResource
	// id
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Id FhirString `json:"id,omitempty"`
	// meta
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta FhirMeta `json:"meta,omitempty"`
	// implicitRules
	// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ImplicitRules FhirUri `json:"implicitRules,omitempty"`
	// language
	// The base language in which the resource is written.
	Language CommonLanguages `json:"language,omitempty"`
	// text
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text Narrative `json:"text,omitempty"`
	// contained
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []Resource `json:"contained,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// masterIdentifier
	// Document identifier as assigned by the source of the document. This identifier is specific to this version of the document. This unique identifier may be used elsewhere to identify this version of the document.
	MasterIdentifier Identifier `json:"masterIdentifier,omitempty"`
	// identifier
	// Other identifiers associated with the document, including version independent identifiers.
	Identifier []Identifier `json:"identifier,omitempty"`
	// status
	// The status of this document reference.
	Status DocumentReferenceStatus `json:"status,omitempty"`
	// docStatus
	// The status of the underlying document.
	DocStatus CompositionStatus `json:"docStatus,omitempty"`
	// type
	// Specifies the particular kind of document referenced  (e.g. History and Physical, Discharge Summary, Progress Note). This usually equates to the purpose of making the document referenced.
	Type_ CodeableConcept `json:"type,omitempty"`
	// category
	// A categorization for the type of document referenced - helps for indexing and searching. This may be implied by or derived from the code specified in the DocumentReference.type.
	Category []CodeableConcept `json:"category,omitempty"`
	// subject
	// Who or what the document is about. The document can be about a person, (patient or healthcare practitioner), a device (e.g. a machine) or even a group of subjects (such as a document about a herd of farm animals, or a set of patients that share a common exposure).
	Subject Reference `json:"subject,omitempty"`
	// date
	// When the document reference was created.
	Date FhirInstant `json:"date,omitempty"`
	// author
	// Identifies who is responsible for adding the information to the document.
	Author []Reference `json:"author,omitempty"`
	// authenticator
	// Which person or organization authenticates that this document is valid.
	Authenticator Reference `json:"authenticator,omitempty"`
	// custodian
	// Identifies the organization or group who is responsible for ongoing maintenance of and access to the document.
	Custodian Reference `json:"custodian,omitempty"`
	// relatesTo
	// Relationships that this document has with other document references that already exist.
	RelatesTo []DocumentReferenceRelatesTo `json:"relatesTo,omitempty"`
	// description
	// Human-readable description of the source document.
	Description FhirString `json:"description,omitempty"`
	// securityLabel
	// A set of Security-Tag codes specifying the level of privacy/security of the Document. Note that DocumentReference.meta.security contains the security labels of the "reference" to the document, while DocumentReference.securityLabel contains a snapshot of the security labels on the document the reference refers to.
	SecurityLabel []CodeableConcept `json:"securityLabel,omitempty"`
	// content
	// The document and format referenced. There may be multiple content element repetitions, each with a different format.
	Content []DocumentReferenceContent `json:"content,omitempty"`
	// context
	// The clinical context in which the document was prepared.
	Context DocumentReferenceContext `json:"context,omitempty"`
}

// NewDocumentReference creates a new DocumentReference instance
func NewDocumentReference(
	id FhirString,
	meta FhirMeta,
	implicitRules FhirUri,
	language CommonLanguages,
	text Narrative,
	contained []Resource,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	masterIdentifier Identifier,
	identifier []Identifier,
	status DocumentReferenceStatus,
	docStatus CompositionStatus,
	type_ CodeableConcept,
	category []CodeableConcept,
	subject Reference,
	date FhirInstant,
	author []Reference,
	authenticator Reference,
	custodian Reference,
	relatesTo []DocumentReferenceRelatesTo,
	description FhirString,
	securityLabel []CodeableConcept,
	content []DocumentReferenceContent,
	context DocumentReferenceContext,
) *DocumentReference {
	return &DocumentReference{
		Id: id,
		Meta: meta,
		ImplicitRules: implicitRules,
		Language: language,
		Text: text,
		Contained: contained,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		MasterIdentifier: masterIdentifier,
		Identifier: identifier,
		Status: status,
		DocStatus: docStatus,
		Type_: type_,
		Category: category,
		Subject: subject,
		Date: date,
		Author: author,
		Authenticator: authenticator,
		Custodian: custodian,
		RelatesTo: relatesTo,
		Description: description,
		SecurityLabel: securityLabel,
		Content: content,
		Context: context,
	}
}
// FromJSON populates DocumentReference from JSON data
func (m *DocumentReference) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DocumentReference to JSON data
func (m *DocumentReference) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DocumentReference
func (m *DocumentReference) CopyWith(
	id *FhirString,
	meta *FhirMeta,
	implicitRules *FhirUri,
	language *CommonLanguages,
	text *Narrative,
	contained *[]Resource,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	masterIdentifier *Identifier,
	identifier *[]Identifier,
	status *DocumentReferenceStatus,
	docStatus *CompositionStatus,
	type_ *CodeableConcept,
	category *[]CodeableConcept,
	subject *Reference,
	date *FhirInstant,
	author *[]Reference,
	authenticator *Reference,
	custodian *Reference,
	relatesTo *[]DocumentReferenceRelatesTo,
	description *FhirString,
	securityLabel *[]CodeableConcept,
	content *[]DocumentReferenceContent,
	context *DocumentReferenceContext,
) *DocumentReference {
	return &DocumentReference{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Meta: func() FhirMeta {
			if meta != nil { return *meta }
			return m.Meta
		}(),
		ImplicitRules: func() FhirUri {
			if implicitRules != nil { return *implicitRules }
			return m.ImplicitRules
		}(),
		Language: func() CommonLanguages {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() Narrative {
			if text != nil { return *text }
			return m.Text
		}(),
		Contained: func() []Resource {
			if contained != nil { return *contained }
			return m.Contained
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		MasterIdentifier: func() Identifier {
			if masterIdentifier != nil { return *masterIdentifier }
			return m.MasterIdentifier
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		Status: func() DocumentReferenceStatus {
			if status != nil { return *status }
			return m.Status
		}(),
		DocStatus: func() CompositionStatus {
			if docStatus != nil { return *docStatus }
			return m.DocStatus
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Category: func() []CodeableConcept {
			if category != nil { return *category }
			return m.Category
		}(),
		Subject: func() Reference {
			if subject != nil { return *subject }
			return m.Subject
		}(),
		Date: func() FhirInstant {
			if date != nil { return *date }
			return m.Date
		}(),
		Author: func() []Reference {
			if author != nil { return *author }
			return m.Author
		}(),
		Authenticator: func() Reference {
			if authenticator != nil { return *authenticator }
			return m.Authenticator
		}(),
		Custodian: func() Reference {
			if custodian != nil { return *custodian }
			return m.Custodian
		}(),
		RelatesTo: func() []DocumentReferenceRelatesTo {
			if relatesTo != nil { return *relatesTo }
			return m.RelatesTo
		}(),
		Description: func() FhirString {
			if description != nil { return *description }
			return m.Description
		}(),
		SecurityLabel: func() []CodeableConcept {
			if securityLabel != nil { return *securityLabel }
			return m.SecurityLabel
		}(),
		Content: func() []DocumentReferenceContent {
			if content != nil { return *content }
			return m.Content
		}(),
		Context: func() DocumentReferenceContext {
			if context != nil { return *context }
			return m.Context
		}(),
	}
}
// DocumentReferenceRelatesTo
// Relationships that this document has with other document references that already exist.
type DocumentReferenceRelatesTo struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// code
	// The type of relationship that this document has with anther document.
	Code DocumentRelationshipType `json:"code,omitempty"`
	// target
	// The target document of this relationship.
	Target Reference `json:"target,omitempty"`
}

// NewDocumentReferenceRelatesTo creates a new DocumentReferenceRelatesTo instance
func NewDocumentReferenceRelatesTo(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	code DocumentRelationshipType,
	target Reference,
) *DocumentReferenceRelatesTo {
	return &DocumentReferenceRelatesTo{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Code: code,
		Target: target,
	}
}
// FromJSON populates DocumentReferenceRelatesTo from JSON data
func (m *DocumentReferenceRelatesTo) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DocumentReferenceRelatesTo to JSON data
func (m *DocumentReferenceRelatesTo) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DocumentReferenceRelatesTo
func (m *DocumentReferenceRelatesTo) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	code *DocumentRelationshipType,
	target *Reference,
) *DocumentReferenceRelatesTo {
	return &DocumentReferenceRelatesTo{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Code: func() DocumentRelationshipType {
			if code != nil { return *code }
			return m.Code
		}(),
		Target: func() Reference {
			if target != nil { return *target }
			return m.Target
		}(),
	}
}
// DocumentReferenceContent
// The document and format referenced. There may be multiple content element repetitions, each with a different format.
type DocumentReferenceContent struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// attachment
	// The document or URL of the document along with critical metadata to prove content has integrity.
	Attachment Attachment `json:"attachment,omitempty"`
	// format
	// An identifier of the document encoding, structure, and template that the document conforms to beyond the base format indicated in the mimeType.
	Format Coding `json:"format,omitempty"`
}

// NewDocumentReferenceContent creates a new DocumentReferenceContent instance
func NewDocumentReferenceContent(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	attachment Attachment,
	format Coding,
) *DocumentReferenceContent {
	return &DocumentReferenceContent{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Attachment: attachment,
		Format: format,
	}
}
// FromJSON populates DocumentReferenceContent from JSON data
func (m *DocumentReferenceContent) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DocumentReferenceContent to JSON data
func (m *DocumentReferenceContent) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DocumentReferenceContent
func (m *DocumentReferenceContent) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	attachment *Attachment,
	format *Coding,
) *DocumentReferenceContent {
	return &DocumentReferenceContent{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Attachment: func() Attachment {
			if attachment != nil { return *attachment }
			return m.Attachment
		}(),
		Format: func() Coding {
			if format != nil { return *format }
			return m.Format
		}(),
	}
}
// DocumentReferenceContext
// The clinical context in which the document was prepared.
type DocumentReferenceContext struct {
	BackboneElement
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// encounter
	// Describes the clinical encounter or type of care that the document content is associated with.
	Encounter []Reference `json:"encounter,omitempty"`
	// event
	// This list of codes represents the main clinical acts, such as a colonoscopy or an appendectomy, being documented. In some cases, the event is inherent in the type Code, such as a "History and Physical Report" in which the procedure being documented is necessarily a "History and Physical" act.
	Event []CodeableConcept `json:"event,omitempty"`
	// period
	// The time period over which the service that is described by the document was provided.
	Period Period `json:"period,omitempty"`
	// facilityType
	// The kind of facility where the patient was seen.
	FacilityType CodeableConcept `json:"facilityType,omitempty"`
	// practiceSetting
	// This property may convey specifics about the practice setting where the content was created, often reflecting the clinical specialty.
	PracticeSetting CodeableConcept `json:"practiceSetting,omitempty"`
	// sourcePatientInfo
	// The Patient Information as known when the document was published. May be a reference to a version specific, or contained.
	SourcePatientInfo Reference `json:"sourcePatientInfo,omitempty"`
	// related
	// Related identifiers or resources associated with the DocumentReference.
	Related []Reference `json:"related,omitempty"`
}

// NewDocumentReferenceContext creates a new DocumentReferenceContext instance
func NewDocumentReferenceContext(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	encounter []Reference,
	event []CodeableConcept,
	period Period,
	facilityType CodeableConcept,
	practiceSetting CodeableConcept,
	sourcePatientInfo Reference,
	related []Reference,
) *DocumentReferenceContext {
	return &DocumentReferenceContext{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Encounter: encounter,
		Event: event,
		Period: period,
		FacilityType: facilityType,
		PracticeSetting: practiceSetting,
		SourcePatientInfo: sourcePatientInfo,
		Related: related,
	}
}
// FromJSON populates DocumentReferenceContext from JSON data
func (m *DocumentReferenceContext) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DocumentReferenceContext to JSON data
func (m *DocumentReferenceContext) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of DocumentReferenceContext
func (m *DocumentReferenceContext) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	encounter *[]Reference,
	event *[]CodeableConcept,
	period *Period,
	facilityType *CodeableConcept,
	practiceSetting *CodeableConcept,
	sourcePatientInfo *Reference,
	related *[]Reference,
) *DocumentReferenceContext {
	return &DocumentReferenceContext{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Encounter: func() []Reference {
			if encounter != nil { return *encounter }
			return m.Encounter
		}(),
		Event: func() []CodeableConcept {
			if event != nil { return *event }
			return m.Event
		}(),
		Period: func() Period {
			if period != nil { return *period }
			return m.Period
		}(),
		FacilityType: func() CodeableConcept {
			if facilityType != nil { return *facilityType }
			return m.FacilityType
		}(),
		PracticeSetting: func() CodeableConcept {
			if practiceSetting != nil { return *practiceSetting }
			return m.PracticeSetting
		}(),
		SourcePatientInfo: func() Reference {
			if sourcePatientInfo != nil { return *sourcePatientInfo }
			return m.SourcePatientInfo
		}(),
		Related: func() []Reference {
			if related != nil { return *related }
			return m.Related
		}(),
	}
}
