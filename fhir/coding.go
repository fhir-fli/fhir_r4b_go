// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Coding
// A reference to a code defined by a terminology system.
type Coding struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	System *FhirUri `json:"system,omitempty"`
	Version *FhirString `json:"version,omitempty"`
	Code *FhirCode `json:"code,omitempty"`
	Display *FhirString `json:"display,omitempty"`
	UserSelected *FhirBoolean `json:"userselected,omitempty"`
}

// NewCoding creates a new Coding instance
func NewCoding() *Coding {
	return &Coding{}
}

// FromJSON populates Coding from JSON data
func (m *Coding) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Coding to JSON data
func (m *Coding) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Coding
func (m *Coding) Clone() *Coding {
	if m == nil { return nil }
	return &Coding{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		System: m.System.Clone(),
		Version: m.Version.Clone(),
		Code: m.Code.Clone(),
		Display: m.Display.Clone(),
		UserSelected: m.UserSelected.Clone(),
	}
}

// Equals checks for equality with another Coding instance
func (m *Coding) Equals(other *Coding) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.System.Equals(other.System) { return false }
	if !m.Version.Equals(other.Version) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Display.Equals(other.Display) { return false }
	if !m.UserSelected.Equals(other.UserSelected) { return false }
	return true
}

