// Code generated by FHIR Generator. DO NOT EDIT.
// Used to code author list statement, contributorship statement, and such.
package fhir_r4b_go
// ContributorSummaryType represents the FHIR ValueSet as an enumeration
type ContributorSummaryType struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	ContributorSummaryType_Author_string = "author-string" // Author string: Display of the author list as a complete string.
	ContributorSummaryType_Contributorship_list = "contributorship-list" // Contributorship list: Display of the list of contributors as a complete string.
	ContributorSummaryType_Contributorship_statement = "contributorship-statement" // Contributorship statement: Compiled summary of contributions.
	ContributorSummaryType_Acknowledgement_list = "acknowledgement-list" // Acknowledgment list: Display of the list of acknowledged parties as a complete string.
	ContributorSummaryType_Acknowledgment_statement = "acknowledgment-statement" // Acknowledgment statement: Statement of acknowledgment of contributions beyond those compiled for formal contributorship statements.
	ContributorSummaryType_Funding_statement = "funding-statement" // Funding statement: Statement of financial support for the creation of the cited artifact.
	ContributorSummaryType_Competing_interests_statement = "competing-interests-statement" // Competing interests statement: Statement of completing interests related to the creation of the cited artifact. Also called conflicts of interest or declaration of interests.
)

// Clone creates a deep copy of the enum
func (e ContributorSummaryType) Clone() *ContributorSummaryType {
	return &ContributorSummaryType{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *ContributorSummaryType) Equals(other *ContributorSummaryType) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

