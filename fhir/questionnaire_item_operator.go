// Code generated by FHIR Generator. DO NOT EDIT.
// The criteria by which a question is enabled.
package fhir_r4b_go
// QuestionnaireItemOperator represents the FHIR ValueSet as an enumeration
type QuestionnaireItemOperator struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	QuestionnaireItemOperator_Exists = "exists" // Exists: True if whether an answer exists is equal to the enableWhen answer (which must be a boolean).
	QuestionnaireItemOperator_Equals = "=" // Equals: True if whether at least one answer has a value that is equal to the enableWhen answer.
	QuestionnaireItemOperator_NotEquals = "!=" // Not Equals: True if whether at least no answer has a value that is equal to the enableWhen answer.
	QuestionnaireItemOperator_GreaterThan = ">" // Greater Than: True if whether at least no answer has a value that is greater than the enableWhen answer.
	QuestionnaireItemOperator_LessThan = "<" // Less Than: True if whether at least no answer has a value that is less than the enableWhen answer.
	QuestionnaireItemOperator_GreaterThanOrEqualTo = ">=" // Greater or Equals: True if whether at least no answer has a value that is greater or equal to the enableWhen answer.
	QuestionnaireItemOperator_LessThanOrEqualTo = "<=" // Less or Equals: True if whether at least no answer has a value that is less or equal to the enableWhen answer.
)

// Clone creates a deep copy of the enum
func (e QuestionnaireItemOperator) Clone() *QuestionnaireItemOperator {
	return &QuestionnaireItemOperator{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *QuestionnaireItemOperator) Equals(other *QuestionnaireItemOperator) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

