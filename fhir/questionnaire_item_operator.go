// Code generated by FHIR Generator. DO NOT EDIT.
// The criteria by which a question is enabled.
package fhir_r4b_go

// QuestionnaireItemOperator represents the FHIR ValueSet as an enumeration
type QuestionnaireItemOperator int

const (
	// Exists: True if whether an answer exists is equal to the enableWhen answer (which must be a boolean).
	QuestionnaireItemOperator_Exists QuestionnaireItemOperator = iota
	// Equals: True if whether at least one answer has a value that is equal to the enableWhen answer.
	QuestionnaireItemOperator__ QuestionnaireItemOperator = iota
	// Not Equals: True if whether at least no answer has a value that is equal to the enableWhen answer.
	QuestionnaireItemOperator___ QuestionnaireItemOperator = iota
	// Greater Than: True if whether at least no answer has a value that is greater than the enableWhen answer.
	QuestionnaireItemOperator__ QuestionnaireItemOperator = iota
	// Less Than: True if whether at least no answer has a value that is less than the enableWhen answer.
	QuestionnaireItemOperator__ QuestionnaireItemOperator = iota
	// Greater or Equals: True if whether at least no answer has a value that is greater or equal to the enableWhen answer.
	QuestionnaireItemOperator___ QuestionnaireItemOperator = iota
	// Less or Equals: True if whether at least no answer has a value that is less or equal to the enableWhen answer.
	QuestionnaireItemOperator___ QuestionnaireItemOperator = iota
)

// String converts the enum to its string representation
func (e QuestionnaireItemOperator) String() string {
	switch e {
	case QuestionnaireItemOperator_Exists: return "Exists"
	case QuestionnaireItemOperator__: return "Equals"
	case QuestionnaireItemOperator___: return "Not Equals"
	case QuestionnaireItemOperator__: return "Greater Than"
	case QuestionnaireItemOperator__: return "Less Than"
	case QuestionnaireItemOperator___: return "Greater or Equals"
	case QuestionnaireItemOperator___: return "Less or Equals"
	default: return "Unknown"
	}
}

