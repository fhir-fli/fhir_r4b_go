// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// OperationOutcome
// A collection of error, warning, or information messages that result from a system action.
type OperationOutcome struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Issue []*OperationOutcomeIssue `json:"issue,omitempty"`
}

// NewOperationOutcome creates a new OperationOutcome instance
func NewOperationOutcome() *OperationOutcome {
	return &OperationOutcome{}
}

// FromJSON populates OperationOutcome from JSON data
func (m *OperationOutcome) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts OperationOutcome to JSON data
func (m *OperationOutcome) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of OperationOutcome
func (m *OperationOutcome) Clone() *OperationOutcome {
	if m == nil { return nil }
	return &OperationOutcome{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Issue: cloneSlices(m.Issue),
	}
}

// Equals checks for equality with another OperationOutcome instance
func (m *OperationOutcome) Equals(other *OperationOutcome) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Issue, other.Issue) { return false }
	return true
}

// OperationOutcomeIssue
// An error, warning, or information message that results from a system action.
type OperationOutcomeIssue struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Severity *IssueSeverity `json:"severity,omitempty"`
	Code *IssueType `json:"code,omitempty"`
	Details *CodeableConcept `json:"details,omitempty"`
	Diagnostics *FhirString `json:"diagnostics,omitempty"`
	Location []*FhirString `json:"location,omitempty"`
	Expression []*FhirString `json:"expression,omitempty"`
}

// NewOperationOutcomeIssue creates a new OperationOutcomeIssue instance
func NewOperationOutcomeIssue() *OperationOutcomeIssue {
	return &OperationOutcomeIssue{}
}

// FromJSON populates OperationOutcomeIssue from JSON data
func (m *OperationOutcomeIssue) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts OperationOutcomeIssue to JSON data
func (m *OperationOutcomeIssue) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of OperationOutcomeIssue
func (m *OperationOutcomeIssue) Clone() *OperationOutcomeIssue {
	if m == nil { return nil }
	return &OperationOutcomeIssue{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Severity: m.Severity.Clone(),
		Code: m.Code.Clone(),
		Details: m.Details.Clone(),
		Diagnostics: m.Diagnostics.Clone(),
		Location: cloneSlices(m.Location),
		Expression: cloneSlices(m.Expression),
	}
}

// Equals checks for equality with another OperationOutcomeIssue instance
func (m *OperationOutcomeIssue) Equals(other *OperationOutcomeIssue) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Severity.Equals(other.Severity) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Details.Equals(other.Details) { return false }
	if !m.Diagnostics.Equals(other.Diagnostics) { return false }
	if !compareSlices(m.Location, other.Location) { return false }
	if !compareSlices(m.Expression, other.Expression) { return false }
	return true
}

