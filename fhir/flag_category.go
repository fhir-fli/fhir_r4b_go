// Code generated by FHIR Generator. DO NOT EDIT.
// Example list of general categories for flagged issues. (Not complete or necessarily appropriate.)
package fhir_r4b_go

// FlagCategory represents the FHIR ValueSet as an enumeration
type FlagCategory int

const (
	// Diet: Flags related to the subject's dietary needs.
	FlagCategory_Diet FlagCategory = iota
	// Drug: Flags related to the subject's medications.
	FlagCategory_Drug FlagCategory = iota
	// Lab: Flags related to performing laboratory tests and related processes (e.g. phlebotomy).
	FlagCategory_Lab FlagCategory = iota
	// Administrative: Flags related to administrative and financial processes.
	FlagCategory_Admin FlagCategory = iota
	// Subject Contact: Flags related to coming into contact with the patient.
	FlagCategory_Contact FlagCategory = iota
	// Clinical: Flags related to the subject's clinical data.
	FlagCategory_Clinical FlagCategory = iota
	// Behavioral: Flags related to behavior.
	FlagCategory_Behavioral FlagCategory = iota
	// Research: Flags related to research.
	FlagCategory_Research FlagCategory = iota
	// Advance Directive: Flags related to subject's advance directives.
	FlagCategory_Advance_directive FlagCategory = iota
	// Safety: Flags related to safety precautions.
	FlagCategory_Safety FlagCategory = iota
)

// String converts the enum to its string representation
func (e FlagCategory) String() string {
	switch e {
	case FlagCategory_Diet: return "Diet"
	case FlagCategory_Drug: return "Drug"
	case FlagCategory_Lab: return "Lab"
	case FlagCategory_Admin: return "Administrative"
	case FlagCategory_Contact: return "Subject Contact"
	case FlagCategory_Clinical: return "Clinical"
	case FlagCategory_Behavioral: return "Behavioral"
	case FlagCategory_Research: return "Research"
	case FlagCategory_Advance_directive: return "Advance Directive"
	case FlagCategory_Safety: return "Safety"
	default: return "Unknown"
	}
}

