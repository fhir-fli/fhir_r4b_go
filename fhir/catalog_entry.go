// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// CatalogEntry
// Catalog entries are wrappers that contextualize items included in a catalog.
type CatalogEntry struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	Orderable *FhirBoolean `json:"orderable,omitempty"`
	ReferencedItem *Reference `json:"referenceditem,omitempty"`
	AdditionalIdentifier []*Identifier `json:"additionalidentifier,omitempty"`
	Classification []*CodeableConcept `json:"classification,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	ValidityPeriod *Period `json:"validityperiod,omitempty"`
	ValidTo *FhirDateTime `json:"validto,omitempty"`
	LastUpdated *FhirDateTime `json:"lastupdated,omitempty"`
	AdditionalCharacteristic []*CodeableConcept `json:"additionalcharacteristic,omitempty"`
	AdditionalClassification []*CodeableConcept `json:"additionalclassification,omitempty"`
	RelatedEntry []*CatalogEntryRelatedEntry `json:"relatedentry,omitempty"`
}

// NewCatalogEntry creates a new CatalogEntry instance
func NewCatalogEntry() *CatalogEntry {
	return &CatalogEntry{}
}

// FromJSON populates CatalogEntry from JSON data
func (m *CatalogEntry) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CatalogEntry to JSON data
func (m *CatalogEntry) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of CatalogEntry
func (m *CatalogEntry) Clone() *CatalogEntry {
	if m == nil { return nil }
	return &CatalogEntry{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Type: m.Type.Clone(),
		Orderable: m.Orderable.Clone(),
		ReferencedItem: m.ReferencedItem.Clone(),
		AdditionalIdentifier: cloneSlices(m.AdditionalIdentifier),
		Classification: cloneSlices(m.Classification),
		Status: m.Status.Clone(),
		ValidityPeriod: m.ValidityPeriod.Clone(),
		ValidTo: m.ValidTo.Clone(),
		LastUpdated: m.LastUpdated.Clone(),
		AdditionalCharacteristic: cloneSlices(m.AdditionalCharacteristic),
		AdditionalClassification: cloneSlices(m.AdditionalClassification),
		RelatedEntry: cloneSlices(m.RelatedEntry),
	}
}

// Equals checks for equality with another CatalogEntry instance
func (m *CatalogEntry) Equals(other *CatalogEntry) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Orderable.Equals(other.Orderable) { return false }
	if !m.ReferencedItem.Equals(other.ReferencedItem) { return false }
	if !compareSlices(m.AdditionalIdentifier, other.AdditionalIdentifier) { return false }
	if !compareSlices(m.Classification, other.Classification) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.ValidityPeriod.Equals(other.ValidityPeriod) { return false }
	if !m.ValidTo.Equals(other.ValidTo) { return false }
	if !m.LastUpdated.Equals(other.LastUpdated) { return false }
	if !compareSlices(m.AdditionalCharacteristic, other.AdditionalCharacteristic) { return false }
	if !compareSlices(m.AdditionalClassification, other.AdditionalClassification) { return false }
	if !compareSlices(m.RelatedEntry, other.RelatedEntry) { return false }
	return true
}

// CatalogEntryRelatedEntry
// Used for example, to point to a substance, or to a device used to administer a medication.
type CatalogEntryRelatedEntry struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Relationtype *CatalogEntryRelationType `json:"relationtype,omitempty"`
	Item *Reference `json:"item,omitempty"`
}

// NewCatalogEntryRelatedEntry creates a new CatalogEntryRelatedEntry instance
func NewCatalogEntryRelatedEntry() *CatalogEntryRelatedEntry {
	return &CatalogEntryRelatedEntry{}
}

// FromJSON populates CatalogEntryRelatedEntry from JSON data
func (m *CatalogEntryRelatedEntry) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CatalogEntryRelatedEntry to JSON data
func (m *CatalogEntryRelatedEntry) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of CatalogEntryRelatedEntry
func (m *CatalogEntryRelatedEntry) Clone() *CatalogEntryRelatedEntry {
	if m == nil { return nil }
	return &CatalogEntryRelatedEntry{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Relationtype: m.Relationtype.Clone(),
		Item: m.Item.Clone(),
	}
}

// Equals checks for equality with another CatalogEntryRelatedEntry instance
func (m *CatalogEntryRelatedEntry) Equals(other *CatalogEntryRelatedEntry) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Relationtype.Equals(other.Relationtype) { return false }
	if !m.Item.Equals(other.Item) { return false }
	return true
}

