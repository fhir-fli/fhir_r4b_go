// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// Contributor
// A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
type Contributor struct {
	DataType
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// type
	// The type of contributor.
	Type_ ContributorType `json:"type,omitempty"`
	// name
	// The name of the individual or organization responsible for the contribution.
	Name FhirString `json:"name,omitempty"`
	// contact
	// Contact details to assist a user in finding and communicating with the contributor.
	Contact []ContactDetail `json:"contact,omitempty"`
}

// NewContributor creates a new Contributor instance
func NewContributor(
	id FhirString,
	extension_ []FhirExtension,
	type_ ContributorType,
	name FhirString,
	contact []ContactDetail,
) *Contributor {
	return &Contributor{
		Id: id,
		Extension_: extension_,
		Type_: type_,
		Name: name,
		Contact: contact,
	}
}
// FromJSON populates Contributor from JSON data
func (m *Contributor) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Contributor to JSON data
func (m *Contributor) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of Contributor
func (m *Contributor) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	type_ *ContributorType,
	name *FhirString,
	contact *[]ContactDetail,
) *Contributor {
	return &Contributor{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		Type_: func() ContributorType {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Name: func() FhirString {
			if name != nil { return *name }
			return m.Name
		}(),
		Contact: func() []ContactDetail {
			if contact != nil { return *contact }
			return m.Contact
		}(),
	}
}
