// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// ExampleScenario
// Example of workflow instance.
type ExampleScenario struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Url *FhirUri `json:"url,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Version *FhirString `json:"version,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	Experimental *FhirBoolean `json:"experimental,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Publisher *FhirString `json:"publisher,omitempty"`
	Contact []*ContactDetail `json:"contact,omitempty"`
	UseContext []*UsageContext `json:"usecontext,omitempty"`
	Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`
	Copyright *FhirMarkdown `json:"copyright,omitempty"`
	Purpose *FhirMarkdown `json:"purpose,omitempty"`
	Actor []*ExampleScenarioActor `json:"actor,omitempty"`
	Instance []*ExampleScenarioInstance `json:"instance,omitempty"`
	Process []*ExampleScenarioProcess `json:"process,omitempty"`
	Workflow []*FhirCanonical `json:"workflow,omitempty"`
}

// NewExampleScenario creates a new ExampleScenario instance
func NewExampleScenario() *ExampleScenario {
	return &ExampleScenario{}
}

// FromJSON populates ExampleScenario from JSON data
func (m *ExampleScenario) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ExampleScenario to JSON data
func (m *ExampleScenario) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ExampleScenario
func (m *ExampleScenario) Clone() *ExampleScenario {
	if m == nil { return nil }
	return &ExampleScenario{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Url: m.Url.Clone(),
		Identifier: cloneSlices(m.Identifier),
		Version: m.Version.Clone(),
		Name: m.Name.Clone(),
		Status: m.Status.Clone(),
		Experimental: m.Experimental.Clone(),
		Date: m.Date.Clone(),
		Publisher: m.Publisher.Clone(),
		Contact: cloneSlices(m.Contact),
		UseContext: cloneSlices(m.UseContext),
		Jurisdiction: cloneSlices(m.Jurisdiction),
		Copyright: m.Copyright.Clone(),
		Purpose: m.Purpose.Clone(),
		Actor: cloneSlices(m.Actor),
		Instance: cloneSlices(m.Instance),
		Process: cloneSlices(m.Process),
		Workflow: cloneSlices(m.Workflow),
	}
}

// Equals checks for equality with another ExampleScenario instance
func (m *ExampleScenario) Equals(other *ExampleScenario) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Version.Equals(other.Version) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Experimental.Equals(other.Experimental) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Publisher.Equals(other.Publisher) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !compareSlices(m.UseContext, other.UseContext) { return false }
	if !compareSlices(m.Jurisdiction, other.Jurisdiction) { return false }
	if !m.Copyright.Equals(other.Copyright) { return false }
	if !m.Purpose.Equals(other.Purpose) { return false }
	if !compareSlices(m.Actor, other.Actor) { return false }
	if !compareSlices(m.Instance, other.Instance) { return false }
	if !compareSlices(m.Process, other.Process) { return false }
	if !compareSlices(m.Workflow, other.Workflow) { return false }
	return true
}

// ExampleScenarioActor
// Actor participating in the resource.
type ExampleScenarioActor struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	ActorId *FhirString `json:"actorid,omitempty"`
	Type *ExampleScenarioActorType `json:"type,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
}

// NewExampleScenarioActor creates a new ExampleScenarioActor instance
func NewExampleScenarioActor() *ExampleScenarioActor {
	return &ExampleScenarioActor{}
}

// FromJSON populates ExampleScenarioActor from JSON data
func (m *ExampleScenarioActor) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ExampleScenarioActor to JSON data
func (m *ExampleScenarioActor) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ExampleScenarioActor
func (m *ExampleScenarioActor) Clone() *ExampleScenarioActor {
	if m == nil { return nil }
	return &ExampleScenarioActor{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		ActorId: m.ActorId.Clone(),
		Type: m.Type.Clone(),
		Name: m.Name.Clone(),
		Description: m.Description.Clone(),
	}
}

// Equals checks for equality with another ExampleScenarioActor instance
func (m *ExampleScenarioActor) Equals(other *ExampleScenarioActor) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.ActorId.Equals(other.ActorId) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Description.Equals(other.Description) { return false }
	return true
}

// ExampleScenarioInstance
// Each resource and each version that is present in the workflow.
type ExampleScenarioInstance struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	ResourceId *FhirString `json:"resourceid,omitempty"`
	ResourceType *FhirCode `json:"resourcetype,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	Version []*ExampleScenarioVersion `json:"version,omitempty"`
	ContainedInstance []*ExampleScenarioContainedInstance `json:"containedinstance,omitempty"`
}

// NewExampleScenarioInstance creates a new ExampleScenarioInstance instance
func NewExampleScenarioInstance() *ExampleScenarioInstance {
	return &ExampleScenarioInstance{}
}

// FromJSON populates ExampleScenarioInstance from JSON data
func (m *ExampleScenarioInstance) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ExampleScenarioInstance to JSON data
func (m *ExampleScenarioInstance) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ExampleScenarioInstance
func (m *ExampleScenarioInstance) Clone() *ExampleScenarioInstance {
	if m == nil { return nil }
	return &ExampleScenarioInstance{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		ResourceId: m.ResourceId.Clone(),
		ResourceType: m.ResourceType.Clone(),
		Name: m.Name.Clone(),
		Description: m.Description.Clone(),
		Version: cloneSlices(m.Version),
		ContainedInstance: cloneSlices(m.ContainedInstance),
	}
}

// Equals checks for equality with another ExampleScenarioInstance instance
func (m *ExampleScenarioInstance) Equals(other *ExampleScenarioInstance) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.ResourceId.Equals(other.ResourceId) { return false }
	if !m.ResourceType.Equals(other.ResourceType) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.Version, other.Version) { return false }
	if !compareSlices(m.ContainedInstance, other.ContainedInstance) { return false }
	return true
}

// ExampleScenarioVersion
// A specific version of the resource.
type ExampleScenarioVersion struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	VersionId *FhirString `json:"versionid,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
}

// NewExampleScenarioVersion creates a new ExampleScenarioVersion instance
func NewExampleScenarioVersion() *ExampleScenarioVersion {
	return &ExampleScenarioVersion{}
}

// FromJSON populates ExampleScenarioVersion from JSON data
func (m *ExampleScenarioVersion) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ExampleScenarioVersion to JSON data
func (m *ExampleScenarioVersion) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ExampleScenarioVersion
func (m *ExampleScenarioVersion) Clone() *ExampleScenarioVersion {
	if m == nil { return nil }
	return &ExampleScenarioVersion{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		VersionId: m.VersionId.Clone(),
		Description: m.Description.Clone(),
	}
}

// Equals checks for equality with another ExampleScenarioVersion instance
func (m *ExampleScenarioVersion) Equals(other *ExampleScenarioVersion) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.VersionId.Equals(other.VersionId) { return false }
	if !m.Description.Equals(other.Description) { return false }
	return true
}

// ExampleScenarioContainedInstance
// Resources contained in the instance (e.g. the observations contained in a bundle).
type ExampleScenarioContainedInstance struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	ResourceId *FhirString `json:"resourceid,omitempty"`
	VersionId *FhirString `json:"versionid,omitempty"`
}

// NewExampleScenarioContainedInstance creates a new ExampleScenarioContainedInstance instance
func NewExampleScenarioContainedInstance() *ExampleScenarioContainedInstance {
	return &ExampleScenarioContainedInstance{}
}

// FromJSON populates ExampleScenarioContainedInstance from JSON data
func (m *ExampleScenarioContainedInstance) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ExampleScenarioContainedInstance to JSON data
func (m *ExampleScenarioContainedInstance) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ExampleScenarioContainedInstance
func (m *ExampleScenarioContainedInstance) Clone() *ExampleScenarioContainedInstance {
	if m == nil { return nil }
	return &ExampleScenarioContainedInstance{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		ResourceId: m.ResourceId.Clone(),
		VersionId: m.VersionId.Clone(),
	}
}

// Equals checks for equality with another ExampleScenarioContainedInstance instance
func (m *ExampleScenarioContainedInstance) Equals(other *ExampleScenarioContainedInstance) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.ResourceId.Equals(other.ResourceId) { return false }
	if !m.VersionId.Equals(other.VersionId) { return false }
	return true
}

// ExampleScenarioProcess
// Each major process - a group of operations.
type ExampleScenarioProcess struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	PreConditions *FhirMarkdown `json:"preconditions,omitempty"`
	PostConditions *FhirMarkdown `json:"postconditions,omitempty"`
	Step []*ExampleScenarioStep `json:"step,omitempty"`
}

// NewExampleScenarioProcess creates a new ExampleScenarioProcess instance
func NewExampleScenarioProcess() *ExampleScenarioProcess {
	return &ExampleScenarioProcess{}
}

// FromJSON populates ExampleScenarioProcess from JSON data
func (m *ExampleScenarioProcess) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ExampleScenarioProcess to JSON data
func (m *ExampleScenarioProcess) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ExampleScenarioProcess
func (m *ExampleScenarioProcess) Clone() *ExampleScenarioProcess {
	if m == nil { return nil }
	return &ExampleScenarioProcess{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Title: m.Title.Clone(),
		Description: m.Description.Clone(),
		PreConditions: m.PreConditions.Clone(),
		PostConditions: m.PostConditions.Clone(),
		Step: cloneSlices(m.Step),
	}
}

// Equals checks for equality with another ExampleScenarioProcess instance
func (m *ExampleScenarioProcess) Equals(other *ExampleScenarioProcess) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.PreConditions.Equals(other.PreConditions) { return false }
	if !m.PostConditions.Equals(other.PostConditions) { return false }
	if !compareSlices(m.Step, other.Step) { return false }
	return true
}

// ExampleScenarioStep
// Each step of the process.
type ExampleScenarioStep struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Process []*ExampleScenarioProcess `json:"process,omitempty"`
	Pause *FhirBoolean `json:"pause,omitempty"`
	Operation *ExampleScenarioOperation `json:"operation,omitempty"`
	Alternative []*ExampleScenarioAlternative `json:"alternative,omitempty"`
}

// NewExampleScenarioStep creates a new ExampleScenarioStep instance
func NewExampleScenarioStep() *ExampleScenarioStep {
	return &ExampleScenarioStep{}
}

// FromJSON populates ExampleScenarioStep from JSON data
func (m *ExampleScenarioStep) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ExampleScenarioStep to JSON data
func (m *ExampleScenarioStep) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ExampleScenarioStep
func (m *ExampleScenarioStep) Clone() *ExampleScenarioStep {
	if m == nil { return nil }
	return &ExampleScenarioStep{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Process: cloneSlices(m.Process),
		Pause: m.Pause.Clone(),
		Operation: m.Operation.Clone(),
		Alternative: cloneSlices(m.Alternative),
	}
}

// Equals checks for equality with another ExampleScenarioStep instance
func (m *ExampleScenarioStep) Equals(other *ExampleScenarioStep) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Process, other.Process) { return false }
	if !m.Pause.Equals(other.Pause) { return false }
	if !m.Operation.Equals(other.Operation) { return false }
	if !compareSlices(m.Alternative, other.Alternative) { return false }
	return true
}

// ExampleScenarioOperation
// Each interaction or action.
type ExampleScenarioOperation struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Number *FhirString `json:"number,omitempty"`
	Type *FhirString `json:"type,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Initiator *FhirString `json:"initiator,omitempty"`
	Receiver *FhirString `json:"receiver,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	InitiatorActive *FhirBoolean `json:"initiatoractive,omitempty"`
	ReceiverActive *FhirBoolean `json:"receiveractive,omitempty"`
	Request *ExampleScenarioContainedInstance `json:"request,omitempty"`
	Response *ExampleScenarioContainedInstance `json:"response,omitempty"`
}

// NewExampleScenarioOperation creates a new ExampleScenarioOperation instance
func NewExampleScenarioOperation() *ExampleScenarioOperation {
	return &ExampleScenarioOperation{}
}

// FromJSON populates ExampleScenarioOperation from JSON data
func (m *ExampleScenarioOperation) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ExampleScenarioOperation to JSON data
func (m *ExampleScenarioOperation) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ExampleScenarioOperation
func (m *ExampleScenarioOperation) Clone() *ExampleScenarioOperation {
	if m == nil { return nil }
	return &ExampleScenarioOperation{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Number: m.Number.Clone(),
		Type: m.Type.Clone(),
		Name: m.Name.Clone(),
		Initiator: m.Initiator.Clone(),
		Receiver: m.Receiver.Clone(),
		Description: m.Description.Clone(),
		InitiatorActive: m.InitiatorActive.Clone(),
		ReceiverActive: m.ReceiverActive.Clone(),
		Request: m.Request.Clone(),
		Response: m.Response.Clone(),
	}
}

// Equals checks for equality with another ExampleScenarioOperation instance
func (m *ExampleScenarioOperation) Equals(other *ExampleScenarioOperation) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Number.Equals(other.Number) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Initiator.Equals(other.Initiator) { return false }
	if !m.Receiver.Equals(other.Receiver) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.InitiatorActive.Equals(other.InitiatorActive) { return false }
	if !m.ReceiverActive.Equals(other.ReceiverActive) { return false }
	if !m.Request.Equals(other.Request) { return false }
	if !m.Response.Equals(other.Response) { return false }
	return true
}

// ExampleScenarioAlternative
// Indicates an alternative step that can be taken instead of the operations on the base step in exceptional/atypical circumstances.
type ExampleScenarioAlternative struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	Step []*ExampleScenarioStep `json:"step,omitempty"`
}

// NewExampleScenarioAlternative creates a new ExampleScenarioAlternative instance
func NewExampleScenarioAlternative() *ExampleScenarioAlternative {
	return &ExampleScenarioAlternative{}
}

// FromJSON populates ExampleScenarioAlternative from JSON data
func (m *ExampleScenarioAlternative) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ExampleScenarioAlternative to JSON data
func (m *ExampleScenarioAlternative) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ExampleScenarioAlternative
func (m *ExampleScenarioAlternative) Clone() *ExampleScenarioAlternative {
	if m == nil { return nil }
	return &ExampleScenarioAlternative{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Title: m.Title.Clone(),
		Description: m.Description.Clone(),
		Step: cloneSlices(m.Step),
	}
}

// Equals checks for equality with another ExampleScenarioAlternative instance
func (m *ExampleScenarioAlternative) Equals(other *ExampleScenarioAlternative) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.Step, other.Step) { return false }
	return true
}

