// Code generated by FHIR Generator. DO NOT EDIT.
// MedicationAdministration Status Codes
package fhir_r4b_go
// MedicationAdministrationStatusCodes represents the FHIR ValueSet as an enumeration
type MedicationAdministrationStatusCodes struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	MedicationAdministrationStatusCodes_In_progress = "in-progress" // In Progress: The administration has started but has not yet completed.
	MedicationAdministrationStatusCodes_Not_done = "not-done" // Not Done: The administration was terminated prior to any impact on the subject (though preparatory actions may have been taken)
	MedicationAdministrationStatusCodes_On_hold = "on-hold" // On Hold: Actions implied by the administration have been temporarily halted, but are expected to continue later. May also be called 'suspended'.
	MedicationAdministrationStatusCodes_Completed = "completed" // Completed: All actions that are implied by the administration have occurred.
	MedicationAdministrationStatusCodes_Entered_in_error = "entered-in-error" // Entered in Error: The administration was entered in error and therefore nullified.
	MedicationAdministrationStatusCodes_Stopped = "stopped" // Stopped: Actions implied by the administration have been permanently halted, before all of them occurred.
	MedicationAdministrationStatusCodes_Unknown = "unknown" // Unknown: The authoring system does not know which of the status values currently applies for this request. Note: This concept is not to be used for 'other' - one of the listed statuses is presumed to apply, it's just not known which one.
)

// Clone creates a deep copy of the enum
func (e MedicationAdministrationStatusCodes) Clone() *MedicationAdministrationStatusCodes {
	return &MedicationAdministrationStatusCodes{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *MedicationAdministrationStatusCodes) Equals(other *MedicationAdministrationStatusCodes) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

