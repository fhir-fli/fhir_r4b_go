// Code generated by FHIR Generator. DO NOT EDIT.
// Indicates the purpose of a bundle - how it is intended to be used.
package fhir_r4b_go
// BundleType represents the FHIR ValueSet as an enumeration
type BundleType struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	BundleType_Document = "document" // Document: The bundle is a document. The first resource is a Composition.
	BundleType_Message = "message" // Message: The bundle is a message. The first resource is a MessageHeader.
	BundleType_Transaction = "transaction" // Transaction: The bundle is a transaction - intended to be processed by a server as an atomic commit.
	BundleType_Transaction_response = "transaction-response" // Transaction Response: The bundle is a transaction response. Because the response is a transaction response, the transaction has succeeded, and all responses are error free.
	BundleType_Batch = "batch" // Batch: The bundle is a set of actions - intended to be processed by a server as a group of independent actions.
	BundleType_Batch_response = "batch-response" // Batch Response: The bundle is a batch response. Note that as a batch, some responses may indicate failure and others success.
	BundleType_History = "history" // History List: The bundle is a list of resources from a history interaction on a server.
	BundleType_Searchset = "searchset" // Search Results: The bundle is a list of resources returned as a result of a search/query interaction, operation, or message.
	BundleType_Collection = "collection" // Collection: The bundle is a set of resources collected into a single package for ease of distribution that imposes no processing obligations or behavioral rules beyond persistence.
)

// Clone creates a deep copy of the enum
func (e BundleType) Clone() *BundleType {
	return &BundleType{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *BundleType) Equals(other *BundleType) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

