// Code generated by FHIR Generator. DO NOT EDIT.
// Code the reason for different URLs, eg abstract and full-text.
package fhir_r4b_go
// ArticleUrlType represents the FHIR ValueSet as an enumeration
type ArticleUrlType struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	ArticleUrlType_Abstract = "abstract" // Abstract: URL to reach the abstract for the article.
	ArticleUrlType_Abstract_version = "abstract-version" // Abstract Version: URL to reach a specific version of the abstract for the article.
	ArticleUrlType_Doi_based = "doi-based" // DOI Based: URL derived from DOI.
	ArticleUrlType_Full_text = "full-text" // Full-Text: URL to reach the full-text of the article.
	ArticleUrlType_Full_text_version = "full-text-version" // Full-Text Version: URL to reach a specific version of the full-text of the article.
	ArticleUrlType_Pdf = "pdf" // PDF: URL to reach the full-text of the article in PDF form.
	ArticleUrlType_Pdf_version = "pdf-version" // PDF Version: URL to reach a specific version of the full-text of the article in PDF form.
	ArticleUrlType_Webpage = "webpage" // Webpage: Used when URL type is a webpage, but other codes do not apply.
	ArticleUrlType_Not_specified = "not-specified" // Not Specified: Used when URL type is not specified, commonly when only a single URL is provided.
	ArticleUrlType_Json = "json" // JSON: URL to reach computable content in JSON format.
	ArticleUrlType_Json_version = "json-version" // JSON Version: URL to reach a specific version of computable content in JSON format.
	ArticleUrlType_Xml = "xml" // XML: URL to reach computable content in XML format.
	ArticleUrlType_Xml_version = "xml-version" // XML: URL to reach a specific version of computable content in XML format.
	ArticleUrlType_Supplement = "supplement" // Supplement: Supplement
	ArticleUrlType_Supplementary_file_directory = "supplementary-file-directory" // Supplementary file directory: Supplementary file directory
	ArticleUrlType_Compressed_file = "compressed-file" // Compressed file: Compressed archive file (e.g. a zip file) that contains multiple files
)

// Clone creates a deep copy of the enum
func (e ArticleUrlType) Clone() *ArticleUrlType {
	return &ArticleUrlType{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *ArticleUrlType) Equals(other *ArticleUrlType) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

