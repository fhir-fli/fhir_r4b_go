// Code generated by FHIR Generator. DO NOT EDIT.
// Code the reason for different URLs, eg abstract and full-text.
package fhir_r4b_go

// ArticleUrlType represents the FHIR ValueSet as an enumeration
type ArticleUrlType int

const (
	// Abstract: URL to reach the abstract for the article.
	ArticleUrlType_Abstract ArticleUrlType = iota
	// Abstract Version: URL to reach a specific version of the abstract for the article.
	ArticleUrlType_Abstract_version ArticleUrlType = iota
	// DOI Based: URL derived from DOI.
	ArticleUrlType_Doi_based ArticleUrlType = iota
	// Full-Text: URL to reach the full-text of the article.
	ArticleUrlType_Full_text ArticleUrlType = iota
	// Full-Text Version: URL to reach a specific version of the full-text of the article.
	ArticleUrlType_Full_text_version ArticleUrlType = iota
	// PDF: URL to reach the full-text of the article in PDF form.
	ArticleUrlType_Pdf ArticleUrlType = iota
	// PDF Version: URL to reach a specific version of the full-text of the article in PDF form.
	ArticleUrlType_Pdf_version ArticleUrlType = iota
	// Webpage: Used when URL type is a webpage, but other codes do not apply.
	ArticleUrlType_Webpage ArticleUrlType = iota
	// Not Specified: Used when URL type is not specified, commonly when only a single URL is provided.
	ArticleUrlType_Not_specified ArticleUrlType = iota
	// JSON: URL to reach computable content in JSON format.
	ArticleUrlType_Json ArticleUrlType = iota
	// JSON Version: URL to reach a specific version of computable content in JSON format.
	ArticleUrlType_Json_version ArticleUrlType = iota
	// XML: URL to reach computable content in XML format.
	ArticleUrlType_Xml ArticleUrlType = iota
	// XML: URL to reach a specific version of computable content in XML format.
	ArticleUrlType_Xml_version ArticleUrlType = iota
	// Supplement: Supplement
	ArticleUrlType_Supplement ArticleUrlType = iota
	// Supplementary file directory: Supplementary file directory
	ArticleUrlType_Supplementary_file_directory ArticleUrlType = iota
	// Compressed file: Compressed archive file (e.g. a zip file) that contains multiple files
	ArticleUrlType_Compressed_file ArticleUrlType = iota
)

// String converts the enum to its string representation
func (e ArticleUrlType) String() string {
	switch e {
	case ArticleUrlType_Abstract: return "Abstract"
	case ArticleUrlType_Abstract_version: return "Abstract Version"
	case ArticleUrlType_Doi_based: return "DOI Based"
	case ArticleUrlType_Full_text: return "Full-Text"
	case ArticleUrlType_Full_text_version: return "Full-Text Version"
	case ArticleUrlType_Pdf: return "PDF"
	case ArticleUrlType_Pdf_version: return "PDF Version"
	case ArticleUrlType_Webpage: return "Webpage"
	case ArticleUrlType_Not_specified: return "Not Specified"
	case ArticleUrlType_Json: return "JSON"
	case ArticleUrlType_Json_version: return "JSON Version"
	case ArticleUrlType_Xml: return "XML"
	case ArticleUrlType_Xml_version: return "XML"
	case ArticleUrlType_Supplement: return "Supplement"
	case ArticleUrlType_Supplementary_file_directory: return "Supplementary file directory"
	case ArticleUrlType_Compressed_file: return "Compressed file"
	default: return "Unknown"
	}
}

