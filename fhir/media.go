// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// Media
// A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
type Media struct {
	DomainResource
	// id
	// The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes.
	Id FhirString `json:"id,omitempty"`
	// meta
	// The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.
	Meta FhirMeta `json:"meta,omitempty"`
	// implicitRules
	// A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc.
	ImplicitRules FhirUri `json:"implicitRules,omitempty"`
	// language
	// The base language in which the resource is written.
	Language CommonLanguages `json:"language,omitempty"`
	// text
	// A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it "clinically safe" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.
	Text Narrative `json:"text,omitempty"`
	// contained
	// These resources do not have an independent existence apart from the resource that contains them - they cannot be identified independently, and nor can they have their own independent transaction scope.
	Contained []Resource `json:"contained,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// identifier
	// Identifiers associated with the image - these may include identifiers for the image itself, identifiers for the context of its collection (e.g. series ids) and context ids such as accession numbers or other workflow identifiers.
	Identifier []Identifier `json:"identifier,omitempty"`
	// basedOn
	// A procedure that is fulfilled in whole or in part by the creation of this media.
	BasedOn []Reference `json:"basedOn,omitempty"`
	// partOf
	// A larger event of which this particular event is a component or step.
	PartOf []Reference `json:"partOf,omitempty"`
	// status
	// The current state of the {{title}}.
	Status EventStatus `json:"status,omitempty"`
	// type
	// A code that classifies whether the media is an image, video or audio recording or some other media category.
	Type_ CodeableConcept `json:"type,omitempty"`
	// modality
	// Details of the type of the media - usually, how it was acquired (what type of device). If images sourced from a DICOM system, are wrapped in a Media resource, then this is the modality.
	Modality CodeableConcept `json:"modality,omitempty"`
	// view
	// The name of the imaging view e.g. Lateral or Antero-posterior (AP).
	View CodeableConcept `json:"view,omitempty"`
	// subject
	// Who/What this Media is a record of.
	Subject Reference `json:"subject,omitempty"`
	// encounter
	// The encounter that establishes the context for this media.
	Encounter Reference `json:"encounter,omitempty"`
	// createdDateTime
	// The date and time(s) at which the media was collected.
	CreatedDateTime FhirDateTime `json:"createdDateTime,omitempty"`
	// createdPeriod
	// The date and time(s) at which the media was collected.
	CreatedPeriod Period `json:"createdPeriod,omitempty"`
	// issued
	// The date and time this version of the media was made available to providers, typically after having been reviewed.
	Issued FhirInstant `json:"issued,omitempty"`
	// operator
	// The person who administered the collection of the image.
	Operator_ Reference `json:"operator,omitempty"`
	// reasonCode
	// Describes why the event occurred in coded or textual form.
	ReasonCode []CodeableConcept `json:"reasonCode,omitempty"`
	// bodySite
	// Indicates the site on the subject's body where the observation was made (i.e. the target site).
	BodySite CodeableConcept `json:"bodySite,omitempty"`
	// deviceName
	// The name of the device / manufacturer of the device  that was used to make the recording.
	DeviceName FhirString `json:"deviceName,omitempty"`
	// device
	// The device used to collect the media.
	Device Reference `json:"device,omitempty"`
	// height
	// Height of the image in pixels (photo/video).
	Height FhirPositiveInt `json:"height,omitempty"`
	// width
	// Width of the image in pixels (photo/video).
	Width FhirPositiveInt `json:"width,omitempty"`
	// frames
	// The number of frames in a photo. This is used with a multi-page fax, or an imaging acquisition context that takes multiple slices in a single image, or an animated gif. If there is more than one frame, this SHALL have a value in order to alert interface software that a multi-frame capable rendering widget is required.
	Frames FhirPositiveInt `json:"frames,omitempty"`
	// duration
	// The duration of the recording in seconds - for audio and video.
	Duration FhirDecimal `json:"duration,omitempty"`
	// content
	// The actual content of the media - inline or by direct reference to the media source file.
	Content Attachment `json:"content,omitempty"`
	// note
	// Comments made about the media by the performer, subject or other participants.
	Note []Annotation `json:"note,omitempty"`
}

// NewMedia creates a new Media instance
func NewMedia(
	id FhirString,
	meta FhirMeta,
	implicitRules FhirUri,
	language CommonLanguages,
	text Narrative,
	contained []Resource,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	identifier []Identifier,
	basedOn []Reference,
	partOf []Reference,
	status EventStatus,
	type_ CodeableConcept,
	modality CodeableConcept,
	view CodeableConcept,
	subject Reference,
	encounter Reference,
	createdDateTime FhirDateTime,
	createdPeriod Period,
	issued FhirInstant,
	operator_ Reference,
	reasonCode []CodeableConcept,
	bodySite CodeableConcept,
	deviceName FhirString,
	device Reference,
	height FhirPositiveInt,
	width FhirPositiveInt,
	frames FhirPositiveInt,
	duration FhirDecimal,
	content Attachment,
	note []Annotation,
) *Media {
	return &Media{
		Id: id,
		Meta: meta,
		ImplicitRules: implicitRules,
		Language: language,
		Text: text,
		Contained: contained,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Identifier: identifier,
		BasedOn: basedOn,
		PartOf: partOf,
		Status: status,
		Type_: type_,
		Modality: modality,
		View: view,
		Subject: subject,
		Encounter: encounter,
		CreatedDateTime: createdDateTime,
		CreatedPeriod: createdPeriod,
		Issued: issued,
		Operator_: operator_,
		ReasonCode: reasonCode,
		BodySite: bodySite,
		DeviceName: deviceName,
		Device: device,
		Height: height,
		Width: width,
		Frames: frames,
		Duration: duration,
		Content: content,
		Note: note,
	}
}
// FromJSON populates Media from JSON data
func (m *Media) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Media to JSON data
func (m *Media) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of Media
func (m *Media) CopyWith(
	id *FhirString,
	meta *FhirMeta,
	implicitRules *FhirUri,
	language *CommonLanguages,
	text *Narrative,
	contained *[]Resource,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	identifier *[]Identifier,
	basedOn *[]Reference,
	partOf *[]Reference,
	status *EventStatus,
	type_ *CodeableConcept,
	modality *CodeableConcept,
	view *CodeableConcept,
	subject *Reference,
	encounter *Reference,
	createdDateTime *FhirDateTime,
	createdPeriod *Period,
	issued *FhirInstant,
	operator_ *Reference,
	reasonCode *[]CodeableConcept,
	bodySite *CodeableConcept,
	deviceName *FhirString,
	device *Reference,
	height *FhirPositiveInt,
	width *FhirPositiveInt,
	frames *FhirPositiveInt,
	duration *FhirDecimal,
	content *Attachment,
	note *[]Annotation,
) *Media {
	return &Media{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Meta: func() FhirMeta {
			if meta != nil { return *meta }
			return m.Meta
		}(),
		ImplicitRules: func() FhirUri {
			if implicitRules != nil { return *implicitRules }
			return m.ImplicitRules
		}(),
		Language: func() CommonLanguages {
			if language != nil { return *language }
			return m.Language
		}(),
		Text: func() Narrative {
			if text != nil { return *text }
			return m.Text
		}(),
		Contained: func() []Resource {
			if contained != nil { return *contained }
			return m.Contained
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Identifier: func() []Identifier {
			if identifier != nil { return *identifier }
			return m.Identifier
		}(),
		BasedOn: func() []Reference {
			if basedOn != nil { return *basedOn }
			return m.BasedOn
		}(),
		PartOf: func() []Reference {
			if partOf != nil { return *partOf }
			return m.PartOf
		}(),
		Status: func() EventStatus {
			if status != nil { return *status }
			return m.Status
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Modality: func() CodeableConcept {
			if modality != nil { return *modality }
			return m.Modality
		}(),
		View: func() CodeableConcept {
			if view != nil { return *view }
			return m.View
		}(),
		Subject: func() Reference {
			if subject != nil { return *subject }
			return m.Subject
		}(),
		Encounter: func() Reference {
			if encounter != nil { return *encounter }
			return m.Encounter
		}(),
		CreatedDateTime: func() FhirDateTime {
			if createdDateTime != nil { return *createdDateTime }
			return m.CreatedDateTime
		}(),
		CreatedPeriod: func() Period {
			if createdPeriod != nil { return *createdPeriod }
			return m.CreatedPeriod
		}(),
		Issued: func() FhirInstant {
			if issued != nil { return *issued }
			return m.Issued
		}(),
		Operator_: func() Reference {
			if operator_ != nil { return *operator_ }
			return m.Operator_
		}(),
		ReasonCode: func() []CodeableConcept {
			if reasonCode != nil { return *reasonCode }
			return m.ReasonCode
		}(),
		BodySite: func() CodeableConcept {
			if bodySite != nil { return *bodySite }
			return m.BodySite
		}(),
		DeviceName: func() FhirString {
			if deviceName != nil { return *deviceName }
			return m.DeviceName
		}(),
		Device: func() Reference {
			if device != nil { return *device }
			return m.Device
		}(),
		Height: func() FhirPositiveInt {
			if height != nil { return *height }
			return m.Height
		}(),
		Width: func() FhirPositiveInt {
			if width != nil { return *width }
			return m.Width
		}(),
		Frames: func() FhirPositiveInt {
			if frames != nil { return *frames }
			return m.Frames
		}(),
		Duration: func() FhirDecimal {
			if duration != nil { return *duration }
			return m.Duration
		}(),
		Content: func() Attachment {
			if content != nil { return *content }
			return m.Content
		}(),
		Note: func() []Annotation {
			if note != nil { return *note }
			return m.Note
		}(),
	}
}
