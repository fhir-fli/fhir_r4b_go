// Code generated by FHIR Generator. DO NOT EDIT.
// Used to express the reason and specific aspect for the variant title, such as language and specific language.
package fhir_r4b_go
// TitleType represents the FHIR ValueSet as an enumeration
type TitleType struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	TitleType_Primary = "primary" // Primary title: Main title for common use. The primary title used for representation if multiple titles exist.
	TitleType_Official = "official" // Official title: The official or authoritative title.
	TitleType_Scientific = "scientific" // Scientific title: Title using scientific terminology.
	TitleType_Plain_language = "plain-language" // Plain language title: Title using language common to lay public discourse.
	TitleType_Subtitle = "subtitle" // Subtitle: Subtitle or secondary title.
	TitleType_Short_title = "short-title" // Short title: Brief title (e.g. 'running title' or title used in page headers)
	TitleType_Acronym = "acronym" // Acronym: Abbreviation used as title
	TitleType_Earlier_title = "earlier-title" // Different text in an earlier version: Alternative form of title in an earlier version such as epub ahead of print.
	TitleType_Language = "language" // Different language: Additional form of title in a different language.
	TitleType_Autotranslated = "autotranslated" // Different language derived from autotranslation: Machine translated form of title in a different language, language element codes the language into which it was translated by machine.
	TitleType_Human_use = "human-use" // Human use: Human-friendly title
	TitleType_Machine_use = "machine-use" // Machine use: Machine-friendly title
	TitleType_Duplicate_uid = "duplicate-uid" // Different text for the same object with a different identifier: An alternative form of the title in two or more entries, e.g. in multiple medline entries
)

// Clone creates a deep copy of the enum
func (e TitleType) Clone() *TitleType {
	return &TitleType{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *TitleType) Equals(other *TitleType) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

