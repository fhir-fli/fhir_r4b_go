// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go


// Reference
// A reference from one resource to another.
type Reference struct {
	DataType
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// reference
	// A reference to a location at which the other resource is found.
	Reference FhirString `json:"reference,omitempty"`
	// type
	// The expected type of the target of the reference.
	Type_ FhirUri `json:"type,omitempty"`
	// identifier
	// An identifier for the target resource.
	Identifier *Identifier `json:"identifier,omitempty"` // Pointer to Identifier
	// display
	// Plain text narrative that identifies the resource in addition to the resource reference.
	Display FhirString `json:"display,omitempty"`
}

// NewReference creates a new Reference instance
func NewReference(
	id FhirString,
	extension_ []FhirExtension,
	reference FhirString,
	type_ FhirUri,
	identifier *Identifier, // Updated to accept a pointer
	display FhirString,
) *Reference {
	return &Reference{
		Id:         id,
		Extension_: extension_,
		Reference:  reference,
		Type_:      type_,
		Identifier: identifier, // Pointer is assigned directly
		Display:    display,
	}
}

// CopyWith creates a modified copy of Reference
func (m *Reference) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	reference *FhirString,
	type_ *FhirUri,
	identifier *Identifier,
	display *FhirString,
) *Reference {
	return &Reference{
		Id: func() FhirString {
			if id != nil {
				return *id
			}
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil {
				return *extension_
			}
			return m.Extension_
		}(),
		Reference: func() FhirString {
			if reference != nil {
				return *reference
			}
			return m.Reference
		}(),
		Type_: func() FhirUri {
			if type_ != nil {
				return *type_
			}
			return m.Type_
		}(),
		Identifier: func() *Identifier { // Returns a pointer
			if identifier != nil {
				return identifier
			}
			return m.Identifier
		}(),
		Display: func() FhirString {
			if display != nil {
				return *display
			}
			return m.Display
		}(),
	}
}
