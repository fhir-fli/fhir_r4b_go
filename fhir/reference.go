// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Reference
// A reference from one resource to another.
type Reference struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Reference *FhirString `json:"reference,omitempty"`
	Type *FhirUri `json:"type,omitempty"`
	Identifier *Identifier `json:"identifier,omitempty"`
	Display *FhirString `json:"display,omitempty"`
}

// NewReference creates a new Reference instance
func NewReference() *Reference {
	return &Reference{}
}

// FromJSON populates Reference from JSON data
func (m *Reference) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Reference to JSON data
func (m *Reference) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Reference
func (m *Reference) Clone() *Reference {
	if m == nil { return nil }
	return &Reference{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Reference: m.Reference.Clone(),
		Type: m.Type.Clone(),
		Identifier: m.Identifier.Clone(),
		Display: m.Display.Clone(),
	}
}

// Equals checks for equality with another Reference instance
func (m *Reference) Equals(other *Reference) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Reference.Equals(other.Reference) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Identifier.Equals(other.Identifier) { return false }
	if !m.Display.Equals(other.Display) { return false }
	return true
}

