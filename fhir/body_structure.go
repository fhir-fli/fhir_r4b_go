// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// BodyStructure
// Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
type BodyStructure struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Active *FhirBoolean `json:"active,omitempty"`
	Morphology *CodeableConcept `json:"morphology,omitempty"`
	Location *CodeableConcept `json:"location,omitempty"`
	LocationQualifier []*CodeableConcept `json:"locationqualifier,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Image []*Attachment `json:"image,omitempty"`
	Patient *Reference `json:"patient,omitempty"`
}

// NewBodyStructure creates a new BodyStructure instance
func NewBodyStructure() *BodyStructure {
	return &BodyStructure{}
}

// FromJSON populates BodyStructure from JSON data
func (m *BodyStructure) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts BodyStructure to JSON data
func (m *BodyStructure) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of BodyStructure
func (m *BodyStructure) Clone() *BodyStructure {
	if m == nil { return nil }
	return &BodyStructure{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Active: m.Active.Clone(),
		Morphology: m.Morphology.Clone(),
		Location: m.Location.Clone(),
		LocationQualifier: cloneSlices(m.LocationQualifier),
		Description: m.Description.Clone(),
		Image: cloneSlices(m.Image),
		Patient: m.Patient.Clone(),
	}
}

// Equals checks for equality with another BodyStructure instance
func (m *BodyStructure) Equals(other *BodyStructure) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Active.Equals(other.Active) { return false }
	if !m.Morphology.Equals(other.Morphology) { return false }
	if !m.Location.Equals(other.Location) { return false }
	if !compareSlices(m.LocationQualifier, other.LocationQualifier) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.Image, other.Image) { return false }
	if !m.Patient.Equals(other.Patient) { return false }
	return true
}

