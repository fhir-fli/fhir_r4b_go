// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// FhirEndpoint
// The technical details of an endpoint that can be used for electronic services, such as for web services providing XDS.b or a REST endpoint for another FHIR server. This may include any security context information.
type FhirEndpoint struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *EndpointStatus `json:"status,omitempty"`
	ConnectionType *Coding `json:"connectiontype,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	ManagingOrganization *Reference `json:"managingorganization,omitempty"`
	Contact []*ContactPoint `json:"contact,omitempty"`
	Period *Period `json:"period,omitempty"`
	PayloadType []*CodeableConcept `json:"payloadtype,omitempty"`
	PayloadMimeType []*FhirCode `json:"payloadmimetype,omitempty"`
	Address *FhirUrl `json:"address,omitempty"`
	Header []*FhirString `json:"header,omitempty"`
}

// NewFhirEndpoint creates a new FhirEndpoint instance
func NewFhirEndpoint() *FhirEndpoint {
	return &FhirEndpoint{}
}

// FromJSON populates FhirEndpoint from JSON data
func (m *FhirEndpoint) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts FhirEndpoint to JSON data
func (m *FhirEndpoint) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of FhirEndpoint
func (m *FhirEndpoint) Clone() *FhirEndpoint {
	if m == nil { return nil }
	return &FhirEndpoint{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		ConnectionType: m.ConnectionType.Clone(),
		Name: m.Name.Clone(),
		ManagingOrganization: m.ManagingOrganization.Clone(),
		Contact: cloneSlices(m.Contact),
		Period: m.Period.Clone(),
		PayloadType: cloneSlices(m.PayloadType),
		PayloadMimeType: cloneSlices(m.PayloadMimeType),
		Address: m.Address.Clone(),
		Header: cloneSlices(m.Header),
	}
}

// Equals checks for equality with another FhirEndpoint instance
func (m *FhirEndpoint) Equals(other *FhirEndpoint) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.ConnectionType.Equals(other.ConnectionType) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.ManagingOrganization.Equals(other.ManagingOrganization) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !compareSlices(m.PayloadType, other.PayloadType) { return false }
	if !compareSlices(m.PayloadMimeType, other.PayloadMimeType) { return false }
	if !m.Address.Equals(other.Address) { return false }
	if !compareSlices(m.Header, other.Header) { return false }
	return true
}

