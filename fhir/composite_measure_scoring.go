// Code generated by FHIR Generator. DO NOT EDIT.
// The composite scoring method of the measure.
package fhir_r4b_go
// CompositeMeasureScoring represents the FHIR ValueSet as an enumeration
type CompositeMeasureScoring struct {
	Value   *string  `json:"value,omitempty"`
	Element *Element `json:"_value,omitempty"`
}

// Enum constants
const (
	CompositeMeasureScoring_Opportunity = "opportunity" // Opportunity: Opportunity scoring combines the scores from component measures by combining the numerators and denominators for each component.
	CompositeMeasureScoring_All_or_nothing = "all-or-nothing" // All-or-nothing: All-or-nothing scoring includes an individual in the numerator of the composite measure if they are in the numerators of all of the component measures in which they are in the denominator.
	CompositeMeasureScoring_Linear = "linear" // Linear: Linear scoring gives an individual a score based on the number of numerators in which they appear.
	CompositeMeasureScoring_Weighted = "weighted" // Weighted: Weighted scoring gives an individual a score based on a weighted factor for each component numerator in which they appear.
)

// Clone creates a deep copy of the enum
func (e CompositeMeasureScoring) Clone() *CompositeMeasureScoring {
	return &CompositeMeasureScoring{Value: e.Value, Element: e.Element.Clone()}
}

// Equals checks equality between two enums
func (e *CompositeMeasureScoring) Equals(other *CompositeMeasureScoring) bool {
	return e.Value == other.Value && e.Element.Equals(other.Element)
}

