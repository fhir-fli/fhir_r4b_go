// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// CodeableConcept
// A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
type CodeableConcept struct {
	DataType
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// coding
	// A reference to a code defined by a terminology system.
	Coding []Coding `json:"coding,omitempty"`
	// text
	// A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user.
	Text FhirString `json:"text,omitempty"`
}

// NewCodeableConcept creates a new CodeableConcept instance
func NewCodeableConcept(
	id FhirString,
	extension_ []FhirExtension,
	coding []Coding,
	text FhirString,
) *CodeableConcept {
	return &CodeableConcept{
		Id: id,
		Extension_: extension_,
		Coding: coding,
		Text: text,
	}
}
// FromJSON populates CodeableConcept from JSON data
func (m *CodeableConcept) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CodeableConcept to JSON data
func (m *CodeableConcept) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of CodeableConcept
func (m *CodeableConcept) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	coding *[]Coding,
	text *FhirString,
) *CodeableConcept {
	return &CodeableConcept{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		Coding: func() []Coding {
			if coding != nil { return *coding }
			return m.Coding
		}(),
		Text: func() FhirString {
			if text != nil { return *text }
			return m.Text
		}(),
	}
}
