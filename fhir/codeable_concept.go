// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// CodeableConcept
// A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
type CodeableConcept struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Coding []*Coding `json:"coding,omitempty"`
	Text *FhirString `json:"text,omitempty"`
}

// NewCodeableConcept creates a new CodeableConcept instance
func NewCodeableConcept() *CodeableConcept {
	return &CodeableConcept{}
}

// FromJSON populates CodeableConcept from JSON data
func (m *CodeableConcept) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CodeableConcept to JSON data
func (m *CodeableConcept) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of CodeableConcept
func (m *CodeableConcept) Clone() *CodeableConcept {
	if m == nil { return nil }
	return &CodeableConcept{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Coding: cloneSlices(m.Coding),
		Text: m.Text.Clone(),
	}
}

// Equals checks for equality with another CodeableConcept instance
func (m *CodeableConcept) Equals(other *CodeableConcept) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.Coding, other.Coding) { return false }
	if !m.Text.Equals(other.Text) { return false }
	return true
}

