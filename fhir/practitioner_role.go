// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// PractitionerRole
// A specific set of Roles/Locations/specialties/services that a practitioner may perform at an organization for a period of time.
type PractitionerRole struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Active *FhirBoolean `json:"active,omitempty"`
	Period *Period `json:"period,omitempty"`
	Practitioner *Reference `json:"practitioner,omitempty"`
	Organization *Reference `json:"organization,omitempty"`
	Code []*CodeableConcept `json:"code,omitempty"`
	Specialty []*CodeableConcept `json:"specialty,omitempty"`
	Location []*Reference `json:"location,omitempty"`
	HealthcareService []*Reference `json:"healthcareservice,omitempty"`
	Telecom []*ContactPoint `json:"telecom,omitempty"`
	AvailableTime []*PractitionerRoleAvailableTime `json:"availabletime,omitempty"`
	NotAvailable []*PractitionerRoleNotAvailable `json:"notavailable,omitempty"`
	AvailabilityExceptions *FhirString `json:"availabilityexceptions,omitempty"`
	Endpoint []*Reference `json:"endpoint,omitempty"`
}

// NewPractitionerRole creates a new PractitionerRole instance
func NewPractitionerRole() *PractitionerRole {
	return &PractitionerRole{}
}

// FromJSON populates PractitionerRole from JSON data
func (m *PractitionerRole) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PractitionerRole to JSON data
func (m *PractitionerRole) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of PractitionerRole
func (m *PractitionerRole) Clone() *PractitionerRole {
	if m == nil { return nil }
	return &PractitionerRole{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Active: m.Active.Clone(),
		Period: m.Period.Clone(),
		Practitioner: m.Practitioner.Clone(),
		Organization: m.Organization.Clone(),
		Code: cloneSlices(m.Code),
		Specialty: cloneSlices(m.Specialty),
		Location: cloneSlices(m.Location),
		HealthcareService: cloneSlices(m.HealthcareService),
		Telecom: cloneSlices(m.Telecom),
		AvailableTime: cloneSlices(m.AvailableTime),
		NotAvailable: cloneSlices(m.NotAvailable),
		AvailabilityExceptions: m.AvailabilityExceptions.Clone(),
		Endpoint: cloneSlices(m.Endpoint),
	}
}

// Equals checks for equality with another PractitionerRole instance
func (m *PractitionerRole) Equals(other *PractitionerRole) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Active.Equals(other.Active) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !m.Practitioner.Equals(other.Practitioner) { return false }
	if !m.Organization.Equals(other.Organization) { return false }
	if !compareSlices(m.Code, other.Code) { return false }
	if !compareSlices(m.Specialty, other.Specialty) { return false }
	if !compareSlices(m.Location, other.Location) { return false }
	if !compareSlices(m.HealthcareService, other.HealthcareService) { return false }
	if !compareSlices(m.Telecom, other.Telecom) { return false }
	if !compareSlices(m.AvailableTime, other.AvailableTime) { return false }
	if !compareSlices(m.NotAvailable, other.NotAvailable) { return false }
	if !m.AvailabilityExceptions.Equals(other.AvailabilityExceptions) { return false }
	if !compareSlices(m.Endpoint, other.Endpoint) { return false }
	return true
}

// PractitionerRoleAvailableTime
// A collection of times the practitioner is available or performing this role at the location and/or healthcareservice.
type PractitionerRoleAvailableTime struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	DaysOfWeek []*DaysOfWeek `json:"daysofweek,omitempty"`
	AllDay *FhirBoolean `json:"allday,omitempty"`
	AvailableStartTime *FhirTime `json:"availablestarttime,omitempty"`
	AvailableEndTime *FhirTime `json:"availableendtime,omitempty"`
}

// NewPractitionerRoleAvailableTime creates a new PractitionerRoleAvailableTime instance
func NewPractitionerRoleAvailableTime() *PractitionerRoleAvailableTime {
	return &PractitionerRoleAvailableTime{}
}

// FromJSON populates PractitionerRoleAvailableTime from JSON data
func (m *PractitionerRoleAvailableTime) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PractitionerRoleAvailableTime to JSON data
func (m *PractitionerRoleAvailableTime) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of PractitionerRoleAvailableTime
func (m *PractitionerRoleAvailableTime) Clone() *PractitionerRoleAvailableTime {
	if m == nil { return nil }
	return &PractitionerRoleAvailableTime{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		DaysOfWeek: cloneSlices(m.DaysOfWeek),
		AllDay: m.AllDay.Clone(),
		AvailableStartTime: m.AvailableStartTime.Clone(),
		AvailableEndTime: m.AvailableEndTime.Clone(),
	}
}

// Equals checks for equality with another PractitionerRoleAvailableTime instance
func (m *PractitionerRoleAvailableTime) Equals(other *PractitionerRoleAvailableTime) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.DaysOfWeek, other.DaysOfWeek) { return false }
	if !m.AllDay.Equals(other.AllDay) { return false }
	if !m.AvailableStartTime.Equals(other.AvailableStartTime) { return false }
	if !m.AvailableEndTime.Equals(other.AvailableEndTime) { return false }
	return true
}

// PractitionerRoleNotAvailable
// The practitioner is not available or performing this role during this period of time due to the provided reason.
type PractitionerRoleNotAvailable struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	During *Period `json:"during,omitempty"`
}

// NewPractitionerRoleNotAvailable creates a new PractitionerRoleNotAvailable instance
func NewPractitionerRoleNotAvailable() *PractitionerRoleNotAvailable {
	return &PractitionerRoleNotAvailable{}
}

// FromJSON populates PractitionerRoleNotAvailable from JSON data
func (m *PractitionerRoleNotAvailable) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PractitionerRoleNotAvailable to JSON data
func (m *PractitionerRoleNotAvailable) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of PractitionerRoleNotAvailable
func (m *PractitionerRoleNotAvailable) Clone() *PractitionerRoleNotAvailable {
	if m == nil { return nil }
	return &PractitionerRoleNotAvailable{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Description: m.Description.Clone(),
		During: m.During.Clone(),
	}
}

// Equals checks for equality with another PractitionerRoleNotAvailable instance
func (m *PractitionerRoleNotAvailable) Equals(other *PractitionerRoleNotAvailable) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.During.Equals(other.During) { return false }
	return true
}

