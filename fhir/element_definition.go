// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// ElementDefinition
// Captures constraints on each element within the resource, profile, or extension.
type ElementDefinition struct {
	BackboneType
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// modifierExtension
	// May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.
// 
// Modifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).
	ModifierExtension []FhirExtension `json:"modifierExtension,omitempty"`
	// path
	// The path identifies the element and is expressed as a "."-separated list of ancestor elements, beginning with the name of the resource or extension.
	Path FhirString `json:"path,omitempty"`
	// representation
	// Codes that define how this element is represented in instances, when the deviation varies from the normal case.
	Representation []PropertyRepresentation `json:"representation,omitempty"`
	// sliceName
	// The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element.
	SliceName FhirString `json:"sliceName,omitempty"`
	// sliceIsConstraining
	// If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.
	SliceIsConstraining FhirBoolean `json:"sliceIsConstraining,omitempty"`
	// label
	// A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form.
	Label FhirString `json:"label,omitempty"`
	// code
	// A code that has the same meaning as the element in a particular terminology.
	Code []Coding `json:"code,omitempty"`
	// slicing
	// Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
	Slicing ElementDefinitionSlicing `json:"slicing,omitempty"`
	// short
	// A concise description of what this element means (e.g. for use in autogenerated summaries).
	Short FhirString `json:"short,omitempty"`
	// definition
	// Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition).
	Definition FhirMarkdown `json:"definition,omitempty"`
	// comment
	// Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment).
	Comment FhirMarkdown `json:"comment,omitempty"`
	// requirements
	// This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element.
	Requirements FhirMarkdown `json:"requirements,omitempty"`
	// alias
	// Identifies additional names by which this element might also be known.
	Alias []FhirString `json:"alias,omitempty"`
	// min
	// The minimum number of times this element SHALL appear in the instance.
	Min FhirUnsignedInt `json:"min,omitempty"`
	// max
	// The maximum number of times this element is permitted to appear in the instance.
	Max FhirString `json:"max,omitempty"`
	// base
	// Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
	Base ElementDefinitionBase `json:"base,omitempty"`
	// contentReference
	// Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc.
	ContentReference FhirUri `json:"contentReference,omitempty"`
	// type
	// The data type or resource that the value of this element is permitted to be.
	Type_ []ElementDefinitionType `json:"type,omitempty"`
	// defaultValueBase64Binary
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueBase64Binary FhirBase64Binary `json:"defaultValueBase64Binary,omitempty"`
	// defaultValueBoolean
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueBoolean FhirBoolean `json:"defaultValueBoolean,omitempty"`
	// defaultValueCanonical
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueCanonical FhirCanonical `json:"defaultValueCanonical,omitempty"`
	// defaultValueCode
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueCode FhirCode `json:"defaultValueCode,omitempty"`
	// defaultValueDate
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueDate FhirDate `json:"defaultValueDate,omitempty"`
	// defaultValueDateTime
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueDateTime FhirDateTime `json:"defaultValueDateTime,omitempty"`
	// defaultValueDecimal
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueDecimal FhirDecimal `json:"defaultValueDecimal,omitempty"`
	// defaultValueId
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueId FhirId `json:"defaultValueId,omitempty"`
	// defaultValueInstant
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueInstant FhirInstant `json:"defaultValueInstant,omitempty"`
	// defaultValueInteger
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueInteger FhirInteger `json:"defaultValueInteger,omitempty"`
	// defaultValueMarkdown
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueMarkdown FhirMarkdown `json:"defaultValueMarkdown,omitempty"`
	// defaultValueOid
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueOid FhirOid `json:"defaultValueOid,omitempty"`
	// defaultValuePositiveInt
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValuePositiveInt FhirPositiveInt `json:"defaultValuePositiveInt,omitempty"`
	// defaultValueString
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueString FhirString `json:"defaultValueString,omitempty"`
	// defaultValueTime
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueTime FhirTime `json:"defaultValueTime,omitempty"`
	// defaultValueUnsignedInt
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueUnsignedInt FhirUnsignedInt `json:"defaultValueUnsignedInt,omitempty"`
	// defaultValueUri
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueUri FhirUri `json:"defaultValueUri,omitempty"`
	// defaultValueUrl
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueUrl FhirUrl `json:"defaultValueUrl,omitempty"`
	// defaultValueUuid
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueUuid FhirUuid `json:"defaultValueUuid,omitempty"`
	// defaultValueAddress
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueAddress Address `json:"defaultValueAddress,omitempty"`
	// defaultValueAge
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueAge Age `json:"defaultValueAge,omitempty"`
	// defaultValueAnnotation
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueAnnotation Annotation `json:"defaultValueAnnotation,omitempty"`
	// defaultValueAttachment
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueAttachment Attachment `json:"defaultValueAttachment,omitempty"`
	// defaultValueCodeableConcept
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueCodeableConcept CodeableConcept `json:"defaultValueCodeableConcept,omitempty"`
	// defaultValueCodeableReference
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueCodeableReference CodeableReference `json:"defaultValueCodeableReference,omitempty"`
	// defaultValueCoding
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueCoding Coding `json:"defaultValueCoding,omitempty"`
	// defaultValueContactPoint
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueContactPoint ContactPoint `json:"defaultValueContactPoint,omitempty"`
	// defaultValueCount
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueCount Count `json:"defaultValueCount,omitempty"`
	// defaultValueDistance
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueDistance Distance `json:"defaultValueDistance,omitempty"`
	// defaultValueDuration
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueDuration FhirDuration `json:"defaultValueDuration,omitempty"`
	// defaultValueHumanName
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueHumanName HumanName `json:"defaultValueHumanName,omitempty"`
	// defaultValueIdentifier
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueIdentifier Identifier `json:"defaultValueIdentifier,omitempty"`
	// defaultValueMoney
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueMoney Money `json:"defaultValueMoney,omitempty"`
	// defaultValuePeriod
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValuePeriod Period `json:"defaultValuePeriod,omitempty"`
	// defaultValueQuantity
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueQuantity Quantity `json:"defaultValueQuantity,omitempty"`
	// defaultValueRange
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueRange Range `json:"defaultValueRange,omitempty"`
	// defaultValueRatio
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueRatio Ratio `json:"defaultValueRatio,omitempty"`
	// defaultValueRatioRange
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueRatioRange RatioRange `json:"defaultValueRatioRange,omitempty"`
	// defaultValueReference
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueReference Reference `json:"defaultValueReference,omitempty"`
	// defaultValueSampledData
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueSampledData SampledData `json:"defaultValueSampledData,omitempty"`
	// defaultValueSignature
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueSignature Signature `json:"defaultValueSignature,omitempty"`
	// defaultValueTiming
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueTiming Timing `json:"defaultValueTiming,omitempty"`
	// defaultValueContactDetail
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueContactDetail ContactDetail `json:"defaultValueContactDetail,omitempty"`
	// defaultValueContributor
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueContributor Contributor `json:"defaultValueContributor,omitempty"`
	// defaultValueDataRequirement
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueDataRequirement DataRequirement `json:"defaultValueDataRequirement,omitempty"`
	// defaultValueExpression
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueExpression FhirExpression `json:"defaultValueExpression,omitempty"`
	// defaultValueParameterDefinition
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueParameterDefinition ParameterDefinition `json:"defaultValueParameterDefinition,omitempty"`
	// defaultValueRelatedArtifact
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueRelatedArtifact RelatedArtifact `json:"defaultValueRelatedArtifact,omitempty"`
	// defaultValueTriggerDefinition
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueTriggerDefinition TriggerDefinition `json:"defaultValueTriggerDefinition,omitempty"`
	// defaultValueUsageContext
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueUsageContext UsageContext `json:"defaultValueUsageContext,omitempty"`
	// defaultValueDosage
	// The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').
	DefaultValueDosage Dosage `json:"defaultValueDosage,omitempty"`
	// meaningWhenMissing
	// The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing').
	MeaningWhenMissing FhirMarkdown `json:"meaningWhenMissing,omitempty"`
	// orderMeaning
	// If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning.
	OrderMeaning FhirString `json:"orderMeaning,omitempty"`
	// fixedBase64Binary
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedBase64Binary FhirBase64Binary `json:"fixedBase64Binary,omitempty"`
	// fixedBoolean
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedBoolean FhirBoolean `json:"fixedBoolean,omitempty"`
	// fixedCanonical
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedCanonical FhirCanonical `json:"fixedCanonical,omitempty"`
	// fixedCode
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedCode FhirCode `json:"fixedCode,omitempty"`
	// fixedDate
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedDate FhirDate `json:"fixedDate,omitempty"`
	// fixedDateTime
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedDateTime FhirDateTime `json:"fixedDateTime,omitempty"`
	// fixedDecimal
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedDecimal FhirDecimal `json:"fixedDecimal,omitempty"`
	// fixedId
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedId FhirId `json:"fixedId,omitempty"`
	// fixedInstant
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedInstant FhirInstant `json:"fixedInstant,omitempty"`
	// fixedInteger
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedInteger FhirInteger `json:"fixedInteger,omitempty"`
	// fixedMarkdown
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedMarkdown FhirMarkdown `json:"fixedMarkdown,omitempty"`
	// fixedOid
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedOid FhirOid `json:"fixedOid,omitempty"`
	// fixedPositiveInt
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedPositiveInt FhirPositiveInt `json:"fixedPositiveInt,omitempty"`
	// fixedString
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedString FhirString `json:"fixedString,omitempty"`
	// fixedTime
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedTime FhirTime `json:"fixedTime,omitempty"`
	// fixedUnsignedInt
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedUnsignedInt FhirUnsignedInt `json:"fixedUnsignedInt,omitempty"`
	// fixedUri
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedUri FhirUri `json:"fixedUri,omitempty"`
	// fixedUrl
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedUrl FhirUrl `json:"fixedUrl,omitempty"`
	// fixedUuid
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedUuid FhirUuid `json:"fixedUuid,omitempty"`
	// fixedAddress
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedAddress Address `json:"fixedAddress,omitempty"`
	// fixedAge
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedAge Age `json:"fixedAge,omitempty"`
	// fixedAnnotation
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedAnnotation Annotation `json:"fixedAnnotation,omitempty"`
	// fixedAttachment
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedAttachment Attachment `json:"fixedAttachment,omitempty"`
	// fixedCodeableConcept
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedCodeableConcept CodeableConcept `json:"fixedCodeableConcept,omitempty"`
	// fixedCodeableReference
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedCodeableReference CodeableReference `json:"fixedCodeableReference,omitempty"`
	// fixedCoding
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedCoding Coding `json:"fixedCoding,omitempty"`
	// fixedContactPoint
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedContactPoint ContactPoint `json:"fixedContactPoint,omitempty"`
	// fixedCount
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedCount Count `json:"fixedCount,omitempty"`
	// fixedDistance
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedDistance Distance `json:"fixedDistance,omitempty"`
	// fixedDuration
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedDuration FhirDuration `json:"fixedDuration,omitempty"`
	// fixedHumanName
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedHumanName HumanName `json:"fixedHumanName,omitempty"`
	// fixedIdentifier
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedIdentifier Identifier `json:"fixedIdentifier,omitempty"`
	// fixedMoney
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedMoney Money `json:"fixedMoney,omitempty"`
	// fixedPeriod
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedPeriod Period `json:"fixedPeriod,omitempty"`
	// fixedQuantity
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedQuantity Quantity `json:"fixedQuantity,omitempty"`
	// fixedRange
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedRange Range `json:"fixedRange,omitempty"`
	// fixedRatio
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedRatio Ratio `json:"fixedRatio,omitempty"`
	// fixedRatioRange
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedRatioRange RatioRange `json:"fixedRatioRange,omitempty"`
	// fixedReference
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedReference Reference `json:"fixedReference,omitempty"`
	// fixedSampledData
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedSampledData SampledData `json:"fixedSampledData,omitempty"`
	// fixedSignature
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedSignature Signature `json:"fixedSignature,omitempty"`
	// fixedTiming
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedTiming Timing `json:"fixedTiming,omitempty"`
	// fixedContactDetail
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedContactDetail ContactDetail `json:"fixedContactDetail,omitempty"`
	// fixedContributor
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedContributor Contributor `json:"fixedContributor,omitempty"`
	// fixedDataRequirement
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedDataRequirement DataRequirement `json:"fixedDataRequirement,omitempty"`
	// fixedExpression
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedExpression FhirExpression `json:"fixedExpression,omitempty"`
	// fixedParameterDefinition
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedParameterDefinition ParameterDefinition `json:"fixedParameterDefinition,omitempty"`
	// fixedRelatedArtifact
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedRelatedArtifact RelatedArtifact `json:"fixedRelatedArtifact,omitempty"`
	// fixedTriggerDefinition
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedTriggerDefinition TriggerDefinition `json:"fixedTriggerDefinition,omitempty"`
	// fixedUsageContext
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedUsageContext UsageContext `json:"fixedUsageContext,omitempty"`
	// fixedDosage
	// Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.
	FixedDosage Dosage `json:"fixedDosage,omitempty"`
	// patternBase64Binary
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternBase64Binary FhirBase64Binary `json:"patternBase64Binary,omitempty"`
	// patternBoolean
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternBoolean FhirBoolean `json:"patternBoolean,omitempty"`
	// patternCanonical
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternCanonical FhirCanonical `json:"patternCanonical,omitempty"`
	// patternCode
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternCode FhirCode `json:"patternCode,omitempty"`
	// patternDate
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternDate FhirDate `json:"patternDate,omitempty"`
	// patternDateTime
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternDateTime FhirDateTime `json:"patternDateTime,omitempty"`
	// patternDecimal
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternDecimal FhirDecimal `json:"patternDecimal,omitempty"`
	// patternId
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternId FhirId `json:"patternId,omitempty"`
	// patternInstant
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternInstant FhirInstant `json:"patternInstant,omitempty"`
	// patternInteger
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternInteger FhirInteger `json:"patternInteger,omitempty"`
	// patternMarkdown
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternMarkdown FhirMarkdown `json:"patternMarkdown,omitempty"`
	// patternOid
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternOid FhirOid `json:"patternOid,omitempty"`
	// patternPositiveInt
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternPositiveInt FhirPositiveInt `json:"patternPositiveInt,omitempty"`
	// patternString
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternString FhirString `json:"patternString,omitempty"`
	// patternTime
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternTime FhirTime `json:"patternTime,omitempty"`
	// patternUnsignedInt
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternUnsignedInt FhirUnsignedInt `json:"patternUnsignedInt,omitempty"`
	// patternUri
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternUri FhirUri `json:"patternUri,omitempty"`
	// patternUrl
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternUrl FhirUrl `json:"patternUrl,omitempty"`
	// patternUuid
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternUuid FhirUuid `json:"patternUuid,omitempty"`
	// patternAddress
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternAddress Address `json:"patternAddress,omitempty"`
	// patternAge
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternAge Age `json:"patternAge,omitempty"`
	// patternAnnotation
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternAnnotation Annotation `json:"patternAnnotation,omitempty"`
	// patternAttachment
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternAttachment Attachment `json:"patternAttachment,omitempty"`
	// patternCodeableConcept
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternCodeableConcept CodeableConcept `json:"patternCodeableConcept,omitempty"`
	// patternCodeableReference
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternCodeableReference CodeableReference `json:"patternCodeableReference,omitempty"`
	// patternCoding
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternCoding Coding `json:"patternCoding,omitempty"`
	// patternContactPoint
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternContactPoint ContactPoint `json:"patternContactPoint,omitempty"`
	// patternCount
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternCount Count `json:"patternCount,omitempty"`
	// patternDistance
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternDistance Distance `json:"patternDistance,omitempty"`
	// patternDuration
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternDuration FhirDuration `json:"patternDuration,omitempty"`
	// patternHumanName
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternHumanName HumanName `json:"patternHumanName,omitempty"`
	// patternIdentifier
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternIdentifier Identifier `json:"patternIdentifier,omitempty"`
	// patternMoney
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternMoney Money `json:"patternMoney,omitempty"`
	// patternPeriod
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternPeriod Period `json:"patternPeriod,omitempty"`
	// patternQuantity
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternQuantity Quantity `json:"patternQuantity,omitempty"`
	// patternRange
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternRange Range `json:"patternRange,omitempty"`
	// patternRatio
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternRatio Ratio `json:"patternRatio,omitempty"`
	// patternRatioRange
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternRatioRange RatioRange `json:"patternRatioRange,omitempty"`
	// patternReference
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternReference Reference `json:"patternReference,omitempty"`
	// patternSampledData
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternSampledData SampledData `json:"patternSampledData,omitempty"`
	// patternSignature
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternSignature Signature `json:"patternSignature,omitempty"`
	// patternTiming
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternTiming Timing `json:"patternTiming,omitempty"`
	// patternContactDetail
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternContactDetail ContactDetail `json:"patternContactDetail,omitempty"`
	// patternContributor
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternContributor Contributor `json:"patternContributor,omitempty"`
	// patternDataRequirement
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternDataRequirement DataRequirement `json:"patternDataRequirement,omitempty"`
	// patternExpression
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternExpression FhirExpression `json:"patternExpression,omitempty"`
	// patternParameterDefinition
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternParameterDefinition ParameterDefinition `json:"patternParameterDefinition,omitempty"`
	// patternRelatedArtifact
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternRelatedArtifact RelatedArtifact `json:"patternRelatedArtifact,omitempty"`
	// patternTriggerDefinition
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternTriggerDefinition TriggerDefinition `json:"patternTriggerDefinition,omitempty"`
	// patternUsageContext
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternUsageContext UsageContext `json:"patternUsageContext,omitempty"`
	// patternDosage
	// Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  
// 
// When pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.
// 
// When pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.
// 
// When pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,
// 
// 1. If primitive: it must match exactly the pattern value
// 2. If a complex object: it must match (recursively) the pattern value
// 3. If an array: it must match (recursively) the pattern value.
	PatternDosage Dosage `json:"patternDosage,omitempty"`
	// example
	// A sample value for this element demonstrating the type of information that would typically be found in the element.
	Example []ElementDefinitionExample `json:"example,omitempty"`
	// minValueDate
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueDate FhirDate `json:"minValueDate,omitempty"`
	// minValueDateTime
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueDateTime FhirDateTime `json:"minValueDateTime,omitempty"`
	// minValueInstant
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueInstant FhirInstant `json:"minValueInstant,omitempty"`
	// minValueTime
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueTime FhirTime `json:"minValueTime,omitempty"`
	// minValueDecimal
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueDecimal FhirDecimal `json:"minValueDecimal,omitempty"`
	// minValueInteger
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueInteger FhirInteger `json:"minValueInteger,omitempty"`
	// minValuePositiveInt
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValuePositiveInt FhirPositiveInt `json:"minValuePositiveInt,omitempty"`
	// minValueUnsignedInt
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueUnsignedInt FhirUnsignedInt `json:"minValueUnsignedInt,omitempty"`
	// minValueQuantity
	// The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MinValueQuantity Quantity `json:"minValueQuantity,omitempty"`
	// maxValueDate
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueDate FhirDate `json:"maxValueDate,omitempty"`
	// maxValueDateTime
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueDateTime FhirDateTime `json:"maxValueDateTime,omitempty"`
	// maxValueInstant
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueInstant FhirInstant `json:"maxValueInstant,omitempty"`
	// maxValueTime
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueTime FhirTime `json:"maxValueTime,omitempty"`
	// maxValueDecimal
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueDecimal FhirDecimal `json:"maxValueDecimal,omitempty"`
	// maxValueInteger
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueInteger FhirInteger `json:"maxValueInteger,omitempty"`
	// maxValuePositiveInt
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValuePositiveInt FhirPositiveInt `json:"maxValuePositiveInt,omitempty"`
	// maxValueUnsignedInt
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueUnsignedInt FhirUnsignedInt `json:"maxValueUnsignedInt,omitempty"`
	// maxValueQuantity
	// The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.
	MaxValueQuantity Quantity `json:"maxValueQuantity,omitempty"`
	// maxLength
	// Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element.
	MaxLength FhirInteger `json:"maxLength,omitempty"`
	// condition
	// A reference to an invariant that may make additional statements about the cardinality or value in the instance.
	Condition []FhirId `json:"condition,omitempty"`
	// constraint
	// Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
	Constraint []ElementDefinitionConstraint `json:"constraint,omitempty"`
	// mustSupport
	// If true, implementations that produce or consume resources SHALL provide "support" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.
	MustSupport FhirBoolean `json:"mustSupport,omitempty"`
	// isModifier
	// If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.
	IsModifier FhirBoolean `json:"isModifier,omitempty"`
	// isModifierReason
	// Explains how that element affects the interpretation of the resource or element that contains it.
	IsModifierReason FhirString `json:"isModifierReason,omitempty"`
	// isSummary
	// Whether the element should be included if a client requests a search with the parameter _summary=true.
	IsSummary FhirBoolean `json:"isSummary,omitempty"`
	// binding
	// Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
	Binding ElementDefinitionBinding `json:"binding,omitempty"`
	// mapping
	// Identifies a concept from an external specification that roughly corresponds to this element.
	Mapping []ElementDefinitionMapping `json:"mapping,omitempty"`
}

// NewElementDefinition creates a new ElementDefinition instance
func NewElementDefinition(
	id FhirString,
	extension_ []FhirExtension,
	modifierExtension []FhirExtension,
	path FhirString,
	representation []PropertyRepresentation,
	sliceName FhirString,
	sliceIsConstraining FhirBoolean,
	label FhirString,
	code []Coding,
	slicing ElementDefinitionSlicing,
	short FhirString,
	definition FhirMarkdown,
	comment FhirMarkdown,
	requirements FhirMarkdown,
	alias []FhirString,
	min FhirUnsignedInt,
	max FhirString,
	base ElementDefinitionBase,
	contentReference FhirUri,
	type_ []ElementDefinitionType,
	defaultValueBase64Binary FhirBase64Binary,
	defaultValueBoolean FhirBoolean,
	defaultValueCanonical FhirCanonical,
	defaultValueCode FhirCode,
	defaultValueDate FhirDate,
	defaultValueDateTime FhirDateTime,
	defaultValueDecimal FhirDecimal,
	defaultValueId FhirId,
	defaultValueInstant FhirInstant,
	defaultValueInteger FhirInteger,
	defaultValueMarkdown FhirMarkdown,
	defaultValueOid FhirOid,
	defaultValuePositiveInt FhirPositiveInt,
	defaultValueString FhirString,
	defaultValueTime FhirTime,
	defaultValueUnsignedInt FhirUnsignedInt,
	defaultValueUri FhirUri,
	defaultValueUrl FhirUrl,
	defaultValueUuid FhirUuid,
	defaultValueAddress Address,
	defaultValueAge Age,
	defaultValueAnnotation Annotation,
	defaultValueAttachment Attachment,
	defaultValueCodeableConcept CodeableConcept,
	defaultValueCodeableReference CodeableReference,
	defaultValueCoding Coding,
	defaultValueContactPoint ContactPoint,
	defaultValueCount Count,
	defaultValueDistance Distance,
	defaultValueDuration FhirDuration,
	defaultValueHumanName HumanName,
	defaultValueIdentifier Identifier,
	defaultValueMoney Money,
	defaultValuePeriod Period,
	defaultValueQuantity Quantity,
	defaultValueRange Range,
	defaultValueRatio Ratio,
	defaultValueRatioRange RatioRange,
	defaultValueReference Reference,
	defaultValueSampledData SampledData,
	defaultValueSignature Signature,
	defaultValueTiming Timing,
	defaultValueContactDetail ContactDetail,
	defaultValueContributor Contributor,
	defaultValueDataRequirement DataRequirement,
	defaultValueExpression FhirExpression,
	defaultValueParameterDefinition ParameterDefinition,
	defaultValueRelatedArtifact RelatedArtifact,
	defaultValueTriggerDefinition TriggerDefinition,
	defaultValueUsageContext UsageContext,
	defaultValueDosage Dosage,
	meaningWhenMissing FhirMarkdown,
	orderMeaning FhirString,
	fixedBase64Binary FhirBase64Binary,
	fixedBoolean FhirBoolean,
	fixedCanonical FhirCanonical,
	fixedCode FhirCode,
	fixedDate FhirDate,
	fixedDateTime FhirDateTime,
	fixedDecimal FhirDecimal,
	fixedId FhirId,
	fixedInstant FhirInstant,
	fixedInteger FhirInteger,
	fixedMarkdown FhirMarkdown,
	fixedOid FhirOid,
	fixedPositiveInt FhirPositiveInt,
	fixedString FhirString,
	fixedTime FhirTime,
	fixedUnsignedInt FhirUnsignedInt,
	fixedUri FhirUri,
	fixedUrl FhirUrl,
	fixedUuid FhirUuid,
	fixedAddress Address,
	fixedAge Age,
	fixedAnnotation Annotation,
	fixedAttachment Attachment,
	fixedCodeableConcept CodeableConcept,
	fixedCodeableReference CodeableReference,
	fixedCoding Coding,
	fixedContactPoint ContactPoint,
	fixedCount Count,
	fixedDistance Distance,
	fixedDuration FhirDuration,
	fixedHumanName HumanName,
	fixedIdentifier Identifier,
	fixedMoney Money,
	fixedPeriod Period,
	fixedQuantity Quantity,
	fixedRange Range,
	fixedRatio Ratio,
	fixedRatioRange RatioRange,
	fixedReference Reference,
	fixedSampledData SampledData,
	fixedSignature Signature,
	fixedTiming Timing,
	fixedContactDetail ContactDetail,
	fixedContributor Contributor,
	fixedDataRequirement DataRequirement,
	fixedExpression FhirExpression,
	fixedParameterDefinition ParameterDefinition,
	fixedRelatedArtifact RelatedArtifact,
	fixedTriggerDefinition TriggerDefinition,
	fixedUsageContext UsageContext,
	fixedDosage Dosage,
	patternBase64Binary FhirBase64Binary,
	patternBoolean FhirBoolean,
	patternCanonical FhirCanonical,
	patternCode FhirCode,
	patternDate FhirDate,
	patternDateTime FhirDateTime,
	patternDecimal FhirDecimal,
	patternId FhirId,
	patternInstant FhirInstant,
	patternInteger FhirInteger,
	patternMarkdown FhirMarkdown,
	patternOid FhirOid,
	patternPositiveInt FhirPositiveInt,
	patternString FhirString,
	patternTime FhirTime,
	patternUnsignedInt FhirUnsignedInt,
	patternUri FhirUri,
	patternUrl FhirUrl,
	patternUuid FhirUuid,
	patternAddress Address,
	patternAge Age,
	patternAnnotation Annotation,
	patternAttachment Attachment,
	patternCodeableConcept CodeableConcept,
	patternCodeableReference CodeableReference,
	patternCoding Coding,
	patternContactPoint ContactPoint,
	patternCount Count,
	patternDistance Distance,
	patternDuration FhirDuration,
	patternHumanName HumanName,
	patternIdentifier Identifier,
	patternMoney Money,
	patternPeriod Period,
	patternQuantity Quantity,
	patternRange Range,
	patternRatio Ratio,
	patternRatioRange RatioRange,
	patternReference Reference,
	patternSampledData SampledData,
	patternSignature Signature,
	patternTiming Timing,
	patternContactDetail ContactDetail,
	patternContributor Contributor,
	patternDataRequirement DataRequirement,
	patternExpression FhirExpression,
	patternParameterDefinition ParameterDefinition,
	patternRelatedArtifact RelatedArtifact,
	patternTriggerDefinition TriggerDefinition,
	patternUsageContext UsageContext,
	patternDosage Dosage,
	example []ElementDefinitionExample,
	minValueDate FhirDate,
	minValueDateTime FhirDateTime,
	minValueInstant FhirInstant,
	minValueTime FhirTime,
	minValueDecimal FhirDecimal,
	minValueInteger FhirInteger,
	minValuePositiveInt FhirPositiveInt,
	minValueUnsignedInt FhirUnsignedInt,
	minValueQuantity Quantity,
	maxValueDate FhirDate,
	maxValueDateTime FhirDateTime,
	maxValueInstant FhirInstant,
	maxValueTime FhirTime,
	maxValueDecimal FhirDecimal,
	maxValueInteger FhirInteger,
	maxValuePositiveInt FhirPositiveInt,
	maxValueUnsignedInt FhirUnsignedInt,
	maxValueQuantity Quantity,
	maxLength FhirInteger,
	condition []FhirId,
	constraint []ElementDefinitionConstraint,
	mustSupport FhirBoolean,
	isModifier FhirBoolean,
	isModifierReason FhirString,
	isSummary FhirBoolean,
	binding ElementDefinitionBinding,
	mapping []ElementDefinitionMapping,
) *ElementDefinition {
	return &ElementDefinition{
		Id: id,
		Extension_: extension_,
		ModifierExtension: modifierExtension,
		Path: path,
		Representation: representation,
		SliceName: sliceName,
		SliceIsConstraining: sliceIsConstraining,
		Label: label,
		Code: code,
		Slicing: slicing,
		Short: short,
		Definition: definition,
		Comment: comment,
		Requirements: requirements,
		Alias: alias,
		Min: min,
		Max: max,
		Base: base,
		ContentReference: contentReference,
		Type_: type_,
		DefaultValueBase64Binary: defaultValueBase64Binary,
		DefaultValueBoolean: defaultValueBoolean,
		DefaultValueCanonical: defaultValueCanonical,
		DefaultValueCode: defaultValueCode,
		DefaultValueDate: defaultValueDate,
		DefaultValueDateTime: defaultValueDateTime,
		DefaultValueDecimal: defaultValueDecimal,
		DefaultValueId: defaultValueId,
		DefaultValueInstant: defaultValueInstant,
		DefaultValueInteger: defaultValueInteger,
		DefaultValueMarkdown: defaultValueMarkdown,
		DefaultValueOid: defaultValueOid,
		DefaultValuePositiveInt: defaultValuePositiveInt,
		DefaultValueString: defaultValueString,
		DefaultValueTime: defaultValueTime,
		DefaultValueUnsignedInt: defaultValueUnsignedInt,
		DefaultValueUri: defaultValueUri,
		DefaultValueUrl: defaultValueUrl,
		DefaultValueUuid: defaultValueUuid,
		DefaultValueAddress: defaultValueAddress,
		DefaultValueAge: defaultValueAge,
		DefaultValueAnnotation: defaultValueAnnotation,
		DefaultValueAttachment: defaultValueAttachment,
		DefaultValueCodeableConcept: defaultValueCodeableConcept,
		DefaultValueCodeableReference: defaultValueCodeableReference,
		DefaultValueCoding: defaultValueCoding,
		DefaultValueContactPoint: defaultValueContactPoint,
		DefaultValueCount: defaultValueCount,
		DefaultValueDistance: defaultValueDistance,
		DefaultValueDuration: defaultValueDuration,
		DefaultValueHumanName: defaultValueHumanName,
		DefaultValueIdentifier: defaultValueIdentifier,
		DefaultValueMoney: defaultValueMoney,
		DefaultValuePeriod: defaultValuePeriod,
		DefaultValueQuantity: defaultValueQuantity,
		DefaultValueRange: defaultValueRange,
		DefaultValueRatio: defaultValueRatio,
		DefaultValueRatioRange: defaultValueRatioRange,
		DefaultValueReference: defaultValueReference,
		DefaultValueSampledData: defaultValueSampledData,
		DefaultValueSignature: defaultValueSignature,
		DefaultValueTiming: defaultValueTiming,
		DefaultValueContactDetail: defaultValueContactDetail,
		DefaultValueContributor: defaultValueContributor,
		DefaultValueDataRequirement: defaultValueDataRequirement,
		DefaultValueExpression: defaultValueExpression,
		DefaultValueParameterDefinition: defaultValueParameterDefinition,
		DefaultValueRelatedArtifact: defaultValueRelatedArtifact,
		DefaultValueTriggerDefinition: defaultValueTriggerDefinition,
		DefaultValueUsageContext: defaultValueUsageContext,
		DefaultValueDosage: defaultValueDosage,
		MeaningWhenMissing: meaningWhenMissing,
		OrderMeaning: orderMeaning,
		FixedBase64Binary: fixedBase64Binary,
		FixedBoolean: fixedBoolean,
		FixedCanonical: fixedCanonical,
		FixedCode: fixedCode,
		FixedDate: fixedDate,
		FixedDateTime: fixedDateTime,
		FixedDecimal: fixedDecimal,
		FixedId: fixedId,
		FixedInstant: fixedInstant,
		FixedInteger: fixedInteger,
		FixedMarkdown: fixedMarkdown,
		FixedOid: fixedOid,
		FixedPositiveInt: fixedPositiveInt,
		FixedString: fixedString,
		FixedTime: fixedTime,
		FixedUnsignedInt: fixedUnsignedInt,
		FixedUri: fixedUri,
		FixedUrl: fixedUrl,
		FixedUuid: fixedUuid,
		FixedAddress: fixedAddress,
		FixedAge: fixedAge,
		FixedAnnotation: fixedAnnotation,
		FixedAttachment: fixedAttachment,
		FixedCodeableConcept: fixedCodeableConcept,
		FixedCodeableReference: fixedCodeableReference,
		FixedCoding: fixedCoding,
		FixedContactPoint: fixedContactPoint,
		FixedCount: fixedCount,
		FixedDistance: fixedDistance,
		FixedDuration: fixedDuration,
		FixedHumanName: fixedHumanName,
		FixedIdentifier: fixedIdentifier,
		FixedMoney: fixedMoney,
		FixedPeriod: fixedPeriod,
		FixedQuantity: fixedQuantity,
		FixedRange: fixedRange,
		FixedRatio: fixedRatio,
		FixedRatioRange: fixedRatioRange,
		FixedReference: fixedReference,
		FixedSampledData: fixedSampledData,
		FixedSignature: fixedSignature,
		FixedTiming: fixedTiming,
		FixedContactDetail: fixedContactDetail,
		FixedContributor: fixedContributor,
		FixedDataRequirement: fixedDataRequirement,
		FixedExpression: fixedExpression,
		FixedParameterDefinition: fixedParameterDefinition,
		FixedRelatedArtifact: fixedRelatedArtifact,
		FixedTriggerDefinition: fixedTriggerDefinition,
		FixedUsageContext: fixedUsageContext,
		FixedDosage: fixedDosage,
		PatternBase64Binary: patternBase64Binary,
		PatternBoolean: patternBoolean,
		PatternCanonical: patternCanonical,
		PatternCode: patternCode,
		PatternDate: patternDate,
		PatternDateTime: patternDateTime,
		PatternDecimal: patternDecimal,
		PatternId: patternId,
		PatternInstant: patternInstant,
		PatternInteger: patternInteger,
		PatternMarkdown: patternMarkdown,
		PatternOid: patternOid,
		PatternPositiveInt: patternPositiveInt,
		PatternString: patternString,
		PatternTime: patternTime,
		PatternUnsignedInt: patternUnsignedInt,
		PatternUri: patternUri,
		PatternUrl: patternUrl,
		PatternUuid: patternUuid,
		PatternAddress: patternAddress,
		PatternAge: patternAge,
		PatternAnnotation: patternAnnotation,
		PatternAttachment: patternAttachment,
		PatternCodeableConcept: patternCodeableConcept,
		PatternCodeableReference: patternCodeableReference,
		PatternCoding: patternCoding,
		PatternContactPoint: patternContactPoint,
		PatternCount: patternCount,
		PatternDistance: patternDistance,
		PatternDuration: patternDuration,
		PatternHumanName: patternHumanName,
		PatternIdentifier: patternIdentifier,
		PatternMoney: patternMoney,
		PatternPeriod: patternPeriod,
		PatternQuantity: patternQuantity,
		PatternRange: patternRange,
		PatternRatio: patternRatio,
		PatternRatioRange: patternRatioRange,
		PatternReference: patternReference,
		PatternSampledData: patternSampledData,
		PatternSignature: patternSignature,
		PatternTiming: patternTiming,
		PatternContactDetail: patternContactDetail,
		PatternContributor: patternContributor,
		PatternDataRequirement: patternDataRequirement,
		PatternExpression: patternExpression,
		PatternParameterDefinition: patternParameterDefinition,
		PatternRelatedArtifact: patternRelatedArtifact,
		PatternTriggerDefinition: patternTriggerDefinition,
		PatternUsageContext: patternUsageContext,
		PatternDosage: patternDosage,
		Example: example,
		MinValueDate: minValueDate,
		MinValueDateTime: minValueDateTime,
		MinValueInstant: minValueInstant,
		MinValueTime: minValueTime,
		MinValueDecimal: minValueDecimal,
		MinValueInteger: minValueInteger,
		MinValuePositiveInt: minValuePositiveInt,
		MinValueUnsignedInt: minValueUnsignedInt,
		MinValueQuantity: minValueQuantity,
		MaxValueDate: maxValueDate,
		MaxValueDateTime: maxValueDateTime,
		MaxValueInstant: maxValueInstant,
		MaxValueTime: maxValueTime,
		MaxValueDecimal: maxValueDecimal,
		MaxValueInteger: maxValueInteger,
		MaxValuePositiveInt: maxValuePositiveInt,
		MaxValueUnsignedInt: maxValueUnsignedInt,
		MaxValueQuantity: maxValueQuantity,
		MaxLength: maxLength,
		Condition: condition,
		Constraint: constraint,
		MustSupport: mustSupport,
		IsModifier: isModifier,
		IsModifierReason: isModifierReason,
		IsSummary: isSummary,
		Binding: binding,
		Mapping: mapping,
	}
}
// FromJSON populates ElementDefinition from JSON data
func (m *ElementDefinition) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ElementDefinition to JSON data
func (m *ElementDefinition) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ElementDefinition
func (m *ElementDefinition) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	modifierExtension *[]FhirExtension,
	path *FhirString,
	representation *[]PropertyRepresentation,
	sliceName *FhirString,
	sliceIsConstraining *FhirBoolean,
	label *FhirString,
	code *[]Coding,
	slicing *ElementDefinitionSlicing,
	short *FhirString,
	definition *FhirMarkdown,
	comment *FhirMarkdown,
	requirements *FhirMarkdown,
	alias *[]FhirString,
	min *FhirUnsignedInt,
	max *FhirString,
	base *ElementDefinitionBase,
	contentReference *FhirUri,
	type_ *[]ElementDefinitionType,
	defaultValueBase64Binary *FhirBase64Binary,
	defaultValueBoolean *FhirBoolean,
	defaultValueCanonical *FhirCanonical,
	defaultValueCode *FhirCode,
	defaultValueDate *FhirDate,
	defaultValueDateTime *FhirDateTime,
	defaultValueDecimal *FhirDecimal,
	defaultValueId *FhirId,
	defaultValueInstant *FhirInstant,
	defaultValueInteger *FhirInteger,
	defaultValueMarkdown *FhirMarkdown,
	defaultValueOid *FhirOid,
	defaultValuePositiveInt *FhirPositiveInt,
	defaultValueString *FhirString,
	defaultValueTime *FhirTime,
	defaultValueUnsignedInt *FhirUnsignedInt,
	defaultValueUri *FhirUri,
	defaultValueUrl *FhirUrl,
	defaultValueUuid *FhirUuid,
	defaultValueAddress *Address,
	defaultValueAge *Age,
	defaultValueAnnotation *Annotation,
	defaultValueAttachment *Attachment,
	defaultValueCodeableConcept *CodeableConcept,
	defaultValueCodeableReference *CodeableReference,
	defaultValueCoding *Coding,
	defaultValueContactPoint *ContactPoint,
	defaultValueCount *Count,
	defaultValueDistance *Distance,
	defaultValueDuration *FhirDuration,
	defaultValueHumanName *HumanName,
	defaultValueIdentifier *Identifier,
	defaultValueMoney *Money,
	defaultValuePeriod *Period,
	defaultValueQuantity *Quantity,
	defaultValueRange *Range,
	defaultValueRatio *Ratio,
	defaultValueRatioRange *RatioRange,
	defaultValueReference *Reference,
	defaultValueSampledData *SampledData,
	defaultValueSignature *Signature,
	defaultValueTiming *Timing,
	defaultValueContactDetail *ContactDetail,
	defaultValueContributor *Contributor,
	defaultValueDataRequirement *DataRequirement,
	defaultValueExpression *FhirExpression,
	defaultValueParameterDefinition *ParameterDefinition,
	defaultValueRelatedArtifact *RelatedArtifact,
	defaultValueTriggerDefinition *TriggerDefinition,
	defaultValueUsageContext *UsageContext,
	defaultValueDosage *Dosage,
	meaningWhenMissing *FhirMarkdown,
	orderMeaning *FhirString,
	fixedBase64Binary *FhirBase64Binary,
	fixedBoolean *FhirBoolean,
	fixedCanonical *FhirCanonical,
	fixedCode *FhirCode,
	fixedDate *FhirDate,
	fixedDateTime *FhirDateTime,
	fixedDecimal *FhirDecimal,
	fixedId *FhirId,
	fixedInstant *FhirInstant,
	fixedInteger *FhirInteger,
	fixedMarkdown *FhirMarkdown,
	fixedOid *FhirOid,
	fixedPositiveInt *FhirPositiveInt,
	fixedString *FhirString,
	fixedTime *FhirTime,
	fixedUnsignedInt *FhirUnsignedInt,
	fixedUri *FhirUri,
	fixedUrl *FhirUrl,
	fixedUuid *FhirUuid,
	fixedAddress *Address,
	fixedAge *Age,
	fixedAnnotation *Annotation,
	fixedAttachment *Attachment,
	fixedCodeableConcept *CodeableConcept,
	fixedCodeableReference *CodeableReference,
	fixedCoding *Coding,
	fixedContactPoint *ContactPoint,
	fixedCount *Count,
	fixedDistance *Distance,
	fixedDuration *FhirDuration,
	fixedHumanName *HumanName,
	fixedIdentifier *Identifier,
	fixedMoney *Money,
	fixedPeriod *Period,
	fixedQuantity *Quantity,
	fixedRange *Range,
	fixedRatio *Ratio,
	fixedRatioRange *RatioRange,
	fixedReference *Reference,
	fixedSampledData *SampledData,
	fixedSignature *Signature,
	fixedTiming *Timing,
	fixedContactDetail *ContactDetail,
	fixedContributor *Contributor,
	fixedDataRequirement *DataRequirement,
	fixedExpression *FhirExpression,
	fixedParameterDefinition *ParameterDefinition,
	fixedRelatedArtifact *RelatedArtifact,
	fixedTriggerDefinition *TriggerDefinition,
	fixedUsageContext *UsageContext,
	fixedDosage *Dosage,
	patternBase64Binary *FhirBase64Binary,
	patternBoolean *FhirBoolean,
	patternCanonical *FhirCanonical,
	patternCode *FhirCode,
	patternDate *FhirDate,
	patternDateTime *FhirDateTime,
	patternDecimal *FhirDecimal,
	patternId *FhirId,
	patternInstant *FhirInstant,
	patternInteger *FhirInteger,
	patternMarkdown *FhirMarkdown,
	patternOid *FhirOid,
	patternPositiveInt *FhirPositiveInt,
	patternString *FhirString,
	patternTime *FhirTime,
	patternUnsignedInt *FhirUnsignedInt,
	patternUri *FhirUri,
	patternUrl *FhirUrl,
	patternUuid *FhirUuid,
	patternAddress *Address,
	patternAge *Age,
	patternAnnotation *Annotation,
	patternAttachment *Attachment,
	patternCodeableConcept *CodeableConcept,
	patternCodeableReference *CodeableReference,
	patternCoding *Coding,
	patternContactPoint *ContactPoint,
	patternCount *Count,
	patternDistance *Distance,
	patternDuration *FhirDuration,
	patternHumanName *HumanName,
	patternIdentifier *Identifier,
	patternMoney *Money,
	patternPeriod *Period,
	patternQuantity *Quantity,
	patternRange *Range,
	patternRatio *Ratio,
	patternRatioRange *RatioRange,
	patternReference *Reference,
	patternSampledData *SampledData,
	patternSignature *Signature,
	patternTiming *Timing,
	patternContactDetail *ContactDetail,
	patternContributor *Contributor,
	patternDataRequirement *DataRequirement,
	patternExpression *FhirExpression,
	patternParameterDefinition *ParameterDefinition,
	patternRelatedArtifact *RelatedArtifact,
	patternTriggerDefinition *TriggerDefinition,
	patternUsageContext *UsageContext,
	patternDosage *Dosage,
	example *[]ElementDefinitionExample,
	minValueDate *FhirDate,
	minValueDateTime *FhirDateTime,
	minValueInstant *FhirInstant,
	minValueTime *FhirTime,
	minValueDecimal *FhirDecimal,
	minValueInteger *FhirInteger,
	minValuePositiveInt *FhirPositiveInt,
	minValueUnsignedInt *FhirUnsignedInt,
	minValueQuantity *Quantity,
	maxValueDate *FhirDate,
	maxValueDateTime *FhirDateTime,
	maxValueInstant *FhirInstant,
	maxValueTime *FhirTime,
	maxValueDecimal *FhirDecimal,
	maxValueInteger *FhirInteger,
	maxValuePositiveInt *FhirPositiveInt,
	maxValueUnsignedInt *FhirUnsignedInt,
	maxValueQuantity *Quantity,
	maxLength *FhirInteger,
	condition *[]FhirId,
	constraint *[]ElementDefinitionConstraint,
	mustSupport *FhirBoolean,
	isModifier *FhirBoolean,
	isModifierReason *FhirString,
	isSummary *FhirBoolean,
	binding *ElementDefinitionBinding,
	mapping *[]ElementDefinitionMapping,
) *ElementDefinition {
	return &ElementDefinition{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		ModifierExtension: func() []FhirExtension {
			if modifierExtension != nil { return *modifierExtension }
			return m.ModifierExtension
		}(),
		Path: func() FhirString {
			if path != nil { return *path }
			return m.Path
		}(),
		Representation: func() []PropertyRepresentation {
			if representation != nil { return *representation }
			return m.Representation
		}(),
		SliceName: func() FhirString {
			if sliceName != nil { return *sliceName }
			return m.SliceName
		}(),
		SliceIsConstraining: func() FhirBoolean {
			if sliceIsConstraining != nil { return *sliceIsConstraining }
			return m.SliceIsConstraining
		}(),
		Label: func() FhirString {
			if label != nil { return *label }
			return m.Label
		}(),
		Code: func() []Coding {
			if code != nil { return *code }
			return m.Code
		}(),
		Slicing: func() ElementDefinitionSlicing {
			if slicing != nil { return *slicing }
			return m.Slicing
		}(),
		Short: func() FhirString {
			if short != nil { return *short }
			return m.Short
		}(),
		Definition: func() FhirMarkdown {
			if definition != nil { return *definition }
			return m.Definition
		}(),
		Comment: func() FhirMarkdown {
			if comment != nil { return *comment }
			return m.Comment
		}(),
		Requirements: func() FhirMarkdown {
			if requirements != nil { return *requirements }
			return m.Requirements
		}(),
		Alias: func() []FhirString {
			if alias != nil { return *alias }
			return m.Alias
		}(),
		Min: func() FhirUnsignedInt {
			if min != nil { return *min }
			return m.Min
		}(),
		Max: func() FhirString {
			if max != nil { return *max }
			return m.Max
		}(),
		Base: func() ElementDefinitionBase {
			if base != nil { return *base }
			return m.Base
		}(),
		ContentReference: func() FhirUri {
			if contentReference != nil { return *contentReference }
			return m.ContentReference
		}(),
		Type_: func() []ElementDefinitionType {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		DefaultValueBase64Binary: func() FhirBase64Binary {
			if defaultValueBase64Binary != nil { return *defaultValueBase64Binary }
			return m.DefaultValueBase64Binary
		}(),
		DefaultValueBoolean: func() FhirBoolean {
			if defaultValueBoolean != nil { return *defaultValueBoolean }
			return m.DefaultValueBoolean
		}(),
		DefaultValueCanonical: func() FhirCanonical {
			if defaultValueCanonical != nil { return *defaultValueCanonical }
			return m.DefaultValueCanonical
		}(),
		DefaultValueCode: func() FhirCode {
			if defaultValueCode != nil { return *defaultValueCode }
			return m.DefaultValueCode
		}(),
		DefaultValueDate: func() FhirDate {
			if defaultValueDate != nil { return *defaultValueDate }
			return m.DefaultValueDate
		}(),
		DefaultValueDateTime: func() FhirDateTime {
			if defaultValueDateTime != nil { return *defaultValueDateTime }
			return m.DefaultValueDateTime
		}(),
		DefaultValueDecimal: func() FhirDecimal {
			if defaultValueDecimal != nil { return *defaultValueDecimal }
			return m.DefaultValueDecimal
		}(),
		DefaultValueId: func() FhirId {
			if defaultValueId != nil { return *defaultValueId }
			return m.DefaultValueId
		}(),
		DefaultValueInstant: func() FhirInstant {
			if defaultValueInstant != nil { return *defaultValueInstant }
			return m.DefaultValueInstant
		}(),
		DefaultValueInteger: func() FhirInteger {
			if defaultValueInteger != nil { return *defaultValueInteger }
			return m.DefaultValueInteger
		}(),
		DefaultValueMarkdown: func() FhirMarkdown {
			if defaultValueMarkdown != nil { return *defaultValueMarkdown }
			return m.DefaultValueMarkdown
		}(),
		DefaultValueOid: func() FhirOid {
			if defaultValueOid != nil { return *defaultValueOid }
			return m.DefaultValueOid
		}(),
		DefaultValuePositiveInt: func() FhirPositiveInt {
			if defaultValuePositiveInt != nil { return *defaultValuePositiveInt }
			return m.DefaultValuePositiveInt
		}(),
		DefaultValueString: func() FhirString {
			if defaultValueString != nil { return *defaultValueString }
			return m.DefaultValueString
		}(),
		DefaultValueTime: func() FhirTime {
			if defaultValueTime != nil { return *defaultValueTime }
			return m.DefaultValueTime
		}(),
		DefaultValueUnsignedInt: func() FhirUnsignedInt {
			if defaultValueUnsignedInt != nil { return *defaultValueUnsignedInt }
			return m.DefaultValueUnsignedInt
		}(),
		DefaultValueUri: func() FhirUri {
			if defaultValueUri != nil { return *defaultValueUri }
			return m.DefaultValueUri
		}(),
		DefaultValueUrl: func() FhirUrl {
			if defaultValueUrl != nil { return *defaultValueUrl }
			return m.DefaultValueUrl
		}(),
		DefaultValueUuid: func() FhirUuid {
			if defaultValueUuid != nil { return *defaultValueUuid }
			return m.DefaultValueUuid
		}(),
		DefaultValueAddress: func() Address {
			if defaultValueAddress != nil { return *defaultValueAddress }
			return m.DefaultValueAddress
		}(),
		DefaultValueAge: func() Age {
			if defaultValueAge != nil { return *defaultValueAge }
			return m.DefaultValueAge
		}(),
		DefaultValueAnnotation: func() Annotation {
			if defaultValueAnnotation != nil { return *defaultValueAnnotation }
			return m.DefaultValueAnnotation
		}(),
		DefaultValueAttachment: func() Attachment {
			if defaultValueAttachment != nil { return *defaultValueAttachment }
			return m.DefaultValueAttachment
		}(),
		DefaultValueCodeableConcept: func() CodeableConcept {
			if defaultValueCodeableConcept != nil { return *defaultValueCodeableConcept }
			return m.DefaultValueCodeableConcept
		}(),
		DefaultValueCodeableReference: func() CodeableReference {
			if defaultValueCodeableReference != nil { return *defaultValueCodeableReference }
			return m.DefaultValueCodeableReference
		}(),
		DefaultValueCoding: func() Coding {
			if defaultValueCoding != nil { return *defaultValueCoding }
			return m.DefaultValueCoding
		}(),
		DefaultValueContactPoint: func() ContactPoint {
			if defaultValueContactPoint != nil { return *defaultValueContactPoint }
			return m.DefaultValueContactPoint
		}(),
		DefaultValueCount: func() Count {
			if defaultValueCount != nil { return *defaultValueCount }
			return m.DefaultValueCount
		}(),
		DefaultValueDistance: func() Distance {
			if defaultValueDistance != nil { return *defaultValueDistance }
			return m.DefaultValueDistance
		}(),
		DefaultValueDuration: func() FhirDuration {
			if defaultValueDuration != nil { return *defaultValueDuration }
			return m.DefaultValueDuration
		}(),
		DefaultValueHumanName: func() HumanName {
			if defaultValueHumanName != nil { return *defaultValueHumanName }
			return m.DefaultValueHumanName
		}(),
		DefaultValueIdentifier: func() Identifier {
			if defaultValueIdentifier != nil { return *defaultValueIdentifier }
			return m.DefaultValueIdentifier
		}(),
		DefaultValueMoney: func() Money {
			if defaultValueMoney != nil { return *defaultValueMoney }
			return m.DefaultValueMoney
		}(),
		DefaultValuePeriod: func() Period {
			if defaultValuePeriod != nil { return *defaultValuePeriod }
			return m.DefaultValuePeriod
		}(),
		DefaultValueQuantity: func() Quantity {
			if defaultValueQuantity != nil { return *defaultValueQuantity }
			return m.DefaultValueQuantity
		}(),
		DefaultValueRange: func() Range {
			if defaultValueRange != nil { return *defaultValueRange }
			return m.DefaultValueRange
		}(),
		DefaultValueRatio: func() Ratio {
			if defaultValueRatio != nil { return *defaultValueRatio }
			return m.DefaultValueRatio
		}(),
		DefaultValueRatioRange: func() RatioRange {
			if defaultValueRatioRange != nil { return *defaultValueRatioRange }
			return m.DefaultValueRatioRange
		}(),
		DefaultValueReference: func() Reference {
			if defaultValueReference != nil { return *defaultValueReference }
			return m.DefaultValueReference
		}(),
		DefaultValueSampledData: func() SampledData {
			if defaultValueSampledData != nil { return *defaultValueSampledData }
			return m.DefaultValueSampledData
		}(),
		DefaultValueSignature: func() Signature {
			if defaultValueSignature != nil { return *defaultValueSignature }
			return m.DefaultValueSignature
		}(),
		DefaultValueTiming: func() Timing {
			if defaultValueTiming != nil { return *defaultValueTiming }
			return m.DefaultValueTiming
		}(),
		DefaultValueContactDetail: func() ContactDetail {
			if defaultValueContactDetail != nil { return *defaultValueContactDetail }
			return m.DefaultValueContactDetail
		}(),
		DefaultValueContributor: func() Contributor {
			if defaultValueContributor != nil { return *defaultValueContributor }
			return m.DefaultValueContributor
		}(),
		DefaultValueDataRequirement: func() DataRequirement {
			if defaultValueDataRequirement != nil { return *defaultValueDataRequirement }
			return m.DefaultValueDataRequirement
		}(),
		DefaultValueExpression: func() FhirExpression {
			if defaultValueExpression != nil { return *defaultValueExpression }
			return m.DefaultValueExpression
		}(),
		DefaultValueParameterDefinition: func() ParameterDefinition {
			if defaultValueParameterDefinition != nil { return *defaultValueParameterDefinition }
			return m.DefaultValueParameterDefinition
		}(),
		DefaultValueRelatedArtifact: func() RelatedArtifact {
			if defaultValueRelatedArtifact != nil { return *defaultValueRelatedArtifact }
			return m.DefaultValueRelatedArtifact
		}(),
		DefaultValueTriggerDefinition: func() TriggerDefinition {
			if defaultValueTriggerDefinition != nil { return *defaultValueTriggerDefinition }
			return m.DefaultValueTriggerDefinition
		}(),
		DefaultValueUsageContext: func() UsageContext {
			if defaultValueUsageContext != nil { return *defaultValueUsageContext }
			return m.DefaultValueUsageContext
		}(),
		DefaultValueDosage: func() Dosage {
			if defaultValueDosage != nil { return *defaultValueDosage }
			return m.DefaultValueDosage
		}(),
		MeaningWhenMissing: func() FhirMarkdown {
			if meaningWhenMissing != nil { return *meaningWhenMissing }
			return m.MeaningWhenMissing
		}(),
		OrderMeaning: func() FhirString {
			if orderMeaning != nil { return *orderMeaning }
			return m.OrderMeaning
		}(),
		FixedBase64Binary: func() FhirBase64Binary {
			if fixedBase64Binary != nil { return *fixedBase64Binary }
			return m.FixedBase64Binary
		}(),
		FixedBoolean: func() FhirBoolean {
			if fixedBoolean != nil { return *fixedBoolean }
			return m.FixedBoolean
		}(),
		FixedCanonical: func() FhirCanonical {
			if fixedCanonical != nil { return *fixedCanonical }
			return m.FixedCanonical
		}(),
		FixedCode: func() FhirCode {
			if fixedCode != nil { return *fixedCode }
			return m.FixedCode
		}(),
		FixedDate: func() FhirDate {
			if fixedDate != nil { return *fixedDate }
			return m.FixedDate
		}(),
		FixedDateTime: func() FhirDateTime {
			if fixedDateTime != nil { return *fixedDateTime }
			return m.FixedDateTime
		}(),
		FixedDecimal: func() FhirDecimal {
			if fixedDecimal != nil { return *fixedDecimal }
			return m.FixedDecimal
		}(),
		FixedId: func() FhirId {
			if fixedId != nil { return *fixedId }
			return m.FixedId
		}(),
		FixedInstant: func() FhirInstant {
			if fixedInstant != nil { return *fixedInstant }
			return m.FixedInstant
		}(),
		FixedInteger: func() FhirInteger {
			if fixedInteger != nil { return *fixedInteger }
			return m.FixedInteger
		}(),
		FixedMarkdown: func() FhirMarkdown {
			if fixedMarkdown != nil { return *fixedMarkdown }
			return m.FixedMarkdown
		}(),
		FixedOid: func() FhirOid {
			if fixedOid != nil { return *fixedOid }
			return m.FixedOid
		}(),
		FixedPositiveInt: func() FhirPositiveInt {
			if fixedPositiveInt != nil { return *fixedPositiveInt }
			return m.FixedPositiveInt
		}(),
		FixedString: func() FhirString {
			if fixedString != nil { return *fixedString }
			return m.FixedString
		}(),
		FixedTime: func() FhirTime {
			if fixedTime != nil { return *fixedTime }
			return m.FixedTime
		}(),
		FixedUnsignedInt: func() FhirUnsignedInt {
			if fixedUnsignedInt != nil { return *fixedUnsignedInt }
			return m.FixedUnsignedInt
		}(),
		FixedUri: func() FhirUri {
			if fixedUri != nil { return *fixedUri }
			return m.FixedUri
		}(),
		FixedUrl: func() FhirUrl {
			if fixedUrl != nil { return *fixedUrl }
			return m.FixedUrl
		}(),
		FixedUuid: func() FhirUuid {
			if fixedUuid != nil { return *fixedUuid }
			return m.FixedUuid
		}(),
		FixedAddress: func() Address {
			if fixedAddress != nil { return *fixedAddress }
			return m.FixedAddress
		}(),
		FixedAge: func() Age {
			if fixedAge != nil { return *fixedAge }
			return m.FixedAge
		}(),
		FixedAnnotation: func() Annotation {
			if fixedAnnotation != nil { return *fixedAnnotation }
			return m.FixedAnnotation
		}(),
		FixedAttachment: func() Attachment {
			if fixedAttachment != nil { return *fixedAttachment }
			return m.FixedAttachment
		}(),
		FixedCodeableConcept: func() CodeableConcept {
			if fixedCodeableConcept != nil { return *fixedCodeableConcept }
			return m.FixedCodeableConcept
		}(),
		FixedCodeableReference: func() CodeableReference {
			if fixedCodeableReference != nil { return *fixedCodeableReference }
			return m.FixedCodeableReference
		}(),
		FixedCoding: func() Coding {
			if fixedCoding != nil { return *fixedCoding }
			return m.FixedCoding
		}(),
		FixedContactPoint: func() ContactPoint {
			if fixedContactPoint != nil { return *fixedContactPoint }
			return m.FixedContactPoint
		}(),
		FixedCount: func() Count {
			if fixedCount != nil { return *fixedCount }
			return m.FixedCount
		}(),
		FixedDistance: func() Distance {
			if fixedDistance != nil { return *fixedDistance }
			return m.FixedDistance
		}(),
		FixedDuration: func() FhirDuration {
			if fixedDuration != nil { return *fixedDuration }
			return m.FixedDuration
		}(),
		FixedHumanName: func() HumanName {
			if fixedHumanName != nil { return *fixedHumanName }
			return m.FixedHumanName
		}(),
		FixedIdentifier: func() Identifier {
			if fixedIdentifier != nil { return *fixedIdentifier }
			return m.FixedIdentifier
		}(),
		FixedMoney: func() Money {
			if fixedMoney != nil { return *fixedMoney }
			return m.FixedMoney
		}(),
		FixedPeriod: func() Period {
			if fixedPeriod != nil { return *fixedPeriod }
			return m.FixedPeriod
		}(),
		FixedQuantity: func() Quantity {
			if fixedQuantity != nil { return *fixedQuantity }
			return m.FixedQuantity
		}(),
		FixedRange: func() Range {
			if fixedRange != nil { return *fixedRange }
			return m.FixedRange
		}(),
		FixedRatio: func() Ratio {
			if fixedRatio != nil { return *fixedRatio }
			return m.FixedRatio
		}(),
		FixedRatioRange: func() RatioRange {
			if fixedRatioRange != nil { return *fixedRatioRange }
			return m.FixedRatioRange
		}(),
		FixedReference: func() Reference {
			if fixedReference != nil { return *fixedReference }
			return m.FixedReference
		}(),
		FixedSampledData: func() SampledData {
			if fixedSampledData != nil { return *fixedSampledData }
			return m.FixedSampledData
		}(),
		FixedSignature: func() Signature {
			if fixedSignature != nil { return *fixedSignature }
			return m.FixedSignature
		}(),
		FixedTiming: func() Timing {
			if fixedTiming != nil { return *fixedTiming }
			return m.FixedTiming
		}(),
		FixedContactDetail: func() ContactDetail {
			if fixedContactDetail != nil { return *fixedContactDetail }
			return m.FixedContactDetail
		}(),
		FixedContributor: func() Contributor {
			if fixedContributor != nil { return *fixedContributor }
			return m.FixedContributor
		}(),
		FixedDataRequirement: func() DataRequirement {
			if fixedDataRequirement != nil { return *fixedDataRequirement }
			return m.FixedDataRequirement
		}(),
		FixedExpression: func() FhirExpression {
			if fixedExpression != nil { return *fixedExpression }
			return m.FixedExpression
		}(),
		FixedParameterDefinition: func() ParameterDefinition {
			if fixedParameterDefinition != nil { return *fixedParameterDefinition }
			return m.FixedParameterDefinition
		}(),
		FixedRelatedArtifact: func() RelatedArtifact {
			if fixedRelatedArtifact != nil { return *fixedRelatedArtifact }
			return m.FixedRelatedArtifact
		}(),
		FixedTriggerDefinition: func() TriggerDefinition {
			if fixedTriggerDefinition != nil { return *fixedTriggerDefinition }
			return m.FixedTriggerDefinition
		}(),
		FixedUsageContext: func() UsageContext {
			if fixedUsageContext != nil { return *fixedUsageContext }
			return m.FixedUsageContext
		}(),
		FixedDosage: func() Dosage {
			if fixedDosage != nil { return *fixedDosage }
			return m.FixedDosage
		}(),
		PatternBase64Binary: func() FhirBase64Binary {
			if patternBase64Binary != nil { return *patternBase64Binary }
			return m.PatternBase64Binary
		}(),
		PatternBoolean: func() FhirBoolean {
			if patternBoolean != nil { return *patternBoolean }
			return m.PatternBoolean
		}(),
		PatternCanonical: func() FhirCanonical {
			if patternCanonical != nil { return *patternCanonical }
			return m.PatternCanonical
		}(),
		PatternCode: func() FhirCode {
			if patternCode != nil { return *patternCode }
			return m.PatternCode
		}(),
		PatternDate: func() FhirDate {
			if patternDate != nil { return *patternDate }
			return m.PatternDate
		}(),
		PatternDateTime: func() FhirDateTime {
			if patternDateTime != nil { return *patternDateTime }
			return m.PatternDateTime
		}(),
		PatternDecimal: func() FhirDecimal {
			if patternDecimal != nil { return *patternDecimal }
			return m.PatternDecimal
		}(),
		PatternId: func() FhirId {
			if patternId != nil { return *patternId }
			return m.PatternId
		}(),
		PatternInstant: func() FhirInstant {
			if patternInstant != nil { return *patternInstant }
			return m.PatternInstant
		}(),
		PatternInteger: func() FhirInteger {
			if patternInteger != nil { return *patternInteger }
			return m.PatternInteger
		}(),
		PatternMarkdown: func() FhirMarkdown {
			if patternMarkdown != nil { return *patternMarkdown }
			return m.PatternMarkdown
		}(),
		PatternOid: func() FhirOid {
			if patternOid != nil { return *patternOid }
			return m.PatternOid
		}(),
		PatternPositiveInt: func() FhirPositiveInt {
			if patternPositiveInt != nil { return *patternPositiveInt }
			return m.PatternPositiveInt
		}(),
		PatternString: func() FhirString {
			if patternString != nil { return *patternString }
			return m.PatternString
		}(),
		PatternTime: func() FhirTime {
			if patternTime != nil { return *patternTime }
			return m.PatternTime
		}(),
		PatternUnsignedInt: func() FhirUnsignedInt {
			if patternUnsignedInt != nil { return *patternUnsignedInt }
			return m.PatternUnsignedInt
		}(),
		PatternUri: func() FhirUri {
			if patternUri != nil { return *patternUri }
			return m.PatternUri
		}(),
		PatternUrl: func() FhirUrl {
			if patternUrl != nil { return *patternUrl }
			return m.PatternUrl
		}(),
		PatternUuid: func() FhirUuid {
			if patternUuid != nil { return *patternUuid }
			return m.PatternUuid
		}(),
		PatternAddress: func() Address {
			if patternAddress != nil { return *patternAddress }
			return m.PatternAddress
		}(),
		PatternAge: func() Age {
			if patternAge != nil { return *patternAge }
			return m.PatternAge
		}(),
		PatternAnnotation: func() Annotation {
			if patternAnnotation != nil { return *patternAnnotation }
			return m.PatternAnnotation
		}(),
		PatternAttachment: func() Attachment {
			if patternAttachment != nil { return *patternAttachment }
			return m.PatternAttachment
		}(),
		PatternCodeableConcept: func() CodeableConcept {
			if patternCodeableConcept != nil { return *patternCodeableConcept }
			return m.PatternCodeableConcept
		}(),
		PatternCodeableReference: func() CodeableReference {
			if patternCodeableReference != nil { return *patternCodeableReference }
			return m.PatternCodeableReference
		}(),
		PatternCoding: func() Coding {
			if patternCoding != nil { return *patternCoding }
			return m.PatternCoding
		}(),
		PatternContactPoint: func() ContactPoint {
			if patternContactPoint != nil { return *patternContactPoint }
			return m.PatternContactPoint
		}(),
		PatternCount: func() Count {
			if patternCount != nil { return *patternCount }
			return m.PatternCount
		}(),
		PatternDistance: func() Distance {
			if patternDistance != nil { return *patternDistance }
			return m.PatternDistance
		}(),
		PatternDuration: func() FhirDuration {
			if patternDuration != nil { return *patternDuration }
			return m.PatternDuration
		}(),
		PatternHumanName: func() HumanName {
			if patternHumanName != nil { return *patternHumanName }
			return m.PatternHumanName
		}(),
		PatternIdentifier: func() Identifier {
			if patternIdentifier != nil { return *patternIdentifier }
			return m.PatternIdentifier
		}(),
		PatternMoney: func() Money {
			if patternMoney != nil { return *patternMoney }
			return m.PatternMoney
		}(),
		PatternPeriod: func() Period {
			if patternPeriod != nil { return *patternPeriod }
			return m.PatternPeriod
		}(),
		PatternQuantity: func() Quantity {
			if patternQuantity != nil { return *patternQuantity }
			return m.PatternQuantity
		}(),
		PatternRange: func() Range {
			if patternRange != nil { return *patternRange }
			return m.PatternRange
		}(),
		PatternRatio: func() Ratio {
			if patternRatio != nil { return *patternRatio }
			return m.PatternRatio
		}(),
		PatternRatioRange: func() RatioRange {
			if patternRatioRange != nil { return *patternRatioRange }
			return m.PatternRatioRange
		}(),
		PatternReference: func() Reference {
			if patternReference != nil { return *patternReference }
			return m.PatternReference
		}(),
		PatternSampledData: func() SampledData {
			if patternSampledData != nil { return *patternSampledData }
			return m.PatternSampledData
		}(),
		PatternSignature: func() Signature {
			if patternSignature != nil { return *patternSignature }
			return m.PatternSignature
		}(),
		PatternTiming: func() Timing {
			if patternTiming != nil { return *patternTiming }
			return m.PatternTiming
		}(),
		PatternContactDetail: func() ContactDetail {
			if patternContactDetail != nil { return *patternContactDetail }
			return m.PatternContactDetail
		}(),
		PatternContributor: func() Contributor {
			if patternContributor != nil { return *patternContributor }
			return m.PatternContributor
		}(),
		PatternDataRequirement: func() DataRequirement {
			if patternDataRequirement != nil { return *patternDataRequirement }
			return m.PatternDataRequirement
		}(),
		PatternExpression: func() FhirExpression {
			if patternExpression != nil { return *patternExpression }
			return m.PatternExpression
		}(),
		PatternParameterDefinition: func() ParameterDefinition {
			if patternParameterDefinition != nil { return *patternParameterDefinition }
			return m.PatternParameterDefinition
		}(),
		PatternRelatedArtifact: func() RelatedArtifact {
			if patternRelatedArtifact != nil { return *patternRelatedArtifact }
			return m.PatternRelatedArtifact
		}(),
		PatternTriggerDefinition: func() TriggerDefinition {
			if patternTriggerDefinition != nil { return *patternTriggerDefinition }
			return m.PatternTriggerDefinition
		}(),
		PatternUsageContext: func() UsageContext {
			if patternUsageContext != nil { return *patternUsageContext }
			return m.PatternUsageContext
		}(),
		PatternDosage: func() Dosage {
			if patternDosage != nil { return *patternDosage }
			return m.PatternDosage
		}(),
		Example: func() []ElementDefinitionExample {
			if example != nil { return *example }
			return m.Example
		}(),
		MinValueDate: func() FhirDate {
			if minValueDate != nil { return *minValueDate }
			return m.MinValueDate
		}(),
		MinValueDateTime: func() FhirDateTime {
			if minValueDateTime != nil { return *minValueDateTime }
			return m.MinValueDateTime
		}(),
		MinValueInstant: func() FhirInstant {
			if minValueInstant != nil { return *minValueInstant }
			return m.MinValueInstant
		}(),
		MinValueTime: func() FhirTime {
			if minValueTime != nil { return *minValueTime }
			return m.MinValueTime
		}(),
		MinValueDecimal: func() FhirDecimal {
			if minValueDecimal != nil { return *minValueDecimal }
			return m.MinValueDecimal
		}(),
		MinValueInteger: func() FhirInteger {
			if minValueInteger != nil { return *minValueInteger }
			return m.MinValueInteger
		}(),
		MinValuePositiveInt: func() FhirPositiveInt {
			if minValuePositiveInt != nil { return *minValuePositiveInt }
			return m.MinValuePositiveInt
		}(),
		MinValueUnsignedInt: func() FhirUnsignedInt {
			if minValueUnsignedInt != nil { return *minValueUnsignedInt }
			return m.MinValueUnsignedInt
		}(),
		MinValueQuantity: func() Quantity {
			if minValueQuantity != nil { return *minValueQuantity }
			return m.MinValueQuantity
		}(),
		MaxValueDate: func() FhirDate {
			if maxValueDate != nil { return *maxValueDate }
			return m.MaxValueDate
		}(),
		MaxValueDateTime: func() FhirDateTime {
			if maxValueDateTime != nil { return *maxValueDateTime }
			return m.MaxValueDateTime
		}(),
		MaxValueInstant: func() FhirInstant {
			if maxValueInstant != nil { return *maxValueInstant }
			return m.MaxValueInstant
		}(),
		MaxValueTime: func() FhirTime {
			if maxValueTime != nil { return *maxValueTime }
			return m.MaxValueTime
		}(),
		MaxValueDecimal: func() FhirDecimal {
			if maxValueDecimal != nil { return *maxValueDecimal }
			return m.MaxValueDecimal
		}(),
		MaxValueInteger: func() FhirInteger {
			if maxValueInteger != nil { return *maxValueInteger }
			return m.MaxValueInteger
		}(),
		MaxValuePositiveInt: func() FhirPositiveInt {
			if maxValuePositiveInt != nil { return *maxValuePositiveInt }
			return m.MaxValuePositiveInt
		}(),
		MaxValueUnsignedInt: func() FhirUnsignedInt {
			if maxValueUnsignedInt != nil { return *maxValueUnsignedInt }
			return m.MaxValueUnsignedInt
		}(),
		MaxValueQuantity: func() Quantity {
			if maxValueQuantity != nil { return *maxValueQuantity }
			return m.MaxValueQuantity
		}(),
		MaxLength: func() FhirInteger {
			if maxLength != nil { return *maxLength }
			return m.MaxLength
		}(),
		Condition: func() []FhirId {
			if condition != nil { return *condition }
			return m.Condition
		}(),
		Constraint: func() []ElementDefinitionConstraint {
			if constraint != nil { return *constraint }
			return m.Constraint
		}(),
		MustSupport: func() FhirBoolean {
			if mustSupport != nil { return *mustSupport }
			return m.MustSupport
		}(),
		IsModifier: func() FhirBoolean {
			if isModifier != nil { return *isModifier }
			return m.IsModifier
		}(),
		IsModifierReason: func() FhirString {
			if isModifierReason != nil { return *isModifierReason }
			return m.IsModifierReason
		}(),
		IsSummary: func() FhirBoolean {
			if isSummary != nil { return *isSummary }
			return m.IsSummary
		}(),
		Binding: func() ElementDefinitionBinding {
			if binding != nil { return *binding }
			return m.Binding
		}(),
		Mapping: func() []ElementDefinitionMapping {
			if mapping != nil { return *mapping }
			return m.Mapping
		}(),
	}
}
// ElementDefinitionSlicing
// Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).
type ElementDefinitionSlicing struct {
	Element
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// discriminator
	// Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
	Discriminator []ElementDefinitionDiscriminator `json:"discriminator,omitempty"`
	// description
	// A human-readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated.
	Description FhirString `json:"description,omitempty"`
	// ordered
	// If the matching elements have to occur in the same order as defined in the profile.
	Ordered FhirBoolean `json:"ordered,omitempty"`
	// rules
	// Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.
	Rules SlicingRules `json:"rules,omitempty"`
}

// NewElementDefinitionSlicing creates a new ElementDefinitionSlicing instance
func NewElementDefinitionSlicing(
	id FhirString,
	extension_ []FhirExtension,
	discriminator []ElementDefinitionDiscriminator,
	description FhirString,
	ordered FhirBoolean,
	rules SlicingRules,
) *ElementDefinitionSlicing {
	return &ElementDefinitionSlicing{
		Id: id,
		Extension_: extension_,
		Discriminator: discriminator,
		Description: description,
		Ordered: ordered,
		Rules: rules,
	}
}
// FromJSON populates ElementDefinitionSlicing from JSON data
func (m *ElementDefinitionSlicing) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ElementDefinitionSlicing to JSON data
func (m *ElementDefinitionSlicing) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ElementDefinitionSlicing
func (m *ElementDefinitionSlicing) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	discriminator *[]ElementDefinitionDiscriminator,
	description *FhirString,
	ordered *FhirBoolean,
	rules *SlicingRules,
) *ElementDefinitionSlicing {
	return &ElementDefinitionSlicing{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		Discriminator: func() []ElementDefinitionDiscriminator {
			if discriminator != nil { return *discriminator }
			return m.Discriminator
		}(),
		Description: func() FhirString {
			if description != nil { return *description }
			return m.Description
		}(),
		Ordered: func() FhirBoolean {
			if ordered != nil { return *ordered }
			return m.Ordered
		}(),
		Rules: func() SlicingRules {
			if rules != nil { return *rules }
			return m.Rules
		}(),
	}
}
// ElementDefinitionDiscriminator
// Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.
type ElementDefinitionDiscriminator struct {
	Element
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// type
	// How the element value is interpreted when discrimination is evaluated.
	Type_ DiscriminatorType `json:"type,omitempty"`
	// path
	// A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based.
	Path FhirString `json:"path,omitempty"`
}

// NewElementDefinitionDiscriminator creates a new ElementDefinitionDiscriminator instance
func NewElementDefinitionDiscriminator(
	id FhirString,
	extension_ []FhirExtension,
	type_ DiscriminatorType,
	path FhirString,
) *ElementDefinitionDiscriminator {
	return &ElementDefinitionDiscriminator{
		Id: id,
		Extension_: extension_,
		Type_: type_,
		Path: path,
	}
}
// FromJSON populates ElementDefinitionDiscriminator from JSON data
func (m *ElementDefinitionDiscriminator) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ElementDefinitionDiscriminator to JSON data
func (m *ElementDefinitionDiscriminator) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ElementDefinitionDiscriminator
func (m *ElementDefinitionDiscriminator) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	type_ *DiscriminatorType,
	path *FhirString,
) *ElementDefinitionDiscriminator {
	return &ElementDefinitionDiscriminator{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		Type_: func() DiscriminatorType {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		Path: func() FhirString {
			if path != nil { return *path }
			return m.Path
		}(),
	}
}
// ElementDefinitionBase
// Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.
type ElementDefinitionBase struct {
	Element
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// path
	// The Path that identifies the base element - this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element - that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base.
	Path FhirString `json:"path,omitempty"`
	// min
	// Minimum cardinality of the base element identified by the path.
	Min FhirUnsignedInt `json:"min,omitempty"`
	// max
	// Maximum cardinality of the base element identified by the path.
	Max FhirString `json:"max,omitempty"`
}

// NewElementDefinitionBase creates a new ElementDefinitionBase instance
func NewElementDefinitionBase(
	id FhirString,
	extension_ []FhirExtension,
	path FhirString,
	min FhirUnsignedInt,
	max FhirString,
) *ElementDefinitionBase {
	return &ElementDefinitionBase{
		Id: id,
		Extension_: extension_,
		Path: path,
		Min: min,
		Max: max,
	}
}
// FromJSON populates ElementDefinitionBase from JSON data
func (m *ElementDefinitionBase) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ElementDefinitionBase to JSON data
func (m *ElementDefinitionBase) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ElementDefinitionBase
func (m *ElementDefinitionBase) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	path *FhirString,
	min *FhirUnsignedInt,
	max *FhirString,
) *ElementDefinitionBase {
	return &ElementDefinitionBase{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		Path: func() FhirString {
			if path != nil { return *path }
			return m.Path
		}(),
		Min: func() FhirUnsignedInt {
			if min != nil { return *min }
			return m.Min
		}(),
		Max: func() FhirString {
			if max != nil { return *max }
			return m.Max
		}(),
	}
}
// ElementDefinitionType
// The data type or resource that the value of this element is permitted to be.
type ElementDefinitionType struct {
	Element
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// code
	// URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. "string" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models.
	Code FhirUri `json:"code,omitempty"`
	// profile
	// Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide.
	Profile []FhirCanonical `json:"profile,omitempty"`
	// targetProfile
	// Used when the type is "Reference" or "canonical", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.
	TargetProfile []FhirCanonical `json:"targetProfile,omitempty"`
	// aggregation
	// If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.
	Aggregation []AggregationMode `json:"aggregation,omitempty"`
	// versioning
	// Whether this reference needs to be version specific or version independent, or whether either can be used.
	Versioning ReferenceVersionRules `json:"versioning,omitempty"`
}

// NewElementDefinitionType creates a new ElementDefinitionType instance
func NewElementDefinitionType(
	id FhirString,
	extension_ []FhirExtension,
	code FhirUri,
	profile []FhirCanonical,
	targetProfile []FhirCanonical,
	aggregation []AggregationMode,
	versioning ReferenceVersionRules,
) *ElementDefinitionType {
	return &ElementDefinitionType{
		Id: id,
		Extension_: extension_,
		Code: code,
		Profile: profile,
		TargetProfile: targetProfile,
		Aggregation: aggregation,
		Versioning: versioning,
	}
}
// FromJSON populates ElementDefinitionType from JSON data
func (m *ElementDefinitionType) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ElementDefinitionType to JSON data
func (m *ElementDefinitionType) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ElementDefinitionType
func (m *ElementDefinitionType) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	code *FhirUri,
	profile *[]FhirCanonical,
	targetProfile *[]FhirCanonical,
	aggregation *[]AggregationMode,
	versioning *ReferenceVersionRules,
) *ElementDefinitionType {
	return &ElementDefinitionType{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		Code: func() FhirUri {
			if code != nil { return *code }
			return m.Code
		}(),
		Profile: func() []FhirCanonical {
			if profile != nil { return *profile }
			return m.Profile
		}(),
		TargetProfile: func() []FhirCanonical {
			if targetProfile != nil { return *targetProfile }
			return m.TargetProfile
		}(),
		Aggregation: func() []AggregationMode {
			if aggregation != nil { return *aggregation }
			return m.Aggregation
		}(),
		Versioning: func() ReferenceVersionRules {
			if versioning != nil { return *versioning }
			return m.Versioning
		}(),
	}
}
// ElementDefinitionExample
// A sample value for this element demonstrating the type of information that would typically be found in the element.
type ElementDefinitionExample struct {
	Element
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// label
	// Describes the purpose of this example amoung the set of examples.
	Label FhirString `json:"label,omitempty"`
	// valueBase64Binary
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueBase64Binary FhirBase64Binary `json:"valueBase64Binary,omitempty"`
	// valueBoolean
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueBoolean FhirBoolean `json:"valueBoolean,omitempty"`
	// valueCanonical
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueCanonical FhirCanonical `json:"valueCanonical,omitempty"`
	// valueCode
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueCode FhirCode `json:"valueCode,omitempty"`
	// valueDate
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueDate FhirDate `json:"valueDate,omitempty"`
	// valueDateTime
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueDateTime FhirDateTime `json:"valueDateTime,omitempty"`
	// valueDecimal
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueDecimal FhirDecimal `json:"valueDecimal,omitempty"`
	// valueId
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueId FhirId `json:"valueId,omitempty"`
	// valueInstant
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueInstant FhirInstant `json:"valueInstant,omitempty"`
	// valueInteger
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueInteger FhirInteger `json:"valueInteger,omitempty"`
	// valueMarkdown
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueMarkdown FhirMarkdown `json:"valueMarkdown,omitempty"`
	// valueOid
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueOid FhirOid `json:"valueOid,omitempty"`
	// valuePositiveInt
	// The actual value for the element, which must be one of the types allowed for this element.
	ValuePositiveInt FhirPositiveInt `json:"valuePositiveInt,omitempty"`
	// valueString
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueString FhirString `json:"valueString,omitempty"`
	// valueTime
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueTime FhirTime `json:"valueTime,omitempty"`
	// valueUnsignedInt
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueUnsignedInt FhirUnsignedInt `json:"valueUnsignedInt,omitempty"`
	// valueUri
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueUri FhirUri `json:"valueUri,omitempty"`
	// valueUrl
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueUrl FhirUrl `json:"valueUrl,omitempty"`
	// valueUuid
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueUuid FhirUuid `json:"valueUuid,omitempty"`
	// valueAddress
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueAddress Address `json:"valueAddress,omitempty"`
	// valueAge
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueAge Age `json:"valueAge,omitempty"`
	// valueAnnotation
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueAnnotation Annotation `json:"valueAnnotation,omitempty"`
	// valueAttachment
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueAttachment Attachment `json:"valueAttachment,omitempty"`
	// valueCodeableConcept
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueCodeableConcept CodeableConcept `json:"valueCodeableConcept,omitempty"`
	// valueCodeableReference
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueCodeableReference CodeableReference `json:"valueCodeableReference,omitempty"`
	// valueCoding
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueCoding Coding `json:"valueCoding,omitempty"`
	// valueContactPoint
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueContactPoint ContactPoint `json:"valueContactPoint,omitempty"`
	// valueCount
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueCount Count `json:"valueCount,omitempty"`
	// valueDistance
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueDistance Distance `json:"valueDistance,omitempty"`
	// valueDuration
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueDuration FhirDuration `json:"valueDuration,omitempty"`
	// valueHumanName
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueHumanName HumanName `json:"valueHumanName,omitempty"`
	// valueIdentifier
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueIdentifier Identifier `json:"valueIdentifier,omitempty"`
	// valueMoney
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueMoney Money `json:"valueMoney,omitempty"`
	// valuePeriod
	// The actual value for the element, which must be one of the types allowed for this element.
	ValuePeriod Period `json:"valuePeriod,omitempty"`
	// valueQuantity
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueQuantity Quantity `json:"valueQuantity,omitempty"`
	// valueRange
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueRange Range `json:"valueRange,omitempty"`
	// valueRatio
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueRatio Ratio `json:"valueRatio,omitempty"`
	// valueRatioRange
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueRatioRange RatioRange `json:"valueRatioRange,omitempty"`
	// valueReference
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueReference Reference `json:"valueReference,omitempty"`
	// valueSampledData
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueSampledData SampledData `json:"valueSampledData,omitempty"`
	// valueSignature
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueSignature Signature `json:"valueSignature,omitempty"`
	// valueTiming
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueTiming Timing `json:"valueTiming,omitempty"`
	// valueContactDetail
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueContactDetail ContactDetail `json:"valueContactDetail,omitempty"`
	// valueContributor
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueContributor Contributor `json:"valueContributor,omitempty"`
	// valueDataRequirement
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueDataRequirement DataRequirement `json:"valueDataRequirement,omitempty"`
	// valueExpression
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueExpression FhirExpression `json:"valueExpression,omitempty"`
	// valueParameterDefinition
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueParameterDefinition ParameterDefinition `json:"valueParameterDefinition,omitempty"`
	// valueRelatedArtifact
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueRelatedArtifact RelatedArtifact `json:"valueRelatedArtifact,omitempty"`
	// valueTriggerDefinition
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueTriggerDefinition TriggerDefinition `json:"valueTriggerDefinition,omitempty"`
	// valueUsageContext
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueUsageContext UsageContext `json:"valueUsageContext,omitempty"`
	// valueDosage
	// The actual value for the element, which must be one of the types allowed for this element.
	ValueDosage Dosage `json:"valueDosage,omitempty"`
}

// NewElementDefinitionExample creates a new ElementDefinitionExample instance
func NewElementDefinitionExample(
	id FhirString,
	extension_ []FhirExtension,
	label FhirString,
	valueBase64Binary FhirBase64Binary,
	valueBoolean FhirBoolean,
	valueCanonical FhirCanonical,
	valueCode FhirCode,
	valueDate FhirDate,
	valueDateTime FhirDateTime,
	valueDecimal FhirDecimal,
	valueId FhirId,
	valueInstant FhirInstant,
	valueInteger FhirInteger,
	valueMarkdown FhirMarkdown,
	valueOid FhirOid,
	valuePositiveInt FhirPositiveInt,
	valueString FhirString,
	valueTime FhirTime,
	valueUnsignedInt FhirUnsignedInt,
	valueUri FhirUri,
	valueUrl FhirUrl,
	valueUuid FhirUuid,
	valueAddress Address,
	valueAge Age,
	valueAnnotation Annotation,
	valueAttachment Attachment,
	valueCodeableConcept CodeableConcept,
	valueCodeableReference CodeableReference,
	valueCoding Coding,
	valueContactPoint ContactPoint,
	valueCount Count,
	valueDistance Distance,
	valueDuration FhirDuration,
	valueHumanName HumanName,
	valueIdentifier Identifier,
	valueMoney Money,
	valuePeriod Period,
	valueQuantity Quantity,
	valueRange Range,
	valueRatio Ratio,
	valueRatioRange RatioRange,
	valueReference Reference,
	valueSampledData SampledData,
	valueSignature Signature,
	valueTiming Timing,
	valueContactDetail ContactDetail,
	valueContributor Contributor,
	valueDataRequirement DataRequirement,
	valueExpression FhirExpression,
	valueParameterDefinition ParameterDefinition,
	valueRelatedArtifact RelatedArtifact,
	valueTriggerDefinition TriggerDefinition,
	valueUsageContext UsageContext,
	valueDosage Dosage,
) *ElementDefinitionExample {
	return &ElementDefinitionExample{
		Id: id,
		Extension_: extension_,
		Label: label,
		ValueBase64Binary: valueBase64Binary,
		ValueBoolean: valueBoolean,
		ValueCanonical: valueCanonical,
		ValueCode: valueCode,
		ValueDate: valueDate,
		ValueDateTime: valueDateTime,
		ValueDecimal: valueDecimal,
		ValueId: valueId,
		ValueInstant: valueInstant,
		ValueInteger: valueInteger,
		ValueMarkdown: valueMarkdown,
		ValueOid: valueOid,
		ValuePositiveInt: valuePositiveInt,
		ValueString: valueString,
		ValueTime: valueTime,
		ValueUnsignedInt: valueUnsignedInt,
		ValueUri: valueUri,
		ValueUrl: valueUrl,
		ValueUuid: valueUuid,
		ValueAddress: valueAddress,
		ValueAge: valueAge,
		ValueAnnotation: valueAnnotation,
		ValueAttachment: valueAttachment,
		ValueCodeableConcept: valueCodeableConcept,
		ValueCodeableReference: valueCodeableReference,
		ValueCoding: valueCoding,
		ValueContactPoint: valueContactPoint,
		ValueCount: valueCount,
		ValueDistance: valueDistance,
		ValueDuration: valueDuration,
		ValueHumanName: valueHumanName,
		ValueIdentifier: valueIdentifier,
		ValueMoney: valueMoney,
		ValuePeriod: valuePeriod,
		ValueQuantity: valueQuantity,
		ValueRange: valueRange,
		ValueRatio: valueRatio,
		ValueRatioRange: valueRatioRange,
		ValueReference: valueReference,
		ValueSampledData: valueSampledData,
		ValueSignature: valueSignature,
		ValueTiming: valueTiming,
		ValueContactDetail: valueContactDetail,
		ValueContributor: valueContributor,
		ValueDataRequirement: valueDataRequirement,
		ValueExpression: valueExpression,
		ValueParameterDefinition: valueParameterDefinition,
		ValueRelatedArtifact: valueRelatedArtifact,
		ValueTriggerDefinition: valueTriggerDefinition,
		ValueUsageContext: valueUsageContext,
		ValueDosage: valueDosage,
	}
}
// FromJSON populates ElementDefinitionExample from JSON data
func (m *ElementDefinitionExample) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ElementDefinitionExample to JSON data
func (m *ElementDefinitionExample) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ElementDefinitionExample
func (m *ElementDefinitionExample) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	label *FhirString,
	valueBase64Binary *FhirBase64Binary,
	valueBoolean *FhirBoolean,
	valueCanonical *FhirCanonical,
	valueCode *FhirCode,
	valueDate *FhirDate,
	valueDateTime *FhirDateTime,
	valueDecimal *FhirDecimal,
	valueId *FhirId,
	valueInstant *FhirInstant,
	valueInteger *FhirInteger,
	valueMarkdown *FhirMarkdown,
	valueOid *FhirOid,
	valuePositiveInt *FhirPositiveInt,
	valueString *FhirString,
	valueTime *FhirTime,
	valueUnsignedInt *FhirUnsignedInt,
	valueUri *FhirUri,
	valueUrl *FhirUrl,
	valueUuid *FhirUuid,
	valueAddress *Address,
	valueAge *Age,
	valueAnnotation *Annotation,
	valueAttachment *Attachment,
	valueCodeableConcept *CodeableConcept,
	valueCodeableReference *CodeableReference,
	valueCoding *Coding,
	valueContactPoint *ContactPoint,
	valueCount *Count,
	valueDistance *Distance,
	valueDuration *FhirDuration,
	valueHumanName *HumanName,
	valueIdentifier *Identifier,
	valueMoney *Money,
	valuePeriod *Period,
	valueQuantity *Quantity,
	valueRange *Range,
	valueRatio *Ratio,
	valueRatioRange *RatioRange,
	valueReference *Reference,
	valueSampledData *SampledData,
	valueSignature *Signature,
	valueTiming *Timing,
	valueContactDetail *ContactDetail,
	valueContributor *Contributor,
	valueDataRequirement *DataRequirement,
	valueExpression *FhirExpression,
	valueParameterDefinition *ParameterDefinition,
	valueRelatedArtifact *RelatedArtifact,
	valueTriggerDefinition *TriggerDefinition,
	valueUsageContext *UsageContext,
	valueDosage *Dosage,
) *ElementDefinitionExample {
	return &ElementDefinitionExample{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		Label: func() FhirString {
			if label != nil { return *label }
			return m.Label
		}(),
		ValueBase64Binary: func() FhirBase64Binary {
			if valueBase64Binary != nil { return *valueBase64Binary }
			return m.ValueBase64Binary
		}(),
		ValueBoolean: func() FhirBoolean {
			if valueBoolean != nil { return *valueBoolean }
			return m.ValueBoolean
		}(),
		ValueCanonical: func() FhirCanonical {
			if valueCanonical != nil { return *valueCanonical }
			return m.ValueCanonical
		}(),
		ValueCode: func() FhirCode {
			if valueCode != nil { return *valueCode }
			return m.ValueCode
		}(),
		ValueDate: func() FhirDate {
			if valueDate != nil { return *valueDate }
			return m.ValueDate
		}(),
		ValueDateTime: func() FhirDateTime {
			if valueDateTime != nil { return *valueDateTime }
			return m.ValueDateTime
		}(),
		ValueDecimal: func() FhirDecimal {
			if valueDecimal != nil { return *valueDecimal }
			return m.ValueDecimal
		}(),
		ValueId: func() FhirId {
			if valueId != nil { return *valueId }
			return m.ValueId
		}(),
		ValueInstant: func() FhirInstant {
			if valueInstant != nil { return *valueInstant }
			return m.ValueInstant
		}(),
		ValueInteger: func() FhirInteger {
			if valueInteger != nil { return *valueInteger }
			return m.ValueInteger
		}(),
		ValueMarkdown: func() FhirMarkdown {
			if valueMarkdown != nil { return *valueMarkdown }
			return m.ValueMarkdown
		}(),
		ValueOid: func() FhirOid {
			if valueOid != nil { return *valueOid }
			return m.ValueOid
		}(),
		ValuePositiveInt: func() FhirPositiveInt {
			if valuePositiveInt != nil { return *valuePositiveInt }
			return m.ValuePositiveInt
		}(),
		ValueString: func() FhirString {
			if valueString != nil { return *valueString }
			return m.ValueString
		}(),
		ValueTime: func() FhirTime {
			if valueTime != nil { return *valueTime }
			return m.ValueTime
		}(),
		ValueUnsignedInt: func() FhirUnsignedInt {
			if valueUnsignedInt != nil { return *valueUnsignedInt }
			return m.ValueUnsignedInt
		}(),
		ValueUri: func() FhirUri {
			if valueUri != nil { return *valueUri }
			return m.ValueUri
		}(),
		ValueUrl: func() FhirUrl {
			if valueUrl != nil { return *valueUrl }
			return m.ValueUrl
		}(),
		ValueUuid: func() FhirUuid {
			if valueUuid != nil { return *valueUuid }
			return m.ValueUuid
		}(),
		ValueAddress: func() Address {
			if valueAddress != nil { return *valueAddress }
			return m.ValueAddress
		}(),
		ValueAge: func() Age {
			if valueAge != nil { return *valueAge }
			return m.ValueAge
		}(),
		ValueAnnotation: func() Annotation {
			if valueAnnotation != nil { return *valueAnnotation }
			return m.ValueAnnotation
		}(),
		ValueAttachment: func() Attachment {
			if valueAttachment != nil { return *valueAttachment }
			return m.ValueAttachment
		}(),
		ValueCodeableConcept: func() CodeableConcept {
			if valueCodeableConcept != nil { return *valueCodeableConcept }
			return m.ValueCodeableConcept
		}(),
		ValueCodeableReference: func() CodeableReference {
			if valueCodeableReference != nil { return *valueCodeableReference }
			return m.ValueCodeableReference
		}(),
		ValueCoding: func() Coding {
			if valueCoding != nil { return *valueCoding }
			return m.ValueCoding
		}(),
		ValueContactPoint: func() ContactPoint {
			if valueContactPoint != nil { return *valueContactPoint }
			return m.ValueContactPoint
		}(),
		ValueCount: func() Count {
			if valueCount != nil { return *valueCount }
			return m.ValueCount
		}(),
		ValueDistance: func() Distance {
			if valueDistance != nil { return *valueDistance }
			return m.ValueDistance
		}(),
		ValueDuration: func() FhirDuration {
			if valueDuration != nil { return *valueDuration }
			return m.ValueDuration
		}(),
		ValueHumanName: func() HumanName {
			if valueHumanName != nil { return *valueHumanName }
			return m.ValueHumanName
		}(),
		ValueIdentifier: func() Identifier {
			if valueIdentifier != nil { return *valueIdentifier }
			return m.ValueIdentifier
		}(),
		ValueMoney: func() Money {
			if valueMoney != nil { return *valueMoney }
			return m.ValueMoney
		}(),
		ValuePeriod: func() Period {
			if valuePeriod != nil { return *valuePeriod }
			return m.ValuePeriod
		}(),
		ValueQuantity: func() Quantity {
			if valueQuantity != nil { return *valueQuantity }
			return m.ValueQuantity
		}(),
		ValueRange: func() Range {
			if valueRange != nil { return *valueRange }
			return m.ValueRange
		}(),
		ValueRatio: func() Ratio {
			if valueRatio != nil { return *valueRatio }
			return m.ValueRatio
		}(),
		ValueRatioRange: func() RatioRange {
			if valueRatioRange != nil { return *valueRatioRange }
			return m.ValueRatioRange
		}(),
		ValueReference: func() Reference {
			if valueReference != nil { return *valueReference }
			return m.ValueReference
		}(),
		ValueSampledData: func() SampledData {
			if valueSampledData != nil { return *valueSampledData }
			return m.ValueSampledData
		}(),
		ValueSignature: func() Signature {
			if valueSignature != nil { return *valueSignature }
			return m.ValueSignature
		}(),
		ValueTiming: func() Timing {
			if valueTiming != nil { return *valueTiming }
			return m.ValueTiming
		}(),
		ValueContactDetail: func() ContactDetail {
			if valueContactDetail != nil { return *valueContactDetail }
			return m.ValueContactDetail
		}(),
		ValueContributor: func() Contributor {
			if valueContributor != nil { return *valueContributor }
			return m.ValueContributor
		}(),
		ValueDataRequirement: func() DataRequirement {
			if valueDataRequirement != nil { return *valueDataRequirement }
			return m.ValueDataRequirement
		}(),
		ValueExpression: func() FhirExpression {
			if valueExpression != nil { return *valueExpression }
			return m.ValueExpression
		}(),
		ValueParameterDefinition: func() ParameterDefinition {
			if valueParameterDefinition != nil { return *valueParameterDefinition }
			return m.ValueParameterDefinition
		}(),
		ValueRelatedArtifact: func() RelatedArtifact {
			if valueRelatedArtifact != nil { return *valueRelatedArtifact }
			return m.ValueRelatedArtifact
		}(),
		ValueTriggerDefinition: func() TriggerDefinition {
			if valueTriggerDefinition != nil { return *valueTriggerDefinition }
			return m.ValueTriggerDefinition
		}(),
		ValueUsageContext: func() UsageContext {
			if valueUsageContext != nil { return *valueUsageContext }
			return m.ValueUsageContext
		}(),
		ValueDosage: func() Dosage {
			if valueDosage != nil { return *valueDosage }
			return m.ValueDosage
		}(),
	}
}
// ElementDefinitionConstraint
// Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.
type ElementDefinitionConstraint struct {
	Element
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// key
	// Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality.
	Key FhirId `json:"key,omitempty"`
	// requirements
	// Description of why this constraint is necessary or appropriate.
	Requirements FhirString `json:"requirements,omitempty"`
	// severity
	// Identifies the impact constraint violation has on the conformance of the instance.
	Severity ConstraintSeverity `json:"severity,omitempty"`
	// human
	// Text that can be used to describe the constraint in messages identifying that the constraint has been violated.
	Human FhirString `json:"human,omitempty"`
	// expression
	// A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met.
	Expression FhirString `json:"expression,omitempty"`
	// xpath
	// An XPath expression of constraint that can be executed to see if this constraint is met.
	Xpath FhirString `json:"xpath,omitempty"`
	// source
	// A reference to the original source of the constraint, for traceability purposes.
	Source FhirCanonical `json:"source,omitempty"`
}

// NewElementDefinitionConstraint creates a new ElementDefinitionConstraint instance
func NewElementDefinitionConstraint(
	id FhirString,
	extension_ []FhirExtension,
	key FhirId,
	requirements FhirString,
	severity ConstraintSeverity,
	human FhirString,
	expression FhirString,
	xpath FhirString,
	source FhirCanonical,
) *ElementDefinitionConstraint {
	return &ElementDefinitionConstraint{
		Id: id,
		Extension_: extension_,
		Key: key,
		Requirements: requirements,
		Severity: severity,
		Human: human,
		Expression: expression,
		Xpath: xpath,
		Source: source,
	}
}
// FromJSON populates ElementDefinitionConstraint from JSON data
func (m *ElementDefinitionConstraint) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ElementDefinitionConstraint to JSON data
func (m *ElementDefinitionConstraint) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ElementDefinitionConstraint
func (m *ElementDefinitionConstraint) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	key *FhirId,
	requirements *FhirString,
	severity *ConstraintSeverity,
	human *FhirString,
	expression *FhirString,
	xpath *FhirString,
	source *FhirCanonical,
) *ElementDefinitionConstraint {
	return &ElementDefinitionConstraint{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		Key: func() FhirId {
			if key != nil { return *key }
			return m.Key
		}(),
		Requirements: func() FhirString {
			if requirements != nil { return *requirements }
			return m.Requirements
		}(),
		Severity: func() ConstraintSeverity {
			if severity != nil { return *severity }
			return m.Severity
		}(),
		Human: func() FhirString {
			if human != nil { return *human }
			return m.Human
		}(),
		Expression: func() FhirString {
			if expression != nil { return *expression }
			return m.Expression
		}(),
		Xpath: func() FhirString {
			if xpath != nil { return *xpath }
			return m.Xpath
		}(),
		Source: func() FhirCanonical {
			if source != nil { return *source }
			return m.Source
		}(),
	}
}
// ElementDefinitionBinding
// Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).
type ElementDefinitionBinding struct {
	Element
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// strength
	// Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.
	Strength BindingStrength `json:"strength,omitempty"`
	// description
	// Describes the intended use of this particular set of codes.
	Description FhirString `json:"description,omitempty"`
	// valueSet
	// Refers to the value set that identifies the set of codes the binding refers to.
	ValueSet FhirCanonical `json:"valueSet,omitempty"`
}

// NewElementDefinitionBinding creates a new ElementDefinitionBinding instance
func NewElementDefinitionBinding(
	id FhirString,
	extension_ []FhirExtension,
	strength BindingStrength,
	description FhirString,
	valueSet FhirCanonical,
) *ElementDefinitionBinding {
	return &ElementDefinitionBinding{
		Id: id,
		Extension_: extension_,
		Strength: strength,
		Description: description,
		ValueSet: valueSet,
	}
}
// FromJSON populates ElementDefinitionBinding from JSON data
func (m *ElementDefinitionBinding) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ElementDefinitionBinding to JSON data
func (m *ElementDefinitionBinding) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ElementDefinitionBinding
func (m *ElementDefinitionBinding) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	strength *BindingStrength,
	description *FhirString,
	valueSet *FhirCanonical,
) *ElementDefinitionBinding {
	return &ElementDefinitionBinding{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		Strength: func() BindingStrength {
			if strength != nil { return *strength }
			return m.Strength
		}(),
		Description: func() FhirString {
			if description != nil { return *description }
			return m.Description
		}(),
		ValueSet: func() FhirCanonical {
			if valueSet != nil { return *valueSet }
			return m.ValueSet
		}(),
	}
}
// ElementDefinitionMapping
// Identifies a concept from an external specification that roughly corresponds to this element.
type ElementDefinitionMapping struct {
	Element
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// identity
	// An internal reference to the definition of a mapping.
	Identity FhirId `json:"identity,omitempty"`
	// language
	// Identifies the computable language in which mapping.map is expressed.
	Language FhirCode `json:"language,omitempty"`
	// map
	// Expresses what part of the target specification corresponds to this element.
	Map_ FhirString `json:"map,omitempty"`
	// comment
	// Comments that provide information about the mapping or its use.
	Comment FhirString `json:"comment,omitempty"`
}

// NewElementDefinitionMapping creates a new ElementDefinitionMapping instance
func NewElementDefinitionMapping(
	id FhirString,
	extension_ []FhirExtension,
	identity FhirId,
	language FhirCode,
	map_ FhirString,
	comment FhirString,
) *ElementDefinitionMapping {
	return &ElementDefinitionMapping{
		Id: id,
		Extension_: extension_,
		Identity: identity,
		Language: language,
		Map_: map_,
		Comment: comment,
	}
}
// FromJSON populates ElementDefinitionMapping from JSON data
func (m *ElementDefinitionMapping) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ElementDefinitionMapping to JSON data
func (m *ElementDefinitionMapping) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of ElementDefinitionMapping
func (m *ElementDefinitionMapping) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	identity *FhirId,
	language *FhirCode,
	map_ *FhirString,
	comment *FhirString,
) *ElementDefinitionMapping {
	return &ElementDefinitionMapping{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		Identity: func() FhirId {
			if identity != nil { return *identity }
			return m.Identity
		}(),
		Language: func() FhirCode {
			if language != nil { return *language }
			return m.Language
		}(),
		Map_: func() FhirString {
			if map_ != nil { return *map_ }
			return m.Map_
		}(),
		Comment: func() FhirString {
			if comment != nil { return *comment }
			return m.Comment
		}(),
	}
}
