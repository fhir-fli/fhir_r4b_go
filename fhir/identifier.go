// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"

)

// Identifier
// An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
type Identifier struct {
	DataType
	// id
	// Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.
	Id FhirString `json:"id,omitempty"`
	// extension
	// May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.
	Extension_ []FhirExtension `json:"extension,omitempty"`
	// use
	// The purpose of this identifier.
	Use IdentifierUse `json:"use,omitempty"`
	// type
	// A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.
	Type_ CodeableConcept `json:"type,omitempty"`
	// system
	// Establishes the namespace for the value - that is, a URL that describes a set values that are unique.
	System FhirUri `json:"system,omitempty"`
	// value
	// The portion of the identifier typically relevant to the user and which is unique within the context of the system.
	Value FhirString `json:"value,omitempty"`
	// period
	// Time period during which identifier is/was valid for use.
	Period Period `json:"period,omitempty"`
	// assigner
	// Organization that issued/manages the identifier.
	Assigner Reference `json:"assigner,omitempty"`
}

// NewIdentifier creates a new Identifier instance
func NewIdentifier(
	id FhirString,
	extension_ []FhirExtension,
	use IdentifierUse,
	type_ CodeableConcept,
	system FhirUri,
	value FhirString,
	period Period,
	assigner Reference,
) *Identifier {
	return &Identifier{
		Id: id,
		Extension_: extension_,
		Use: use,
		Type_: type_,
		System: system,
		Value: value,
		Period: period,
		Assigner: assigner,
	}
}
// FromJSON populates Identifier from JSON data
func (m *Identifier) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Identifier to JSON data
func (m *Identifier) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// CopyWith creates a modified copy of Identifier
func (m *Identifier) CopyWith(
	id *FhirString,
	extension_ *[]FhirExtension,
	use *IdentifierUse,
	type_ *CodeableConcept,
	system *FhirUri,
	value *FhirString,
	period *Period,
	assigner *Reference,
) *Identifier {
	return &Identifier{
		Id: func() FhirString {
			if id != nil { return *id }
			return m.Id
		}(),
		Extension_: func() []FhirExtension {
			if extension_ != nil { return *extension_ }
			return m.Extension_
		}(),
		Use: func() IdentifierUse {
			if use != nil { return *use }
			return m.Use
		}(),
		Type_: func() CodeableConcept {
			if type_ != nil { return *type_ }
			return m.Type_
		}(),
		System: func() FhirUri {
			if system != nil { return *system }
			return m.System
		}(),
		Value: func() FhirString {
			if value != nil { return *value }
			return m.Value
		}(),
		Period: func() Period {
			if period != nil { return *period }
			return m.Period
		}(),
		Assigner: func() Reference {
			if assigner != nil { return *assigner }
			return m.Assigner
		}(),
	}
}
