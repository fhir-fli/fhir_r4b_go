// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Identifier
// An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.
type Identifier struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Use *IdentifierUse `json:"use,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	System *FhirUri `json:"system,omitempty"`
	Value *FhirString `json:"value,omitempty"`
	Period *Period `json:"period,omitempty"`
	Assigner *Reference `json:"assigner,omitempty"`
}

// NewIdentifier creates a new Identifier instance
func NewIdentifier() *Identifier {
	return &Identifier{}
}

// FromJSON populates Identifier from JSON data
func (m *Identifier) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Identifier to JSON data
func (m *Identifier) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Identifier
func (m *Identifier) Clone() *Identifier {
	if m == nil { return nil }
	return &Identifier{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Use: m.Use.Clone(),
		Type: m.Type.Clone(),
		System: m.System.Clone(),
		Value: m.Value.Clone(),
		Period: m.Period.Clone(),
		Assigner: m.Assigner.Clone(),
	}
}

// Equals checks for equality with another Identifier instance
func (m *Identifier) Equals(other *Identifier) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Use.Equals(other.Use) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.System.Equals(other.System) { return false }
	if !m.Value.Equals(other.Value) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !m.Assigner.Equals(other.Assigner) { return false }
	return true
}

