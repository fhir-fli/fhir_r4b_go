// Code generated by FHIR Generator. DO NOT EDIT.
// Codes indicating the kind of the price component.
package fhir_r4b_go

// InvoicePriceComponentType represents the FHIR ValueSet as an enumeration
type InvoicePriceComponentType int

const (
	// base price: the amount is the base price used for calculating the total price before applying surcharges, discount or taxes.
	InvoicePriceComponentType_Base InvoicePriceComponentType = iota
	// surcharge: the amount is a surcharge applied on the base price.
	InvoicePriceComponentType_Surcharge InvoicePriceComponentType = iota
	// deduction: the amount is a deduction applied on the base price.
	InvoicePriceComponentType_Deduction InvoicePriceComponentType = iota
	// discount: the amount is a discount applied on the base price.
	InvoicePriceComponentType_Discount InvoicePriceComponentType = iota
	// tax: the amount is the tax component of the total price.
	InvoicePriceComponentType_Tax InvoicePriceComponentType = iota
	// informational: the amount is of informational character, it has not been applied in the calculation of the total price.
	InvoicePriceComponentType_Informational InvoicePriceComponentType = iota
)

// String converts the enum to its string representation
func (e InvoicePriceComponentType) String() string {
	switch e {
	case InvoicePriceComponentType_Base: return "base price"
	case InvoicePriceComponentType_Surcharge: return "surcharge"
	case InvoicePriceComponentType_Deduction: return "deduction"
	case InvoicePriceComponentType_Discount: return "discount"
	case InvoicePriceComponentType_Tax: return "tax"
	case InvoicePriceComponentType_Informational: return "informational"
	default: return "Unknown"
	}
}

