// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Claim
// A provider issued list of professional services and products which have been provided, or are to be provided, to a patient which is sent to an insurer for reimbursement.
type Claim struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *FinancialResourceStatusCodes `json:"status,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	SubType *CodeableConcept `json:"subtype,omitempty"`
	Use *Use `json:"use,omitempty"`
	Patient *Reference `json:"patient,omitempty"`
	BillablePeriod *Period `json:"billableperiod,omitempty"`
	Created *FhirDateTime `json:"created,omitempty"`
	Enterer *Reference `json:"enterer,omitempty"`
	Insurer *Reference `json:"insurer,omitempty"`
	Provider *Reference `json:"provider,omitempty"`
	Priority *CodeableConcept `json:"priority,omitempty"`
	FundsReserve *CodeableConcept `json:"fundsreserve,omitempty"`
	Related []*ClaimRelated `json:"related,omitempty"`
	Prescription *Reference `json:"prescription,omitempty"`
	OriginalPrescription *Reference `json:"originalprescription,omitempty"`
	Payee *ClaimPayee `json:"payee,omitempty"`
	Referral *Reference `json:"referral,omitempty"`
	Facility *Reference `json:"facility,omitempty"`
	CareTeam []*ClaimCareTeam `json:"careteam,omitempty"`
	SupportingInfo []*ClaimSupportingInfo `json:"supportinginfo,omitempty"`
	Diagnosis []*ClaimDiagnosis `json:"diagnosis,omitempty"`
	Procedure []*ClaimProcedure `json:"procedure,omitempty"`
	Insurance []*ClaimInsurance `json:"insurance,omitempty"`
	Accident *ClaimAccident `json:"accident,omitempty"`
	Item []*ClaimItem `json:"item,omitempty"`
	Total *Money `json:"total,omitempty"`
}

// NewClaim creates a new Claim instance
func NewClaim() *Claim {
	return &Claim{}
}

// FromJSON populates Claim from JSON data
func (m *Claim) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Claim to JSON data
func (m *Claim) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Claim
func (m *Claim) Clone() *Claim {
	if m == nil { return nil }
	return &Claim{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		Type: m.Type.Clone(),
		SubType: m.SubType.Clone(),
		Use: m.Use.Clone(),
		Patient: m.Patient.Clone(),
		BillablePeriod: m.BillablePeriod.Clone(),
		Created: m.Created.Clone(),
		Enterer: m.Enterer.Clone(),
		Insurer: m.Insurer.Clone(),
		Provider: m.Provider.Clone(),
		Priority: m.Priority.Clone(),
		FundsReserve: m.FundsReserve.Clone(),
		Related: cloneSlices(m.Related),
		Prescription: m.Prescription.Clone(),
		OriginalPrescription: m.OriginalPrescription.Clone(),
		Payee: m.Payee.Clone(),
		Referral: m.Referral.Clone(),
		Facility: m.Facility.Clone(),
		CareTeam: cloneSlices(m.CareTeam),
		SupportingInfo: cloneSlices(m.SupportingInfo),
		Diagnosis: cloneSlices(m.Diagnosis),
		Procedure: cloneSlices(m.Procedure),
		Insurance: cloneSlices(m.Insurance),
		Accident: m.Accident.Clone(),
		Item: cloneSlices(m.Item),
		Total: m.Total.Clone(),
	}
}

// Equals checks for equality with another Claim instance
func (m *Claim) Equals(other *Claim) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.SubType.Equals(other.SubType) { return false }
	if !m.Use.Equals(other.Use) { return false }
	if !m.Patient.Equals(other.Patient) { return false }
	if !m.BillablePeriod.Equals(other.BillablePeriod) { return false }
	if !m.Created.Equals(other.Created) { return false }
	if !m.Enterer.Equals(other.Enterer) { return false }
	if !m.Insurer.Equals(other.Insurer) { return false }
	if !m.Provider.Equals(other.Provider) { return false }
	if !m.Priority.Equals(other.Priority) { return false }
	if !m.FundsReserve.Equals(other.FundsReserve) { return false }
	if !compareSlices(m.Related, other.Related) { return false }
	if !m.Prescription.Equals(other.Prescription) { return false }
	if !m.OriginalPrescription.Equals(other.OriginalPrescription) { return false }
	if !m.Payee.Equals(other.Payee) { return false }
	if !m.Referral.Equals(other.Referral) { return false }
	if !m.Facility.Equals(other.Facility) { return false }
	if !compareSlices(m.CareTeam, other.CareTeam) { return false }
	if !compareSlices(m.SupportingInfo, other.SupportingInfo) { return false }
	if !compareSlices(m.Diagnosis, other.Diagnosis) { return false }
	if !compareSlices(m.Procedure, other.Procedure) { return false }
	if !compareSlices(m.Insurance, other.Insurance) { return false }
	if !m.Accident.Equals(other.Accident) { return false }
	if !compareSlices(m.Item, other.Item) { return false }
	if !m.Total.Equals(other.Total) { return false }
	return true
}

// ClaimRelated
// Other claims which are related to this claim such as prior submissions or claims for related services or for the same event.
type ClaimRelated struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Claim *Reference `json:"claim,omitempty"`
	Relationship *CodeableConcept `json:"relationship,omitempty"`
	Reference *Identifier `json:"reference,omitempty"`
}

// NewClaimRelated creates a new ClaimRelated instance
func NewClaimRelated() *ClaimRelated {
	return &ClaimRelated{}
}

// FromJSON populates ClaimRelated from JSON data
func (m *ClaimRelated) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimRelated to JSON data
func (m *ClaimRelated) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ClaimRelated
func (m *ClaimRelated) Clone() *ClaimRelated {
	if m == nil { return nil }
	return &ClaimRelated{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Claim: m.Claim.Clone(),
		Relationship: m.Relationship.Clone(),
		Reference: m.Reference.Clone(),
	}
}

// Equals checks for equality with another ClaimRelated instance
func (m *ClaimRelated) Equals(other *ClaimRelated) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Claim.Equals(other.Claim) { return false }
	if !m.Relationship.Equals(other.Relationship) { return false }
	if !m.Reference.Equals(other.Reference) { return false }
	return true
}

// ClaimPayee
// The party to be reimbursed for cost of the products and services according to the terms of the policy.
type ClaimPayee struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	Party *Reference `json:"party,omitempty"`
}

// NewClaimPayee creates a new ClaimPayee instance
func NewClaimPayee() *ClaimPayee {
	return &ClaimPayee{}
}

// FromJSON populates ClaimPayee from JSON data
func (m *ClaimPayee) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimPayee to JSON data
func (m *ClaimPayee) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ClaimPayee
func (m *ClaimPayee) Clone() *ClaimPayee {
	if m == nil { return nil }
	return &ClaimPayee{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Type: m.Type.Clone(),
		Party: m.Party.Clone(),
	}
}

// Equals checks for equality with another ClaimPayee instance
func (m *ClaimPayee) Equals(other *ClaimPayee) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Party.Equals(other.Party) { return false }
	return true
}

// ClaimCareTeam
// The members of the team who provided the products and services.
type ClaimCareTeam struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Sequence *FhirPositiveInt `json:"sequence,omitempty"`
	Provider *Reference `json:"provider,omitempty"`
	Responsible *FhirBoolean `json:"responsible,omitempty"`
	Role *CodeableConcept `json:"role,omitempty"`
	Qualification *CodeableConcept `json:"qualification,omitempty"`
}

// NewClaimCareTeam creates a new ClaimCareTeam instance
func NewClaimCareTeam() *ClaimCareTeam {
	return &ClaimCareTeam{}
}

// FromJSON populates ClaimCareTeam from JSON data
func (m *ClaimCareTeam) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimCareTeam to JSON data
func (m *ClaimCareTeam) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ClaimCareTeam
func (m *ClaimCareTeam) Clone() *ClaimCareTeam {
	if m == nil { return nil }
	return &ClaimCareTeam{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Sequence: m.Sequence.Clone(),
		Provider: m.Provider.Clone(),
		Responsible: m.Responsible.Clone(),
		Role: m.Role.Clone(),
		Qualification: m.Qualification.Clone(),
	}
}

// Equals checks for equality with another ClaimCareTeam instance
func (m *ClaimCareTeam) Equals(other *ClaimCareTeam) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Sequence.Equals(other.Sequence) { return false }
	if !m.Provider.Equals(other.Provider) { return false }
	if !m.Responsible.Equals(other.Responsible) { return false }
	if !m.Role.Equals(other.Role) { return false }
	if !m.Qualification.Equals(other.Qualification) { return false }
	return true
}

// ClaimSupportingInfo
// Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
type ClaimSupportingInfo struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Sequence *FhirPositiveInt `json:"sequence,omitempty"`
	Category *CodeableConcept `json:"category,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	TimingDate *FhirDate `json:"timingdate,omitempty"`
	TimingPeriod *Period `json:"timingperiod,omitempty"`
	ValueBoolean *FhirBoolean `json:"valueboolean,omitempty"`
	ValueString *FhirString `json:"valuestring,omitempty"`
	ValueQuantity *Quantity `json:"valuequantity,omitempty"`
	ValueAttachment *Attachment `json:"valueattachment,omitempty"`
	ValueReference *Reference `json:"valuereference,omitempty"`
	Reason *CodeableConcept `json:"reason,omitempty"`
}

// NewClaimSupportingInfo creates a new ClaimSupportingInfo instance
func NewClaimSupportingInfo() *ClaimSupportingInfo {
	return &ClaimSupportingInfo{}
}

// FromJSON populates ClaimSupportingInfo from JSON data
func (m *ClaimSupportingInfo) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimSupportingInfo to JSON data
func (m *ClaimSupportingInfo) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ClaimSupportingInfo
func (m *ClaimSupportingInfo) Clone() *ClaimSupportingInfo {
	if m == nil { return nil }
	return &ClaimSupportingInfo{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Sequence: m.Sequence.Clone(),
		Category: m.Category.Clone(),
		Code: m.Code.Clone(),
		TimingDate: m.TimingDate.Clone(),
		TimingPeriod: m.TimingPeriod.Clone(),
		ValueBoolean: m.ValueBoolean.Clone(),
		ValueString: m.ValueString.Clone(),
		ValueQuantity: m.ValueQuantity.Clone(),
		ValueAttachment: m.ValueAttachment.Clone(),
		ValueReference: m.ValueReference.Clone(),
		Reason: m.Reason.Clone(),
	}
}

// Equals checks for equality with another ClaimSupportingInfo instance
func (m *ClaimSupportingInfo) Equals(other *ClaimSupportingInfo) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Sequence.Equals(other.Sequence) { return false }
	if !m.Category.Equals(other.Category) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.TimingDate.Equals(other.TimingDate) { return false }
	if !m.TimingPeriod.Equals(other.TimingPeriod) { return false }
	if !m.ValueBoolean.Equals(other.ValueBoolean) { return false }
	if !m.ValueString.Equals(other.ValueString) { return false }
	if !m.ValueQuantity.Equals(other.ValueQuantity) { return false }
	if !m.ValueAttachment.Equals(other.ValueAttachment) { return false }
	if !m.ValueReference.Equals(other.ValueReference) { return false }
	if !m.Reason.Equals(other.Reason) { return false }
	return true
}

// ClaimDiagnosis
// Information about diagnoses relevant to the claim items.
type ClaimDiagnosis struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Sequence *FhirPositiveInt `json:"sequence,omitempty"`
	DiagnosisCodeableConcept *CodeableConcept `json:"diagnosiscodeableconcept,omitempty"`
	DiagnosisReference *Reference `json:"diagnosisreference,omitempty"`
	Type []*CodeableConcept `json:"type,omitempty"`
	OnAdmission *CodeableConcept `json:"onadmission,omitempty"`
	PackageCode *CodeableConcept `json:"packagecode,omitempty"`
}

// NewClaimDiagnosis creates a new ClaimDiagnosis instance
func NewClaimDiagnosis() *ClaimDiagnosis {
	return &ClaimDiagnosis{}
}

// FromJSON populates ClaimDiagnosis from JSON data
func (m *ClaimDiagnosis) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimDiagnosis to JSON data
func (m *ClaimDiagnosis) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ClaimDiagnosis
func (m *ClaimDiagnosis) Clone() *ClaimDiagnosis {
	if m == nil { return nil }
	return &ClaimDiagnosis{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Sequence: m.Sequence.Clone(),
		DiagnosisCodeableConcept: m.DiagnosisCodeableConcept.Clone(),
		DiagnosisReference: m.DiagnosisReference.Clone(),
		Type: cloneSlices(m.Type),
		OnAdmission: m.OnAdmission.Clone(),
		PackageCode: m.PackageCode.Clone(),
	}
}

// Equals checks for equality with another ClaimDiagnosis instance
func (m *ClaimDiagnosis) Equals(other *ClaimDiagnosis) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Sequence.Equals(other.Sequence) { return false }
	if !m.DiagnosisCodeableConcept.Equals(other.DiagnosisCodeableConcept) { return false }
	if !m.DiagnosisReference.Equals(other.DiagnosisReference) { return false }
	if !compareSlices(m.Type, other.Type) { return false }
	if !m.OnAdmission.Equals(other.OnAdmission) { return false }
	if !m.PackageCode.Equals(other.PackageCode) { return false }
	return true
}

// ClaimProcedure
// Procedures performed on the patient relevant to the billing items with the claim.
type ClaimProcedure struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Sequence *FhirPositiveInt `json:"sequence,omitempty"`
	Type []*CodeableConcept `json:"type,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	ProcedureCodeableConcept *CodeableConcept `json:"procedurecodeableconcept,omitempty"`
	ProcedureReference *Reference `json:"procedurereference,omitempty"`
	Udi []*Reference `json:"udi,omitempty"`
}

// NewClaimProcedure creates a new ClaimProcedure instance
func NewClaimProcedure() *ClaimProcedure {
	return &ClaimProcedure{}
}

// FromJSON populates ClaimProcedure from JSON data
func (m *ClaimProcedure) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimProcedure to JSON data
func (m *ClaimProcedure) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ClaimProcedure
func (m *ClaimProcedure) Clone() *ClaimProcedure {
	if m == nil { return nil }
	return &ClaimProcedure{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Sequence: m.Sequence.Clone(),
		Type: cloneSlices(m.Type),
		Date: m.Date.Clone(),
		ProcedureCodeableConcept: m.ProcedureCodeableConcept.Clone(),
		ProcedureReference: m.ProcedureReference.Clone(),
		Udi: cloneSlices(m.Udi),
	}
}

// Equals checks for equality with another ClaimProcedure instance
func (m *ClaimProcedure) Equals(other *ClaimProcedure) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Sequence.Equals(other.Sequence) { return false }
	if !compareSlices(m.Type, other.Type) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.ProcedureCodeableConcept.Equals(other.ProcedureCodeableConcept) { return false }
	if !m.ProcedureReference.Equals(other.ProcedureReference) { return false }
	if !compareSlices(m.Udi, other.Udi) { return false }
	return true
}

// ClaimInsurance
// Financial instruments for reimbursement for the health care products and services specified on the claim.
type ClaimInsurance struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Sequence *FhirPositiveInt `json:"sequence,omitempty"`
	Focal *FhirBoolean `json:"focal,omitempty"`
	Identifier *Identifier `json:"identifier,omitempty"`
	Coverage *Reference `json:"coverage,omitempty"`
	BusinessArrangement *FhirString `json:"businessarrangement,omitempty"`
	PreAuthRef []*FhirString `json:"preauthref,omitempty"`
	ClaimResponse *Reference `json:"claimresponse,omitempty"`
}

// NewClaimInsurance creates a new ClaimInsurance instance
func NewClaimInsurance() *ClaimInsurance {
	return &ClaimInsurance{}
}

// FromJSON populates ClaimInsurance from JSON data
func (m *ClaimInsurance) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimInsurance to JSON data
func (m *ClaimInsurance) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ClaimInsurance
func (m *ClaimInsurance) Clone() *ClaimInsurance {
	if m == nil { return nil }
	return &ClaimInsurance{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Sequence: m.Sequence.Clone(),
		Focal: m.Focal.Clone(),
		Identifier: m.Identifier.Clone(),
		Coverage: m.Coverage.Clone(),
		BusinessArrangement: m.BusinessArrangement.Clone(),
		PreAuthRef: cloneSlices(m.PreAuthRef),
		ClaimResponse: m.ClaimResponse.Clone(),
	}
}

// Equals checks for equality with another ClaimInsurance instance
func (m *ClaimInsurance) Equals(other *ClaimInsurance) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Sequence.Equals(other.Sequence) { return false }
	if !m.Focal.Equals(other.Focal) { return false }
	if !m.Identifier.Equals(other.Identifier) { return false }
	if !m.Coverage.Equals(other.Coverage) { return false }
	if !m.BusinessArrangement.Equals(other.BusinessArrangement) { return false }
	if !compareSlices(m.PreAuthRef, other.PreAuthRef) { return false }
	if !m.ClaimResponse.Equals(other.ClaimResponse) { return false }
	return true
}

// ClaimAccident
// Details of an accident which resulted in injuries which required the products and services listed in the claim.
type ClaimAccident struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Date *FhirDate `json:"date,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	LocationAddress *Address `json:"locationaddress,omitempty"`
	LocationReference *Reference `json:"locationreference,omitempty"`
}

// NewClaimAccident creates a new ClaimAccident instance
func NewClaimAccident() *ClaimAccident {
	return &ClaimAccident{}
}

// FromJSON populates ClaimAccident from JSON data
func (m *ClaimAccident) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimAccident to JSON data
func (m *ClaimAccident) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ClaimAccident
func (m *ClaimAccident) Clone() *ClaimAccident {
	if m == nil { return nil }
	return &ClaimAccident{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Date: m.Date.Clone(),
		Type: m.Type.Clone(),
		LocationAddress: m.LocationAddress.Clone(),
		LocationReference: m.LocationReference.Clone(),
	}
}

// Equals checks for equality with another ClaimAccident instance
func (m *ClaimAccident) Equals(other *ClaimAccident) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.LocationAddress.Equals(other.LocationAddress) { return false }
	if !m.LocationReference.Equals(other.LocationReference) { return false }
	return true
}

// ClaimItem
// A claim line. Either a simple  product or service or a 'group' of details which can each be a simple items or groups of sub-details.
type ClaimItem struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Sequence *FhirPositiveInt `json:"sequence,omitempty"`
	CareTeamSequence []*FhirPositiveInt `json:"careteamsequence,omitempty"`
	DiagnosisSequence []*FhirPositiveInt `json:"diagnosissequence,omitempty"`
	ProcedureSequence []*FhirPositiveInt `json:"proceduresequence,omitempty"`
	InformationSequence []*FhirPositiveInt `json:"informationsequence,omitempty"`
	Revenue *CodeableConcept `json:"revenue,omitempty"`
	Category *CodeableConcept `json:"category,omitempty"`
	ProductOrService *CodeableConcept `json:"productorservice,omitempty"`
	Modifier []*CodeableConcept `json:"modifier,omitempty"`
	ProgramCode []*CodeableConcept `json:"programcode,omitempty"`
	ServicedDate *FhirDate `json:"serviceddate,omitempty"`
	ServicedPeriod *Period `json:"servicedperiod,omitempty"`
	LocationCodeableConcept *CodeableConcept `json:"locationcodeableconcept,omitempty"`
	LocationAddress *Address `json:"locationaddress,omitempty"`
	LocationReference *Reference `json:"locationreference,omitempty"`
	Quantity *Quantity `json:"quantity,omitempty"`
	UnitPrice *Money `json:"unitprice,omitempty"`
	Factor *FhirDecimal `json:"factor,omitempty"`
	Net *Money `json:"net,omitempty"`
	Udi []*Reference `json:"udi,omitempty"`
	BodySite *CodeableConcept `json:"bodysite,omitempty"`
	SubSite []*CodeableConcept `json:"subsite,omitempty"`
	Encounter []*Reference `json:"encounter,omitempty"`
	Detail []*ClaimDetail `json:"detail,omitempty"`
}

// NewClaimItem creates a new ClaimItem instance
func NewClaimItem() *ClaimItem {
	return &ClaimItem{}
}

// FromJSON populates ClaimItem from JSON data
func (m *ClaimItem) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimItem to JSON data
func (m *ClaimItem) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ClaimItem
func (m *ClaimItem) Clone() *ClaimItem {
	if m == nil { return nil }
	return &ClaimItem{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Sequence: m.Sequence.Clone(),
		CareTeamSequence: cloneSlices(m.CareTeamSequence),
		DiagnosisSequence: cloneSlices(m.DiagnosisSequence),
		ProcedureSequence: cloneSlices(m.ProcedureSequence),
		InformationSequence: cloneSlices(m.InformationSequence),
		Revenue: m.Revenue.Clone(),
		Category: m.Category.Clone(),
		ProductOrService: m.ProductOrService.Clone(),
		Modifier: cloneSlices(m.Modifier),
		ProgramCode: cloneSlices(m.ProgramCode),
		ServicedDate: m.ServicedDate.Clone(),
		ServicedPeriod: m.ServicedPeriod.Clone(),
		LocationCodeableConcept: m.LocationCodeableConcept.Clone(),
		LocationAddress: m.LocationAddress.Clone(),
		LocationReference: m.LocationReference.Clone(),
		Quantity: m.Quantity.Clone(),
		UnitPrice: m.UnitPrice.Clone(),
		Factor: m.Factor.Clone(),
		Net: m.Net.Clone(),
		Udi: cloneSlices(m.Udi),
		BodySite: m.BodySite.Clone(),
		SubSite: cloneSlices(m.SubSite),
		Encounter: cloneSlices(m.Encounter),
		Detail: cloneSlices(m.Detail),
	}
}

// Equals checks for equality with another ClaimItem instance
func (m *ClaimItem) Equals(other *ClaimItem) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Sequence.Equals(other.Sequence) { return false }
	if !compareSlices(m.CareTeamSequence, other.CareTeamSequence) { return false }
	if !compareSlices(m.DiagnosisSequence, other.DiagnosisSequence) { return false }
	if !compareSlices(m.ProcedureSequence, other.ProcedureSequence) { return false }
	if !compareSlices(m.InformationSequence, other.InformationSequence) { return false }
	if !m.Revenue.Equals(other.Revenue) { return false }
	if !m.Category.Equals(other.Category) { return false }
	if !m.ProductOrService.Equals(other.ProductOrService) { return false }
	if !compareSlices(m.Modifier, other.Modifier) { return false }
	if !compareSlices(m.ProgramCode, other.ProgramCode) { return false }
	if !m.ServicedDate.Equals(other.ServicedDate) { return false }
	if !m.ServicedPeriod.Equals(other.ServicedPeriod) { return false }
	if !m.LocationCodeableConcept.Equals(other.LocationCodeableConcept) { return false }
	if !m.LocationAddress.Equals(other.LocationAddress) { return false }
	if !m.LocationReference.Equals(other.LocationReference) { return false }
	if !m.Quantity.Equals(other.Quantity) { return false }
	if !m.UnitPrice.Equals(other.UnitPrice) { return false }
	if !m.Factor.Equals(other.Factor) { return false }
	if !m.Net.Equals(other.Net) { return false }
	if !compareSlices(m.Udi, other.Udi) { return false }
	if !m.BodySite.Equals(other.BodySite) { return false }
	if !compareSlices(m.SubSite, other.SubSite) { return false }
	if !compareSlices(m.Encounter, other.Encounter) { return false }
	if !compareSlices(m.Detail, other.Detail) { return false }
	return true
}

// ClaimDetail
// A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
type ClaimDetail struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Sequence *FhirPositiveInt `json:"sequence,omitempty"`
	Revenue *CodeableConcept `json:"revenue,omitempty"`
	Category *CodeableConcept `json:"category,omitempty"`
	ProductOrService *CodeableConcept `json:"productorservice,omitempty"`
	Modifier []*CodeableConcept `json:"modifier,omitempty"`
	ProgramCode []*CodeableConcept `json:"programcode,omitempty"`
	Quantity *Quantity `json:"quantity,omitempty"`
	UnitPrice *Money `json:"unitprice,omitempty"`
	Factor *FhirDecimal `json:"factor,omitempty"`
	Net *Money `json:"net,omitempty"`
	Udi []*Reference `json:"udi,omitempty"`
	SubDetail []*ClaimSubDetail `json:"subdetail,omitempty"`
}

// NewClaimDetail creates a new ClaimDetail instance
func NewClaimDetail() *ClaimDetail {
	return &ClaimDetail{}
}

// FromJSON populates ClaimDetail from JSON data
func (m *ClaimDetail) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimDetail to JSON data
func (m *ClaimDetail) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ClaimDetail
func (m *ClaimDetail) Clone() *ClaimDetail {
	if m == nil { return nil }
	return &ClaimDetail{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Sequence: m.Sequence.Clone(),
		Revenue: m.Revenue.Clone(),
		Category: m.Category.Clone(),
		ProductOrService: m.ProductOrService.Clone(),
		Modifier: cloneSlices(m.Modifier),
		ProgramCode: cloneSlices(m.ProgramCode),
		Quantity: m.Quantity.Clone(),
		UnitPrice: m.UnitPrice.Clone(),
		Factor: m.Factor.Clone(),
		Net: m.Net.Clone(),
		Udi: cloneSlices(m.Udi),
		SubDetail: cloneSlices(m.SubDetail),
	}
}

// Equals checks for equality with another ClaimDetail instance
func (m *ClaimDetail) Equals(other *ClaimDetail) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Sequence.Equals(other.Sequence) { return false }
	if !m.Revenue.Equals(other.Revenue) { return false }
	if !m.Category.Equals(other.Category) { return false }
	if !m.ProductOrService.Equals(other.ProductOrService) { return false }
	if !compareSlices(m.Modifier, other.Modifier) { return false }
	if !compareSlices(m.ProgramCode, other.ProgramCode) { return false }
	if !m.Quantity.Equals(other.Quantity) { return false }
	if !m.UnitPrice.Equals(other.UnitPrice) { return false }
	if !m.Factor.Equals(other.Factor) { return false }
	if !m.Net.Equals(other.Net) { return false }
	if !compareSlices(m.Udi, other.Udi) { return false }
	if !compareSlices(m.SubDetail, other.SubDetail) { return false }
	return true
}

// ClaimSubDetail
// A claim detail line. Either a simple (a product or service) or a 'group' of sub-details which are simple items.
type ClaimSubDetail struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Sequence *FhirPositiveInt `json:"sequence,omitempty"`
	Revenue *CodeableConcept `json:"revenue,omitempty"`
	Category *CodeableConcept `json:"category,omitempty"`
	ProductOrService *CodeableConcept `json:"productorservice,omitempty"`
	Modifier []*CodeableConcept `json:"modifier,omitempty"`
	ProgramCode []*CodeableConcept `json:"programcode,omitempty"`
	Quantity *Quantity `json:"quantity,omitempty"`
	UnitPrice *Money `json:"unitprice,omitempty"`
	Factor *FhirDecimal `json:"factor,omitempty"`
	Net *Money `json:"net,omitempty"`
	Udi []*Reference `json:"udi,omitempty"`
}

// NewClaimSubDetail creates a new ClaimSubDetail instance
func NewClaimSubDetail() *ClaimSubDetail {
	return &ClaimSubDetail{}
}

// FromJSON populates ClaimSubDetail from JSON data
func (m *ClaimSubDetail) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ClaimSubDetail to JSON data
func (m *ClaimSubDetail) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ClaimSubDetail
func (m *ClaimSubDetail) Clone() *ClaimSubDetail {
	if m == nil { return nil }
	return &ClaimSubDetail{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Sequence: m.Sequence.Clone(),
		Revenue: m.Revenue.Clone(),
		Category: m.Category.Clone(),
		ProductOrService: m.ProductOrService.Clone(),
		Modifier: cloneSlices(m.Modifier),
		ProgramCode: cloneSlices(m.ProgramCode),
		Quantity: m.Quantity.Clone(),
		UnitPrice: m.UnitPrice.Clone(),
		Factor: m.Factor.Clone(),
		Net: m.Net.Clone(),
		Udi: cloneSlices(m.Udi),
	}
}

// Equals checks for equality with another ClaimSubDetail instance
func (m *ClaimSubDetail) Equals(other *ClaimSubDetail) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Sequence.Equals(other.Sequence) { return false }
	if !m.Revenue.Equals(other.Revenue) { return false }
	if !m.Category.Equals(other.Category) { return false }
	if !m.ProductOrService.Equals(other.ProductOrService) { return false }
	if !compareSlices(m.Modifier, other.Modifier) { return false }
	if !compareSlices(m.ProgramCode, other.ProgramCode) { return false }
	if !m.Quantity.Equals(other.Quantity) { return false }
	if !m.UnitPrice.Equals(other.UnitPrice) { return false }
	if !m.Factor.Equals(other.Factor) { return false }
	if !m.Net.Equals(other.Net) { return false }
	if !compareSlices(m.Udi, other.Udi) { return false }
	return true
}

