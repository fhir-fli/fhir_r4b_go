// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// EnrollmentRequest
// This resource provides the insurance enrollment details to the insurer regarding a specified coverage.
type EnrollmentRequest struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *FinancialResourceStatusCodes `json:"status,omitempty"`
	Created *FhirDateTime `json:"created,omitempty"`
	Insurer *Reference `json:"insurer,omitempty"`
	Provider *Reference `json:"provider,omitempty"`
	Candidate *Reference `json:"candidate,omitempty"`
	Coverage *Reference `json:"coverage,omitempty"`
}

// NewEnrollmentRequest creates a new EnrollmentRequest instance.
func NewEnrollmentRequest() *EnrollmentRequest {
	return &EnrollmentRequest{}
}

// UnmarshalJSON populates EnrollmentRequest from JSON data.
func (m *EnrollmentRequest) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Status *FinancialResourceStatusCodes `json:"status,omitempty"`
		Created *FhirDateTime `json:"created,omitempty"`
		Insurer *Reference `json:"insurer,omitempty"`
		Provider *Reference `json:"provider,omitempty"`
		Candidate *Reference `json:"candidate,omitempty"`
		Coverage *Reference `json:"coverage,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Identifier = temp.Identifier
	m.Status = temp.Status
	m.Created = temp.Created
	m.Insurer = temp.Insurer
	m.Provider = temp.Provider
	m.Candidate = temp.Candidate
	m.Coverage = temp.Coverage
	return nil
}

// MarshalJSON converts EnrollmentRequest to JSON data.
func (m *EnrollmentRequest) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Status *FinancialResourceStatusCodes `json:"status,omitempty"`
		Created interface{} `json:"created,omitempty"`
		CreatedElement map[string]interface{} `json:"_created,omitempty"`
		Insurer *Reference `json:"insurer,omitempty"`
		Provider *Reference `json:"provider,omitempty"`
		Candidate *Reference `json:"candidate,omitempty"`
		Coverage *Reference `json:"coverage,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Identifier = m.Identifier
	output.Status = m.Status
	if m.Created != nil && m.Created.Value != nil {
		output.Created = m.Created.Value
		if m.Created.Element != nil {
			output.CreatedElement = toMapOrNil(m.Created.Element.MarshalJSON())
		}
	}
	output.Insurer = m.Insurer
	output.Provider = m.Provider
	output.Candidate = m.Candidate
	output.Coverage = m.Coverage
	return json.Marshal(output)
}

// Clone creates a deep copy of EnrollmentRequest.
func (m *EnrollmentRequest) Clone() *EnrollmentRequest {
	if m == nil { return nil }
	return &EnrollmentRequest{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		Created: m.Created.Clone(),
		Insurer: m.Insurer.Clone(),
		Provider: m.Provider.Clone(),
		Candidate: m.Candidate.Clone(),
		Coverage: m.Coverage.Clone(),
	}
}

// Equals checks equality between two EnrollmentRequest instances.
func (m *EnrollmentRequest) Equals(other *EnrollmentRequest) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Created.Equals(other.Created) { return false }
	if !m.Insurer.Equals(other.Insurer) { return false }
	if !m.Provider.Equals(other.Provider) { return false }
	if !m.Candidate.Equals(other.Candidate) { return false }
	if !m.Coverage.Equals(other.Coverage) { return false }
	return true
}

