// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// Ratio
// A relationship of two Quantity values - expressed as a numerator and a denominator.
type Ratio struct {
	extends DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Numerator *Quantity `json:"numerator,omitempty"`
	Denominator *Quantity `json:"denominator,omitempty"`
}

// NewRatio creates a new Ratio instance.
func NewRatio() *Ratio {
	return &Ratio{}
}

// UnmarshalJSON populates Ratio from JSON data.
func (m *Ratio) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		Numerator *Quantity `json:"numerator,omitempty"`
		Denominator *Quantity `json:"denominator,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.Numerator = temp.Numerator
	m.Denominator = temp.Denominator
	return nil
}

// MarshalJSON converts Ratio to JSON data.
func (m *Ratio) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		Numerator *Quantity `json:"numerator,omitempty"`
		Denominator *Quantity `json:"denominator,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.Numerator = m.Numerator
	output.Denominator = m.Denominator
	return json.Marshal(output)
}

// Clone creates a deep copy of Ratio.
func (m *Ratio) Clone() *Ratio {
	if m == nil { return nil }
	return &Ratio{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Numerator: m.Numerator.Clone(),
		Denominator: m.Denominator.Clone(),
	}
}

// Equals checks equality between two Ratio instances.
func (m *Ratio) Equals(other *Ratio) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Numerator.Equals(other.Numerator) { return false }
	if !m.Denominator.Equals(other.Denominator) { return false }
	return true
}

