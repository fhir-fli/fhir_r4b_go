// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Ratio
// A relationship of two Quantity values - expressed as a numerator and a denominator.
type Ratio struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Numerator *Quantity `json:"numerator,omitempty"`
	Denominator *Quantity `json:"denominator,omitempty"`
}

// NewRatio creates a new Ratio instance
func NewRatio() *Ratio {
	return &Ratio{}
}

// FromJSON populates Ratio from JSON data
func (m *Ratio) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Ratio to JSON data
func (m *Ratio) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Ratio
func (m *Ratio) Clone() *Ratio {
	if m == nil { return nil }
	return &Ratio{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Numerator: m.Numerator.Clone(),
		Denominator: m.Denominator.Clone(),
	}
}

// Equals checks for equality with another Ratio instance
func (m *Ratio) Equals(other *Ratio) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Numerator.Equals(other.Numerator) { return false }
	if !m.Denominator.Equals(other.Denominator) { return false }
	return true
}

