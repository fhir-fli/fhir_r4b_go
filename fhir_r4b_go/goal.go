// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Goal
// Describes the intended objective(s) for a patient, group or organization care, for example, weight loss, restoring an activity of daily living, obtaining herd immunity via immunization, meeting a process improvement objective, etc.
type Goal struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	LifecycleStatus *GoalLifecycleStatus `json:"lifecyclestatus,omitempty"`
	AchievementStatus *CodeableConcept `json:"achievementstatus,omitempty"`
	Category []*CodeableConcept `json:"category,omitempty"`
	Priority *CodeableConcept `json:"priority,omitempty"`
	Description *CodeableConcept `json:"description,omitempty"`
	Subject *Reference `json:"subject,omitempty"`
	StartDate *GoalStartEvent `json:"startdate,omitempty"`
	StartCodeableConcept *CodeableConcept `json:"startcodeableconcept,omitempty"`
	Target []*GoalTarget `json:"target,omitempty"`
	StatusDate *FhirDate `json:"statusdate,omitempty"`
	StatusReason *FhirString `json:"statusreason,omitempty"`
	ExpressedBy *Reference `json:"expressedby,omitempty"`
	Addresses []*Reference `json:"addresses,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
	OutcomeCode []*CodeableConcept `json:"outcomecode,omitempty"`
	OutcomeReference []*Reference `json:"outcomereference,omitempty"`
}

// NewGoal creates a new Goal instance
func NewGoal() *Goal {
	return &Goal{}
}

// FromJSON populates Goal from JSON data
func (m *Goal) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Goal to JSON data
func (m *Goal) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Goal
func (m *Goal) Clone() *Goal {
	if m == nil { return nil }
	return &Goal{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		LifecycleStatus: m.LifecycleStatus.Clone(),
		AchievementStatus: m.AchievementStatus.Clone(),
		Category: cloneSlices(m.Category),
		Priority: m.Priority.Clone(),
		Description: m.Description.Clone(),
		Subject: m.Subject.Clone(),
		StartDate: m.StartDate.Clone(),
		StartCodeableConcept: m.StartCodeableConcept.Clone(),
		Target: cloneSlices(m.Target),
		StatusDate: m.StatusDate.Clone(),
		StatusReason: m.StatusReason.Clone(),
		ExpressedBy: m.ExpressedBy.Clone(),
		Addresses: cloneSlices(m.Addresses),
		Note: cloneSlices(m.Note),
		OutcomeCode: cloneSlices(m.OutcomeCode),
		OutcomeReference: cloneSlices(m.OutcomeReference),
	}
}

// Equals checks for equality with another Goal instance
func (m *Goal) Equals(other *Goal) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.LifecycleStatus.Equals(other.LifecycleStatus) { return false }
	if !m.AchievementStatus.Equals(other.AchievementStatus) { return false }
	if !compareSlices(m.Category, other.Category) { return false }
	if !m.Priority.Equals(other.Priority) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.Subject.Equals(other.Subject) { return false }
	if !m.StartDate.Equals(other.StartDate) { return false }
	if !m.StartCodeableConcept.Equals(other.StartCodeableConcept) { return false }
	if !compareSlices(m.Target, other.Target) { return false }
	if !m.StatusDate.Equals(other.StatusDate) { return false }
	if !m.StatusReason.Equals(other.StatusReason) { return false }
	if !m.ExpressedBy.Equals(other.ExpressedBy) { return false }
	if !compareSlices(m.Addresses, other.Addresses) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	if !compareSlices(m.OutcomeCode, other.OutcomeCode) { return false }
	if !compareSlices(m.OutcomeReference, other.OutcomeReference) { return false }
	return true
}

// GoalTarget
// Indicates what should be done by when.
type GoalTarget struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Measure *CodeableConcept `json:"measure,omitempty"`
	DetailQuantity *Quantity `json:"detailquantity,omitempty"`
	DetailRange *Range `json:"detailrange,omitempty"`
	DetailCodeableConcept *CodeableConcept `json:"detailcodeableconcept,omitempty"`
	DetailString *FhirString `json:"detailstring,omitempty"`
	DetailBoolean *FhirBoolean `json:"detailboolean,omitempty"`
	DetailInteger *FhirInteger `json:"detailinteger,omitempty"`
	DetailRatio *Ratio `json:"detailratio,omitempty"`
	DueDate *FhirDate `json:"duedate,omitempty"`
	DueDuration *FhirDuration `json:"dueduration,omitempty"`
}

// NewGoalTarget creates a new GoalTarget instance
func NewGoalTarget() *GoalTarget {
	return &GoalTarget{}
}

// FromJSON populates GoalTarget from JSON data
func (m *GoalTarget) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts GoalTarget to JSON data
func (m *GoalTarget) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of GoalTarget
func (m *GoalTarget) Clone() *GoalTarget {
	if m == nil { return nil }
	return &GoalTarget{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Measure: m.Measure.Clone(),
		DetailQuantity: m.DetailQuantity.Clone(),
		DetailRange: m.DetailRange.Clone(),
		DetailCodeableConcept: m.DetailCodeableConcept.Clone(),
		DetailString: m.DetailString.Clone(),
		DetailBoolean: m.DetailBoolean.Clone(),
		DetailInteger: m.DetailInteger.Clone(),
		DetailRatio: m.DetailRatio.Clone(),
		DueDate: m.DueDate.Clone(),
		DueDuration: m.DueDuration.Clone(),
	}
}

// Equals checks for equality with another GoalTarget instance
func (m *GoalTarget) Equals(other *GoalTarget) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Measure.Equals(other.Measure) { return false }
	if !m.DetailQuantity.Equals(other.DetailQuantity) { return false }
	if !m.DetailRange.Equals(other.DetailRange) { return false }
	if !m.DetailCodeableConcept.Equals(other.DetailCodeableConcept) { return false }
	if !m.DetailString.Equals(other.DetailString) { return false }
	if !m.DetailBoolean.Equals(other.DetailBoolean) { return false }
	if !m.DetailInteger.Equals(other.DetailInteger) { return false }
	if !m.DetailRatio.Equals(other.DetailRatio) { return false }
	if !m.DueDate.Equals(other.DueDate) { return false }
	if !m.DueDuration.Equals(other.DueDuration) { return false }
	return true
}

