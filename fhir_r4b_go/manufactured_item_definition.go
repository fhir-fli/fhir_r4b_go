// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// ManufacturedItemDefinition
// The definition and characteristics of a medicinal manufactured item, such as a tablet or capsule, as contained in a packaged medicinal product.
type ManufacturedItemDefinition struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	ManufacturedDoseForm *CodeableConcept `json:"manufactureddoseform,omitempty"`
	UnitOfPresentation *CodeableConcept `json:"unitofpresentation,omitempty"`
	Manufacturer []*Reference `json:"manufacturer,omitempty"`
	Ingredient []*CodeableConcept `json:"ingredient,omitempty"`
	Property []*ManufacturedItemDefinitionProperty `json:"property,omitempty"`
}

// NewManufacturedItemDefinition creates a new ManufacturedItemDefinition instance
func NewManufacturedItemDefinition() *ManufacturedItemDefinition {
	return &ManufacturedItemDefinition{}
}

// FromJSON populates ManufacturedItemDefinition from JSON data
func (m *ManufacturedItemDefinition) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ManufacturedItemDefinition to JSON data
func (m *ManufacturedItemDefinition) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ManufacturedItemDefinition
func (m *ManufacturedItemDefinition) Clone() *ManufacturedItemDefinition {
	if m == nil { return nil }
	return &ManufacturedItemDefinition{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		ManufacturedDoseForm: m.ManufacturedDoseForm.Clone(),
		UnitOfPresentation: m.UnitOfPresentation.Clone(),
		Manufacturer: cloneSlices(m.Manufacturer),
		Ingredient: cloneSlices(m.Ingredient),
		Property: cloneSlices(m.Property),
	}
}

// Equals checks for equality with another ManufacturedItemDefinition instance
func (m *ManufacturedItemDefinition) Equals(other *ManufacturedItemDefinition) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.ManufacturedDoseForm.Equals(other.ManufacturedDoseForm) { return false }
	if !m.UnitOfPresentation.Equals(other.UnitOfPresentation) { return false }
	if !compareSlices(m.Manufacturer, other.Manufacturer) { return false }
	if !compareSlices(m.Ingredient, other.Ingredient) { return false }
	if !compareSlices(m.Property, other.Property) { return false }
	return true
}

// ManufacturedItemDefinitionProperty
// General characteristics of this item.
type ManufacturedItemDefinitionProperty struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	ValueCodeableConcept *CodeableConcept `json:"valuecodeableconcept,omitempty"`
	ValueQuantity *Quantity `json:"valuequantity,omitempty"`
	ValueDate *FhirDate `json:"valuedate,omitempty"`
	ValueBoolean *FhirBoolean `json:"valueboolean,omitempty"`
	ValueAttachment *Attachment `json:"valueattachment,omitempty"`
}

// NewManufacturedItemDefinitionProperty creates a new ManufacturedItemDefinitionProperty instance
func NewManufacturedItemDefinitionProperty() *ManufacturedItemDefinitionProperty {
	return &ManufacturedItemDefinitionProperty{}
}

// FromJSON populates ManufacturedItemDefinitionProperty from JSON data
func (m *ManufacturedItemDefinitionProperty) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ManufacturedItemDefinitionProperty to JSON data
func (m *ManufacturedItemDefinitionProperty) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ManufacturedItemDefinitionProperty
func (m *ManufacturedItemDefinitionProperty) Clone() *ManufacturedItemDefinitionProperty {
	if m == nil { return nil }
	return &ManufacturedItemDefinitionProperty{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Type: m.Type.Clone(),
		ValueCodeableConcept: m.ValueCodeableConcept.Clone(),
		ValueQuantity: m.ValueQuantity.Clone(),
		ValueDate: m.ValueDate.Clone(),
		ValueBoolean: m.ValueBoolean.Clone(),
		ValueAttachment: m.ValueAttachment.Clone(),
	}
}

// Equals checks for equality with another ManufacturedItemDefinitionProperty instance
func (m *ManufacturedItemDefinitionProperty) Equals(other *ManufacturedItemDefinitionProperty) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.ValueCodeableConcept.Equals(other.ValueCodeableConcept) { return false }
	if !m.ValueQuantity.Equals(other.ValueQuantity) { return false }
	if !m.ValueDate.Equals(other.ValueDate) { return false }
	if !m.ValueBoolean.Equals(other.ValueBoolean) { return false }
	if !m.ValueAttachment.Equals(other.ValueAttachment) { return false }
	return true
}

