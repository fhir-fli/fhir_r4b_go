// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// EpisodeOfCare
// An association between a patient and an organization / healthcare provider(s) during which time encounters may occur. The managing organization assumes a level of responsibility for the patient during this time.
type EpisodeOfCare struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *EpisodeOfCareStatus `json:"status,omitempty"`
	StatusHistory []*EpisodeOfCareStatusHistory `json:"statushistory,omitempty"`
	Type []*CodeableConcept `json:"type,omitempty"`
	Diagnosis []*EpisodeOfCareDiagnosis `json:"diagnosis,omitempty"`
	Patient *Reference `json:"patient,omitempty"`
	ManagingOrganization *Reference `json:"managingorganization,omitempty"`
	Period *Period `json:"period,omitempty"`
	ReferralRequest []*Reference `json:"referralrequest,omitempty"`
	CareManager *Reference `json:"caremanager,omitempty"`
	Team []*Reference `json:"team,omitempty"`
	Account []*Reference `json:"account,omitempty"`
}

// NewEpisodeOfCare creates a new EpisodeOfCare instance
func NewEpisodeOfCare() *EpisodeOfCare {
	return &EpisodeOfCare{}
}

// FromJSON populates EpisodeOfCare from JSON data
func (m *EpisodeOfCare) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts EpisodeOfCare to JSON data
func (m *EpisodeOfCare) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of EpisodeOfCare
func (m *EpisodeOfCare) Clone() *EpisodeOfCare {
	if m == nil { return nil }
	return &EpisodeOfCare{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		StatusHistory: cloneSlices(m.StatusHistory),
		Type: cloneSlices(m.Type),
		Diagnosis: cloneSlices(m.Diagnosis),
		Patient: m.Patient.Clone(),
		ManagingOrganization: m.ManagingOrganization.Clone(),
		Period: m.Period.Clone(),
		ReferralRequest: cloneSlices(m.ReferralRequest),
		CareManager: m.CareManager.Clone(),
		Team: cloneSlices(m.Team),
		Account: cloneSlices(m.Account),
	}
}

// Equals checks for equality with another EpisodeOfCare instance
func (m *EpisodeOfCare) Equals(other *EpisodeOfCare) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !compareSlices(m.StatusHistory, other.StatusHistory) { return false }
	if !compareSlices(m.Type, other.Type) { return false }
	if !compareSlices(m.Diagnosis, other.Diagnosis) { return false }
	if !m.Patient.Equals(other.Patient) { return false }
	if !m.ManagingOrganization.Equals(other.ManagingOrganization) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !compareSlices(m.ReferralRequest, other.ReferralRequest) { return false }
	if !m.CareManager.Equals(other.CareManager) { return false }
	if !compareSlices(m.Team, other.Team) { return false }
	if !compareSlices(m.Account, other.Account) { return false }
	return true
}

// EpisodeOfCareStatusHistory
// The history of statuses that the EpisodeOfCare has been through (without requiring processing the history of the resource).
type EpisodeOfCareStatusHistory struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Status *EpisodeOfCareStatus `json:"status,omitempty"`
	Period *Period `json:"period,omitempty"`
}

// NewEpisodeOfCareStatusHistory creates a new EpisodeOfCareStatusHistory instance
func NewEpisodeOfCareStatusHistory() *EpisodeOfCareStatusHistory {
	return &EpisodeOfCareStatusHistory{}
}

// FromJSON populates EpisodeOfCareStatusHistory from JSON data
func (m *EpisodeOfCareStatusHistory) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts EpisodeOfCareStatusHistory to JSON data
func (m *EpisodeOfCareStatusHistory) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of EpisodeOfCareStatusHistory
func (m *EpisodeOfCareStatusHistory) Clone() *EpisodeOfCareStatusHistory {
	if m == nil { return nil }
	return &EpisodeOfCareStatusHistory{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Status: m.Status.Clone(),
		Period: m.Period.Clone(),
	}
}

// Equals checks for equality with another EpisodeOfCareStatusHistory instance
func (m *EpisodeOfCareStatusHistory) Equals(other *EpisodeOfCareStatusHistory) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Period.Equals(other.Period) { return false }
	return true
}

// EpisodeOfCareDiagnosis
// The list of diagnosis relevant to this episode of care.
type EpisodeOfCareDiagnosis struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Condition *Reference `json:"condition,omitempty"`
	Role *CodeableConcept `json:"role,omitempty"`
	Rank *FhirPositiveInt `json:"rank,omitempty"`
}

// NewEpisodeOfCareDiagnosis creates a new EpisodeOfCareDiagnosis instance
func NewEpisodeOfCareDiagnosis() *EpisodeOfCareDiagnosis {
	return &EpisodeOfCareDiagnosis{}
}

// FromJSON populates EpisodeOfCareDiagnosis from JSON data
func (m *EpisodeOfCareDiagnosis) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts EpisodeOfCareDiagnosis to JSON data
func (m *EpisodeOfCareDiagnosis) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of EpisodeOfCareDiagnosis
func (m *EpisodeOfCareDiagnosis) Clone() *EpisodeOfCareDiagnosis {
	if m == nil { return nil }
	return &EpisodeOfCareDiagnosis{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Condition: m.Condition.Clone(),
		Role: m.Role.Clone(),
		Rank: m.Rank.Clone(),
	}
}

// Equals checks for equality with another EpisodeOfCareDiagnosis instance
func (m *EpisodeOfCareDiagnosis) Equals(other *EpisodeOfCareDiagnosis) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Condition.Equals(other.Condition) { return false }
	if !m.Role.Equals(other.Role) { return false }
	if !m.Rank.Equals(other.Rank) { return false }
	return true
}

