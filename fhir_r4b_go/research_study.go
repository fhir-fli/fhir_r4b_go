// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// ResearchStudy
// A process where a researcher or organization plans and then executes a series of steps intended to increase the field of healthcare-related knowledge.  This includes studies of safety, efficacy, comparative effectiveness and other information about medications, devices, therapies and other interventional and investigative techniques.  A ResearchStudy involves the gathering of information about human or animal subjects.
type ResearchStudy struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	Protocol []*Reference `json:"protocol,omitempty"`
	PartOf []*Reference `json:"partof,omitempty"`
	Status *ResearchStudyStatus `json:"status,omitempty"`
	PrimaryPurposeType *CodeableConcept `json:"primarypurposetype,omitempty"`
	Phase *CodeableConcept `json:"phase,omitempty"`
	Category []*CodeableConcept `json:"category,omitempty"`
	Focus []*CodeableConcept `json:"focus,omitempty"`
	Condition []*CodeableConcept `json:"condition,omitempty"`
	Contact []*ContactDetail `json:"contact,omitempty"`
	RelatedArtifact []*RelatedArtifact `json:"relatedartifact,omitempty"`
	Keyword []*CodeableConcept `json:"keyword,omitempty"`
	Location []*CodeableConcept `json:"location,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	Enrollment []*Reference `json:"enrollment,omitempty"`
	Period *Period `json:"period,omitempty"`
	Sponsor *Reference `json:"sponsor,omitempty"`
	PrincipalInvestigator *Reference `json:"principalinvestigator,omitempty"`
	Site []*Reference `json:"site,omitempty"`
	ReasonStopped *CodeableConcept `json:"reasonstopped,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
	Arm []*ResearchStudyArm `json:"arm,omitempty"`
	Objective []*ResearchStudyObjective `json:"objective,omitempty"`
}

// NewResearchStudy creates a new ResearchStudy instance
func NewResearchStudy() *ResearchStudy {
	return &ResearchStudy{}
}

// FromJSON populates ResearchStudy from JSON data
func (m *ResearchStudy) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ResearchStudy to JSON data
func (m *ResearchStudy) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ResearchStudy
func (m *ResearchStudy) Clone() *ResearchStudy {
	if m == nil { return nil }
	return &ResearchStudy{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Title: m.Title.Clone(),
		Protocol: cloneSlices(m.Protocol),
		PartOf: cloneSlices(m.PartOf),
		Status: m.Status.Clone(),
		PrimaryPurposeType: m.PrimaryPurposeType.Clone(),
		Phase: m.Phase.Clone(),
		Category: cloneSlices(m.Category),
		Focus: cloneSlices(m.Focus),
		Condition: cloneSlices(m.Condition),
		Contact: cloneSlices(m.Contact),
		RelatedArtifact: cloneSlices(m.RelatedArtifact),
		Keyword: cloneSlices(m.Keyword),
		Location: cloneSlices(m.Location),
		Description: m.Description.Clone(),
		Enrollment: cloneSlices(m.Enrollment),
		Period: m.Period.Clone(),
		Sponsor: m.Sponsor.Clone(),
		PrincipalInvestigator: m.PrincipalInvestigator.Clone(),
		Site: cloneSlices(m.Site),
		ReasonStopped: m.ReasonStopped.Clone(),
		Note: cloneSlices(m.Note),
		Arm: cloneSlices(m.Arm),
		Objective: cloneSlices(m.Objective),
	}
}

// Equals checks for equality with another ResearchStudy instance
func (m *ResearchStudy) Equals(other *ResearchStudy) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !compareSlices(m.Protocol, other.Protocol) { return false }
	if !compareSlices(m.PartOf, other.PartOf) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.PrimaryPurposeType.Equals(other.PrimaryPurposeType) { return false }
	if !m.Phase.Equals(other.Phase) { return false }
	if !compareSlices(m.Category, other.Category) { return false }
	if !compareSlices(m.Focus, other.Focus) { return false }
	if !compareSlices(m.Condition, other.Condition) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !compareSlices(m.RelatedArtifact, other.RelatedArtifact) { return false }
	if !compareSlices(m.Keyword, other.Keyword) { return false }
	if !compareSlices(m.Location, other.Location) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.Enrollment, other.Enrollment) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !m.Sponsor.Equals(other.Sponsor) { return false }
	if !m.PrincipalInvestigator.Equals(other.PrincipalInvestigator) { return false }
	if !compareSlices(m.Site, other.Site) { return false }
	if !m.ReasonStopped.Equals(other.ReasonStopped) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	if !compareSlices(m.Arm, other.Arm) { return false }
	if !compareSlices(m.Objective, other.Objective) { return false }
	return true
}

// ResearchStudyArm
// Describes an expected sequence of events for one of the participants of a study.  E.g. Exposure to drug A, wash-out, exposure to drug B, wash-out, follow-up.
type ResearchStudyArm struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	Description *FhirString `json:"description,omitempty"`
}

// NewResearchStudyArm creates a new ResearchStudyArm instance
func NewResearchStudyArm() *ResearchStudyArm {
	return &ResearchStudyArm{}
}

// FromJSON populates ResearchStudyArm from JSON data
func (m *ResearchStudyArm) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ResearchStudyArm to JSON data
func (m *ResearchStudyArm) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ResearchStudyArm
func (m *ResearchStudyArm) Clone() *ResearchStudyArm {
	if m == nil { return nil }
	return &ResearchStudyArm{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Name: m.Name.Clone(),
		Type: m.Type.Clone(),
		Description: m.Description.Clone(),
	}
}

// Equals checks for equality with another ResearchStudyArm instance
func (m *ResearchStudyArm) Equals(other *ResearchStudyArm) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Description.Equals(other.Description) { return false }
	return true
}

// ResearchStudyObjective
// A goal that the study is aiming to achieve in terms of a scientific question to be answered by the analysis of data collected during the study.
type ResearchStudyObjective struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
}

// NewResearchStudyObjective creates a new ResearchStudyObjective instance
func NewResearchStudyObjective() *ResearchStudyObjective {
	return &ResearchStudyObjective{}
}

// FromJSON populates ResearchStudyObjective from JSON data
func (m *ResearchStudyObjective) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ResearchStudyObjective to JSON data
func (m *ResearchStudyObjective) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ResearchStudyObjective
func (m *ResearchStudyObjective) Clone() *ResearchStudyObjective {
	if m == nil { return nil }
	return &ResearchStudyObjective{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Name: m.Name.Clone(),
		Type: m.Type.Clone(),
	}
}

// Equals checks for equality with another ResearchStudyObjective instance
func (m *ResearchStudyObjective) Equals(other *ResearchStudyObjective) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Type.Equals(other.Type) { return false }
	return true
}

