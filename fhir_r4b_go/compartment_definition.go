// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// CompartmentDefinition
// A compartment definition that defines how resources are accessed on a server.
type CompartmentDefinition struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Url *FhirUri `json:"url,omitempty"`
	Version *FhirString `json:"version,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	Experimental *FhirBoolean `json:"experimental,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Publisher *FhirString `json:"publisher,omitempty"`
	Contact []*ContactDetail `json:"contact,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	UseContext []*UsageContext `json:"usecontext,omitempty"`
	Purpose *FhirMarkdown `json:"purpose,omitempty"`
	Code *CompartmentType `json:"code,omitempty"`
	Search *FhirBoolean `json:"search,omitempty"`
	Resource []*CompartmentDefinitionResource `json:"resource,omitempty"`
}

// NewCompartmentDefinition creates a new CompartmentDefinition instance
func NewCompartmentDefinition() *CompartmentDefinition {
	return &CompartmentDefinition{}
}

// FromJSON populates CompartmentDefinition from JSON data
func (m *CompartmentDefinition) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CompartmentDefinition to JSON data
func (m *CompartmentDefinition) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of CompartmentDefinition
func (m *CompartmentDefinition) Clone() *CompartmentDefinition {
	if m == nil { return nil }
	return &CompartmentDefinition{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Url: m.Url.Clone(),
		Version: m.Version.Clone(),
		Name: m.Name.Clone(),
		Status: m.Status.Clone(),
		Experimental: m.Experimental.Clone(),
		Date: m.Date.Clone(),
		Publisher: m.Publisher.Clone(),
		Contact: cloneSlices(m.Contact),
		Description: m.Description.Clone(),
		UseContext: cloneSlices(m.UseContext),
		Purpose: m.Purpose.Clone(),
		Code: m.Code.Clone(),
		Search: m.Search.Clone(),
		Resource: cloneSlices(m.Resource),
	}
}

// Equals checks for equality with another CompartmentDefinition instance
func (m *CompartmentDefinition) Equals(other *CompartmentDefinition) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !m.Version.Equals(other.Version) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Experimental.Equals(other.Experimental) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Publisher.Equals(other.Publisher) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.UseContext, other.UseContext) { return false }
	if !m.Purpose.Equals(other.Purpose) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Search.Equals(other.Search) { return false }
	if !compareSlices(m.Resource, other.Resource) { return false }
	return true
}

// CompartmentDefinitionResource
// Information about how a resource is related to the compartment.
type CompartmentDefinitionResource struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *FhirCode `json:"code,omitempty"`
	Param []*FhirString `json:"param,omitempty"`
	Documentation *FhirString `json:"documentation,omitempty"`
}

// NewCompartmentDefinitionResource creates a new CompartmentDefinitionResource instance
func NewCompartmentDefinitionResource() *CompartmentDefinitionResource {
	return &CompartmentDefinitionResource{}
}

// FromJSON populates CompartmentDefinitionResource from JSON data
func (m *CompartmentDefinitionResource) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CompartmentDefinitionResource to JSON data
func (m *CompartmentDefinitionResource) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of CompartmentDefinitionResource
func (m *CompartmentDefinitionResource) Clone() *CompartmentDefinitionResource {
	if m == nil { return nil }
	return &CompartmentDefinitionResource{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		Param: cloneSlices(m.Param),
		Documentation: m.Documentation.Clone(),
	}
}

// Equals checks for equality with another CompartmentDefinitionResource instance
func (m *CompartmentDefinitionResource) Equals(other *CompartmentDefinitionResource) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !compareSlices(m.Param, other.Param) { return false }
	if !m.Documentation.Equals(other.Documentation) { return false }
	return true
}

