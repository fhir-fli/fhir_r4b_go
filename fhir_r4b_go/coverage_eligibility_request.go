// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// CoverageEligibilityRequest
// The CoverageEligibilityRequest provides patient and insurance coverage information to an insurer for them to respond, in the form of an CoverageEligibilityResponse, with information regarding whether the stated coverage is valid and in-force and optionally to provide the insurance details of the policy.
type CoverageEligibilityRequest struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *FinancialResourceStatusCodes `json:"status,omitempty"`
	Priority *CodeableConcept `json:"priority,omitempty"`
	Purpose []*EligibilityRequestPurpose `json:"purpose,omitempty"`
	Patient *Reference `json:"patient,omitempty"`
	ServicedDate *FhirDate `json:"serviceddate,omitempty"`
	ServicedPeriod *Period `json:"servicedperiod,omitempty"`
	Created *FhirDateTime `json:"created,omitempty"`
	Enterer *Reference `json:"enterer,omitempty"`
	Provider *Reference `json:"provider,omitempty"`
	Insurer *Reference `json:"insurer,omitempty"`
	Facility *Reference `json:"facility,omitempty"`
	SupportingInfo []*CoverageEligibilityRequestSupportingInfo `json:"supportinginfo,omitempty"`
	Insurance []*CoverageEligibilityRequestInsurance `json:"insurance,omitempty"`
	Item []*CoverageEligibilityRequestItem `json:"item,omitempty"`
}

// NewCoverageEligibilityRequest creates a new CoverageEligibilityRequest instance
func NewCoverageEligibilityRequest() *CoverageEligibilityRequest {
	return &CoverageEligibilityRequest{}
}

// FromJSON populates CoverageEligibilityRequest from JSON data
func (m *CoverageEligibilityRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CoverageEligibilityRequest to JSON data
func (m *CoverageEligibilityRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of CoverageEligibilityRequest
func (m *CoverageEligibilityRequest) Clone() *CoverageEligibilityRequest {
	if m == nil { return nil }
	return &CoverageEligibilityRequest{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		Priority: m.Priority.Clone(),
		Purpose: cloneSlices(m.Purpose),
		Patient: m.Patient.Clone(),
		ServicedDate: m.ServicedDate.Clone(),
		ServicedPeriod: m.ServicedPeriod.Clone(),
		Created: m.Created.Clone(),
		Enterer: m.Enterer.Clone(),
		Provider: m.Provider.Clone(),
		Insurer: m.Insurer.Clone(),
		Facility: m.Facility.Clone(),
		SupportingInfo: cloneSlices(m.SupportingInfo),
		Insurance: cloneSlices(m.Insurance),
		Item: cloneSlices(m.Item),
	}
}

// Equals checks for equality with another CoverageEligibilityRequest instance
func (m *CoverageEligibilityRequest) Equals(other *CoverageEligibilityRequest) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Priority.Equals(other.Priority) { return false }
	if !compareSlices(m.Purpose, other.Purpose) { return false }
	if !m.Patient.Equals(other.Patient) { return false }
	if !m.ServicedDate.Equals(other.ServicedDate) { return false }
	if !m.ServicedPeriod.Equals(other.ServicedPeriod) { return false }
	if !m.Created.Equals(other.Created) { return false }
	if !m.Enterer.Equals(other.Enterer) { return false }
	if !m.Provider.Equals(other.Provider) { return false }
	if !m.Insurer.Equals(other.Insurer) { return false }
	if !m.Facility.Equals(other.Facility) { return false }
	if !compareSlices(m.SupportingInfo, other.SupportingInfo) { return false }
	if !compareSlices(m.Insurance, other.Insurance) { return false }
	if !compareSlices(m.Item, other.Item) { return false }
	return true
}

// CoverageEligibilityRequestSupportingInfo
// Additional information codes regarding exceptions, special considerations, the condition, situation, prior or concurrent issues.
type CoverageEligibilityRequestSupportingInfo struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Sequence *FhirPositiveInt `json:"sequence,omitempty"`
	Information *Reference `json:"information,omitempty"`
	AppliesToAll *FhirBoolean `json:"appliestoall,omitempty"`
}

// NewCoverageEligibilityRequestSupportingInfo creates a new CoverageEligibilityRequestSupportingInfo instance
func NewCoverageEligibilityRequestSupportingInfo() *CoverageEligibilityRequestSupportingInfo {
	return &CoverageEligibilityRequestSupportingInfo{}
}

// FromJSON populates CoverageEligibilityRequestSupportingInfo from JSON data
func (m *CoverageEligibilityRequestSupportingInfo) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CoverageEligibilityRequestSupportingInfo to JSON data
func (m *CoverageEligibilityRequestSupportingInfo) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of CoverageEligibilityRequestSupportingInfo
func (m *CoverageEligibilityRequestSupportingInfo) Clone() *CoverageEligibilityRequestSupportingInfo {
	if m == nil { return nil }
	return &CoverageEligibilityRequestSupportingInfo{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Sequence: m.Sequence.Clone(),
		Information: m.Information.Clone(),
		AppliesToAll: m.AppliesToAll.Clone(),
	}
}

// Equals checks for equality with another CoverageEligibilityRequestSupportingInfo instance
func (m *CoverageEligibilityRequestSupportingInfo) Equals(other *CoverageEligibilityRequestSupportingInfo) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Sequence.Equals(other.Sequence) { return false }
	if !m.Information.Equals(other.Information) { return false }
	if !m.AppliesToAll.Equals(other.AppliesToAll) { return false }
	return true
}

// CoverageEligibilityRequestInsurance
// Financial instruments for reimbursement for the health care products and services.
type CoverageEligibilityRequestInsurance struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Focal *FhirBoolean `json:"focal,omitempty"`
	Coverage *Reference `json:"coverage,omitempty"`
	BusinessArrangement *FhirString `json:"businessarrangement,omitempty"`
}

// NewCoverageEligibilityRequestInsurance creates a new CoverageEligibilityRequestInsurance instance
func NewCoverageEligibilityRequestInsurance() *CoverageEligibilityRequestInsurance {
	return &CoverageEligibilityRequestInsurance{}
}

// FromJSON populates CoverageEligibilityRequestInsurance from JSON data
func (m *CoverageEligibilityRequestInsurance) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CoverageEligibilityRequestInsurance to JSON data
func (m *CoverageEligibilityRequestInsurance) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of CoverageEligibilityRequestInsurance
func (m *CoverageEligibilityRequestInsurance) Clone() *CoverageEligibilityRequestInsurance {
	if m == nil { return nil }
	return &CoverageEligibilityRequestInsurance{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Focal: m.Focal.Clone(),
		Coverage: m.Coverage.Clone(),
		BusinessArrangement: m.BusinessArrangement.Clone(),
	}
}

// Equals checks for equality with another CoverageEligibilityRequestInsurance instance
func (m *CoverageEligibilityRequestInsurance) Equals(other *CoverageEligibilityRequestInsurance) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Focal.Equals(other.Focal) { return false }
	if !m.Coverage.Equals(other.Coverage) { return false }
	if !m.BusinessArrangement.Equals(other.BusinessArrangement) { return false }
	return true
}

// CoverageEligibilityRequestItem
// Service categories or billable services for which benefit details and/or an authorization prior to service delivery may be required by the payor.
type CoverageEligibilityRequestItem struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	SupportingInfoSequence []*FhirPositiveInt `json:"supportinginfosequence,omitempty"`
	Category *CodeableConcept `json:"category,omitempty"`
	ProductOrService *CodeableConcept `json:"productorservice,omitempty"`
	Modifier []*CodeableConcept `json:"modifier,omitempty"`
	Provider *Reference `json:"provider,omitempty"`
	Quantity *Quantity `json:"quantity,omitempty"`
	UnitPrice *Money `json:"unitprice,omitempty"`
	Facility *Reference `json:"facility,omitempty"`
	Diagnosis []*CoverageEligibilityRequestDiagnosis `json:"diagnosis,omitempty"`
	Detail []*Reference `json:"detail,omitempty"`
}

// NewCoverageEligibilityRequestItem creates a new CoverageEligibilityRequestItem instance
func NewCoverageEligibilityRequestItem() *CoverageEligibilityRequestItem {
	return &CoverageEligibilityRequestItem{}
}

// FromJSON populates CoverageEligibilityRequestItem from JSON data
func (m *CoverageEligibilityRequestItem) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CoverageEligibilityRequestItem to JSON data
func (m *CoverageEligibilityRequestItem) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of CoverageEligibilityRequestItem
func (m *CoverageEligibilityRequestItem) Clone() *CoverageEligibilityRequestItem {
	if m == nil { return nil }
	return &CoverageEligibilityRequestItem{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		SupportingInfoSequence: cloneSlices(m.SupportingInfoSequence),
		Category: m.Category.Clone(),
		ProductOrService: m.ProductOrService.Clone(),
		Modifier: cloneSlices(m.Modifier),
		Provider: m.Provider.Clone(),
		Quantity: m.Quantity.Clone(),
		UnitPrice: m.UnitPrice.Clone(),
		Facility: m.Facility.Clone(),
		Diagnosis: cloneSlices(m.Diagnosis),
		Detail: cloneSlices(m.Detail),
	}
}

// Equals checks for equality with another CoverageEligibilityRequestItem instance
func (m *CoverageEligibilityRequestItem) Equals(other *CoverageEligibilityRequestItem) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.SupportingInfoSequence, other.SupportingInfoSequence) { return false }
	if !m.Category.Equals(other.Category) { return false }
	if !m.ProductOrService.Equals(other.ProductOrService) { return false }
	if !compareSlices(m.Modifier, other.Modifier) { return false }
	if !m.Provider.Equals(other.Provider) { return false }
	if !m.Quantity.Equals(other.Quantity) { return false }
	if !m.UnitPrice.Equals(other.UnitPrice) { return false }
	if !m.Facility.Equals(other.Facility) { return false }
	if !compareSlices(m.Diagnosis, other.Diagnosis) { return false }
	if !compareSlices(m.Detail, other.Detail) { return false }
	return true
}

// CoverageEligibilityRequestDiagnosis
// Patient diagnosis for which care is sought.
type CoverageEligibilityRequestDiagnosis struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	DiagnosisCodeableConcept *CodeableConcept `json:"diagnosiscodeableconcept,omitempty"`
	DiagnosisReference *Reference `json:"diagnosisreference,omitempty"`
}

// NewCoverageEligibilityRequestDiagnosis creates a new CoverageEligibilityRequestDiagnosis instance
func NewCoverageEligibilityRequestDiagnosis() *CoverageEligibilityRequestDiagnosis {
	return &CoverageEligibilityRequestDiagnosis{}
}

// FromJSON populates CoverageEligibilityRequestDiagnosis from JSON data
func (m *CoverageEligibilityRequestDiagnosis) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CoverageEligibilityRequestDiagnosis to JSON data
func (m *CoverageEligibilityRequestDiagnosis) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of CoverageEligibilityRequestDiagnosis
func (m *CoverageEligibilityRequestDiagnosis) Clone() *CoverageEligibilityRequestDiagnosis {
	if m == nil { return nil }
	return &CoverageEligibilityRequestDiagnosis{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		DiagnosisCodeableConcept: m.DiagnosisCodeableConcept.Clone(),
		DiagnosisReference: m.DiagnosisReference.Clone(),
	}
}

// Equals checks for equality with another CoverageEligibilityRequestDiagnosis instance
func (m *CoverageEligibilityRequestDiagnosis) Equals(other *CoverageEligibilityRequestDiagnosis) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.DiagnosisCodeableConcept.Equals(other.DiagnosisCodeableConcept) { return false }
	if !m.DiagnosisReference.Equals(other.DiagnosisReference) { return false }
	return true
}

