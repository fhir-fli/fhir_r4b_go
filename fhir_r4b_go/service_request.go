// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// ServiceRequest
// A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
type ServiceRequest struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	InstantiatesCanonical []*FhirCanonical `json:"instantiatescanonical,omitempty"`
	InstantiatesUri []*FhirUri `json:"instantiatesuri,omitempty"`
	BasedOn []*Reference `json:"basedon,omitempty"`
	Replaces []*Reference `json:"replaces,omitempty"`
	Requisition *Identifier `json:"requisition,omitempty"`
	Status *RequestStatus `json:"status,omitempty"`
	Intent *RequestIntent `json:"intent,omitempty"`
	Category []*CodeableConcept `json:"category,omitempty"`
	Priority *RequestPriority `json:"priority,omitempty"`
	DoNotPerform *FhirBoolean `json:"donotperform,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	OrderDetail []*CodeableConcept `json:"orderdetail,omitempty"`
	QuantityQuantity *Quantity `json:"quantityquantity,omitempty"`
	QuantityRatio *Ratio `json:"quantityratio,omitempty"`
	QuantityRange *Range `json:"quantityrange,omitempty"`
	Subject *Reference `json:"subject,omitempty"`
	Encounter *Reference `json:"encounter,omitempty"`
	OccurrenceDateTime *FhirDateTime `json:"occurrencedatetime,omitempty"`
	OccurrencePeriod *Period `json:"occurrenceperiod,omitempty"`
	OccurrenceTiming *Timing `json:"occurrencetiming,omitempty"`
	AsNeededBoolean *FhirBoolean `json:"asneededboolean,omitempty"`
	AsNeededCodeableConcept *CodeableConcept `json:"asneededcodeableconcept,omitempty"`
	AuthoredOn *FhirDateTime `json:"authoredon,omitempty"`
	Requester *Reference `json:"requester,omitempty"`
	PerformerType *CodeableConcept `json:"performertype,omitempty"`
	Performer []*Reference `json:"performer,omitempty"`
	LocationCode []*CodeableConcept `json:"locationcode,omitempty"`
	LocationReference []*Reference `json:"locationreference,omitempty"`
	ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
	ReasonReference []*Reference `json:"reasonreference,omitempty"`
	Insurance []*Reference `json:"insurance,omitempty"`
	SupportingInfo []*Reference `json:"supportinginfo,omitempty"`
	Specimen []*Reference `json:"specimen,omitempty"`
	BodySite []*CodeableConcept `json:"bodysite,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
	PatientInstruction *FhirString `json:"patientinstruction,omitempty"`
	RelevantHistory []*Reference `json:"relevanthistory,omitempty"`
}

// NewServiceRequest creates a new ServiceRequest instance
func NewServiceRequest() *ServiceRequest {
	return &ServiceRequest{}
}

// FromJSON populates ServiceRequest from JSON data
func (m *ServiceRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ServiceRequest to JSON data
func (m *ServiceRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ServiceRequest
func (m *ServiceRequest) Clone() *ServiceRequest {
	if m == nil { return nil }
	return &ServiceRequest{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		InstantiatesCanonical: cloneSlices(m.InstantiatesCanonical),
		InstantiatesUri: cloneSlices(m.InstantiatesUri),
		BasedOn: cloneSlices(m.BasedOn),
		Replaces: cloneSlices(m.Replaces),
		Requisition: m.Requisition.Clone(),
		Status: m.Status.Clone(),
		Intent: m.Intent.Clone(),
		Category: cloneSlices(m.Category),
		Priority: m.Priority.Clone(),
		DoNotPerform: m.DoNotPerform.Clone(),
		Code: m.Code.Clone(),
		OrderDetail: cloneSlices(m.OrderDetail),
		QuantityQuantity: m.QuantityQuantity.Clone(),
		QuantityRatio: m.QuantityRatio.Clone(),
		QuantityRange: m.QuantityRange.Clone(),
		Subject: m.Subject.Clone(),
		Encounter: m.Encounter.Clone(),
		OccurrenceDateTime: m.OccurrenceDateTime.Clone(),
		OccurrencePeriod: m.OccurrencePeriod.Clone(),
		OccurrenceTiming: m.OccurrenceTiming.Clone(),
		AsNeededBoolean: m.AsNeededBoolean.Clone(),
		AsNeededCodeableConcept: m.AsNeededCodeableConcept.Clone(),
		AuthoredOn: m.AuthoredOn.Clone(),
		Requester: m.Requester.Clone(),
		PerformerType: m.PerformerType.Clone(),
		Performer: cloneSlices(m.Performer),
		LocationCode: cloneSlices(m.LocationCode),
		LocationReference: cloneSlices(m.LocationReference),
		ReasonCode: cloneSlices(m.ReasonCode),
		ReasonReference: cloneSlices(m.ReasonReference),
		Insurance: cloneSlices(m.Insurance),
		SupportingInfo: cloneSlices(m.SupportingInfo),
		Specimen: cloneSlices(m.Specimen),
		BodySite: cloneSlices(m.BodySite),
		Note: cloneSlices(m.Note),
		PatientInstruction: m.PatientInstruction.Clone(),
		RelevantHistory: cloneSlices(m.RelevantHistory),
	}
}

// Equals checks for equality with another ServiceRequest instance
func (m *ServiceRequest) Equals(other *ServiceRequest) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.InstantiatesCanonical, other.InstantiatesCanonical) { return false }
	if !compareSlices(m.InstantiatesUri, other.InstantiatesUri) { return false }
	if !compareSlices(m.BasedOn, other.BasedOn) { return false }
	if !compareSlices(m.Replaces, other.Replaces) { return false }
	if !m.Requisition.Equals(other.Requisition) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Intent.Equals(other.Intent) { return false }
	if !compareSlices(m.Category, other.Category) { return false }
	if !m.Priority.Equals(other.Priority) { return false }
	if !m.DoNotPerform.Equals(other.DoNotPerform) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !compareSlices(m.OrderDetail, other.OrderDetail) { return false }
	if !m.QuantityQuantity.Equals(other.QuantityQuantity) { return false }
	if !m.QuantityRatio.Equals(other.QuantityRatio) { return false }
	if !m.QuantityRange.Equals(other.QuantityRange) { return false }
	if !m.Subject.Equals(other.Subject) { return false }
	if !m.Encounter.Equals(other.Encounter) { return false }
	if !m.OccurrenceDateTime.Equals(other.OccurrenceDateTime) { return false }
	if !m.OccurrencePeriod.Equals(other.OccurrencePeriod) { return false }
	if !m.OccurrenceTiming.Equals(other.OccurrenceTiming) { return false }
	if !m.AsNeededBoolean.Equals(other.AsNeededBoolean) { return false }
	if !m.AsNeededCodeableConcept.Equals(other.AsNeededCodeableConcept) { return false }
	if !m.AuthoredOn.Equals(other.AuthoredOn) { return false }
	if !m.Requester.Equals(other.Requester) { return false }
	if !m.PerformerType.Equals(other.PerformerType) { return false }
	if !compareSlices(m.Performer, other.Performer) { return false }
	if !compareSlices(m.LocationCode, other.LocationCode) { return false }
	if !compareSlices(m.LocationReference, other.LocationReference) { return false }
	if !compareSlices(m.ReasonCode, other.ReasonCode) { return false }
	if !compareSlices(m.ReasonReference, other.ReasonReference) { return false }
	if !compareSlices(m.Insurance, other.Insurance) { return false }
	if !compareSlices(m.SupportingInfo, other.SupportingInfo) { return false }
	if !compareSlices(m.Specimen, other.Specimen) { return false }
	if !compareSlices(m.BodySite, other.BodySite) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	if !m.PatientInstruction.Equals(other.PatientInstruction) { return false }
	if !compareSlices(m.RelevantHistory, other.RelevantHistory) { return false }
	return true
}

