// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
	"fmt"
)

// ServiceRequest
// A record of a request for service such as diagnostic investigations, treatments, or operations to be performed.
type ServiceRequest struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	InstantiatesCanonical []*FhirCanonical `json:"instantiatescanonical,omitempty"`
	InstantiatesUri []*FhirUri `json:"instantiatesuri,omitempty"`
	BasedOn []*Reference `json:"basedon,omitempty"`
	Replaces []*Reference `json:"replaces,omitempty"`
	Requisition *Identifier `json:"requisition,omitempty"`
	Status *RequestStatus `json:"status,omitempty"`
	Intent *RequestIntent `json:"intent,omitempty"`
	Category []*CodeableConcept `json:"category,omitempty"`
	Priority *RequestPriority `json:"priority,omitempty"`
	DoNotPerform *FhirBoolean `json:"donotperform,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	OrderDetail []*CodeableConcept `json:"orderdetail,omitempty"`
	QuantityQuantity *Quantity `json:"quantityquantity,omitempty"`
	QuantityRatio *Ratio `json:"quantityratio,omitempty"`
	QuantityRange *Range `json:"quantityrange,omitempty"`
	Subject *Reference `json:"subject,omitempty"`
	Encounter *Reference `json:"encounter,omitempty"`
	OccurrenceDateTime *FhirDateTime `json:"occurrencedatetime,omitempty"`
	OccurrencePeriod *Period `json:"occurrenceperiod,omitempty"`
	OccurrenceTiming *Timing `json:"occurrencetiming,omitempty"`
	AsNeededBoolean *FhirBoolean `json:"asneededboolean,omitempty"`
	AsNeededCodeableConcept *CodeableConcept `json:"asneededcodeableconcept,omitempty"`
	AuthoredOn *FhirDateTime `json:"authoredon,omitempty"`
	Requester *Reference `json:"requester,omitempty"`
	PerformerType *CodeableConcept `json:"performertype,omitempty"`
	Performer []*Reference `json:"performer,omitempty"`
	LocationCode []*CodeableConcept `json:"locationcode,omitempty"`
	LocationReference []*Reference `json:"locationreference,omitempty"`
	ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
	ReasonReference []*Reference `json:"reasonreference,omitempty"`
	Insurance []*Reference `json:"insurance,omitempty"`
	SupportingInfo []*Reference `json:"supportinginfo,omitempty"`
	Specimen []*Reference `json:"specimen,omitempty"`
	BodySite []*CodeableConcept `json:"bodysite,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
	PatientInstruction *FhirString `json:"patientinstruction,omitempty"`
	RelevantHistory []*Reference `json:"relevanthistory,omitempty"`
}

// NewServiceRequest creates a new ServiceRequest instance.
func NewServiceRequest() *ServiceRequest {
	return &ServiceRequest{}
}

// UnmarshalJSON populates ServiceRequest from JSON data.
func (m *ServiceRequest) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		InstantiatesCanonical []interface{} `json:"instantiatescanonical,omitempty"`
		InstantiatesUri []interface{} `json:"instantiatesuri,omitempty"`
		BasedOn []*Reference `json:"basedon,omitempty"`
		Replaces []*Reference `json:"replaces,omitempty"`
		Requisition *Identifier `json:"requisition,omitempty"`
		Status *RequestStatus `json:"status,omitempty"`
		Intent *RequestIntent `json:"intent,omitempty"`
		Category []*CodeableConcept `json:"category,omitempty"`
		Priority *RequestPriority `json:"priority,omitempty"`
		DoNotPerform *FhirBoolean `json:"donotperform,omitempty"`
		Code *CodeableConcept `json:"code,omitempty"`
		OrderDetail []*CodeableConcept `json:"orderdetail,omitempty"`
		QuantityQuantity *Quantity `json:"quantityquantity,omitempty"`
		QuantityRatio *Ratio `json:"quantityratio,omitempty"`
		QuantityRange *Range `json:"quantityrange,omitempty"`
		Subject *Reference `json:"subject,omitempty"`
		Encounter *Reference `json:"encounter,omitempty"`
		OccurrenceDateTime *FhirDateTime `json:"occurrencedatetime,omitempty"`
		OccurrencePeriod *Period `json:"occurrenceperiod,omitempty"`
		OccurrenceTiming *Timing `json:"occurrencetiming,omitempty"`
		AsNeededBoolean *FhirBoolean `json:"asneededboolean,omitempty"`
		AsNeededCodeableConcept *CodeableConcept `json:"asneededcodeableconcept,omitempty"`
		AuthoredOn *FhirDateTime `json:"authoredon,omitempty"`
		Requester *Reference `json:"requester,omitempty"`
		PerformerType *CodeableConcept `json:"performertype,omitempty"`
		Performer []*Reference `json:"performer,omitempty"`
		LocationCode []*CodeableConcept `json:"locationcode,omitempty"`
		LocationReference []*Reference `json:"locationreference,omitempty"`
		ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
		ReasonReference []*Reference `json:"reasonreference,omitempty"`
		Insurance []*Reference `json:"insurance,omitempty"`
		SupportingInfo []*Reference `json:"supportinginfo,omitempty"`
		Specimen []*Reference `json:"specimen,omitempty"`
		BodySite []*CodeableConcept `json:"bodysite,omitempty"`
		Note []*Annotation `json:"note,omitempty"`
		PatientInstruction *FhirString `json:"patientinstruction,omitempty"`
		RelevantHistory []*Reference `json:"relevanthistory,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Identifier = temp.Identifier
	if len(temp.InstantiatesCanonical) > 0 {
		m.InstantiatesCanonical = make([]*FhirCanonical, len(temp.InstantiatesCanonical))
		for i := range temp.InstantiatesCanonical {
			itemMap, ok := temp.InstantiatesCanonical[i].(map[string]interface{})
			if !ok { return fmt.Errorf("invalid value for InstantiatesCanonical[%d]: expected map", i) }
			primitive, err := NewFhirCanonicalFromMap(itemMap)
			if err != nil { return fmt.Errorf("failed to parse InstantiatesCanonical[%d]: %v", i, err) }
			m.InstantiatesCanonical[i] = primitive
		}
	}
	if len(temp.InstantiatesUri) > 0 {
		m.InstantiatesUri = make([]*FhirUri, len(temp.InstantiatesUri))
		for i := range temp.InstantiatesUri {
			itemMap, ok := temp.InstantiatesUri[i].(map[string]interface{})
			if !ok { return fmt.Errorf("invalid value for InstantiatesUri[%d]: expected map", i) }
			primitive, err := NewFhirUriFromMap(itemMap)
			if err != nil { return fmt.Errorf("failed to parse InstantiatesUri[%d]: %v", i, err) }
			m.InstantiatesUri[i] = primitive
		}
	}
	m.BasedOn = temp.BasedOn
	m.Replaces = temp.Replaces
	m.Requisition = temp.Requisition
	m.Status = temp.Status
	m.Intent = temp.Intent
	m.Category = temp.Category
	m.Priority = temp.Priority
	m.DoNotPerform = temp.DoNotPerform
	m.Code = temp.Code
	m.OrderDetail = temp.OrderDetail
	m.QuantityQuantity = temp.QuantityQuantity
	m.QuantityRatio = temp.QuantityRatio
	m.QuantityRange = temp.QuantityRange
	m.Subject = temp.Subject
	m.Encounter = temp.Encounter
	m.OccurrenceDateTime = temp.OccurrenceDateTime
	m.OccurrencePeriod = temp.OccurrencePeriod
	m.OccurrenceTiming = temp.OccurrenceTiming
	m.AsNeededBoolean = temp.AsNeededBoolean
	m.AsNeededCodeableConcept = temp.AsNeededCodeableConcept
	m.AuthoredOn = temp.AuthoredOn
	m.Requester = temp.Requester
	m.PerformerType = temp.PerformerType
	m.Performer = temp.Performer
	m.LocationCode = temp.LocationCode
	m.LocationReference = temp.LocationReference
	m.ReasonCode = temp.ReasonCode
	m.ReasonReference = temp.ReasonReference
	m.Insurance = temp.Insurance
	m.SupportingInfo = temp.SupportingInfo
	m.Specimen = temp.Specimen
	m.BodySite = temp.BodySite
	m.Note = temp.Note
	m.PatientInstruction = temp.PatientInstruction
	m.RelevantHistory = temp.RelevantHistory
	return nil
}

// MarshalJSON converts ServiceRequest to JSON data.
func (m *ServiceRequest) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		InstantiatesCanonical []interface{} `json:"instantiatescanonical,omitempty"`
		InstantiatesCanonicalElement []map[string]interface{} `json:"_instantiatescanonical,omitempty"`
		InstantiatesUri []interface{} `json:"instantiatesuri,omitempty"`
		InstantiatesUriElement []map[string]interface{} `json:"_instantiatesuri,omitempty"`
		BasedOn []*Reference `json:"basedon,omitempty"`
		Replaces []*Reference `json:"replaces,omitempty"`
		Requisition *Identifier `json:"requisition,omitempty"`
		Status *RequestStatus `json:"status,omitempty"`
		Intent *RequestIntent `json:"intent,omitempty"`
		Category []*CodeableConcept `json:"category,omitempty"`
		Priority *RequestPriority `json:"priority,omitempty"`
		DoNotPerform interface{} `json:"donotperform,omitempty"`
		DoNotPerformElement map[string]interface{} `json:"_donotperform,omitempty"`
		Code *CodeableConcept `json:"code,omitempty"`
		OrderDetail []*CodeableConcept `json:"orderdetail,omitempty"`
		QuantityQuantity *Quantity `json:"quantityquantity,omitempty"`
		QuantityRatio *Ratio `json:"quantityratio,omitempty"`
		QuantityRange *Range `json:"quantityrange,omitempty"`
		Subject *Reference `json:"subject,omitempty"`
		Encounter *Reference `json:"encounter,omitempty"`
		OccurrenceDateTime interface{} `json:"occurrencedatetime,omitempty"`
		OccurrenceDateTimeElement map[string]interface{} `json:"_occurrencedatetime,omitempty"`
		OccurrencePeriod *Period `json:"occurrenceperiod,omitempty"`
		OccurrenceTiming *Timing `json:"occurrencetiming,omitempty"`
		AsNeededBoolean interface{} `json:"asneededboolean,omitempty"`
		AsNeededBooleanElement map[string]interface{} `json:"_asneededboolean,omitempty"`
		AsNeededCodeableConcept *CodeableConcept `json:"asneededcodeableconcept,omitempty"`
		AuthoredOn interface{} `json:"authoredon,omitempty"`
		AuthoredOnElement map[string]interface{} `json:"_authoredon,omitempty"`
		Requester *Reference `json:"requester,omitempty"`
		PerformerType *CodeableConcept `json:"performertype,omitempty"`
		Performer []*Reference `json:"performer,omitempty"`
		LocationCode []*CodeableConcept `json:"locationcode,omitempty"`
		LocationReference []*Reference `json:"locationreference,omitempty"`
		ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
		ReasonReference []*Reference `json:"reasonreference,omitempty"`
		Insurance []*Reference `json:"insurance,omitempty"`
		SupportingInfo []*Reference `json:"supportinginfo,omitempty"`
		Specimen []*Reference `json:"specimen,omitempty"`
		BodySite []*CodeableConcept `json:"bodysite,omitempty"`
		Note []*Annotation `json:"note,omitempty"`
		PatientInstruction interface{} `json:"patientinstruction,omitempty"`
		PatientInstructionElement map[string]interface{} `json:"_patientinstruction,omitempty"`
		RelevantHistory []*Reference `json:"relevanthistory,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Identifier = m.Identifier
	if len(m.InstantiatesCanonical) > 0 {
		output.InstantiatesCanonical = make([]interface{}, len(m.InstantiatesCanonical))
		output.InstantiatesCanonicalElement = make([]map[string]interface{}, len(m.InstantiatesCanonical))
		for i, item := range m.InstantiatesCanonical {
			if item != nil && item.Value != nil {
				output.InstantiatesCanonical[i] = item.Value
			}
			if item != nil && item.Element != nil {
				output.InstantiatesCanonicalElement[i] = toMapOrNil(item.Element.MarshalJSON())
			}
		}
	}
	if len(m.InstantiatesUri) > 0 {
		output.InstantiatesUri = make([]interface{}, len(m.InstantiatesUri))
		output.InstantiatesUriElement = make([]map[string]interface{}, len(m.InstantiatesUri))
		for i, item := range m.InstantiatesUri {
			if item != nil && item.Value != nil {
				output.InstantiatesUri[i] = item.Value
			}
			if item != nil && item.Element != nil {
				output.InstantiatesUriElement[i] = toMapOrNil(item.Element.MarshalJSON())
			}
		}
	}
	output.BasedOn = m.BasedOn
	output.Replaces = m.Replaces
	output.Requisition = m.Requisition
	output.Status = m.Status
	output.Intent = m.Intent
	output.Category = m.Category
	output.Priority = m.Priority
	if m.DoNotPerform != nil && m.DoNotPerform.Value != nil {
		output.DoNotPerform = m.DoNotPerform.Value
		if m.DoNotPerform.Element != nil {
			output.DoNotPerformElement = toMapOrNil(m.DoNotPerform.Element.MarshalJSON())
		}
	}
	output.Code = m.Code
	output.OrderDetail = m.OrderDetail
	output.QuantityQuantity = m.QuantityQuantity
	output.QuantityRatio = m.QuantityRatio
	output.QuantityRange = m.QuantityRange
	output.Subject = m.Subject
	output.Encounter = m.Encounter
	if m.OccurrenceDateTime != nil && m.OccurrenceDateTime.Value != nil {
		output.OccurrenceDateTime = m.OccurrenceDateTime.Value
		if m.OccurrenceDateTime.Element != nil {
			output.OccurrenceDateTimeElement = toMapOrNil(m.OccurrenceDateTime.Element.MarshalJSON())
		}
	}
	output.OccurrencePeriod = m.OccurrencePeriod
	output.OccurrenceTiming = m.OccurrenceTiming
	if m.AsNeededBoolean != nil && m.AsNeededBoolean.Value != nil {
		output.AsNeededBoolean = m.AsNeededBoolean.Value
		if m.AsNeededBoolean.Element != nil {
			output.AsNeededBooleanElement = toMapOrNil(m.AsNeededBoolean.Element.MarshalJSON())
		}
	}
	output.AsNeededCodeableConcept = m.AsNeededCodeableConcept
	if m.AuthoredOn != nil && m.AuthoredOn.Value != nil {
		output.AuthoredOn = m.AuthoredOn.Value
		if m.AuthoredOn.Element != nil {
			output.AuthoredOnElement = toMapOrNil(m.AuthoredOn.Element.MarshalJSON())
		}
	}
	output.Requester = m.Requester
	output.PerformerType = m.PerformerType
	output.Performer = m.Performer
	output.LocationCode = m.LocationCode
	output.LocationReference = m.LocationReference
	output.ReasonCode = m.ReasonCode
	output.ReasonReference = m.ReasonReference
	output.Insurance = m.Insurance
	output.SupportingInfo = m.SupportingInfo
	output.Specimen = m.Specimen
	output.BodySite = m.BodySite
	output.Note = m.Note
	if m.PatientInstruction != nil && m.PatientInstruction.Value != nil {
		output.PatientInstruction = m.PatientInstruction.Value
		if m.PatientInstruction.Element != nil {
			output.PatientInstructionElement = toMapOrNil(m.PatientInstruction.Element.MarshalJSON())
		}
	}
	output.RelevantHistory = m.RelevantHistory
	return json.Marshal(output)
}

// Clone creates a deep copy of ServiceRequest.
func (m *ServiceRequest) Clone() *ServiceRequest {
	if m == nil { return nil }
	return &ServiceRequest{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		InstantiatesCanonical: cloneSlices(m.InstantiatesCanonical),
		InstantiatesUri: cloneSlices(m.InstantiatesUri),
		BasedOn: cloneSlices(m.BasedOn),
		Replaces: cloneSlices(m.Replaces),
		Requisition: m.Requisition.Clone(),
		Status: m.Status.Clone(),
		Intent: m.Intent.Clone(),
		Category: cloneSlices(m.Category),
		Priority: m.Priority.Clone(),
		DoNotPerform: m.DoNotPerform.Clone(),
		Code: m.Code.Clone(),
		OrderDetail: cloneSlices(m.OrderDetail),
		QuantityQuantity: m.QuantityQuantity.Clone(),
		QuantityRatio: m.QuantityRatio.Clone(),
		QuantityRange: m.QuantityRange.Clone(),
		Subject: m.Subject.Clone(),
		Encounter: m.Encounter.Clone(),
		OccurrenceDateTime: m.OccurrenceDateTime.Clone(),
		OccurrencePeriod: m.OccurrencePeriod.Clone(),
		OccurrenceTiming: m.OccurrenceTiming.Clone(),
		AsNeededBoolean: m.AsNeededBoolean.Clone(),
		AsNeededCodeableConcept: m.AsNeededCodeableConcept.Clone(),
		AuthoredOn: m.AuthoredOn.Clone(),
		Requester: m.Requester.Clone(),
		PerformerType: m.PerformerType.Clone(),
		Performer: cloneSlices(m.Performer),
		LocationCode: cloneSlices(m.LocationCode),
		LocationReference: cloneSlices(m.LocationReference),
		ReasonCode: cloneSlices(m.ReasonCode),
		ReasonReference: cloneSlices(m.ReasonReference),
		Insurance: cloneSlices(m.Insurance),
		SupportingInfo: cloneSlices(m.SupportingInfo),
		Specimen: cloneSlices(m.Specimen),
		BodySite: cloneSlices(m.BodySite),
		Note: cloneSlices(m.Note),
		PatientInstruction: m.PatientInstruction.Clone(),
		RelevantHistory: cloneSlices(m.RelevantHistory),
	}
}

// Equals checks equality between two ServiceRequest instances.
func (m *ServiceRequest) Equals(other *ServiceRequest) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.InstantiatesCanonical, other.InstantiatesCanonical) { return false }
	if !compareSlices(m.InstantiatesUri, other.InstantiatesUri) { return false }
	if !compareSlices(m.BasedOn, other.BasedOn) { return false }
	if !compareSlices(m.Replaces, other.Replaces) { return false }
	if !m.Requisition.Equals(other.Requisition) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Intent.Equals(other.Intent) { return false }
	if !compareSlices(m.Category, other.Category) { return false }
	if !m.Priority.Equals(other.Priority) { return false }
	if !m.DoNotPerform.Equals(other.DoNotPerform) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !compareSlices(m.OrderDetail, other.OrderDetail) { return false }
	if !m.QuantityQuantity.Equals(other.QuantityQuantity) { return false }
	if !m.QuantityRatio.Equals(other.QuantityRatio) { return false }
	if !m.QuantityRange.Equals(other.QuantityRange) { return false }
	if !m.Subject.Equals(other.Subject) { return false }
	if !m.Encounter.Equals(other.Encounter) { return false }
	if !m.OccurrenceDateTime.Equals(other.OccurrenceDateTime) { return false }
	if !m.OccurrencePeriod.Equals(other.OccurrencePeriod) { return false }
	if !m.OccurrenceTiming.Equals(other.OccurrenceTiming) { return false }
	if !m.AsNeededBoolean.Equals(other.AsNeededBoolean) { return false }
	if !m.AsNeededCodeableConcept.Equals(other.AsNeededCodeableConcept) { return false }
	if !m.AuthoredOn.Equals(other.AuthoredOn) { return false }
	if !m.Requester.Equals(other.Requester) { return false }
	if !m.PerformerType.Equals(other.PerformerType) { return false }
	if !compareSlices(m.Performer, other.Performer) { return false }
	if !compareSlices(m.LocationCode, other.LocationCode) { return false }
	if !compareSlices(m.LocationReference, other.LocationReference) { return false }
	if !compareSlices(m.ReasonCode, other.ReasonCode) { return false }
	if !compareSlices(m.ReasonReference, other.ReasonReference) { return false }
	if !compareSlices(m.Insurance, other.Insurance) { return false }
	if !compareSlices(m.SupportingInfo, other.SupportingInfo) { return false }
	if !compareSlices(m.Specimen, other.Specimen) { return false }
	if !compareSlices(m.BodySite, other.BodySite) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	if !m.PatientInstruction.Equals(other.PatientInstruction) { return false }
	if !compareSlices(m.RelevantHistory, other.RelevantHistory) { return false }
	return true
}

