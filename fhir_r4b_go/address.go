// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Address
// An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.
type Address struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Use *AddressUse `json:"use,omitempty"`
	Type *AddressType `json:"type,omitempty"`
	Text *FhirString `json:"text,omitempty"`
	Line []*FhirString `json:"line,omitempty"`
	City *FhirString `json:"city,omitempty"`
	District *FhirString `json:"district,omitempty"`
	State *FhirString `json:"state,omitempty"`
	PostalCode *FhirString `json:"postalcode,omitempty"`
	Country *FhirString `json:"country,omitempty"`
	Period *Period `json:"period,omitempty"`
}

// NewAddress creates a new Address instance
func NewAddress() *Address {
	return &Address{}
}

// FromJSON populates Address from JSON data
func (m *Address) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Address to JSON data
func (m *Address) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Address
func (m *Address) Clone() *Address {
	if m == nil { return nil }
	return &Address{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Use: m.Use.Clone(),
		Type: m.Type.Clone(),
		Text: m.Text.Clone(),
		Line: cloneSlices(m.Line),
		City: m.City.Clone(),
		District: m.District.Clone(),
		State: m.State.Clone(),
		PostalCode: m.PostalCode.Clone(),
		Country: m.Country.Clone(),
		Period: m.Period.Clone(),
	}
}

// Equals checks for equality with another Address instance
func (m *Address) Equals(other *Address) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Use.Equals(other.Use) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Line, other.Line) { return false }
	if !m.City.Equals(other.City) { return false }
	if !m.District.Equals(other.District) { return false }
	if !m.State.Equals(other.State) { return false }
	if !m.PostalCode.Equals(other.PostalCode) { return false }
	if !m.Country.Equals(other.Country) { return false }
	if !m.Period.Equals(other.Period) { return false }
	return true
}

