// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// CodeableConcept
// A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.
type CodeableConcept struct {
	extends DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Coding []*Coding `json:"coding,omitempty"`
	Text *FhirString `json:"text,omitempty"`
}

// NewCodeableConcept creates a new CodeableConcept instance.
func NewCodeableConcept() *CodeableConcept {
	return &CodeableConcept{}
}

// UnmarshalJSON populates CodeableConcept from JSON data.
func (m *CodeableConcept) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		Coding []*Coding `json:"coding,omitempty"`
		Text *FhirString `json:"text,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.Coding = temp.Coding
	m.Text = temp.Text
	return nil
}

// MarshalJSON converts CodeableConcept to JSON data.
func (m *CodeableConcept) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		Coding []*Coding `json:"coding,omitempty"`
		Text interface{} `json:"text,omitempty"`
		TextElement map[string]interface{} `json:"_text,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.Coding = m.Coding
	if m.Text != nil && m.Text.Value != nil {
		output.Text = m.Text.Value
		if m.Text.Element != nil {
			output.TextElement = toMapOrNil(m.Text.Element.MarshalJSON())
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of CodeableConcept.
func (m *CodeableConcept) Clone() *CodeableConcept {
	if m == nil { return nil }
	return &CodeableConcept{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Coding: cloneSlices(m.Coding),
		Text: m.Text.Clone(),
	}
}

// Equals checks equality between two CodeableConcept instances.
func (m *CodeableConcept) Equals(other *CodeableConcept) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.Coding, other.Coding) { return false }
	if !m.Text.Equals(other.Text) { return false }
	return true
}

