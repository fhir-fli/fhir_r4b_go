// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
	"fmt"
)

// Subscription
// The subscription resource is used to define a push-based subscription from a server to another system. Once a subscription is registered with the server, the server checks every resource that is created or updated, and if the resource matches the given criteria, it sends a message on the defined "channel" so that another system can take an appropriate action.
type Subscription struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Status *SubscriptionStatusCodes `json:"status,omitempty"`
	Contact []*ContactPoint `json:"contact,omitempty"`
	End *FhirInstant `json:"end,omitempty"`
	Reason *FhirString `json:"reason,omitempty"`
	Criteria *FhirString `json:"criteria,omitempty"`
	Error *FhirString `json:"error,omitempty"`
	Channel *SubscriptionChannel `json:"channel,omitempty"`
}

// NewSubscription creates a new Subscription instance.
func NewSubscription() *Subscription {
	return &Subscription{}
}

// UnmarshalJSON populates Subscription from JSON data.
func (m *Subscription) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Status *SubscriptionStatusCodes `json:"status,omitempty"`
		Contact []*ContactPoint `json:"contact,omitempty"`
		End *FhirInstant `json:"end,omitempty"`
		Reason *FhirString `json:"reason,omitempty"`
		Criteria *FhirString `json:"criteria,omitempty"`
		Error *FhirString `json:"error,omitempty"`
		Channel *SubscriptionChannel `json:"channel,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Status = temp.Status
	m.Contact = temp.Contact
	m.End = temp.End
	m.Reason = temp.Reason
	m.Criteria = temp.Criteria
	m.Error = temp.Error
	m.Channel = temp.Channel
	return nil
}

// MarshalJSON converts Subscription to JSON data.
func (m *Subscription) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Status *SubscriptionStatusCodes `json:"status,omitempty"`
		Contact []*ContactPoint `json:"contact,omitempty"`
		End interface{} `json:"end,omitempty"`
		EndElement map[string]interface{} `json:"_end,omitempty"`
		Reason interface{} `json:"reason,omitempty"`
		ReasonElement map[string]interface{} `json:"_reason,omitempty"`
		Criteria interface{} `json:"criteria,omitempty"`
		CriteriaElement map[string]interface{} `json:"_criteria,omitempty"`
		Error interface{} `json:"error,omitempty"`
		ErrorElement map[string]interface{} `json:"_error,omitempty"`
		Channel *SubscriptionChannel `json:"channel,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Status = m.Status
	output.Contact = m.Contact
	if m.End != nil && m.End.Value != nil {
		output.End = m.End.Value
		if m.End.Element != nil {
			output.EndElement = toMapOrNil(m.End.Element.MarshalJSON())
		}
	}
	if m.Reason != nil && m.Reason.Value != nil {
		output.Reason = m.Reason.Value
		if m.Reason.Element != nil {
			output.ReasonElement = toMapOrNil(m.Reason.Element.MarshalJSON())
		}
	}
	if m.Criteria != nil && m.Criteria.Value != nil {
		output.Criteria = m.Criteria.Value
		if m.Criteria.Element != nil {
			output.CriteriaElement = toMapOrNil(m.Criteria.Element.MarshalJSON())
		}
	}
	if m.Error != nil && m.Error.Value != nil {
		output.Error = m.Error.Value
		if m.Error.Element != nil {
			output.ErrorElement = toMapOrNil(m.Error.Element.MarshalJSON())
		}
	}
	output.Channel = m.Channel
	return json.Marshal(output)
}

// Clone creates a deep copy of Subscription.
func (m *Subscription) Clone() *Subscription {
	if m == nil { return nil }
	return &Subscription{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Status: m.Status.Clone(),
		Contact: cloneSlices(m.Contact),
		End: m.End.Clone(),
		Reason: m.Reason.Clone(),
		Criteria: m.Criteria.Clone(),
		Error: m.Error.Clone(),
		Channel: m.Channel.Clone(),
	}
}

// Equals checks equality between two Subscription instances.
func (m *Subscription) Equals(other *Subscription) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !m.End.Equals(other.End) { return false }
	if !m.Reason.Equals(other.Reason) { return false }
	if !m.Criteria.Equals(other.Criteria) { return false }
	if !m.Error.Equals(other.Error) { return false }
	if !m.Channel.Equals(other.Channel) { return false }
	return true
}

// SubscriptionChannel
// Details where to send notifications when resources are received that meet the criteria.
type SubscriptionChannel struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Type *SubscriptionChannelType `json:"type,omitempty"`
	Endpoint *FhirUrl `json:"endpoint,omitempty"`
	Payload *FhirCode `json:"payload,omitempty"`
	Header []*FhirString `json:"header,omitempty"`
}

// NewSubscriptionChannel creates a new SubscriptionChannel instance.
func NewSubscriptionChannel() *SubscriptionChannel {
	return &SubscriptionChannel{}
}

// UnmarshalJSON populates SubscriptionChannel from JSON data.
func (m *SubscriptionChannel) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Type *SubscriptionChannelType `json:"type,omitempty"`
		Endpoint *FhirUrl `json:"endpoint,omitempty"`
		Payload *FhirCode `json:"payload,omitempty"`
		Header []interface{} `json:"header,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Type = temp.Type
	m.Endpoint = temp.Endpoint
	m.Payload = temp.Payload
	if len(temp.Header) > 0 {
		m.Header = make([]*FhirString, len(temp.Header))
		for i := range temp.Header {
			itemMap, ok := temp.Header[i].(map[string]interface{})
			if !ok { return fmt.Errorf("invalid value for Header[%d]: expected map", i) }
			primitive, err := NewFhirStringFromMap(itemMap)
			if err != nil { return fmt.Errorf("failed to parse Header[%d]: %v", i, err) }
			m.Header[i] = primitive
		}
	}
	return nil
}

// MarshalJSON converts SubscriptionChannel to JSON data.
func (m *SubscriptionChannel) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Type *SubscriptionChannelType `json:"type,omitempty"`
		Endpoint interface{} `json:"endpoint,omitempty"`
		EndpointElement map[string]interface{} `json:"_endpoint,omitempty"`
		Payload interface{} `json:"payload,omitempty"`
		PayloadElement map[string]interface{} `json:"_payload,omitempty"`
		Header []interface{} `json:"header,omitempty"`
		HeaderElement []map[string]interface{} `json:"_header,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Type = m.Type
	if m.Endpoint != nil && m.Endpoint.Value != nil {
		output.Endpoint = m.Endpoint.Value
		if m.Endpoint.Element != nil {
			output.EndpointElement = toMapOrNil(m.Endpoint.Element.MarshalJSON())
		}
	}
	if m.Payload != nil && m.Payload.Value != nil {
		output.Payload = m.Payload.Value
		if m.Payload.Element != nil {
			output.PayloadElement = toMapOrNil(m.Payload.Element.MarshalJSON())
		}
	}
	if len(m.Header) > 0 {
		output.Header = make([]interface{}, len(m.Header))
		output.HeaderElement = make([]map[string]interface{}, len(m.Header))
		for i, item := range m.Header {
			if item != nil && item.Value != nil {
				output.Header[i] = item.Value
			}
			if item != nil && item.Element != nil {
				output.HeaderElement[i] = toMapOrNil(item.Element.MarshalJSON())
			}
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of SubscriptionChannel.
func (m *SubscriptionChannel) Clone() *SubscriptionChannel {
	if m == nil { return nil }
	return &SubscriptionChannel{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Type: m.Type.Clone(),
		Endpoint: m.Endpoint.Clone(),
		Payload: m.Payload.Clone(),
		Header: cloneSlices(m.Header),
	}
}

// Equals checks equality between two SubscriptionChannel instances.
func (m *SubscriptionChannel) Equals(other *SubscriptionChannel) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Endpoint.Equals(other.Endpoint) { return false }
	if !m.Payload.Equals(other.Payload) { return false }
	if !compareSlices(m.Header, other.Header) { return false }
	return true
}

