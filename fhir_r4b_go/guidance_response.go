// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// GuidanceResponse
// A guidance response is the formal response to a guidance request, including any output parameters returned by the evaluation, as well as the description of any proposed actions to be taken.
type GuidanceResponse struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	RequestIdentifier *Identifier `json:"requestidentifier,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	ModuleUri *FhirUri `json:"moduleuri,omitempty"`
	ModuleCanonical *FhirCanonical `json:"modulecanonical,omitempty"`
	ModuleCodeableConcept *CodeableConcept `json:"modulecodeableconcept,omitempty"`
	Status *GuidanceResponseStatus `json:"status,omitempty"`
	Subject *Reference `json:"subject,omitempty"`
	Encounter *Reference `json:"encounter,omitempty"`
	OccurrenceDateTime *FhirDateTime `json:"occurrencedatetime,omitempty"`
	Performer *Reference `json:"performer,omitempty"`
	ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
	ReasonReference []*Reference `json:"reasonreference,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
	EvaluationMessage []*Reference `json:"evaluationmessage,omitempty"`
	OutputParameters *Reference `json:"outputparameters,omitempty"`
	Result *Reference `json:"result,omitempty"`
	DataRequirement []*DataRequirement `json:"datarequirement,omitempty"`
}

// NewGuidanceResponse creates a new GuidanceResponse instance.
func NewGuidanceResponse() *GuidanceResponse {
	return &GuidanceResponse{}
}

// UnmarshalJSON populates GuidanceResponse from JSON data.
func (m *GuidanceResponse) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		RequestIdentifier *Identifier `json:"requestidentifier,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		ModuleUri *FhirUri `json:"moduleuri,omitempty"`
		ModuleCanonical *FhirCanonical `json:"modulecanonical,omitempty"`
		ModuleCodeableConcept *CodeableConcept `json:"modulecodeableconcept,omitempty"`
		Status *GuidanceResponseStatus `json:"status,omitempty"`
		Subject *Reference `json:"subject,omitempty"`
		Encounter *Reference `json:"encounter,omitempty"`
		OccurrenceDateTime *FhirDateTime `json:"occurrencedatetime,omitempty"`
		Performer *Reference `json:"performer,omitempty"`
		ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
		ReasonReference []*Reference `json:"reasonreference,omitempty"`
		Note []*Annotation `json:"note,omitempty"`
		EvaluationMessage []*Reference `json:"evaluationmessage,omitempty"`
		OutputParameters *Reference `json:"outputparameters,omitempty"`
		Result *Reference `json:"result,omitempty"`
		DataRequirement []*DataRequirement `json:"datarequirement,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.RequestIdentifier = temp.RequestIdentifier
	m.Identifier = temp.Identifier
	m.ModuleUri = temp.ModuleUri
	m.ModuleCanonical = temp.ModuleCanonical
	m.ModuleCodeableConcept = temp.ModuleCodeableConcept
	m.Status = temp.Status
	m.Subject = temp.Subject
	m.Encounter = temp.Encounter
	m.OccurrenceDateTime = temp.OccurrenceDateTime
	m.Performer = temp.Performer
	m.ReasonCode = temp.ReasonCode
	m.ReasonReference = temp.ReasonReference
	m.Note = temp.Note
	m.EvaluationMessage = temp.EvaluationMessage
	m.OutputParameters = temp.OutputParameters
	m.Result = temp.Result
	m.DataRequirement = temp.DataRequirement
	return nil
}

// MarshalJSON converts GuidanceResponse to JSON data.
func (m *GuidanceResponse) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		RequestIdentifier *Identifier `json:"requestidentifier,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		ModuleUri interface{} `json:"moduleuri,omitempty"`
		ModuleUriElement map[string]interface{} `json:"_moduleuri,omitempty"`
		ModuleCanonical interface{} `json:"modulecanonical,omitempty"`
		ModuleCanonicalElement map[string]interface{} `json:"_modulecanonical,omitempty"`
		ModuleCodeableConcept *CodeableConcept `json:"modulecodeableconcept,omitempty"`
		Status *GuidanceResponseStatus `json:"status,omitempty"`
		Subject *Reference `json:"subject,omitempty"`
		Encounter *Reference `json:"encounter,omitempty"`
		OccurrenceDateTime interface{} `json:"occurrencedatetime,omitempty"`
		OccurrenceDateTimeElement map[string]interface{} `json:"_occurrencedatetime,omitempty"`
		Performer *Reference `json:"performer,omitempty"`
		ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
		ReasonReference []*Reference `json:"reasonreference,omitempty"`
		Note []*Annotation `json:"note,omitempty"`
		EvaluationMessage []*Reference `json:"evaluationmessage,omitempty"`
		OutputParameters *Reference `json:"outputparameters,omitempty"`
		Result *Reference `json:"result,omitempty"`
		DataRequirement []*DataRequirement `json:"datarequirement,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.RequestIdentifier = m.RequestIdentifier
	output.Identifier = m.Identifier
	if m.ModuleUri != nil && m.ModuleUri.Value != nil {
		output.ModuleUri = m.ModuleUri.Value
		if m.ModuleUri.Element != nil {
			output.ModuleUriElement = toMapOrNil(m.ModuleUri.Element.MarshalJSON())
		}
	}
	if m.ModuleCanonical != nil && m.ModuleCanonical.Value != nil {
		output.ModuleCanonical = m.ModuleCanonical.Value
		if m.ModuleCanonical.Element != nil {
			output.ModuleCanonicalElement = toMapOrNil(m.ModuleCanonical.Element.MarshalJSON())
		}
	}
	output.ModuleCodeableConcept = m.ModuleCodeableConcept
	output.Status = m.Status
	output.Subject = m.Subject
	output.Encounter = m.Encounter
	if m.OccurrenceDateTime != nil && m.OccurrenceDateTime.Value != nil {
		output.OccurrenceDateTime = m.OccurrenceDateTime.Value
		if m.OccurrenceDateTime.Element != nil {
			output.OccurrenceDateTimeElement = toMapOrNil(m.OccurrenceDateTime.Element.MarshalJSON())
		}
	}
	output.Performer = m.Performer
	output.ReasonCode = m.ReasonCode
	output.ReasonReference = m.ReasonReference
	output.Note = m.Note
	output.EvaluationMessage = m.EvaluationMessage
	output.OutputParameters = m.OutputParameters
	output.Result = m.Result
	output.DataRequirement = m.DataRequirement
	return json.Marshal(output)
}

// Clone creates a deep copy of GuidanceResponse.
func (m *GuidanceResponse) Clone() *GuidanceResponse {
	if m == nil { return nil }
	return &GuidanceResponse{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		RequestIdentifier: m.RequestIdentifier.Clone(),
		Identifier: cloneSlices(m.Identifier),
		ModuleUri: m.ModuleUri.Clone(),
		ModuleCanonical: m.ModuleCanonical.Clone(),
		ModuleCodeableConcept: m.ModuleCodeableConcept.Clone(),
		Status: m.Status.Clone(),
		Subject: m.Subject.Clone(),
		Encounter: m.Encounter.Clone(),
		OccurrenceDateTime: m.OccurrenceDateTime.Clone(),
		Performer: m.Performer.Clone(),
		ReasonCode: cloneSlices(m.ReasonCode),
		ReasonReference: cloneSlices(m.ReasonReference),
		Note: cloneSlices(m.Note),
		EvaluationMessage: cloneSlices(m.EvaluationMessage),
		OutputParameters: m.OutputParameters.Clone(),
		Result: m.Result.Clone(),
		DataRequirement: cloneSlices(m.DataRequirement),
	}
}

// Equals checks equality between two GuidanceResponse instances.
func (m *GuidanceResponse) Equals(other *GuidanceResponse) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.RequestIdentifier.Equals(other.RequestIdentifier) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.ModuleUri.Equals(other.ModuleUri) { return false }
	if !m.ModuleCanonical.Equals(other.ModuleCanonical) { return false }
	if !m.ModuleCodeableConcept.Equals(other.ModuleCodeableConcept) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Subject.Equals(other.Subject) { return false }
	if !m.Encounter.Equals(other.Encounter) { return false }
	if !m.OccurrenceDateTime.Equals(other.OccurrenceDateTime) { return false }
	if !m.Performer.Equals(other.Performer) { return false }
	if !compareSlices(m.ReasonCode, other.ReasonCode) { return false }
	if !compareSlices(m.ReasonReference, other.ReasonReference) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	if !compareSlices(m.EvaluationMessage, other.EvaluationMessage) { return false }
	if !m.OutputParameters.Equals(other.OutputParameters) { return false }
	if !m.Result.Equals(other.Result) { return false }
	if !compareSlices(m.DataRequirement, other.DataRequirement) { return false }
	return true
}

