// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// NutritionProduct
// A food or fluid product that is consumed by patients.
type NutritionProduct struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Status *NutritionProductStatus `json:"status,omitempty"`
	Category []*CodeableConcept `json:"category,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Manufacturer []*Reference `json:"manufacturer,omitempty"`
	Nutrient []*NutritionProductNutrient `json:"nutrient,omitempty"`
	Ingredient []*NutritionProductIngredient `json:"ingredient,omitempty"`
	KnownAllergen []*CodeableReference `json:"knownallergen,omitempty"`
	ProductCharacteristic []*NutritionProductProductCharacteristic `json:"productcharacteristic,omitempty"`
	Instance *NutritionProductInstance `json:"instance,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
}

// NewNutritionProduct creates a new NutritionProduct instance
func NewNutritionProduct() *NutritionProduct {
	return &NutritionProduct{}
}

// FromJSON populates NutritionProduct from JSON data
func (m *NutritionProduct) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts NutritionProduct to JSON data
func (m *NutritionProduct) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of NutritionProduct
func (m *NutritionProduct) Clone() *NutritionProduct {
	if m == nil { return nil }
	return &NutritionProduct{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Status: m.Status.Clone(),
		Category: cloneSlices(m.Category),
		Code: m.Code.Clone(),
		Manufacturer: cloneSlices(m.Manufacturer),
		Nutrient: cloneSlices(m.Nutrient),
		Ingredient: cloneSlices(m.Ingredient),
		KnownAllergen: cloneSlices(m.KnownAllergen),
		ProductCharacteristic: cloneSlices(m.ProductCharacteristic),
		Instance: m.Instance.Clone(),
		Note: cloneSlices(m.Note),
	}
}

// Equals checks for equality with another NutritionProduct instance
func (m *NutritionProduct) Equals(other *NutritionProduct) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !compareSlices(m.Category, other.Category) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !compareSlices(m.Manufacturer, other.Manufacturer) { return false }
	if !compareSlices(m.Nutrient, other.Nutrient) { return false }
	if !compareSlices(m.Ingredient, other.Ingredient) { return false }
	if !compareSlices(m.KnownAllergen, other.KnownAllergen) { return false }
	if !compareSlices(m.ProductCharacteristic, other.ProductCharacteristic) { return false }
	if !m.Instance.Equals(other.Instance) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	return true
}

// NutritionProductNutrient
// The product's nutritional information expressed by the nutrients.
type NutritionProductNutrient struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Item *CodeableReference `json:"item,omitempty"`
	Amount []*Ratio `json:"amount,omitempty"`
}

// NewNutritionProductNutrient creates a new NutritionProductNutrient instance
func NewNutritionProductNutrient() *NutritionProductNutrient {
	return &NutritionProductNutrient{}
}

// FromJSON populates NutritionProductNutrient from JSON data
func (m *NutritionProductNutrient) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts NutritionProductNutrient to JSON data
func (m *NutritionProductNutrient) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of NutritionProductNutrient
func (m *NutritionProductNutrient) Clone() *NutritionProductNutrient {
	if m == nil { return nil }
	return &NutritionProductNutrient{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Item: m.Item.Clone(),
		Amount: cloneSlices(m.Amount),
	}
}

// Equals checks for equality with another NutritionProductNutrient instance
func (m *NutritionProductNutrient) Equals(other *NutritionProductNutrient) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Item.Equals(other.Item) { return false }
	if !compareSlices(m.Amount, other.Amount) { return false }
	return true
}

// NutritionProductIngredient
// Ingredients contained in this product.
type NutritionProductIngredient struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Item *CodeableReference `json:"item,omitempty"`
	Amount []*Ratio `json:"amount,omitempty"`
}

// NewNutritionProductIngredient creates a new NutritionProductIngredient instance
func NewNutritionProductIngredient() *NutritionProductIngredient {
	return &NutritionProductIngredient{}
}

// FromJSON populates NutritionProductIngredient from JSON data
func (m *NutritionProductIngredient) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts NutritionProductIngredient to JSON data
func (m *NutritionProductIngredient) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of NutritionProductIngredient
func (m *NutritionProductIngredient) Clone() *NutritionProductIngredient {
	if m == nil { return nil }
	return &NutritionProductIngredient{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Item: m.Item.Clone(),
		Amount: cloneSlices(m.Amount),
	}
}

// Equals checks for equality with another NutritionProductIngredient instance
func (m *NutritionProductIngredient) Equals(other *NutritionProductIngredient) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Item.Equals(other.Item) { return false }
	if !compareSlices(m.Amount, other.Amount) { return false }
	return true
}

// NutritionProductProductCharacteristic
// Specifies descriptive properties of the nutrition product.
type NutritionProductProductCharacteristic struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	ValueCodeableConcept *CodeableConcept `json:"valuecodeableconcept,omitempty"`
	ValueString *FhirString `json:"valuestring,omitempty"`
	ValueQuantity *Quantity `json:"valuequantity,omitempty"`
	ValueBase64Binary *FhirBase64Binary `json:"valuebase64binary,omitempty"`
	ValueAttachment *Attachment `json:"valueattachment,omitempty"`
	ValueBoolean *FhirBoolean `json:"valueboolean,omitempty"`
}

// NewNutritionProductProductCharacteristic creates a new NutritionProductProductCharacteristic instance
func NewNutritionProductProductCharacteristic() *NutritionProductProductCharacteristic {
	return &NutritionProductProductCharacteristic{}
}

// FromJSON populates NutritionProductProductCharacteristic from JSON data
func (m *NutritionProductProductCharacteristic) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts NutritionProductProductCharacteristic to JSON data
func (m *NutritionProductProductCharacteristic) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of NutritionProductProductCharacteristic
func (m *NutritionProductProductCharacteristic) Clone() *NutritionProductProductCharacteristic {
	if m == nil { return nil }
	return &NutritionProductProductCharacteristic{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Type: m.Type.Clone(),
		ValueCodeableConcept: m.ValueCodeableConcept.Clone(),
		ValueString: m.ValueString.Clone(),
		ValueQuantity: m.ValueQuantity.Clone(),
		ValueBase64Binary: m.ValueBase64Binary.Clone(),
		ValueAttachment: m.ValueAttachment.Clone(),
		ValueBoolean: m.ValueBoolean.Clone(),
	}
}

// Equals checks for equality with another NutritionProductProductCharacteristic instance
func (m *NutritionProductProductCharacteristic) Equals(other *NutritionProductProductCharacteristic) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.ValueCodeableConcept.Equals(other.ValueCodeableConcept) { return false }
	if !m.ValueString.Equals(other.ValueString) { return false }
	if !m.ValueQuantity.Equals(other.ValueQuantity) { return false }
	if !m.ValueBase64Binary.Equals(other.ValueBase64Binary) { return false }
	if !m.ValueAttachment.Equals(other.ValueAttachment) { return false }
	if !m.ValueBoolean.Equals(other.ValueBoolean) { return false }
	return true
}

// NutritionProductInstance
// Conveys instance-level information about this product item. One or several physical, countable instances or occurrences of the product.
type NutritionProductInstance struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Quantity *Quantity `json:"quantity,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	LotNumber *FhirString `json:"lotnumber,omitempty"`
	Expiry *FhirDateTime `json:"expiry,omitempty"`
	UseBy *FhirDateTime `json:"useby,omitempty"`
}

// NewNutritionProductInstance creates a new NutritionProductInstance instance
func NewNutritionProductInstance() *NutritionProductInstance {
	return &NutritionProductInstance{}
}

// FromJSON populates NutritionProductInstance from JSON data
func (m *NutritionProductInstance) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts NutritionProductInstance to JSON data
func (m *NutritionProductInstance) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of NutritionProductInstance
func (m *NutritionProductInstance) Clone() *NutritionProductInstance {
	if m == nil { return nil }
	return &NutritionProductInstance{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Quantity: m.Quantity.Clone(),
		Identifier: cloneSlices(m.Identifier),
		LotNumber: m.LotNumber.Clone(),
		Expiry: m.Expiry.Clone(),
		UseBy: m.UseBy.Clone(),
	}
}

// Equals checks for equality with another NutritionProductInstance instance
func (m *NutritionProductInstance) Equals(other *NutritionProductInstance) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Quantity.Equals(other.Quantity) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.LotNumber.Equals(other.LotNumber) { return false }
	if !m.Expiry.Equals(other.Expiry) { return false }
	if !m.UseBy.Equals(other.UseBy) { return false }
	return true
}

