// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
	"fmt"
)

// OperationDefinition
// A formal computable definition of an operation (on the RESTful interface) or a named query (using the search interaction).
type OperationDefinition struct {
	extends CanonicalResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Url *FhirUri `json:"url,omitempty"`
	Version *FhirString `json:"version,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	Kind *OperationKind `json:"kind,omitempty"`
	Experimental *FhirBoolean `json:"experimental,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Publisher *FhirString `json:"publisher,omitempty"`
	Contact []*ContactDetail `json:"contact,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	UseContext []*UsageContext `json:"usecontext,omitempty"`
	Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`
	Purpose *FhirMarkdown `json:"purpose,omitempty"`
	AffectsState *FhirBoolean `json:"affectsstate,omitempty"`
	Code *FhirCode `json:"code,omitempty"`
	Comment *FhirMarkdown `json:"comment,omitempty"`
	Base *FhirCanonical `json:"base,omitempty"`
	Resource []*FhirCode `json:"resource,omitempty"`
	System *FhirBoolean `json:"system,omitempty"`
	Type *FhirBoolean `json:"type,omitempty"`
	Instance *FhirBoolean `json:"instance,omitempty"`
	InputProfile *FhirCanonical `json:"inputprofile,omitempty"`
	OutputProfile *FhirCanonical `json:"outputprofile,omitempty"`
	Parameter []*OperationDefinitionParameter `json:"parameter,omitempty"`
	Overload []*OperationDefinitionOverload `json:"overload,omitempty"`
}

// NewOperationDefinition creates a new OperationDefinition instance.
func NewOperationDefinition() *OperationDefinition {
	return &OperationDefinition{}
}

// UnmarshalJSON populates OperationDefinition from JSON data.
func (m *OperationDefinition) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Url *FhirUri `json:"url,omitempty"`
		Version *FhirString `json:"version,omitempty"`
		Name *FhirString `json:"name,omitempty"`
		Title *FhirString `json:"title,omitempty"`
		Status *PublicationStatus `json:"status,omitempty"`
		Kind *OperationKind `json:"kind,omitempty"`
		Experimental *FhirBoolean `json:"experimental,omitempty"`
		Date *FhirDateTime `json:"date,omitempty"`
		Publisher *FhirString `json:"publisher,omitempty"`
		Contact []*ContactDetail `json:"contact,omitempty"`
		Description *FhirMarkdown `json:"description,omitempty"`
		UseContext []*UsageContext `json:"usecontext,omitempty"`
		Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`
		Purpose *FhirMarkdown `json:"purpose,omitempty"`
		AffectsState *FhirBoolean `json:"affectsstate,omitempty"`
		Code *FhirCode `json:"code,omitempty"`
		Comment *FhirMarkdown `json:"comment,omitempty"`
		Base *FhirCanonical `json:"base,omitempty"`
		Resource []interface{} `json:"resource,omitempty"`
		System *FhirBoolean `json:"system,omitempty"`
		Type *FhirBoolean `json:"type,omitempty"`
		Instance *FhirBoolean `json:"instance,omitempty"`
		InputProfile *FhirCanonical `json:"inputprofile,omitempty"`
		OutputProfile *FhirCanonical `json:"outputprofile,omitempty"`
		Parameter []*OperationDefinitionParameter `json:"parameter,omitempty"`
		Overload []*OperationDefinitionOverload `json:"overload,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Url = temp.Url
	m.Version = temp.Version
	m.Name = temp.Name
	m.Title = temp.Title
	m.Status = temp.Status
	m.Kind = temp.Kind
	m.Experimental = temp.Experimental
	m.Date = temp.Date
	m.Publisher = temp.Publisher
	m.Contact = temp.Contact
	m.Description = temp.Description
	m.UseContext = temp.UseContext
	m.Jurisdiction = temp.Jurisdiction
	m.Purpose = temp.Purpose
	m.AffectsState = temp.AffectsState
	m.Code = temp.Code
	m.Comment = temp.Comment
	m.Base = temp.Base
	if len(temp.Resource) > 0 {
		m.Resource = make([]*FhirCode, len(temp.Resource))
		for i := range temp.Resource {
			itemMap, ok := temp.Resource[i].(map[string]interface{})
			if !ok { return fmt.Errorf("invalid value for Resource[%d]: expected map", i) }
			primitive, err := NewFhirCodeFromMap(itemMap)
			if err != nil { return fmt.Errorf("failed to parse Resource[%d]: %v", i, err) }
			m.Resource[i] = primitive
		}
	}
	m.System = temp.System
	m.Type = temp.Type
	m.Instance = temp.Instance
	m.InputProfile = temp.InputProfile
	m.OutputProfile = temp.OutputProfile
	m.Parameter = temp.Parameter
	m.Overload = temp.Overload
	return nil
}

// MarshalJSON converts OperationDefinition to JSON data.
func (m *OperationDefinition) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Url interface{} `json:"url,omitempty"`
		UrlElement map[string]interface{} `json:"_url,omitempty"`
		Version interface{} `json:"version,omitempty"`
		VersionElement map[string]interface{} `json:"_version,omitempty"`
		Name interface{} `json:"name,omitempty"`
		NameElement map[string]interface{} `json:"_name,omitempty"`
		Title interface{} `json:"title,omitempty"`
		TitleElement map[string]interface{} `json:"_title,omitempty"`
		Status *PublicationStatus `json:"status,omitempty"`
		Kind *OperationKind `json:"kind,omitempty"`
		Experimental interface{} `json:"experimental,omitempty"`
		ExperimentalElement map[string]interface{} `json:"_experimental,omitempty"`
		Date interface{} `json:"date,omitempty"`
		DateElement map[string]interface{} `json:"_date,omitempty"`
		Publisher interface{} `json:"publisher,omitempty"`
		PublisherElement map[string]interface{} `json:"_publisher,omitempty"`
		Contact []*ContactDetail `json:"contact,omitempty"`
		Description interface{} `json:"description,omitempty"`
		DescriptionElement map[string]interface{} `json:"_description,omitempty"`
		UseContext []*UsageContext `json:"usecontext,omitempty"`
		Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`
		Purpose interface{} `json:"purpose,omitempty"`
		PurposeElement map[string]interface{} `json:"_purpose,omitempty"`
		AffectsState interface{} `json:"affectsstate,omitempty"`
		AffectsStateElement map[string]interface{} `json:"_affectsstate,omitempty"`
		Code interface{} `json:"code,omitempty"`
		CodeElement map[string]interface{} `json:"_code,omitempty"`
		Comment interface{} `json:"comment,omitempty"`
		CommentElement map[string]interface{} `json:"_comment,omitempty"`
		Base interface{} `json:"base,omitempty"`
		BaseElement map[string]interface{} `json:"_base,omitempty"`
		Resource []interface{} `json:"resource,omitempty"`
		ResourceElement []map[string]interface{} `json:"_resource,omitempty"`
		System interface{} `json:"system,omitempty"`
		SystemElement map[string]interface{} `json:"_system,omitempty"`
		Type interface{} `json:"type,omitempty"`
		TypeElement map[string]interface{} `json:"_type,omitempty"`
		Instance interface{} `json:"instance,omitempty"`
		InstanceElement map[string]interface{} `json:"_instance,omitempty"`
		InputProfile interface{} `json:"inputprofile,omitempty"`
		InputProfileElement map[string]interface{} `json:"_inputprofile,omitempty"`
		OutputProfile interface{} `json:"outputprofile,omitempty"`
		OutputProfileElement map[string]interface{} `json:"_outputprofile,omitempty"`
		Parameter []*OperationDefinitionParameter `json:"parameter,omitempty"`
		Overload []*OperationDefinitionOverload `json:"overload,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	if m.Url != nil && m.Url.Value != nil {
		output.Url = m.Url.Value
		if m.Url.Element != nil {
			output.UrlElement = toMapOrNil(m.Url.Element.MarshalJSON())
		}
	}
	if m.Version != nil && m.Version.Value != nil {
		output.Version = m.Version.Value
		if m.Version.Element != nil {
			output.VersionElement = toMapOrNil(m.Version.Element.MarshalJSON())
		}
	}
	if m.Name != nil && m.Name.Value != nil {
		output.Name = m.Name.Value
		if m.Name.Element != nil {
			output.NameElement = toMapOrNil(m.Name.Element.MarshalJSON())
		}
	}
	if m.Title != nil && m.Title.Value != nil {
		output.Title = m.Title.Value
		if m.Title.Element != nil {
			output.TitleElement = toMapOrNil(m.Title.Element.MarshalJSON())
		}
	}
	output.Status = m.Status
	output.Kind = m.Kind
	if m.Experimental != nil && m.Experimental.Value != nil {
		output.Experimental = m.Experimental.Value
		if m.Experimental.Element != nil {
			output.ExperimentalElement = toMapOrNil(m.Experimental.Element.MarshalJSON())
		}
	}
	if m.Date != nil && m.Date.Value != nil {
		output.Date = m.Date.Value
		if m.Date.Element != nil {
			output.DateElement = toMapOrNil(m.Date.Element.MarshalJSON())
		}
	}
	if m.Publisher != nil && m.Publisher.Value != nil {
		output.Publisher = m.Publisher.Value
		if m.Publisher.Element != nil {
			output.PublisherElement = toMapOrNil(m.Publisher.Element.MarshalJSON())
		}
	}
	output.Contact = m.Contact
	if m.Description != nil && m.Description.Value != nil {
		output.Description = m.Description.Value
		if m.Description.Element != nil {
			output.DescriptionElement = toMapOrNil(m.Description.Element.MarshalJSON())
		}
	}
	output.UseContext = m.UseContext
	output.Jurisdiction = m.Jurisdiction
	if m.Purpose != nil && m.Purpose.Value != nil {
		output.Purpose = m.Purpose.Value
		if m.Purpose.Element != nil {
			output.PurposeElement = toMapOrNil(m.Purpose.Element.MarshalJSON())
		}
	}
	if m.AffectsState != nil && m.AffectsState.Value != nil {
		output.AffectsState = m.AffectsState.Value
		if m.AffectsState.Element != nil {
			output.AffectsStateElement = toMapOrNil(m.AffectsState.Element.MarshalJSON())
		}
	}
	if m.Code != nil && m.Code.Value != nil {
		output.Code = m.Code.Value
		if m.Code.Element != nil {
			output.CodeElement = toMapOrNil(m.Code.Element.MarshalJSON())
		}
	}
	if m.Comment != nil && m.Comment.Value != nil {
		output.Comment = m.Comment.Value
		if m.Comment.Element != nil {
			output.CommentElement = toMapOrNil(m.Comment.Element.MarshalJSON())
		}
	}
	if m.Base != nil && m.Base.Value != nil {
		output.Base = m.Base.Value
		if m.Base.Element != nil {
			output.BaseElement = toMapOrNil(m.Base.Element.MarshalJSON())
		}
	}
	if len(m.Resource) > 0 {
		output.Resource = make([]interface{}, len(m.Resource))
		output.ResourceElement = make([]map[string]interface{}, len(m.Resource))
		for i, item := range m.Resource {
			if item != nil && item.Value != nil {
				output.Resource[i] = item.Value
			}
			if item != nil && item.Element != nil {
				output.ResourceElement[i] = toMapOrNil(item.Element.MarshalJSON())
			}
		}
	}
	if m.System != nil && m.System.Value != nil {
		output.System = m.System.Value
		if m.System.Element != nil {
			output.SystemElement = toMapOrNil(m.System.Element.MarshalJSON())
		}
	}
	if m.Type != nil && m.Type.Value != nil {
		output.Type = m.Type.Value
		if m.Type.Element != nil {
			output.TypeElement = toMapOrNil(m.Type.Element.MarshalJSON())
		}
	}
	if m.Instance != nil && m.Instance.Value != nil {
		output.Instance = m.Instance.Value
		if m.Instance.Element != nil {
			output.InstanceElement = toMapOrNil(m.Instance.Element.MarshalJSON())
		}
	}
	if m.InputProfile != nil && m.InputProfile.Value != nil {
		output.InputProfile = m.InputProfile.Value
		if m.InputProfile.Element != nil {
			output.InputProfileElement = toMapOrNil(m.InputProfile.Element.MarshalJSON())
		}
	}
	if m.OutputProfile != nil && m.OutputProfile.Value != nil {
		output.OutputProfile = m.OutputProfile.Value
		if m.OutputProfile.Element != nil {
			output.OutputProfileElement = toMapOrNil(m.OutputProfile.Element.MarshalJSON())
		}
	}
	output.Parameter = m.Parameter
	output.Overload = m.Overload
	return json.Marshal(output)
}

// Clone creates a deep copy of OperationDefinition.
func (m *OperationDefinition) Clone() *OperationDefinition {
	if m == nil { return nil }
	return &OperationDefinition{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Url: m.Url.Clone(),
		Version: m.Version.Clone(),
		Name: m.Name.Clone(),
		Title: m.Title.Clone(),
		Status: m.Status.Clone(),
		Kind: m.Kind.Clone(),
		Experimental: m.Experimental.Clone(),
		Date: m.Date.Clone(),
		Publisher: m.Publisher.Clone(),
		Contact: cloneSlices(m.Contact),
		Description: m.Description.Clone(),
		UseContext: cloneSlices(m.UseContext),
		Jurisdiction: cloneSlices(m.Jurisdiction),
		Purpose: m.Purpose.Clone(),
		AffectsState: m.AffectsState.Clone(),
		Code: m.Code.Clone(),
		Comment: m.Comment.Clone(),
		Base: m.Base.Clone(),
		Resource: cloneSlices(m.Resource),
		System: m.System.Clone(),
		Type: m.Type.Clone(),
		Instance: m.Instance.Clone(),
		InputProfile: m.InputProfile.Clone(),
		OutputProfile: m.OutputProfile.Clone(),
		Parameter: cloneSlices(m.Parameter),
		Overload: cloneSlices(m.Overload),
	}
}

// Equals checks equality between two OperationDefinition instances.
func (m *OperationDefinition) Equals(other *OperationDefinition) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !m.Version.Equals(other.Version) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Kind.Equals(other.Kind) { return false }
	if !m.Experimental.Equals(other.Experimental) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Publisher.Equals(other.Publisher) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.UseContext, other.UseContext) { return false }
	if !compareSlices(m.Jurisdiction, other.Jurisdiction) { return false }
	if !m.Purpose.Equals(other.Purpose) { return false }
	if !m.AffectsState.Equals(other.AffectsState) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Comment.Equals(other.Comment) { return false }
	if !m.Base.Equals(other.Base) { return false }
	if !compareSlices(m.Resource, other.Resource) { return false }
	if !m.System.Equals(other.System) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Instance.Equals(other.Instance) { return false }
	if !m.InputProfile.Equals(other.InputProfile) { return false }
	if !m.OutputProfile.Equals(other.OutputProfile) { return false }
	if !compareSlices(m.Parameter, other.Parameter) { return false }
	if !compareSlices(m.Overload, other.Overload) { return false }
	return true
}

// OperationDefinitionParameter
// The parameters for the operation/query.
type OperationDefinitionParameter struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Name *FhirCode `json:"name,omitempty"`
	Use *OperationParameterUse `json:"use,omitempty"`
	Min *FhirInteger `json:"min,omitempty"`
	Max *FhirString `json:"max,omitempty"`
	Documentation *FhirString `json:"documentation,omitempty"`
	Type *FHIRAllTypes `json:"type,omitempty"`
	TargetProfile []*FhirCanonical `json:"targetprofile,omitempty"`
	SearchType *SearchParamType `json:"searchtype,omitempty"`
	Binding *OperationDefinitionBinding `json:"binding,omitempty"`
	ReferencedFrom []*OperationDefinitionReferencedFrom `json:"referencedfrom,omitempty"`
	Part_ []*OperationDefinitionParameter `json:"part,omitempty"`
}

// NewOperationDefinitionParameter creates a new OperationDefinitionParameter instance.
func NewOperationDefinitionParameter() *OperationDefinitionParameter {
	return &OperationDefinitionParameter{}
}

// UnmarshalJSON populates OperationDefinitionParameter from JSON data.
func (m *OperationDefinitionParameter) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Name *FhirCode `json:"name,omitempty"`
		Use *OperationParameterUse `json:"use,omitempty"`
		Min *FhirInteger `json:"min,omitempty"`
		Max *FhirString `json:"max,omitempty"`
		Documentation *FhirString `json:"documentation,omitempty"`
		Type *FHIRAllTypes `json:"type,omitempty"`
		TargetProfile []interface{} `json:"targetprofile,omitempty"`
		SearchType *SearchParamType `json:"searchtype,omitempty"`
		Binding *OperationDefinitionBinding `json:"binding,omitempty"`
		ReferencedFrom []*OperationDefinitionReferencedFrom `json:"referencedfrom,omitempty"`
		Part_ []*OperationDefinitionParameter `json:"part,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Name = temp.Name
	m.Use = temp.Use
	m.Min = temp.Min
	m.Max = temp.Max
	m.Documentation = temp.Documentation
	m.Type = temp.Type
	if len(temp.TargetProfile) > 0 {
		m.TargetProfile = make([]*FhirCanonical, len(temp.TargetProfile))
		for i := range temp.TargetProfile {
			itemMap, ok := temp.TargetProfile[i].(map[string]interface{})
			if !ok { return fmt.Errorf("invalid value for TargetProfile[%d]: expected map", i) }
			primitive, err := NewFhirCanonicalFromMap(itemMap)
			if err != nil { return fmt.Errorf("failed to parse TargetProfile[%d]: %v", i, err) }
			m.TargetProfile[i] = primitive
		}
	}
	m.SearchType = temp.SearchType
	m.Binding = temp.Binding
	m.ReferencedFrom = temp.ReferencedFrom
	m.Part_ = temp.Part_
	return nil
}

// MarshalJSON converts OperationDefinitionParameter to JSON data.
func (m *OperationDefinitionParameter) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Name interface{} `json:"name,omitempty"`
		NameElement map[string]interface{} `json:"_name,omitempty"`
		Use *OperationParameterUse `json:"use,omitempty"`
		Min interface{} `json:"min,omitempty"`
		MinElement map[string]interface{} `json:"_min,omitempty"`
		Max interface{} `json:"max,omitempty"`
		MaxElement map[string]interface{} `json:"_max,omitempty"`
		Documentation interface{} `json:"documentation,omitempty"`
		DocumentationElement map[string]interface{} `json:"_documentation,omitempty"`
		Type *FHIRAllTypes `json:"type,omitempty"`
		TargetProfile []interface{} `json:"targetprofile,omitempty"`
		TargetProfileElement []map[string]interface{} `json:"_targetprofile,omitempty"`
		SearchType *SearchParamType `json:"searchtype,omitempty"`
		Binding *OperationDefinitionBinding `json:"binding,omitempty"`
		ReferencedFrom []*OperationDefinitionReferencedFrom `json:"referencedfrom,omitempty"`
		Part_ []*OperationDefinitionParameter `json:"part,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	if m.Name != nil && m.Name.Value != nil {
		output.Name = m.Name.Value
		if m.Name.Element != nil {
			output.NameElement = toMapOrNil(m.Name.Element.MarshalJSON())
		}
	}
	output.Use = m.Use
	if m.Min != nil && m.Min.Value != nil {
		output.Min = m.Min.Value
		if m.Min.Element != nil {
			output.MinElement = toMapOrNil(m.Min.Element.MarshalJSON())
		}
	}
	if m.Max != nil && m.Max.Value != nil {
		output.Max = m.Max.Value
		if m.Max.Element != nil {
			output.MaxElement = toMapOrNil(m.Max.Element.MarshalJSON())
		}
	}
	if m.Documentation != nil && m.Documentation.Value != nil {
		output.Documentation = m.Documentation.Value
		if m.Documentation.Element != nil {
			output.DocumentationElement = toMapOrNil(m.Documentation.Element.MarshalJSON())
		}
	}
	output.Type = m.Type
	if len(m.TargetProfile) > 0 {
		output.TargetProfile = make([]interface{}, len(m.TargetProfile))
		output.TargetProfileElement = make([]map[string]interface{}, len(m.TargetProfile))
		for i, item := range m.TargetProfile {
			if item != nil && item.Value != nil {
				output.TargetProfile[i] = item.Value
			}
			if item != nil && item.Element != nil {
				output.TargetProfileElement[i] = toMapOrNil(item.Element.MarshalJSON())
			}
		}
	}
	output.SearchType = m.SearchType
	output.Binding = m.Binding
	output.ReferencedFrom = m.ReferencedFrom
	output.Part_ = m.Part_
	return json.Marshal(output)
}

// Clone creates a deep copy of OperationDefinitionParameter.
func (m *OperationDefinitionParameter) Clone() *OperationDefinitionParameter {
	if m == nil { return nil }
	return &OperationDefinitionParameter{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Name: m.Name.Clone(),
		Use: m.Use.Clone(),
		Min: m.Min.Clone(),
		Max: m.Max.Clone(),
		Documentation: m.Documentation.Clone(),
		Type: m.Type.Clone(),
		TargetProfile: cloneSlices(m.TargetProfile),
		SearchType: m.SearchType.Clone(),
		Binding: m.Binding.Clone(),
		ReferencedFrom: cloneSlices(m.ReferencedFrom),
		Part_: cloneSlices(m.Part_),
	}
}

// Equals checks equality between two OperationDefinitionParameter instances.
func (m *OperationDefinitionParameter) Equals(other *OperationDefinitionParameter) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Use.Equals(other.Use) { return false }
	if !m.Min.Equals(other.Min) { return false }
	if !m.Max.Equals(other.Max) { return false }
	if !m.Documentation.Equals(other.Documentation) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !compareSlices(m.TargetProfile, other.TargetProfile) { return false }
	if !m.SearchType.Equals(other.SearchType) { return false }
	if !m.Binding.Equals(other.Binding) { return false }
	if !compareSlices(m.ReferencedFrom, other.ReferencedFrom) { return false }
	if !compareSlices(m.Part_, other.Part_) { return false }
	return true
}

// OperationDefinitionBinding
// Binds to a value set if this parameter is coded (code, Coding, CodeableConcept).
type OperationDefinitionBinding struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Strength *BindingStrength `json:"strength,omitempty"`
	ValueSet *FhirCanonical `json:"valueset,omitempty"`
}

// NewOperationDefinitionBinding creates a new OperationDefinitionBinding instance.
func NewOperationDefinitionBinding() *OperationDefinitionBinding {
	return &OperationDefinitionBinding{}
}

// UnmarshalJSON populates OperationDefinitionBinding from JSON data.
func (m *OperationDefinitionBinding) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Strength *BindingStrength `json:"strength,omitempty"`
		ValueSet *FhirCanonical `json:"valueset,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Strength = temp.Strength
	m.ValueSet = temp.ValueSet
	return nil
}

// MarshalJSON converts OperationDefinitionBinding to JSON data.
func (m *OperationDefinitionBinding) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Strength *BindingStrength `json:"strength,omitempty"`
		ValueSet interface{} `json:"valueset,omitempty"`
		ValueSetElement map[string]interface{} `json:"_valueset,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Strength = m.Strength
	if m.ValueSet != nil && m.ValueSet.Value != nil {
		output.ValueSet = m.ValueSet.Value
		if m.ValueSet.Element != nil {
			output.ValueSetElement = toMapOrNil(m.ValueSet.Element.MarshalJSON())
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of OperationDefinitionBinding.
func (m *OperationDefinitionBinding) Clone() *OperationDefinitionBinding {
	if m == nil { return nil }
	return &OperationDefinitionBinding{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Strength: m.Strength.Clone(),
		ValueSet: m.ValueSet.Clone(),
	}
}

// Equals checks equality between two OperationDefinitionBinding instances.
func (m *OperationDefinitionBinding) Equals(other *OperationDefinitionBinding) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Strength.Equals(other.Strength) { return false }
	if !m.ValueSet.Equals(other.ValueSet) { return false }
	return true
}

// OperationDefinitionReferencedFrom
// Identifies other resource parameters within the operation invocation that are expected to resolve to this resource.
type OperationDefinitionReferencedFrom struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Source *FhirString `json:"source,omitempty"`
	SourceId *FhirString `json:"sourceid,omitempty"`
}

// NewOperationDefinitionReferencedFrom creates a new OperationDefinitionReferencedFrom instance.
func NewOperationDefinitionReferencedFrom() *OperationDefinitionReferencedFrom {
	return &OperationDefinitionReferencedFrom{}
}

// UnmarshalJSON populates OperationDefinitionReferencedFrom from JSON data.
func (m *OperationDefinitionReferencedFrom) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Source *FhirString `json:"source,omitempty"`
		SourceId *FhirString `json:"sourceid,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Source = temp.Source
	m.SourceId = temp.SourceId
	return nil
}

// MarshalJSON converts OperationDefinitionReferencedFrom to JSON data.
func (m *OperationDefinitionReferencedFrom) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Source interface{} `json:"source,omitempty"`
		SourceElement map[string]interface{} `json:"_source,omitempty"`
		SourceId interface{} `json:"sourceid,omitempty"`
		SourceIdElement map[string]interface{} `json:"_sourceid,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	if m.Source != nil && m.Source.Value != nil {
		output.Source = m.Source.Value
		if m.Source.Element != nil {
			output.SourceElement = toMapOrNil(m.Source.Element.MarshalJSON())
		}
	}
	if m.SourceId != nil && m.SourceId.Value != nil {
		output.SourceId = m.SourceId.Value
		if m.SourceId.Element != nil {
			output.SourceIdElement = toMapOrNil(m.SourceId.Element.MarshalJSON())
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of OperationDefinitionReferencedFrom.
func (m *OperationDefinitionReferencedFrom) Clone() *OperationDefinitionReferencedFrom {
	if m == nil { return nil }
	return &OperationDefinitionReferencedFrom{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Source: m.Source.Clone(),
		SourceId: m.SourceId.Clone(),
	}
}

// Equals checks equality between two OperationDefinitionReferencedFrom instances.
func (m *OperationDefinitionReferencedFrom) Equals(other *OperationDefinitionReferencedFrom) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Source.Equals(other.Source) { return false }
	if !m.SourceId.Equals(other.SourceId) { return false }
	return true
}

// OperationDefinitionOverload
// Defines an appropriate combination of parameters to use when invoking this operation, to help code generators when generating overloaded parameter sets for this operation.
type OperationDefinitionOverload struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	ParameterName []*FhirString `json:"parametername,omitempty"`
	Comment *FhirString `json:"comment,omitempty"`
}

// NewOperationDefinitionOverload creates a new OperationDefinitionOverload instance.
func NewOperationDefinitionOverload() *OperationDefinitionOverload {
	return &OperationDefinitionOverload{}
}

// UnmarshalJSON populates OperationDefinitionOverload from JSON data.
func (m *OperationDefinitionOverload) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		ParameterName []interface{} `json:"parametername,omitempty"`
		Comment *FhirString `json:"comment,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	if len(temp.ParameterName) > 0 {
		m.ParameterName = make([]*FhirString, len(temp.ParameterName))
		for i := range temp.ParameterName {
			itemMap, ok := temp.ParameterName[i].(map[string]interface{})
			if !ok { return fmt.Errorf("invalid value for ParameterName[%d]: expected map", i) }
			primitive, err := NewFhirStringFromMap(itemMap)
			if err != nil { return fmt.Errorf("failed to parse ParameterName[%d]: %v", i, err) }
			m.ParameterName[i] = primitive
		}
	}
	m.Comment = temp.Comment
	return nil
}

// MarshalJSON converts OperationDefinitionOverload to JSON data.
func (m *OperationDefinitionOverload) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		ParameterName []interface{} `json:"parametername,omitempty"`
		ParameterNameElement []map[string]interface{} `json:"_parametername,omitempty"`
		Comment interface{} `json:"comment,omitempty"`
		CommentElement map[string]interface{} `json:"_comment,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	if len(m.ParameterName) > 0 {
		output.ParameterName = make([]interface{}, len(m.ParameterName))
		output.ParameterNameElement = make([]map[string]interface{}, len(m.ParameterName))
		for i, item := range m.ParameterName {
			if item != nil && item.Value != nil {
				output.ParameterName[i] = item.Value
			}
			if item != nil && item.Element != nil {
				output.ParameterNameElement[i] = toMapOrNil(item.Element.MarshalJSON())
			}
		}
	}
	if m.Comment != nil && m.Comment.Value != nil {
		output.Comment = m.Comment.Value
		if m.Comment.Element != nil {
			output.CommentElement = toMapOrNil(m.Comment.Element.MarshalJSON())
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of OperationDefinitionOverload.
func (m *OperationDefinitionOverload) Clone() *OperationDefinitionOverload {
	if m == nil { return nil }
	return &OperationDefinitionOverload{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		ParameterName: cloneSlices(m.ParameterName),
		Comment: m.Comment.Clone(),
	}
}

// Equals checks equality between two OperationDefinitionOverload instances.
func (m *OperationDefinitionOverload) Equals(other *OperationDefinitionOverload) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.ParameterName, other.ParameterName) { return false }
	if !m.Comment.Equals(other.Comment) { return false }
	return true
}

