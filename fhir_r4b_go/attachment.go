// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// Attachment
// For referring to data content defined in other formats.
type Attachment struct {
	extends DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ContentType *FhirCode `json:"contenttype,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Data *FhirBase64Binary `json:"data,omitempty"`
	Url *FhirUrl `json:"url,omitempty"`
	Size *FhirUnsignedInt `json:"size,omitempty"`
	Hash *FhirBase64Binary `json:"hash,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	Creation *FhirDateTime `json:"creation,omitempty"`
}

// NewAttachment creates a new Attachment instance.
func NewAttachment() *Attachment {
	return &Attachment{}
}

// UnmarshalJSON populates Attachment from JSON data.
func (m *Attachment) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ContentType *FhirCode `json:"contenttype,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Data *FhirBase64Binary `json:"data,omitempty"`
		Url *FhirUrl `json:"url,omitempty"`
		Size *FhirUnsignedInt `json:"size,omitempty"`
		Hash *FhirBase64Binary `json:"hash,omitempty"`
		Title *FhirString `json:"title,omitempty"`
		Creation *FhirDateTime `json:"creation,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ContentType = temp.ContentType
	m.Language = temp.Language
	m.Data = temp.Data
	m.Url = temp.Url
	m.Size = temp.Size
	m.Hash = temp.Hash
	m.Title = temp.Title
	m.Creation = temp.Creation
	return nil
}

// MarshalJSON converts Attachment to JSON data.
func (m *Attachment) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ContentType interface{} `json:"contenttype,omitempty"`
		ContentTypeElement map[string]interface{} `json:"_contenttype,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Data interface{} `json:"data,omitempty"`
		DataElement map[string]interface{} `json:"_data,omitempty"`
		Url interface{} `json:"url,omitempty"`
		UrlElement map[string]interface{} `json:"_url,omitempty"`
		Size interface{} `json:"size,omitempty"`
		SizeElement map[string]interface{} `json:"_size,omitempty"`
		Hash interface{} `json:"hash,omitempty"`
		HashElement map[string]interface{} `json:"_hash,omitempty"`
		Title interface{} `json:"title,omitempty"`
		TitleElement map[string]interface{} `json:"_title,omitempty"`
		Creation interface{} `json:"creation,omitempty"`
		CreationElement map[string]interface{} `json:"_creation,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	if m.ContentType != nil && m.ContentType.Value != nil {
		output.ContentType = m.ContentType.Value
		if m.ContentType.Element != nil {
			output.ContentTypeElement = toMapOrNil(m.ContentType.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	if m.Data != nil && m.Data.Value != nil {
		output.Data = m.Data.Value
		if m.Data.Element != nil {
			output.DataElement = toMapOrNil(m.Data.Element.MarshalJSON())
		}
	}
	if m.Url != nil && m.Url.Value != nil {
		output.Url = m.Url.Value
		if m.Url.Element != nil {
			output.UrlElement = toMapOrNil(m.Url.Element.MarshalJSON())
		}
	}
	if m.Size != nil && m.Size.Value != nil {
		output.Size = m.Size.Value
		if m.Size.Element != nil {
			output.SizeElement = toMapOrNil(m.Size.Element.MarshalJSON())
		}
	}
	if m.Hash != nil && m.Hash.Value != nil {
		output.Hash = m.Hash.Value
		if m.Hash.Element != nil {
			output.HashElement = toMapOrNil(m.Hash.Element.MarshalJSON())
		}
	}
	if m.Title != nil && m.Title.Value != nil {
		output.Title = m.Title.Value
		if m.Title.Element != nil {
			output.TitleElement = toMapOrNil(m.Title.Element.MarshalJSON())
		}
	}
	if m.Creation != nil && m.Creation.Value != nil {
		output.Creation = m.Creation.Value
		if m.Creation.Element != nil {
			output.CreationElement = toMapOrNil(m.Creation.Element.MarshalJSON())
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of Attachment.
func (m *Attachment) Clone() *Attachment {
	if m == nil { return nil }
	return &Attachment{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ContentType: m.ContentType.Clone(),
		Language: m.Language.Clone(),
		Data: m.Data.Clone(),
		Url: m.Url.Clone(),
		Size: m.Size.Clone(),
		Hash: m.Hash.Clone(),
		Title: m.Title.Clone(),
		Creation: m.Creation.Clone(),
	}
}

// Equals checks equality between two Attachment instances.
func (m *Attachment) Equals(other *Attachment) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.ContentType.Equals(other.ContentType) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Data.Equals(other.Data) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !m.Size.Equals(other.Size) { return false }
	if !m.Hash.Equals(other.Hash) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !m.Creation.Equals(other.Creation) { return false }
	return true
}

