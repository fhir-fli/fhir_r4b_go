// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// SearchParameter
// A search parameter that defines a named search item that can be used to search/filter on a resource.
type SearchParameter struct {
	CanonicalResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Url *FhirUri `json:"url,omitempty"`
	Version *FhirString `json:"version,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	DerivedFrom *FhirCanonical `json:"derivedfrom,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	Experimental *FhirBoolean `json:"experimental,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Publisher *FhirString `json:"publisher,omitempty"`
	Contact []*ContactDetail `json:"contact,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	UseContext []*UsageContext `json:"usecontext,omitempty"`
	Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`
	Purpose *FhirMarkdown `json:"purpose,omitempty"`
	Code *FhirCode `json:"code,omitempty"`
	Base []*FhirCode `json:"base,omitempty"`
	Type *SearchParamType `json:"type,omitempty"`
	Expression *FhirString `json:"expression,omitempty"`
	Xpath *FhirString `json:"xpath,omitempty"`
	XpathUsage *XPathUsageType `json:"xpathusage,omitempty"`
	Target []*FhirCode `json:"target,omitempty"`
	MultipleOr *FhirBoolean `json:"multipleor,omitempty"`
	MultipleAnd *FhirBoolean `json:"multipleand,omitempty"`
	Comparator []*SearchComparator `json:"comparator,omitempty"`
	Modifier []*SearchModifierCode `json:"modifier,omitempty"`
	Chain []*FhirString `json:"chain,omitempty"`
	Component []*SearchParameterComponent `json:"component,omitempty"`
}

// NewSearchParameter creates a new SearchParameter instance
func NewSearchParameter() *SearchParameter {
	return &SearchParameter{}
}

// FromJSON populates SearchParameter from JSON data
func (m *SearchParameter) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts SearchParameter to JSON data
func (m *SearchParameter) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of SearchParameter
func (m *SearchParameter) Clone() *SearchParameter {
	if m == nil { return nil }
	return &SearchParameter{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Url: m.Url.Clone(),
		Version: m.Version.Clone(),
		Name: m.Name.Clone(),
		DerivedFrom: m.DerivedFrom.Clone(),
		Status: m.Status.Clone(),
		Experimental: m.Experimental.Clone(),
		Date: m.Date.Clone(),
		Publisher: m.Publisher.Clone(),
		Contact: cloneSlices(m.Contact),
		Description: m.Description.Clone(),
		UseContext: cloneSlices(m.UseContext),
		Jurisdiction: cloneSlices(m.Jurisdiction),
		Purpose: m.Purpose.Clone(),
		Code: m.Code.Clone(),
		Base: cloneSlices(m.Base),
		Type: m.Type.Clone(),
		Expression: m.Expression.Clone(),
		Xpath: m.Xpath.Clone(),
		XpathUsage: m.XpathUsage.Clone(),
		Target: cloneSlices(m.Target),
		MultipleOr: m.MultipleOr.Clone(),
		MultipleAnd: m.MultipleAnd.Clone(),
		Comparator: cloneSlices(m.Comparator),
		Modifier: cloneSlices(m.Modifier),
		Chain: cloneSlices(m.Chain),
		Component: cloneSlices(m.Component),
	}
}

// Equals checks for equality with another SearchParameter instance
func (m *SearchParameter) Equals(other *SearchParameter) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !m.Version.Equals(other.Version) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.DerivedFrom.Equals(other.DerivedFrom) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Experimental.Equals(other.Experimental) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Publisher.Equals(other.Publisher) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.UseContext, other.UseContext) { return false }
	if !compareSlices(m.Jurisdiction, other.Jurisdiction) { return false }
	if !m.Purpose.Equals(other.Purpose) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !compareSlices(m.Base, other.Base) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Expression.Equals(other.Expression) { return false }
	if !m.Xpath.Equals(other.Xpath) { return false }
	if !m.XpathUsage.Equals(other.XpathUsage) { return false }
	if !compareSlices(m.Target, other.Target) { return false }
	if !m.MultipleOr.Equals(other.MultipleOr) { return false }
	if !m.MultipleAnd.Equals(other.MultipleAnd) { return false }
	if !compareSlices(m.Comparator, other.Comparator) { return false }
	if !compareSlices(m.Modifier, other.Modifier) { return false }
	if !compareSlices(m.Chain, other.Chain) { return false }
	if !compareSlices(m.Component, other.Component) { return false }
	return true
}

// SearchParameterComponent
// Used to define the parts of a composite search parameter.
type SearchParameterComponent struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Definition *FhirCanonical `json:"definition,omitempty"`
	Expression *FhirString `json:"expression,omitempty"`
}

// NewSearchParameterComponent creates a new SearchParameterComponent instance
func NewSearchParameterComponent() *SearchParameterComponent {
	return &SearchParameterComponent{}
}

// FromJSON populates SearchParameterComponent from JSON data
func (m *SearchParameterComponent) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts SearchParameterComponent to JSON data
func (m *SearchParameterComponent) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of SearchParameterComponent
func (m *SearchParameterComponent) Clone() *SearchParameterComponent {
	if m == nil { return nil }
	return &SearchParameterComponent{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Definition: m.Definition.Clone(),
		Expression: m.Expression.Clone(),
	}
}

// Equals checks for equality with another SearchParameterComponent instance
func (m *SearchParameterComponent) Equals(other *SearchParameterComponent) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Definition.Equals(other.Definition) { return false }
	if !m.Expression.Equals(other.Expression) { return false }
	return true
}

