// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// Binary
// A resource that represents the data of a single raw artifact as digital content accessible in its native format.  A Binary resource can contain any content, whether text, image, pdf, zip archive, etc.
type Binary struct {
	extends Resource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	ContentType *FhirCode `json:"contenttype,omitempty"`
	SecurityContext *Reference `json:"securitycontext,omitempty"`
	Data *FhirBase64Binary `json:"data,omitempty"`
}

// NewBinary creates a new Binary instance.
func NewBinary() *Binary {
	return &Binary{}
}

// UnmarshalJSON populates Binary from JSON data.
func (m *Binary) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		ContentType *FhirCode `json:"contenttype,omitempty"`
		SecurityContext *Reference `json:"securitycontext,omitempty"`
		Data *FhirBase64Binary `json:"data,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.ContentType = temp.ContentType
	m.SecurityContext = temp.SecurityContext
	m.Data = temp.Data
	return nil
}

// MarshalJSON converts Binary to JSON data.
func (m *Binary) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		ContentType interface{} `json:"contenttype,omitempty"`
		ContentTypeElement map[string]interface{} `json:"_contenttype,omitempty"`
		SecurityContext *Reference `json:"securitycontext,omitempty"`
		Data interface{} `json:"data,omitempty"`
		DataElement map[string]interface{} `json:"_data,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	if m.ContentType != nil && m.ContentType.Value != nil {
		output.ContentType = m.ContentType.Value
		if m.ContentType.Element != nil {
			output.ContentTypeElement = toMapOrNil(m.ContentType.Element.MarshalJSON())
		}
	}
	output.SecurityContext = m.SecurityContext
	if m.Data != nil && m.Data.Value != nil {
		output.Data = m.Data.Value
		if m.Data.Element != nil {
			output.DataElement = toMapOrNil(m.Data.Element.MarshalJSON())
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of Binary.
func (m *Binary) Clone() *Binary {
	if m == nil { return nil }
	return &Binary{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		ContentType: m.ContentType.Clone(),
		SecurityContext: m.SecurityContext.Clone(),
		Data: m.Data.Clone(),
	}
}

// Equals checks equality between two Binary instances.
func (m *Binary) Equals(other *Binary) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.ContentType.Equals(other.ContentType) { return false }
	if !m.SecurityContext.Equals(other.SecurityContext) { return false }
	if !m.Data.Equals(other.Data) { return false }
	return true
}

