// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Period
// A time period defined by a start and end date and optionally time.
type Period struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Start *FhirDateTime `json:"start,omitempty"`
	End *FhirDateTime `json:"end,omitempty"`
}

// NewPeriod creates a new Period instance
func NewPeriod() *Period {
	return &Period{}
}

// FromJSON populates Period from JSON data
func (m *Period) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Period to JSON data
func (m *Period) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Period
func (m *Period) Clone() *Period {
	if m == nil { return nil }
	return &Period{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Start: m.Start.Clone(),
		End: m.End.Clone(),
	}
}

// Equals checks for equality with another Period instance
func (m *Period) Equals(other *Period) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Start.Equals(other.Start) { return false }
	if !m.End.Equals(other.End) { return false }
	return true
}

