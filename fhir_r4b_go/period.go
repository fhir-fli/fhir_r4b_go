// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// Period
// A time period defined by a start and end date and optionally time.
type Period struct {
	extends DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Start *FhirDateTime `json:"start,omitempty"`
	End *FhirDateTime `json:"end,omitempty"`
}

// NewPeriod creates a new Period instance.
func NewPeriod() *Period {
	return &Period{}
}

// UnmarshalJSON populates Period from JSON data.
func (m *Period) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		Start *FhirDateTime `json:"start,omitempty"`
		End *FhirDateTime `json:"end,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.Start = temp.Start
	m.End = temp.End
	return nil
}

// MarshalJSON converts Period to JSON data.
func (m *Period) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		Start interface{} `json:"start,omitempty"`
		StartElement map[string]interface{} `json:"_start,omitempty"`
		End interface{} `json:"end,omitempty"`
		EndElement map[string]interface{} `json:"_end,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	if m.Start != nil && m.Start.Value != nil {
		output.Start = m.Start.Value
		if m.Start.Element != nil {
			output.StartElement = toMapOrNil(m.Start.Element.MarshalJSON())
		}
	}
	if m.End != nil && m.End.Value != nil {
		output.End = m.End.Value
		if m.End.Element != nil {
			output.EndElement = toMapOrNil(m.End.Element.MarshalJSON())
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of Period.
func (m *Period) Clone() *Period {
	if m == nil { return nil }
	return &Period{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Start: m.Start.Clone(),
		End: m.End.Clone(),
	}
}

// Equals checks equality between two Period instances.
func (m *Period) Equals(other *Period) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Start.Equals(other.Start) { return false }
	if !m.End.Equals(other.End) { return false }
	return true
}

