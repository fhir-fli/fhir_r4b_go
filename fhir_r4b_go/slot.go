// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// Slot
// A slot of time on a schedule that may be available for booking appointments.
type Slot struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	ServiceCategory []*CodeableConcept `json:"servicecategory,omitempty"`
	ServiceType []*CodeableConcept `json:"servicetype,omitempty"`
	Specialty []*CodeableConcept `json:"specialty,omitempty"`
	AppointmentType *CodeableConcept `json:"appointmenttype,omitempty"`
	Schedule *Reference `json:"schedule,omitempty"`
	Status *SlotStatus `json:"status,omitempty"`
	Start *FhirInstant `json:"start,omitempty"`
	End *FhirInstant `json:"end,omitempty"`
	Overbooked *FhirBoolean `json:"overbooked,omitempty"`
	Comment *FhirString `json:"comment,omitempty"`
}

// NewSlot creates a new Slot instance.
func NewSlot() *Slot {
	return &Slot{}
}

// UnmarshalJSON populates Slot from JSON data.
func (m *Slot) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		ServiceCategory []*CodeableConcept `json:"servicecategory,omitempty"`
		ServiceType []*CodeableConcept `json:"servicetype,omitempty"`
		Specialty []*CodeableConcept `json:"specialty,omitempty"`
		AppointmentType *CodeableConcept `json:"appointmenttype,omitempty"`
		Schedule *Reference `json:"schedule,omitempty"`
		Status *SlotStatus `json:"status,omitempty"`
		Start *FhirInstant `json:"start,omitempty"`
		End *FhirInstant `json:"end,omitempty"`
		Overbooked *FhirBoolean `json:"overbooked,omitempty"`
		Comment *FhirString `json:"comment,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Identifier = temp.Identifier
	m.ServiceCategory = temp.ServiceCategory
	m.ServiceType = temp.ServiceType
	m.Specialty = temp.Specialty
	m.AppointmentType = temp.AppointmentType
	m.Schedule = temp.Schedule
	m.Status = temp.Status
	m.Start = temp.Start
	m.End = temp.End
	m.Overbooked = temp.Overbooked
	m.Comment = temp.Comment
	return nil
}

// MarshalJSON converts Slot to JSON data.
func (m *Slot) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		ServiceCategory []*CodeableConcept `json:"servicecategory,omitempty"`
		ServiceType []*CodeableConcept `json:"servicetype,omitempty"`
		Specialty []*CodeableConcept `json:"specialty,omitempty"`
		AppointmentType *CodeableConcept `json:"appointmenttype,omitempty"`
		Schedule *Reference `json:"schedule,omitempty"`
		Status *SlotStatus `json:"status,omitempty"`
		Start interface{} `json:"start,omitempty"`
		StartElement map[string]interface{} `json:"_start,omitempty"`
		End interface{} `json:"end,omitempty"`
		EndElement map[string]interface{} `json:"_end,omitempty"`
		Overbooked interface{} `json:"overbooked,omitempty"`
		OverbookedElement map[string]interface{} `json:"_overbooked,omitempty"`
		Comment interface{} `json:"comment,omitempty"`
		CommentElement map[string]interface{} `json:"_comment,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Identifier = m.Identifier
	output.ServiceCategory = m.ServiceCategory
	output.ServiceType = m.ServiceType
	output.Specialty = m.Specialty
	output.AppointmentType = m.AppointmentType
	output.Schedule = m.Schedule
	output.Status = m.Status
	if m.Start != nil && m.Start.Value != nil {
		output.Start = m.Start.Value
		if m.Start.Element != nil {
			output.StartElement = toMapOrNil(m.Start.Element.MarshalJSON())
		}
	}
	if m.End != nil && m.End.Value != nil {
		output.End = m.End.Value
		if m.End.Element != nil {
			output.EndElement = toMapOrNil(m.End.Element.MarshalJSON())
		}
	}
	if m.Overbooked != nil && m.Overbooked.Value != nil {
		output.Overbooked = m.Overbooked.Value
		if m.Overbooked.Element != nil {
			output.OverbookedElement = toMapOrNil(m.Overbooked.Element.MarshalJSON())
		}
	}
	if m.Comment != nil && m.Comment.Value != nil {
		output.Comment = m.Comment.Value
		if m.Comment.Element != nil {
			output.CommentElement = toMapOrNil(m.Comment.Element.MarshalJSON())
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of Slot.
func (m *Slot) Clone() *Slot {
	if m == nil { return nil }
	return &Slot{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		ServiceCategory: cloneSlices(m.ServiceCategory),
		ServiceType: cloneSlices(m.ServiceType),
		Specialty: cloneSlices(m.Specialty),
		AppointmentType: m.AppointmentType.Clone(),
		Schedule: m.Schedule.Clone(),
		Status: m.Status.Clone(),
		Start: m.Start.Clone(),
		End: m.End.Clone(),
		Overbooked: m.Overbooked.Clone(),
		Comment: m.Comment.Clone(),
	}
}

// Equals checks equality between two Slot instances.
func (m *Slot) Equals(other *Slot) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.ServiceCategory, other.ServiceCategory) { return false }
	if !compareSlices(m.ServiceType, other.ServiceType) { return false }
	if !compareSlices(m.Specialty, other.Specialty) { return false }
	if !m.AppointmentType.Equals(other.AppointmentType) { return false }
	if !m.Schedule.Equals(other.Schedule) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Start.Equals(other.Start) { return false }
	if !m.End.Equals(other.End) { return false }
	if !m.Overbooked.Equals(other.Overbooked) { return false }
	if !m.Comment.Equals(other.Comment) { return false }
	return true
}

