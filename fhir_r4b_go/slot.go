// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Slot
// A slot of time on a schedule that may be available for booking appointments.
type Slot struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	ServiceCategory []*CodeableConcept `json:"servicecategory,omitempty"`
	ServiceType []*CodeableConcept `json:"servicetype,omitempty"`
	Specialty []*CodeableConcept `json:"specialty,omitempty"`
	AppointmentType *CodeableConcept `json:"appointmenttype,omitempty"`
	Schedule *Reference `json:"schedule,omitempty"`
	Status *SlotStatus `json:"status,omitempty"`
	Start *FhirInstant `json:"start,omitempty"`
	End *FhirInstant `json:"end,omitempty"`
	Overbooked *FhirBoolean `json:"overbooked,omitempty"`
	Comment *FhirString `json:"comment,omitempty"`
}

// NewSlot creates a new Slot instance
func NewSlot() *Slot {
	return &Slot{}
}

// FromJSON populates Slot from JSON data
func (m *Slot) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Slot to JSON data
func (m *Slot) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Slot
func (m *Slot) Clone() *Slot {
	if m == nil { return nil }
	return &Slot{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		ServiceCategory: cloneSlices(m.ServiceCategory),
		ServiceType: cloneSlices(m.ServiceType),
		Specialty: cloneSlices(m.Specialty),
		AppointmentType: m.AppointmentType.Clone(),
		Schedule: m.Schedule.Clone(),
		Status: m.Status.Clone(),
		Start: m.Start.Clone(),
		End: m.End.Clone(),
		Overbooked: m.Overbooked.Clone(),
		Comment: m.Comment.Clone(),
	}
}

// Equals checks for equality with another Slot instance
func (m *Slot) Equals(other *Slot) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.ServiceCategory, other.ServiceCategory) { return false }
	if !compareSlices(m.ServiceType, other.ServiceType) { return false }
	if !compareSlices(m.Specialty, other.Specialty) { return false }
	if !m.AppointmentType.Equals(other.AppointmentType) { return false }
	if !m.Schedule.Equals(other.Schedule) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Start.Equals(other.Start) { return false }
	if !m.End.Equals(other.End) { return false }
	if !m.Overbooked.Equals(other.Overbooked) { return false }
	if !m.Comment.Equals(other.Comment) { return false }
	return true
}

