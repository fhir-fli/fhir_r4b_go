// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// VisionPrescription
// An authorization for the provision of glasses and/or contact lenses to a patient.
type VisionPrescription struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *FinancialResourceStatusCodes `json:"status,omitempty"`
	Created *FhirDateTime `json:"created,omitempty"`
	Patient *Reference `json:"patient,omitempty"`
	Encounter *Reference `json:"encounter,omitempty"`
	DateWritten *FhirDateTime `json:"datewritten,omitempty"`
	Prescriber *Reference `json:"prescriber,omitempty"`
	LensSpecification []*VisionPrescriptionLensSpecification `json:"lensspecification,omitempty"`
}

// NewVisionPrescription creates a new VisionPrescription instance
func NewVisionPrescription() *VisionPrescription {
	return &VisionPrescription{}
}

// FromJSON populates VisionPrescription from JSON data
func (m *VisionPrescription) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts VisionPrescription to JSON data
func (m *VisionPrescription) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of VisionPrescription
func (m *VisionPrescription) Clone() *VisionPrescription {
	if m == nil { return nil }
	return &VisionPrescription{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		Created: m.Created.Clone(),
		Patient: m.Patient.Clone(),
		Encounter: m.Encounter.Clone(),
		DateWritten: m.DateWritten.Clone(),
		Prescriber: m.Prescriber.Clone(),
		LensSpecification: cloneSlices(m.LensSpecification),
	}
}

// Equals checks for equality with another VisionPrescription instance
func (m *VisionPrescription) Equals(other *VisionPrescription) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Created.Equals(other.Created) { return false }
	if !m.Patient.Equals(other.Patient) { return false }
	if !m.Encounter.Equals(other.Encounter) { return false }
	if !m.DateWritten.Equals(other.DateWritten) { return false }
	if !m.Prescriber.Equals(other.Prescriber) { return false }
	if !compareSlices(m.LensSpecification, other.LensSpecification) { return false }
	return true
}

// VisionPrescriptionLensSpecification
// Contain the details of  the individual lens specifications and serves as the authorization for the fullfillment by certified professionals.
type VisionPrescriptionLensSpecification struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Product *CodeableConcept `json:"product,omitempty"`
	Eye *VisionEyes `json:"eye,omitempty"`
	Sphere *FhirDecimal `json:"sphere,omitempty"`
	Cylinder *FhirDecimal `json:"cylinder,omitempty"`
	Axis *FhirInteger `json:"axis,omitempty"`
	Prism []*VisionPrescriptionPrism `json:"prism,omitempty"`
	Add *FhirDecimal `json:"add,omitempty"`
	Power *FhirDecimal `json:"power,omitempty"`
	BackCurve *FhirDecimal `json:"backcurve,omitempty"`
	Diameter *FhirDecimal `json:"diameter,omitempty"`
	Duration *Quantity `json:"duration,omitempty"`
	Color *FhirString `json:"color,omitempty"`
	Brand *FhirString `json:"brand,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
}

// NewVisionPrescriptionLensSpecification creates a new VisionPrescriptionLensSpecification instance
func NewVisionPrescriptionLensSpecification() *VisionPrescriptionLensSpecification {
	return &VisionPrescriptionLensSpecification{}
}

// FromJSON populates VisionPrescriptionLensSpecification from JSON data
func (m *VisionPrescriptionLensSpecification) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts VisionPrescriptionLensSpecification to JSON data
func (m *VisionPrescriptionLensSpecification) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of VisionPrescriptionLensSpecification
func (m *VisionPrescriptionLensSpecification) Clone() *VisionPrescriptionLensSpecification {
	if m == nil { return nil }
	return &VisionPrescriptionLensSpecification{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Product: m.Product.Clone(),
		Eye: m.Eye.Clone(),
		Sphere: m.Sphere.Clone(),
		Cylinder: m.Cylinder.Clone(),
		Axis: m.Axis.Clone(),
		Prism: cloneSlices(m.Prism),
		Add: m.Add.Clone(),
		Power: m.Power.Clone(),
		BackCurve: m.BackCurve.Clone(),
		Diameter: m.Diameter.Clone(),
		Duration: m.Duration.Clone(),
		Color: m.Color.Clone(),
		Brand: m.Brand.Clone(),
		Note: cloneSlices(m.Note),
	}
}

// Equals checks for equality with another VisionPrescriptionLensSpecification instance
func (m *VisionPrescriptionLensSpecification) Equals(other *VisionPrescriptionLensSpecification) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Product.Equals(other.Product) { return false }
	if !m.Eye.Equals(other.Eye) { return false }
	if !m.Sphere.Equals(other.Sphere) { return false }
	if !m.Cylinder.Equals(other.Cylinder) { return false }
	if !m.Axis.Equals(other.Axis) { return false }
	if !compareSlices(m.Prism, other.Prism) { return false }
	if !m.Add.Equals(other.Add) { return false }
	if !m.Power.Equals(other.Power) { return false }
	if !m.BackCurve.Equals(other.BackCurve) { return false }
	if !m.Diameter.Equals(other.Diameter) { return false }
	if !m.Duration.Equals(other.Duration) { return false }
	if !m.Color.Equals(other.Color) { return false }
	if !m.Brand.Equals(other.Brand) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	return true
}

// VisionPrescriptionPrism
// Allows for adjustment on two axis.
type VisionPrescriptionPrism struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Amount *FhirDecimal `json:"amount,omitempty"`
	Base *VisionBase `json:"base,omitempty"`
}

// NewVisionPrescriptionPrism creates a new VisionPrescriptionPrism instance
func NewVisionPrescriptionPrism() *VisionPrescriptionPrism {
	return &VisionPrescriptionPrism{}
}

// FromJSON populates VisionPrescriptionPrism from JSON data
func (m *VisionPrescriptionPrism) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts VisionPrescriptionPrism to JSON data
func (m *VisionPrescriptionPrism) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of VisionPrescriptionPrism
func (m *VisionPrescriptionPrism) Clone() *VisionPrescriptionPrism {
	if m == nil { return nil }
	return &VisionPrescriptionPrism{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Amount: m.Amount.Clone(),
		Base: m.Base.Clone(),
	}
}

// Equals checks for equality with another VisionPrescriptionPrism instance
func (m *VisionPrescriptionPrism) Equals(other *VisionPrescriptionPrism) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Amount.Equals(other.Amount) { return false }
	if !m.Base.Equals(other.Base) { return false }
	return true
}

