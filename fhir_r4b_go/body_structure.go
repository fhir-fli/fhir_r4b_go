// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// BodyStructure
// Record details about an anatomical structure.  This resource may be used when a coded concept does not provide the necessary detail needed for the use case.
type BodyStructure struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Active *FhirBoolean `json:"active,omitempty"`
	Morphology *CodeableConcept `json:"morphology,omitempty"`
	Location *CodeableConcept `json:"location,omitempty"`
	LocationQualifier []*CodeableConcept `json:"locationqualifier,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Image []*Attachment `json:"image,omitempty"`
	Patient *Reference `json:"patient,omitempty"`
}

// NewBodyStructure creates a new BodyStructure instance.
func NewBodyStructure() *BodyStructure {
	return &BodyStructure{}
}

// FromJSON populates BodyStructure from JSON data.
func (m *BodyStructure) FromJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Active *FhirBoolean `json:"active,omitempty"`
		Morphology *CodeableConcept `json:"morphology,omitempty"`
		Location *CodeableConcept `json:"location,omitempty"`
		LocationQualifier []*CodeableConcept `json:"locationqualifier,omitempty"`
		Description *FhirString `json:"description,omitempty"`
		Image []*Attachment `json:"image,omitempty"`
		Patient *Reference `json:"patient,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Identifier = temp.Identifier
	m.Active = temp.Active
	m.Morphology = temp.Morphology
	m.Location = temp.Location
	m.LocationQualifier = temp.LocationQualifier
	m.Description = temp.Description
	m.Image = temp.Image
	m.Patient = temp.Patient
	return nil
}

// ToJSON converts BodyStructure to JSON data.
func (m *BodyStructure) ToJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Active interface{} `json:"active,omitempty"`
		ActiveElement map[string]interface{} `json:"_active,omitempty"`
		Morphology *CodeableConcept `json:"morphology,omitempty"`
		Location *CodeableConcept `json:"location,omitempty"`
		LocationQualifier []*CodeableConcept `json:"locationqualifier,omitempty"`
		Description interface{} `json:"description,omitempty"`
		DescriptionElement map[string]interface{} `json:"_description,omitempty"`
		Image []*Attachment `json:"image,omitempty"`
		Patient *Reference `json:"patient,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.ToJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.ToJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Identifier = m.Identifier
	if m.Active != nil && m.Active.Value != nil {
		output.Active = m.Active.Value
		if m.Active.Element != nil {
			output.ActiveElement = toMapOrNil(m.Active.Element.ToJSON())
		}
	}
	output.Morphology = m.Morphology
	output.Location = m.Location
	output.LocationQualifier = m.LocationQualifier
	if m.Description != nil && m.Description.Value != nil {
		output.Description = m.Description.Value
		if m.Description.Element != nil {
			output.DescriptionElement = toMapOrNil(m.Description.Element.ToJSON())
		}
	}
	output.Image = m.Image
	output.Patient = m.Patient
	return json.Marshal(output)
}

// Clone creates a deep copy of BodyStructure.
func (m *BodyStructure) Clone() *BodyStructure {
	if m == nil { return nil }
	return &BodyStructure{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Active: m.Active.Clone(),
		Morphology: m.Morphology.Clone(),
		Location: m.Location.Clone(),
		LocationQualifier: cloneSlices(m.LocationQualifier),
		Description: m.Description.Clone(),
		Image: cloneSlices(m.Image),
		Patient: m.Patient.Clone(),
	}
}

// Equals checks equality between two BodyStructure instances.
func (m *BodyStructure) Equals(other *BodyStructure) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Active.Equals(other.Active) { return false }
	if !m.Morphology.Equals(other.Morphology) { return false }
	if !m.Location.Equals(other.Location) { return false }
	if !compareSlices(m.LocationQualifier, other.LocationQualifier) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.Image, other.Image) { return false }
	if !m.Patient.Equals(other.Patient) { return false }
	return true
}

