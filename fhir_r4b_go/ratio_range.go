// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// RatioRange
// A range of ratios expressed as a low and high numerator and a denominator.
type RatioRange struct {
	extends DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	LowNumerator *Quantity `json:"lownumerator,omitempty"`
	HighNumerator *Quantity `json:"highnumerator,omitempty"`
	Denominator *Quantity `json:"denominator,omitempty"`
}

// NewRatioRange creates a new RatioRange instance.
func NewRatioRange() *RatioRange {
	return &RatioRange{}
}

// UnmarshalJSON populates RatioRange from JSON data.
func (m *RatioRange) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		LowNumerator *Quantity `json:"lownumerator,omitempty"`
		HighNumerator *Quantity `json:"highnumerator,omitempty"`
		Denominator *Quantity `json:"denominator,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.LowNumerator = temp.LowNumerator
	m.HighNumerator = temp.HighNumerator
	m.Denominator = temp.Denominator
	return nil
}

// MarshalJSON converts RatioRange to JSON data.
func (m *RatioRange) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		LowNumerator *Quantity `json:"lownumerator,omitempty"`
		HighNumerator *Quantity `json:"highnumerator,omitempty"`
		Denominator *Quantity `json:"denominator,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.LowNumerator = m.LowNumerator
	output.HighNumerator = m.HighNumerator
	output.Denominator = m.Denominator
	return json.Marshal(output)
}

// Clone creates a deep copy of RatioRange.
func (m *RatioRange) Clone() *RatioRange {
	if m == nil { return nil }
	return &RatioRange{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		LowNumerator: m.LowNumerator.Clone(),
		HighNumerator: m.HighNumerator.Clone(),
		Denominator: m.Denominator.Clone(),
	}
}

// Equals checks equality between two RatioRange instances.
func (m *RatioRange) Equals(other *RatioRange) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.LowNumerator.Equals(other.LowNumerator) { return false }
	if !m.HighNumerator.Equals(other.HighNumerator) { return false }
	if !m.Denominator.Equals(other.Denominator) { return false }
	return true
}

