// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// RatioRange
// A range of ratios expressed as a low and high numerator and a denominator.
type RatioRange struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	LowNumerator *Quantity `json:"lownumerator,omitempty"`
	HighNumerator *Quantity `json:"highnumerator,omitempty"`
	Denominator *Quantity `json:"denominator,omitempty"`
}

// NewRatioRange creates a new RatioRange instance
func NewRatioRange() *RatioRange {
	return &RatioRange{}
}

// FromJSON populates RatioRange from JSON data
func (m *RatioRange) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts RatioRange to JSON data
func (m *RatioRange) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of RatioRange
func (m *RatioRange) Clone() *RatioRange {
	if m == nil { return nil }
	return &RatioRange{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		LowNumerator: m.LowNumerator.Clone(),
		HighNumerator: m.HighNumerator.Clone(),
		Denominator: m.Denominator.Clone(),
	}
}

// Equals checks for equality with another RatioRange instance
func (m *RatioRange) Equals(other *RatioRange) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.LowNumerator.Equals(other.LowNumerator) { return false }
	if !m.HighNumerator.Equals(other.HighNumerator) { return false }
	if !m.Denominator.Equals(other.Denominator) { return false }
	return true
}

