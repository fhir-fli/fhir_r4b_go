// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// FhirGroup
// Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
type FhirGroup struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Active *FhirBoolean `json:"active,omitempty"`
	Type *GroupType `json:"type,omitempty"`
	Actual *FhirBoolean `json:"actual,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Quantity *FhirUnsignedInt `json:"quantity,omitempty"`
	ManagingEntity *Reference `json:"managingentity,omitempty"`
	Characteristic []*GroupCharacteristic `json:"characteristic,omitempty"`
	Member []*GroupMember `json:"member,omitempty"`
}

// NewFhirGroup creates a new FhirGroup instance.
func NewFhirGroup() *FhirGroup {
	return &FhirGroup{}
}

// UnmarshalJSON populates FhirGroup from JSON data.
func (m *FhirGroup) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Active *FhirBoolean `json:"active,omitempty"`
		Type *GroupType `json:"type,omitempty"`
		Actual *FhirBoolean `json:"actual,omitempty"`
		Code *CodeableConcept `json:"code,omitempty"`
		Name *FhirString `json:"name,omitempty"`
		Quantity *FhirUnsignedInt `json:"quantity,omitempty"`
		ManagingEntity *Reference `json:"managingentity,omitempty"`
		Characteristic []*GroupCharacteristic `json:"characteristic,omitempty"`
		Member []*GroupMember `json:"member,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Identifier = temp.Identifier
	m.Active = temp.Active
	m.Type = temp.Type
	m.Actual = temp.Actual
	m.Code = temp.Code
	m.Name = temp.Name
	m.Quantity = temp.Quantity
	m.ManagingEntity = temp.ManagingEntity
	m.Characteristic = temp.Characteristic
	m.Member = temp.Member
	return nil
}

// MarshalJSON converts FhirGroup to JSON data.
func (m *FhirGroup) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Active interface{} `json:"active,omitempty"`
		ActiveElement map[string]interface{} `json:"_active,omitempty"`
		Type *GroupType `json:"type,omitempty"`
		Actual interface{} `json:"actual,omitempty"`
		ActualElement map[string]interface{} `json:"_actual,omitempty"`
		Code *CodeableConcept `json:"code,omitempty"`
		Name interface{} `json:"name,omitempty"`
		NameElement map[string]interface{} `json:"_name,omitempty"`
		Quantity interface{} `json:"quantity,omitempty"`
		QuantityElement map[string]interface{} `json:"_quantity,omitempty"`
		ManagingEntity *Reference `json:"managingentity,omitempty"`
		Characteristic []*GroupCharacteristic `json:"characteristic,omitempty"`
		Member []*GroupMember `json:"member,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Identifier = m.Identifier
	if m.Active != nil && m.Active.Value != nil {
		output.Active = m.Active.Value
		if m.Active.Element != nil {
			output.ActiveElement = toMapOrNil(m.Active.Element.MarshalJSON())
		}
	}
	output.Type = m.Type
	if m.Actual != nil && m.Actual.Value != nil {
		output.Actual = m.Actual.Value
		if m.Actual.Element != nil {
			output.ActualElement = toMapOrNil(m.Actual.Element.MarshalJSON())
		}
	}
	output.Code = m.Code
	if m.Name != nil && m.Name.Value != nil {
		output.Name = m.Name.Value
		if m.Name.Element != nil {
			output.NameElement = toMapOrNil(m.Name.Element.MarshalJSON())
		}
	}
	if m.Quantity != nil && m.Quantity.Value != nil {
		output.Quantity = m.Quantity.Value
		if m.Quantity.Element != nil {
			output.QuantityElement = toMapOrNil(m.Quantity.Element.MarshalJSON())
		}
	}
	output.ManagingEntity = m.ManagingEntity
	output.Characteristic = m.Characteristic
	output.Member = m.Member
	return json.Marshal(output)
}

// Clone creates a deep copy of FhirGroup.
func (m *FhirGroup) Clone() *FhirGroup {
	if m == nil { return nil }
	return &FhirGroup{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Active: m.Active.Clone(),
		Type: m.Type.Clone(),
		Actual: m.Actual.Clone(),
		Code: m.Code.Clone(),
		Name: m.Name.Clone(),
		Quantity: m.Quantity.Clone(),
		ManagingEntity: m.ManagingEntity.Clone(),
		Characteristic: cloneSlices(m.Characteristic),
		Member: cloneSlices(m.Member),
	}
}

// Equals checks equality between two FhirGroup instances.
func (m *FhirGroup) Equals(other *FhirGroup) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Active.Equals(other.Active) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Actual.Equals(other.Actual) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Quantity.Equals(other.Quantity) { return false }
	if !m.ManagingEntity.Equals(other.ManagingEntity) { return false }
	if !compareSlices(m.Characteristic, other.Characteristic) { return false }
	if !compareSlices(m.Member, other.Member) { return false }
	return true
}

// GroupCharacteristic
// Identifies traits whose presence r absence is shared by members of the group.
type GroupCharacteristic struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	ValueCodeableConcept *CodeableConcept `json:"valuecodeableconcept,omitempty"`
	ValueBoolean *FhirBoolean `json:"valueboolean,omitempty"`
	ValueQuantity *Quantity `json:"valuequantity,omitempty"`
	ValueRange *Range `json:"valuerange,omitempty"`
	ValueReference *Reference `json:"valuereference,omitempty"`
	Exclude *FhirBoolean `json:"exclude,omitempty"`
	Period *Period `json:"period,omitempty"`
}

// NewGroupCharacteristic creates a new GroupCharacteristic instance.
func NewGroupCharacteristic() *GroupCharacteristic {
	return &GroupCharacteristic{}
}

// UnmarshalJSON populates GroupCharacteristic from JSON data.
func (m *GroupCharacteristic) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Code *CodeableConcept `json:"code,omitempty"`
		ValueCodeableConcept *CodeableConcept `json:"valuecodeableconcept,omitempty"`
		ValueBoolean *FhirBoolean `json:"valueboolean,omitempty"`
		ValueQuantity *Quantity `json:"valuequantity,omitempty"`
		ValueRange *Range `json:"valuerange,omitempty"`
		ValueReference *Reference `json:"valuereference,omitempty"`
		Exclude *FhirBoolean `json:"exclude,omitempty"`
		Period *Period `json:"period,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Code = temp.Code
	m.ValueCodeableConcept = temp.ValueCodeableConcept
	m.ValueBoolean = temp.ValueBoolean
	m.ValueQuantity = temp.ValueQuantity
	m.ValueRange = temp.ValueRange
	m.ValueReference = temp.ValueReference
	m.Exclude = temp.Exclude
	m.Period = temp.Period
	return nil
}

// MarshalJSON converts GroupCharacteristic to JSON data.
func (m *GroupCharacteristic) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Code *CodeableConcept `json:"code,omitempty"`
		ValueCodeableConcept *CodeableConcept `json:"valuecodeableconcept,omitempty"`
		ValueBoolean interface{} `json:"valueboolean,omitempty"`
		ValueBooleanElement map[string]interface{} `json:"_valueboolean,omitempty"`
		ValueQuantity *Quantity `json:"valuequantity,omitempty"`
		ValueRange *Range `json:"valuerange,omitempty"`
		ValueReference *Reference `json:"valuereference,omitempty"`
		Exclude interface{} `json:"exclude,omitempty"`
		ExcludeElement map[string]interface{} `json:"_exclude,omitempty"`
		Period *Period `json:"period,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Code = m.Code
	output.ValueCodeableConcept = m.ValueCodeableConcept
	if m.ValueBoolean != nil && m.ValueBoolean.Value != nil {
		output.ValueBoolean = m.ValueBoolean.Value
		if m.ValueBoolean.Element != nil {
			output.ValueBooleanElement = toMapOrNil(m.ValueBoolean.Element.MarshalJSON())
		}
	}
	output.ValueQuantity = m.ValueQuantity
	output.ValueRange = m.ValueRange
	output.ValueReference = m.ValueReference
	if m.Exclude != nil && m.Exclude.Value != nil {
		output.Exclude = m.Exclude.Value
		if m.Exclude.Element != nil {
			output.ExcludeElement = toMapOrNil(m.Exclude.Element.MarshalJSON())
		}
	}
	output.Period = m.Period
	return json.Marshal(output)
}

// Clone creates a deep copy of GroupCharacteristic.
func (m *GroupCharacteristic) Clone() *GroupCharacteristic {
	if m == nil { return nil }
	return &GroupCharacteristic{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		ValueCodeableConcept: m.ValueCodeableConcept.Clone(),
		ValueBoolean: m.ValueBoolean.Clone(),
		ValueQuantity: m.ValueQuantity.Clone(),
		ValueRange: m.ValueRange.Clone(),
		ValueReference: m.ValueReference.Clone(),
		Exclude: m.Exclude.Clone(),
		Period: m.Period.Clone(),
	}
}

// Equals checks equality between two GroupCharacteristic instances.
func (m *GroupCharacteristic) Equals(other *GroupCharacteristic) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.ValueCodeableConcept.Equals(other.ValueCodeableConcept) { return false }
	if !m.ValueBoolean.Equals(other.ValueBoolean) { return false }
	if !m.ValueQuantity.Equals(other.ValueQuantity) { return false }
	if !m.ValueRange.Equals(other.ValueRange) { return false }
	if !m.ValueReference.Equals(other.ValueReference) { return false }
	if !m.Exclude.Equals(other.Exclude) { return false }
	if !m.Period.Equals(other.Period) { return false }
	return true
}

// GroupMember
// Identifies the resource instances that are members of the group.
type GroupMember struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Entity *Reference `json:"entity,omitempty"`
	Period *Period `json:"period,omitempty"`
	Inactive *FhirBoolean `json:"inactive,omitempty"`
}

// NewGroupMember creates a new GroupMember instance.
func NewGroupMember() *GroupMember {
	return &GroupMember{}
}

// UnmarshalJSON populates GroupMember from JSON data.
func (m *GroupMember) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Entity *Reference `json:"entity,omitempty"`
		Period *Period `json:"period,omitempty"`
		Inactive *FhirBoolean `json:"inactive,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Entity = temp.Entity
	m.Period = temp.Period
	m.Inactive = temp.Inactive
	return nil
}

// MarshalJSON converts GroupMember to JSON data.
func (m *GroupMember) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Entity *Reference `json:"entity,omitempty"`
		Period *Period `json:"period,omitempty"`
		Inactive interface{} `json:"inactive,omitempty"`
		InactiveElement map[string]interface{} `json:"_inactive,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Entity = m.Entity
	output.Period = m.Period
	if m.Inactive != nil && m.Inactive.Value != nil {
		output.Inactive = m.Inactive.Value
		if m.Inactive.Element != nil {
			output.InactiveElement = toMapOrNil(m.Inactive.Element.MarshalJSON())
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of GroupMember.
func (m *GroupMember) Clone() *GroupMember {
	if m == nil { return nil }
	return &GroupMember{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Entity: m.Entity.Clone(),
		Period: m.Period.Clone(),
		Inactive: m.Inactive.Clone(),
	}
}

// Equals checks equality between two GroupMember instances.
func (m *GroupMember) Equals(other *GroupMember) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Entity.Equals(other.Entity) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !m.Inactive.Equals(other.Inactive) { return false }
	return true
}

