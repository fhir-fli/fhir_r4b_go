// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// FhirGroup
// Represents a defined collection of entities that may be discussed or acted upon collectively but which are not expected to act collectively, and are not formally or legally recognized; i.e. a collection of entities that isn't an Organization.
type FhirGroup struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Active *FhirBoolean `json:"active,omitempty"`
	Type *GroupType `json:"type,omitempty"`
	Actual *FhirBoolean `json:"actual,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Quantity *FhirUnsignedInt `json:"quantity,omitempty"`
	ManagingEntity *Reference `json:"managingentity,omitempty"`
	Characteristic []*GroupCharacteristic `json:"characteristic,omitempty"`
	Member []*GroupMember `json:"member,omitempty"`
}

// NewFhirGroup creates a new FhirGroup instance
func NewFhirGroup() *FhirGroup {
	return &FhirGroup{}
}

// FromJSON populates FhirGroup from JSON data
func (m *FhirGroup) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts FhirGroup to JSON data
func (m *FhirGroup) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of FhirGroup
func (m *FhirGroup) Clone() *FhirGroup {
	if m == nil { return nil }
	return &FhirGroup{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Active: m.Active.Clone(),
		Type: m.Type.Clone(),
		Actual: m.Actual.Clone(),
		Code: m.Code.Clone(),
		Name: m.Name.Clone(),
		Quantity: m.Quantity.Clone(),
		ManagingEntity: m.ManagingEntity.Clone(),
		Characteristic: cloneSlices(m.Characteristic),
		Member: cloneSlices(m.Member),
	}
}

// Equals checks for equality with another FhirGroup instance
func (m *FhirGroup) Equals(other *FhirGroup) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Active.Equals(other.Active) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Actual.Equals(other.Actual) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Quantity.Equals(other.Quantity) { return false }
	if !m.ManagingEntity.Equals(other.ManagingEntity) { return false }
	if !compareSlices(m.Characteristic, other.Characteristic) { return false }
	if !compareSlices(m.Member, other.Member) { return false }
	return true
}

// GroupCharacteristic
// Identifies traits whose presence r absence is shared by members of the group.
type GroupCharacteristic struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	ValueCodeableConcept *CodeableConcept `json:"valuecodeableconcept,omitempty"`
	ValueBoolean *FhirBoolean `json:"valueboolean,omitempty"`
	ValueQuantity *Quantity `json:"valuequantity,omitempty"`
	ValueRange *Range `json:"valuerange,omitempty"`
	ValueReference *Reference `json:"valuereference,omitempty"`
	Exclude *FhirBoolean `json:"exclude,omitempty"`
	Period *Period `json:"period,omitempty"`
}

// NewGroupCharacteristic creates a new GroupCharacteristic instance
func NewGroupCharacteristic() *GroupCharacteristic {
	return &GroupCharacteristic{}
}

// FromJSON populates GroupCharacteristic from JSON data
func (m *GroupCharacteristic) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts GroupCharacteristic to JSON data
func (m *GroupCharacteristic) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of GroupCharacteristic
func (m *GroupCharacteristic) Clone() *GroupCharacteristic {
	if m == nil { return nil }
	return &GroupCharacteristic{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		ValueCodeableConcept: m.ValueCodeableConcept.Clone(),
		ValueBoolean: m.ValueBoolean.Clone(),
		ValueQuantity: m.ValueQuantity.Clone(),
		ValueRange: m.ValueRange.Clone(),
		ValueReference: m.ValueReference.Clone(),
		Exclude: m.Exclude.Clone(),
		Period: m.Period.Clone(),
	}
}

// Equals checks for equality with another GroupCharacteristic instance
func (m *GroupCharacteristic) Equals(other *GroupCharacteristic) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.ValueCodeableConcept.Equals(other.ValueCodeableConcept) { return false }
	if !m.ValueBoolean.Equals(other.ValueBoolean) { return false }
	if !m.ValueQuantity.Equals(other.ValueQuantity) { return false }
	if !m.ValueRange.Equals(other.ValueRange) { return false }
	if !m.ValueReference.Equals(other.ValueReference) { return false }
	if !m.Exclude.Equals(other.Exclude) { return false }
	if !m.Period.Equals(other.Period) { return false }
	return true
}

// GroupMember
// Identifies the resource instances that are members of the group.
type GroupMember struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Entity *Reference `json:"entity,omitempty"`
	Period *Period `json:"period,omitempty"`
	Inactive *FhirBoolean `json:"inactive,omitempty"`
}

// NewGroupMember creates a new GroupMember instance
func NewGroupMember() *GroupMember {
	return &GroupMember{}
}

// FromJSON populates GroupMember from JSON data
func (m *GroupMember) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts GroupMember to JSON data
func (m *GroupMember) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of GroupMember
func (m *GroupMember) Clone() *GroupMember {
	if m == nil { return nil }
	return &GroupMember{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Entity: m.Entity.Clone(),
		Period: m.Period.Clone(),
		Inactive: m.Inactive.Clone(),
	}
}

// Equals checks for equality with another GroupMember instance
func (m *GroupMember) Equals(other *GroupMember) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Entity.Equals(other.Entity) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !m.Inactive.Equals(other.Inactive) { return false }
	return true
}

