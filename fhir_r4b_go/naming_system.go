// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// NamingSystem
// A curated namespace that issues unique symbols within that namespace for the identification of concepts, people, devices, etc.  Represents a "System" used within the Identifier and Coding data types.
type NamingSystem struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	Kind *NamingSystemType `json:"kind,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Publisher *FhirString `json:"publisher,omitempty"`
	Contact []*ContactDetail `json:"contact,omitempty"`
	Responsible *FhirString `json:"responsible,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	UseContext []*UsageContext `json:"usecontext,omitempty"`
	Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`
	Usage *FhirString `json:"usage,omitempty"`
	UniqueId []*NamingSystemUniqueId `json:"uniqueid,omitempty"`
}

// NewNamingSystem creates a new NamingSystem instance
func NewNamingSystem() *NamingSystem {
	return &NamingSystem{}
}

// FromJSON populates NamingSystem from JSON data
func (m *NamingSystem) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts NamingSystem to JSON data
func (m *NamingSystem) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of NamingSystem
func (m *NamingSystem) Clone() *NamingSystem {
	if m == nil { return nil }
	return &NamingSystem{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Name: m.Name.Clone(),
		Status: m.Status.Clone(),
		Kind: m.Kind.Clone(),
		Date: m.Date.Clone(),
		Publisher: m.Publisher.Clone(),
		Contact: cloneSlices(m.Contact),
		Responsible: m.Responsible.Clone(),
		Type: m.Type.Clone(),
		Description: m.Description.Clone(),
		UseContext: cloneSlices(m.UseContext),
		Jurisdiction: cloneSlices(m.Jurisdiction),
		Usage: m.Usage.Clone(),
		UniqueId: cloneSlices(m.UniqueId),
	}
}

// Equals checks for equality with another NamingSystem instance
func (m *NamingSystem) Equals(other *NamingSystem) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Kind.Equals(other.Kind) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Publisher.Equals(other.Publisher) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !m.Responsible.Equals(other.Responsible) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.UseContext, other.UseContext) { return false }
	if !compareSlices(m.Jurisdiction, other.Jurisdiction) { return false }
	if !m.Usage.Equals(other.Usage) { return false }
	if !compareSlices(m.UniqueId, other.UniqueId) { return false }
	return true
}

// NamingSystemUniqueId
// Indicates how the system may be identified when referenced in electronic exchange.
type NamingSystemUniqueId struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Type *NamingSystemIdentifierType `json:"type,omitempty"`
	Value *FhirString `json:"value,omitempty"`
	Preferred *FhirBoolean `json:"preferred,omitempty"`
	Comment *FhirString `json:"comment,omitempty"`
	Period *Period `json:"period,omitempty"`
}

// NewNamingSystemUniqueId creates a new NamingSystemUniqueId instance
func NewNamingSystemUniqueId() *NamingSystemUniqueId {
	return &NamingSystemUniqueId{}
}

// FromJSON populates NamingSystemUniqueId from JSON data
func (m *NamingSystemUniqueId) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts NamingSystemUniqueId to JSON data
func (m *NamingSystemUniqueId) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of NamingSystemUniqueId
func (m *NamingSystemUniqueId) Clone() *NamingSystemUniqueId {
	if m == nil { return nil }
	return &NamingSystemUniqueId{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Type: m.Type.Clone(),
		Value: m.Value.Clone(),
		Preferred: m.Preferred.Clone(),
		Comment: m.Comment.Clone(),
		Period: m.Period.Clone(),
	}
}

// Equals checks for equality with another NamingSystemUniqueId instance
func (m *NamingSystemUniqueId) Equals(other *NamingSystemUniqueId) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Value.Equals(other.Value) { return false }
	if !m.Preferred.Equals(other.Preferred) { return false }
	if !m.Comment.Equals(other.Comment) { return false }
	if !m.Period.Equals(other.Period) { return false }
	return true
}

