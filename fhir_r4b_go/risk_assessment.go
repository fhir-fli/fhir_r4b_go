// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// RiskAssessment
// An assessment of the likely outcome(s) for a patient or other subject as well as the likelihood of each outcome.
type RiskAssessment struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	BasedOn *Reference `json:"basedon,omitempty"`
	Parent *Reference `json:"parent,omitempty"`
	Status *ObservationStatus `json:"status,omitempty"`
	Method *CodeableConcept `json:"method,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Subject *Reference `json:"subject,omitempty"`
	Encounter *Reference `json:"encounter,omitempty"`
	OccurrenceDateTime *FhirDateTime `json:"occurrencedatetime,omitempty"`
	OccurrencePeriod *Period `json:"occurrenceperiod,omitempty"`
	Condition *Reference `json:"condition,omitempty"`
	Performer *Reference `json:"performer,omitempty"`
	ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
	ReasonReference []*Reference `json:"reasonreference,omitempty"`
	Basis []*Reference `json:"basis,omitempty"`
	Prediction []*RiskAssessmentPrediction `json:"prediction,omitempty"`
	Mitigation *FhirString `json:"mitigation,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
}

// NewRiskAssessment creates a new RiskAssessment instance
func NewRiskAssessment() *RiskAssessment {
	return &RiskAssessment{}
}

// FromJSON populates RiskAssessment from JSON data
func (m *RiskAssessment) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts RiskAssessment to JSON data
func (m *RiskAssessment) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of RiskAssessment
func (m *RiskAssessment) Clone() *RiskAssessment {
	if m == nil { return nil }
	return &RiskAssessment{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		BasedOn: m.BasedOn.Clone(),
		Parent: m.Parent.Clone(),
		Status: m.Status.Clone(),
		Method: m.Method.Clone(),
		Code: m.Code.Clone(),
		Subject: m.Subject.Clone(),
		Encounter: m.Encounter.Clone(),
		OccurrenceDateTime: m.OccurrenceDateTime.Clone(),
		OccurrencePeriod: m.OccurrencePeriod.Clone(),
		Condition: m.Condition.Clone(),
		Performer: m.Performer.Clone(),
		ReasonCode: cloneSlices(m.ReasonCode),
		ReasonReference: cloneSlices(m.ReasonReference),
		Basis: cloneSlices(m.Basis),
		Prediction: cloneSlices(m.Prediction),
		Mitigation: m.Mitigation.Clone(),
		Note: cloneSlices(m.Note),
	}
}

// Equals checks for equality with another RiskAssessment instance
func (m *RiskAssessment) Equals(other *RiskAssessment) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.BasedOn.Equals(other.BasedOn) { return false }
	if !m.Parent.Equals(other.Parent) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Method.Equals(other.Method) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Subject.Equals(other.Subject) { return false }
	if !m.Encounter.Equals(other.Encounter) { return false }
	if !m.OccurrenceDateTime.Equals(other.OccurrenceDateTime) { return false }
	if !m.OccurrencePeriod.Equals(other.OccurrencePeriod) { return false }
	if !m.Condition.Equals(other.Condition) { return false }
	if !m.Performer.Equals(other.Performer) { return false }
	if !compareSlices(m.ReasonCode, other.ReasonCode) { return false }
	if !compareSlices(m.ReasonReference, other.ReasonReference) { return false }
	if !compareSlices(m.Basis, other.Basis) { return false }
	if !compareSlices(m.Prediction, other.Prediction) { return false }
	if !m.Mitigation.Equals(other.Mitigation) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	return true
}

// RiskAssessmentPrediction
// Describes the expected outcome for the subject.
type RiskAssessmentPrediction struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Outcome *CodeableConcept `json:"outcome,omitempty"`
	ProbabilityDecimal *FhirDecimal `json:"probabilitydecimal,omitempty"`
	ProbabilityRange *Range `json:"probabilityrange,omitempty"`
	QualitativeRisk *CodeableConcept `json:"qualitativerisk,omitempty"`
	RelativeRisk *FhirDecimal `json:"relativerisk,omitempty"`
	WhenPeriod *Period `json:"whenperiod,omitempty"`
	WhenRange *Range `json:"whenrange,omitempty"`
	Rationale *FhirString `json:"rationale,omitempty"`
}

// NewRiskAssessmentPrediction creates a new RiskAssessmentPrediction instance
func NewRiskAssessmentPrediction() *RiskAssessmentPrediction {
	return &RiskAssessmentPrediction{}
}

// FromJSON populates RiskAssessmentPrediction from JSON data
func (m *RiskAssessmentPrediction) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts RiskAssessmentPrediction to JSON data
func (m *RiskAssessmentPrediction) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of RiskAssessmentPrediction
func (m *RiskAssessmentPrediction) Clone() *RiskAssessmentPrediction {
	if m == nil { return nil }
	return &RiskAssessmentPrediction{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Outcome: m.Outcome.Clone(),
		ProbabilityDecimal: m.ProbabilityDecimal.Clone(),
		ProbabilityRange: m.ProbabilityRange.Clone(),
		QualitativeRisk: m.QualitativeRisk.Clone(),
		RelativeRisk: m.RelativeRisk.Clone(),
		WhenPeriod: m.WhenPeriod.Clone(),
		WhenRange: m.WhenRange.Clone(),
		Rationale: m.Rationale.Clone(),
	}
}

// Equals checks for equality with another RiskAssessmentPrediction instance
func (m *RiskAssessmentPrediction) Equals(other *RiskAssessmentPrediction) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Outcome.Equals(other.Outcome) { return false }
	if !m.ProbabilityDecimal.Equals(other.ProbabilityDecimal) { return false }
	if !m.ProbabilityRange.Equals(other.ProbabilityRange) { return false }
	if !m.QualitativeRisk.Equals(other.QualitativeRisk) { return false }
	if !m.RelativeRisk.Equals(other.RelativeRisk) { return false }
	if !m.WhenPeriod.Equals(other.WhenPeriod) { return false }
	if !m.WhenRange.Equals(other.WhenRange) { return false }
	if !m.Rationale.Equals(other.Rationale) { return false }
	return true
}

