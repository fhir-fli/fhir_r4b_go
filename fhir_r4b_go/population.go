// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// Population
// A populatioof people with some set of grouping criteria.
type Population struct {
	extends BackboneType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	AgeRange *Range `json:"agerange,omitempty"`
	AgeCodeableConcept *CodeableConcept `json:"agecodeableconcept,omitempty"`
	Gender *CodeableConcept `json:"gender,omitempty"`
	Race *CodeableConcept `json:"race,omitempty"`
	PhysiologicalCondition *CodeableConcept `json:"physiologicalcondition,omitempty"`
}

// NewPopulation creates a new Population instance.
func NewPopulation() *Population {
	return &Population{}
}

// FromJSON populates Population from JSON data.
func (m *Population) FromJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		AgeRange *Range `json:"agerange,omitempty"`
		AgeCodeableConcept *CodeableConcept `json:"agecodeableconcept,omitempty"`
		Gender *CodeableConcept `json:"gender,omitempty"`
		Race *CodeableConcept `json:"race,omitempty"`
		PhysiologicalCondition *CodeableConcept `json:"physiologicalcondition,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.AgeRange = temp.AgeRange
	m.AgeCodeableConcept = temp.AgeCodeableConcept
	m.Gender = temp.Gender
	m.Race = temp.Race
	m.PhysiologicalCondition = temp.PhysiologicalCondition
	return nil
}

// ToJSON converts Population to JSON data.
func (m *Population) ToJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		AgeRange *Range `json:"agerange,omitempty"`
		AgeCodeableConcept *CodeableConcept `json:"agecodeableconcept,omitempty"`
		Gender *CodeableConcept `json:"gender,omitempty"`
		Race *CodeableConcept `json:"race,omitempty"`
		PhysiologicalCondition *CodeableConcept `json:"physiologicalcondition,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.ToJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.AgeRange = m.AgeRange
	output.AgeCodeableConcept = m.AgeCodeableConcept
	output.Gender = m.Gender
	output.Race = m.Race
	output.PhysiologicalCondition = m.PhysiologicalCondition
	return json.Marshal(output)
}

// Clone creates a deep copy of Population.
func (m *Population) Clone() *Population {
	if m == nil { return nil }
	return &Population{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		AgeRange: m.AgeRange.Clone(),
		AgeCodeableConcept: m.AgeCodeableConcept.Clone(),
		Gender: m.Gender.Clone(),
		Race: m.Race.Clone(),
		PhysiologicalCondition: m.PhysiologicalCondition.Clone(),
	}
}

// Equals checks equality between two Population instances.
func (m *Population) Equals(other *Population) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.AgeRange.Equals(other.AgeRange) { return false }
	if !m.AgeCodeableConcept.Equals(other.AgeCodeableConcept) { return false }
	if !m.Gender.Equals(other.Gender) { return false }
	if !m.Race.Equals(other.Race) { return false }
	if !m.PhysiologicalCondition.Equals(other.PhysiologicalCondition) { return false }
	return true
}

