// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Schedule
// A container for slots of time that may be available for booking appointments.
type Schedule struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Active *FhirBoolean `json:"active,omitempty"`
	ServiceCategory []*CodeableConcept `json:"servicecategory,omitempty"`
	ServiceType []*CodeableConcept `json:"servicetype,omitempty"`
	Specialty []*CodeableConcept `json:"specialty,omitempty"`
	Actor []*Reference `json:"actor,omitempty"`
	PlanningHorizon *Period `json:"planninghorizon,omitempty"`
	Comment *FhirString `json:"comment,omitempty"`
}

// NewSchedule creates a new Schedule instance
func NewSchedule() *Schedule {
	return &Schedule{}
}

// FromJSON populates Schedule from JSON data
func (m *Schedule) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Schedule to JSON data
func (m *Schedule) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Schedule
func (m *Schedule) Clone() *Schedule {
	if m == nil { return nil }
	return &Schedule{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Active: m.Active.Clone(),
		ServiceCategory: cloneSlices(m.ServiceCategory),
		ServiceType: cloneSlices(m.ServiceType),
		Specialty: cloneSlices(m.Specialty),
		Actor: cloneSlices(m.Actor),
		PlanningHorizon: m.PlanningHorizon.Clone(),
		Comment: m.Comment.Clone(),
	}
}

// Equals checks for equality with another Schedule instance
func (m *Schedule) Equals(other *Schedule) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Active.Equals(other.Active) { return false }
	if !compareSlices(m.ServiceCategory, other.ServiceCategory) { return false }
	if !compareSlices(m.ServiceType, other.ServiceType) { return false }
	if !compareSlices(m.Specialty, other.Specialty) { return false }
	if !compareSlices(m.Actor, other.Actor) { return false }
	if !m.PlanningHorizon.Equals(other.PlanningHorizon) { return false }
	if !m.Comment.Equals(other.Comment) { return false }
	return true
}

