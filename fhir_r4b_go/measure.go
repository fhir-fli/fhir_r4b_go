// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Measure
// The Measure resource provides the definition of a quality measure.
type Measure struct {
	CanonicalResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Url *FhirUri `json:"url,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Version *FhirString `json:"version,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	Subtitle *FhirString `json:"subtitle,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	Experimental *FhirBoolean `json:"experimental,omitempty"`
	SubjectCodeableConcept *CodeableConcept `json:"subjectcodeableconcept,omitempty"`
	SubjectReference *Reference `json:"subjectreference,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Publisher *FhirString `json:"publisher,omitempty"`
	Contact []*ContactDetail `json:"contact,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	UseContext []*UsageContext `json:"usecontext,omitempty"`
	Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`
	Purpose *FhirMarkdown `json:"purpose,omitempty"`
	Usage *FhirString `json:"usage,omitempty"`
	Copyright *FhirMarkdown `json:"copyright,omitempty"`
	ApprovalDate *FhirDate `json:"approvaldate,omitempty"`
	LastReviewDate *FhirDate `json:"lastreviewdate,omitempty"`
	EffectivePeriod *Period `json:"effectiveperiod,omitempty"`
	Topic []*CodeableConcept `json:"topic,omitempty"`
	Author []*ContactDetail `json:"author,omitempty"`
	Editor []*ContactDetail `json:"editor,omitempty"`
	Reviewer []*ContactDetail `json:"reviewer,omitempty"`
	Endorser []*ContactDetail `json:"endorser,omitempty"`
	RelatedArtifact []*RelatedArtifact `json:"relatedartifact,omitempty"`
	Library_ []*FhirCanonical `json:"library,omitempty"`
	Disclaimer *FhirMarkdown `json:"disclaimer,omitempty"`
	Scoring *CodeableConcept `json:"scoring,omitempty"`
	CompositeScoring *CodeableConcept `json:"compositescoring,omitempty"`
	Type []*CodeableConcept `json:"type,omitempty"`
	RiskAdjustment *FhirString `json:"riskadjustment,omitempty"`
	RateAggregation *FhirString `json:"rateaggregation,omitempty"`
	Rationale *FhirMarkdown `json:"rationale,omitempty"`
	ClinicalRecommendationStatement *FhirMarkdown `json:"clinicalrecommendationstatement,omitempty"`
	ImprovementNotation *CodeableConcept `json:"improvementnotation,omitempty"`
	Definition []*FhirMarkdown `json:"definition,omitempty"`
	Guidance *FhirMarkdown `json:"guidance,omitempty"`
	Group []*MeasureGroup `json:"group,omitempty"`
	SupplementalData []*MeasureSupplementalData `json:"supplementaldata,omitempty"`
}

// NewMeasure creates a new Measure instance
func NewMeasure() *Measure {
	return &Measure{}
}

// FromJSON populates Measure from JSON data
func (m *Measure) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Measure to JSON data
func (m *Measure) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Measure
func (m *Measure) Clone() *Measure {
	if m == nil { return nil }
	return &Measure{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Url: m.Url.Clone(),
		Identifier: cloneSlices(m.Identifier),
		Version: m.Version.Clone(),
		Name: m.Name.Clone(),
		Title: m.Title.Clone(),
		Subtitle: m.Subtitle.Clone(),
		Status: m.Status.Clone(),
		Experimental: m.Experimental.Clone(),
		SubjectCodeableConcept: m.SubjectCodeableConcept.Clone(),
		SubjectReference: m.SubjectReference.Clone(),
		Date: m.Date.Clone(),
		Publisher: m.Publisher.Clone(),
		Contact: cloneSlices(m.Contact),
		Description: m.Description.Clone(),
		UseContext: cloneSlices(m.UseContext),
		Jurisdiction: cloneSlices(m.Jurisdiction),
		Purpose: m.Purpose.Clone(),
		Usage: m.Usage.Clone(),
		Copyright: m.Copyright.Clone(),
		ApprovalDate: m.ApprovalDate.Clone(),
		LastReviewDate: m.LastReviewDate.Clone(),
		EffectivePeriod: m.EffectivePeriod.Clone(),
		Topic: cloneSlices(m.Topic),
		Author: cloneSlices(m.Author),
		Editor: cloneSlices(m.Editor),
		Reviewer: cloneSlices(m.Reviewer),
		Endorser: cloneSlices(m.Endorser),
		RelatedArtifact: cloneSlices(m.RelatedArtifact),
		Library_: cloneSlices(m.Library_),
		Disclaimer: m.Disclaimer.Clone(),
		Scoring: m.Scoring.Clone(),
		CompositeScoring: m.CompositeScoring.Clone(),
		Type: cloneSlices(m.Type),
		RiskAdjustment: m.RiskAdjustment.Clone(),
		RateAggregation: m.RateAggregation.Clone(),
		Rationale: m.Rationale.Clone(),
		ClinicalRecommendationStatement: m.ClinicalRecommendationStatement.Clone(),
		ImprovementNotation: m.ImprovementNotation.Clone(),
		Definition: cloneSlices(m.Definition),
		Guidance: m.Guidance.Clone(),
		Group: cloneSlices(m.Group),
		SupplementalData: cloneSlices(m.SupplementalData),
	}
}

// Equals checks for equality with another Measure instance
func (m *Measure) Equals(other *Measure) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Version.Equals(other.Version) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !m.Subtitle.Equals(other.Subtitle) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Experimental.Equals(other.Experimental) { return false }
	if !m.SubjectCodeableConcept.Equals(other.SubjectCodeableConcept) { return false }
	if !m.SubjectReference.Equals(other.SubjectReference) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Publisher.Equals(other.Publisher) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.UseContext, other.UseContext) { return false }
	if !compareSlices(m.Jurisdiction, other.Jurisdiction) { return false }
	if !m.Purpose.Equals(other.Purpose) { return false }
	if !m.Usage.Equals(other.Usage) { return false }
	if !m.Copyright.Equals(other.Copyright) { return false }
	if !m.ApprovalDate.Equals(other.ApprovalDate) { return false }
	if !m.LastReviewDate.Equals(other.LastReviewDate) { return false }
	if !m.EffectivePeriod.Equals(other.EffectivePeriod) { return false }
	if !compareSlices(m.Topic, other.Topic) { return false }
	if !compareSlices(m.Author, other.Author) { return false }
	if !compareSlices(m.Editor, other.Editor) { return false }
	if !compareSlices(m.Reviewer, other.Reviewer) { return false }
	if !compareSlices(m.Endorser, other.Endorser) { return false }
	if !compareSlices(m.RelatedArtifact, other.RelatedArtifact) { return false }
	if !compareSlices(m.Library_, other.Library_) { return false }
	if !m.Disclaimer.Equals(other.Disclaimer) { return false }
	if !m.Scoring.Equals(other.Scoring) { return false }
	if !m.CompositeScoring.Equals(other.CompositeScoring) { return false }
	if !compareSlices(m.Type, other.Type) { return false }
	if !m.RiskAdjustment.Equals(other.RiskAdjustment) { return false }
	if !m.RateAggregation.Equals(other.RateAggregation) { return false }
	if !m.Rationale.Equals(other.Rationale) { return false }
	if !m.ClinicalRecommendationStatement.Equals(other.ClinicalRecommendationStatement) { return false }
	if !m.ImprovementNotation.Equals(other.ImprovementNotation) { return false }
	if !compareSlices(m.Definition, other.Definition) { return false }
	if !m.Guidance.Equals(other.Guidance) { return false }
	if !compareSlices(m.Group, other.Group) { return false }
	if !compareSlices(m.SupplementalData, other.SupplementalData) { return false }
	return true
}

// MeasureGroup
// A group of population criteria for the measure.
type MeasureGroup struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Population []*MeasurePopulation `json:"population,omitempty"`
	Stratifier []*MeasureStratifier `json:"stratifier,omitempty"`
}

// NewMeasureGroup creates a new MeasureGroup instance
func NewMeasureGroup() *MeasureGroup {
	return &MeasureGroup{}
}

// FromJSON populates MeasureGroup from JSON data
func (m *MeasureGroup) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts MeasureGroup to JSON data
func (m *MeasureGroup) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of MeasureGroup
func (m *MeasureGroup) Clone() *MeasureGroup {
	if m == nil { return nil }
	return &MeasureGroup{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		Description: m.Description.Clone(),
		Population: cloneSlices(m.Population),
		Stratifier: cloneSlices(m.Stratifier),
	}
}

// Equals checks for equality with another MeasureGroup instance
func (m *MeasureGroup) Equals(other *MeasureGroup) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.Population, other.Population) { return false }
	if !compareSlices(m.Stratifier, other.Stratifier) { return false }
	return true
}

// MeasurePopulation
// A population criteria for the measure.
type MeasurePopulation struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Criteria *FhirExpression `json:"criteria,omitempty"`
}

// NewMeasurePopulation creates a new MeasurePopulation instance
func NewMeasurePopulation() *MeasurePopulation {
	return &MeasurePopulation{}
}

// FromJSON populates MeasurePopulation from JSON data
func (m *MeasurePopulation) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts MeasurePopulation to JSON data
func (m *MeasurePopulation) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of MeasurePopulation
func (m *MeasurePopulation) Clone() *MeasurePopulation {
	if m == nil { return nil }
	return &MeasurePopulation{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		Description: m.Description.Clone(),
		Criteria: m.Criteria.Clone(),
	}
}

// Equals checks for equality with another MeasurePopulation instance
func (m *MeasurePopulation) Equals(other *MeasurePopulation) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.Criteria.Equals(other.Criteria) { return false }
	return true
}

// MeasureStratifier
// The stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
type MeasureStratifier struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Criteria *FhirExpression `json:"criteria,omitempty"`
	Component []*MeasureComponent `json:"component,omitempty"`
}

// NewMeasureStratifier creates a new MeasureStratifier instance
func NewMeasureStratifier() *MeasureStratifier {
	return &MeasureStratifier{}
}

// FromJSON populates MeasureStratifier from JSON data
func (m *MeasureStratifier) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts MeasureStratifier to JSON data
func (m *MeasureStratifier) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of MeasureStratifier
func (m *MeasureStratifier) Clone() *MeasureStratifier {
	if m == nil { return nil }
	return &MeasureStratifier{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		Description: m.Description.Clone(),
		Criteria: m.Criteria.Clone(),
		Component: cloneSlices(m.Component),
	}
}

// Equals checks for equality with another MeasureStratifier instance
func (m *MeasureStratifier) Equals(other *MeasureStratifier) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.Criteria.Equals(other.Criteria) { return false }
	if !compareSlices(m.Component, other.Component) { return false }
	return true
}

// MeasureComponent
// A component of the stratifier criteria for the measure report, specified as either the name of a valid CQL expression defined within a referenced library or a valid FHIR Resource Path.
type MeasureComponent struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Criteria *FhirExpression `json:"criteria,omitempty"`
}

// NewMeasureComponent creates a new MeasureComponent instance
func NewMeasureComponent() *MeasureComponent {
	return &MeasureComponent{}
}

// FromJSON populates MeasureComponent from JSON data
func (m *MeasureComponent) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts MeasureComponent to JSON data
func (m *MeasureComponent) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of MeasureComponent
func (m *MeasureComponent) Clone() *MeasureComponent {
	if m == nil { return nil }
	return &MeasureComponent{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		Description: m.Description.Clone(),
		Criteria: m.Criteria.Clone(),
	}
}

// Equals checks for equality with another MeasureComponent instance
func (m *MeasureComponent) Equals(other *MeasureComponent) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.Criteria.Equals(other.Criteria) { return false }
	return true
}

// MeasureSupplementalData
// The supplemental data criteria for the measure report, specified as either the name of a valid CQL expression within a referenced library, or a valid FHIR Resource Path.
type MeasureSupplementalData struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Usage []*CodeableConcept `json:"usage,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Criteria *FhirExpression `json:"criteria,omitempty"`
}

// NewMeasureSupplementalData creates a new MeasureSupplementalData instance
func NewMeasureSupplementalData() *MeasureSupplementalData {
	return &MeasureSupplementalData{}
}

// FromJSON populates MeasureSupplementalData from JSON data
func (m *MeasureSupplementalData) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts MeasureSupplementalData to JSON data
func (m *MeasureSupplementalData) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of MeasureSupplementalData
func (m *MeasureSupplementalData) Clone() *MeasureSupplementalData {
	if m == nil { return nil }
	return &MeasureSupplementalData{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		Usage: cloneSlices(m.Usage),
		Description: m.Description.Clone(),
		Criteria: m.Criteria.Clone(),
	}
}

// Equals checks for equality with another MeasureSupplementalData instance
func (m *MeasureSupplementalData) Equals(other *MeasureSupplementalData) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !compareSlices(m.Usage, other.Usage) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.Criteria.Equals(other.Criteria) { return false }
	return true
}

