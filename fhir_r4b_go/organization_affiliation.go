// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// OrganizationAffiliation
// Defines an affiliation/assotiation/relationship between 2 distinct oganizations, that is not a part-of relationship/sub-division relationship.
type OrganizationAffiliation struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Active *FhirBoolean `json:"active,omitempty"`
	Period *Period `json:"period,omitempty"`
	Organization *Reference `json:"organization,omitempty"`
	ParticipatingOrganization *Reference `json:"participatingorganization,omitempty"`
	Network []*Reference `json:"network,omitempty"`
	Code []*CodeableConcept `json:"code,omitempty"`
	Specialty []*CodeableConcept `json:"specialty,omitempty"`
	Location []*Reference `json:"location,omitempty"`
	HealthcareService []*Reference `json:"healthcareservice,omitempty"`
	Telecom []*ContactPoint `json:"telecom,omitempty"`
	Endpoint []*Reference `json:"endpoint,omitempty"`
}

// NewOrganizationAffiliation creates a new OrganizationAffiliation instance.
func NewOrganizationAffiliation() *OrganizationAffiliation {
	return &OrganizationAffiliation{}
}

// FromJSON populates OrganizationAffiliation from JSON data.
func (m *OrganizationAffiliation) FromJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Active *FhirBoolean `json:"active,omitempty"`
		Period *Period `json:"period,omitempty"`
		Organization *Reference `json:"organization,omitempty"`
		ParticipatingOrganization *Reference `json:"participatingorganization,omitempty"`
		Network []*Reference `json:"network,omitempty"`
		Code []*CodeableConcept `json:"code,omitempty"`
		Specialty []*CodeableConcept `json:"specialty,omitempty"`
		Location []*Reference `json:"location,omitempty"`
		HealthcareService []*Reference `json:"healthcareservice,omitempty"`
		Telecom []*ContactPoint `json:"telecom,omitempty"`
		Endpoint []*Reference `json:"endpoint,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Identifier = temp.Identifier
	m.Active = temp.Active
	m.Period = temp.Period
	m.Organization = temp.Organization
	m.ParticipatingOrganization = temp.ParticipatingOrganization
	m.Network = temp.Network
	m.Code = temp.Code
	m.Specialty = temp.Specialty
	m.Location = temp.Location
	m.HealthcareService = temp.HealthcareService
	m.Telecom = temp.Telecom
	m.Endpoint = temp.Endpoint
	return nil
}

// ToJSON converts OrganizationAffiliation to JSON data.
func (m *OrganizationAffiliation) ToJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Active interface{} `json:"active,omitempty"`
		ActiveElement map[string]interface{} `json:"_active,omitempty"`
		Period *Period `json:"period,omitempty"`
		Organization *Reference `json:"organization,omitempty"`
		ParticipatingOrganization *Reference `json:"participatingorganization,omitempty"`
		Network []*Reference `json:"network,omitempty"`
		Code []*CodeableConcept `json:"code,omitempty"`
		Specialty []*CodeableConcept `json:"specialty,omitempty"`
		Location []*Reference `json:"location,omitempty"`
		HealthcareService []*Reference `json:"healthcareservice,omitempty"`
		Telecom []*ContactPoint `json:"telecom,omitempty"`
		Endpoint []*Reference `json:"endpoint,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.ToJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.ToJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Identifier = m.Identifier
	if m.Active != nil && m.Active.Value != nil {
		output.Active = m.Active.Value
		if m.Active.Element != nil {
			output.ActiveElement = toMapOrNil(m.Active.Element.ToJSON())
		}
	}
	output.Period = m.Period
	output.Organization = m.Organization
	output.ParticipatingOrganization = m.ParticipatingOrganization
	output.Network = m.Network
	output.Code = m.Code
	output.Specialty = m.Specialty
	output.Location = m.Location
	output.HealthcareService = m.HealthcareService
	output.Telecom = m.Telecom
	output.Endpoint = m.Endpoint
	return json.Marshal(output)
}

// Clone creates a deep copy of OrganizationAffiliation.
func (m *OrganizationAffiliation) Clone() *OrganizationAffiliation {
	if m == nil { return nil }
	return &OrganizationAffiliation{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Active: m.Active.Clone(),
		Period: m.Period.Clone(),
		Organization: m.Organization.Clone(),
		ParticipatingOrganization: m.ParticipatingOrganization.Clone(),
		Network: cloneSlices(m.Network),
		Code: cloneSlices(m.Code),
		Specialty: cloneSlices(m.Specialty),
		Location: cloneSlices(m.Location),
		HealthcareService: cloneSlices(m.HealthcareService),
		Telecom: cloneSlices(m.Telecom),
		Endpoint: cloneSlices(m.Endpoint),
	}
}

// Equals checks equality between two OrganizationAffiliation instances.
func (m *OrganizationAffiliation) Equals(other *OrganizationAffiliation) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Active.Equals(other.Active) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !m.Organization.Equals(other.Organization) { return false }
	if !m.ParticipatingOrganization.Equals(other.ParticipatingOrganization) { return false }
	if !compareSlices(m.Network, other.Network) { return false }
	if !compareSlices(m.Code, other.Code) { return false }
	if !compareSlices(m.Specialty, other.Specialty) { return false }
	if !compareSlices(m.Location, other.Location) { return false }
	if !compareSlices(m.HealthcareService, other.HealthcareService) { return false }
	if !compareSlices(m.Telecom, other.Telecom) { return false }
	if !compareSlices(m.Endpoint, other.Endpoint) { return false }
	return true
}

