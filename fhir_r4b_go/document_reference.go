// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// DocumentReference
// A reference to a document of any kind for any purpose. Provides metadata about the document so that the document can be discovered and managed. The scope of a document is any seralized object with a mime-type, so includes formal patient centric documents (CDA), cliical notes, scanned paper, and non-patient specific documents like policy text.
type DocumentReference struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	MasterIdentifier *Identifier `json:"masteridentifier,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *DocumentReferenceStatus `json:"status,omitempty"`
	DocStatus *CompositionStatus `json:"docstatus,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	Category []*CodeableConcept `json:"category,omitempty"`
	Subject *Reference `json:"subject,omitempty"`
	Date *FhirInstant `json:"date,omitempty"`
	Author []*Reference `json:"author,omitempty"`
	Authenticator *Reference `json:"authenticator,omitempty"`
	Custodian *Reference `json:"custodian,omitempty"`
	RelatesTo []*DocumentReferenceRelatesTo `json:"relatesto,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	SecurityLabel []*CodeableConcept `json:"securitylabel,omitempty"`
	Content []*DocumentReferenceContent `json:"content,omitempty"`
	Context *DocumentReferenceContext `json:"context,omitempty"`
}

// NewDocumentReference creates a new DocumentReference instance.
func NewDocumentReference() *DocumentReference {
	return &DocumentReference{}
}

// UnmarshalJSON populates DocumentReference from JSON data.
func (m *DocumentReference) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		MasterIdentifier *Identifier `json:"masteridentifier,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Status *DocumentReferenceStatus `json:"status,omitempty"`
		DocStatus *CompositionStatus `json:"docstatus,omitempty"`
		Type *CodeableConcept `json:"type,omitempty"`
		Category []*CodeableConcept `json:"category,omitempty"`
		Subject *Reference `json:"subject,omitempty"`
		Date *FhirInstant `json:"date,omitempty"`
		Author []*Reference `json:"author,omitempty"`
		Authenticator *Reference `json:"authenticator,omitempty"`
		Custodian *Reference `json:"custodian,omitempty"`
		RelatesTo []*DocumentReferenceRelatesTo `json:"relatesto,omitempty"`
		Description *FhirString `json:"description,omitempty"`
		SecurityLabel []*CodeableConcept `json:"securitylabel,omitempty"`
		Content []*DocumentReferenceContent `json:"content,omitempty"`
		Context *DocumentReferenceContext `json:"context,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.MasterIdentifier = temp.MasterIdentifier
	m.Identifier = temp.Identifier
	m.Status = temp.Status
	m.DocStatus = temp.DocStatus
	m.Type = temp.Type
	m.Category = temp.Category
	m.Subject = temp.Subject
	m.Date = temp.Date
	m.Author = temp.Author
	m.Authenticator = temp.Authenticator
	m.Custodian = temp.Custodian
	m.RelatesTo = temp.RelatesTo
	m.Description = temp.Description
	m.SecurityLabel = temp.SecurityLabel
	m.Content = temp.Content
	m.Context = temp.Context
	return nil
}

// MarshalJSON converts DocumentReference to JSON data.
func (m *DocumentReference) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		MasterIdentifier *Identifier `json:"masteridentifier,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Status *DocumentReferenceStatus `json:"status,omitempty"`
		DocStatus *CompositionStatus `json:"docstatus,omitempty"`
		Type *CodeableConcept `json:"type,omitempty"`
		Category []*CodeableConcept `json:"category,omitempty"`
		Subject *Reference `json:"subject,omitempty"`
		Date interface{} `json:"date,omitempty"`
		DateElement map[string]interface{} `json:"_date,omitempty"`
		Author []*Reference `json:"author,omitempty"`
		Authenticator *Reference `json:"authenticator,omitempty"`
		Custodian *Reference `json:"custodian,omitempty"`
		RelatesTo []*DocumentReferenceRelatesTo `json:"relatesto,omitempty"`
		Description interface{} `json:"description,omitempty"`
		DescriptionElement map[string]interface{} `json:"_description,omitempty"`
		SecurityLabel []*CodeableConcept `json:"securitylabel,omitempty"`
		Content []*DocumentReferenceContent `json:"content,omitempty"`
		Context *DocumentReferenceContext `json:"context,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.MasterIdentifier = m.MasterIdentifier
	output.Identifier = m.Identifier
	output.Status = m.Status
	output.DocStatus = m.DocStatus
	output.Type = m.Type
	output.Category = m.Category
	output.Subject = m.Subject
	if m.Date != nil && m.Date.Value != nil {
		output.Date = m.Date.Value
		if m.Date.Element != nil {
			output.DateElement = toMapOrNil(m.Date.Element.MarshalJSON())
		}
	}
	output.Author = m.Author
	output.Authenticator = m.Authenticator
	output.Custodian = m.Custodian
	output.RelatesTo = m.RelatesTo
	if m.Description != nil && m.Description.Value != nil {
		output.Description = m.Description.Value
		if m.Description.Element != nil {
			output.DescriptionElement = toMapOrNil(m.Description.Element.MarshalJSON())
		}
	}
	output.SecurityLabel = m.SecurityLabel
	output.Content = m.Content
	output.Context = m.Context
	return json.Marshal(output)
}

// Clone creates a deep copy of DocumentReference.
func (m *DocumentReference) Clone() *DocumentReference {
	if m == nil { return nil }
	return &DocumentReference{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		MasterIdentifier: m.MasterIdentifier.Clone(),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		DocStatus: m.DocStatus.Clone(),
		Type: m.Type.Clone(),
		Category: cloneSlices(m.Category),
		Subject: m.Subject.Clone(),
		Date: m.Date.Clone(),
		Author: cloneSlices(m.Author),
		Authenticator: m.Authenticator.Clone(),
		Custodian: m.Custodian.Clone(),
		RelatesTo: cloneSlices(m.RelatesTo),
		Description: m.Description.Clone(),
		SecurityLabel: cloneSlices(m.SecurityLabel),
		Content: cloneSlices(m.Content),
		Context: m.Context.Clone(),
	}
}

// Equals checks equality between two DocumentReference instances.
func (m *DocumentReference) Equals(other *DocumentReference) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.MasterIdentifier.Equals(other.MasterIdentifier) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.DocStatus.Equals(other.DocStatus) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !compareSlices(m.Category, other.Category) { return false }
	if !m.Subject.Equals(other.Subject) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !compareSlices(m.Author, other.Author) { return false }
	if !m.Authenticator.Equals(other.Authenticator) { return false }
	if !m.Custodian.Equals(other.Custodian) { return false }
	if !compareSlices(m.RelatesTo, other.RelatesTo) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.SecurityLabel, other.SecurityLabel) { return false }
	if !compareSlices(m.Content, other.Content) { return false }
	if !m.Context.Equals(other.Context) { return false }
	return true
}

// DocumentReferenceRelatesTo
// Relationships that this document has with other document references that already exist.
type DocumentReferenceRelatesTo struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *DocumentRelationshipType `json:"code,omitempty"`
	Target *Reference `json:"target,omitempty"`
}

// NewDocumentReferenceRelatesTo creates a new DocumentReferenceRelatesTo instance.
func NewDocumentReferenceRelatesTo() *DocumentReferenceRelatesTo {
	return &DocumentReferenceRelatesTo{}
}

// UnmarshalJSON populates DocumentReferenceRelatesTo from JSON data.
func (m *DocumentReferenceRelatesTo) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Code *DocumentRelationshipType `json:"code,omitempty"`
		Target *Reference `json:"target,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Code = temp.Code
	m.Target = temp.Target
	return nil
}

// MarshalJSON converts DocumentReferenceRelatesTo to JSON data.
func (m *DocumentReferenceRelatesTo) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Code *DocumentRelationshipType `json:"code,omitempty"`
		Target *Reference `json:"target,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Code = m.Code
	output.Target = m.Target
	return json.Marshal(output)
}

// Clone creates a deep copy of DocumentReferenceRelatesTo.
func (m *DocumentReferenceRelatesTo) Clone() *DocumentReferenceRelatesTo {
	if m == nil { return nil }
	return &DocumentReferenceRelatesTo{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		Target: m.Target.Clone(),
	}
}

// Equals checks equality between two DocumentReferenceRelatesTo instances.
func (m *DocumentReferenceRelatesTo) Equals(other *DocumentReferenceRelatesTo) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Target.Equals(other.Target) { return false }
	return true
}

// DocumentReferenceContent
// The document and format referenced. There may be multiple content element repetitions, each with a different format.
type DocumentReferenceContent struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Attachment *Attachment `json:"attachment,omitempty"`
	Format *Coding `json:"format,omitempty"`
}

// NewDocumentReferenceContent creates a new DocumentReferenceContent instance.
func NewDocumentReferenceContent() *DocumentReferenceContent {
	return &DocumentReferenceContent{}
}

// UnmarshalJSON populates DocumentReferenceContent from JSON data.
func (m *DocumentReferenceContent) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Attachment *Attachment `json:"attachment,omitempty"`
		Format *Coding `json:"format,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Attachment = temp.Attachment
	m.Format = temp.Format
	return nil
}

// MarshalJSON converts DocumentReferenceContent to JSON data.
func (m *DocumentReferenceContent) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Attachment *Attachment `json:"attachment,omitempty"`
		Format *Coding `json:"format,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Attachment = m.Attachment
	output.Format = m.Format
	return json.Marshal(output)
}

// Clone creates a deep copy of DocumentReferenceContent.
func (m *DocumentReferenceContent) Clone() *DocumentReferenceContent {
	if m == nil { return nil }
	return &DocumentReferenceContent{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Attachment: m.Attachment.Clone(),
		Format: m.Format.Clone(),
	}
}

// Equals checks equality between two DocumentReferenceContent instances.
func (m *DocumentReferenceContent) Equals(other *DocumentReferenceContent) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Attachment.Equals(other.Attachment) { return false }
	if !m.Format.Equals(other.Format) { return false }
	return true
}

// DocumentReferenceContext
// The clinical context in which the document was prepared.
type DocumentReferenceContext struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Encounter []*Reference `json:"encounter,omitempty"`
	Event []*CodeableConcept `json:"event,omitempty"`
	Period *Period `json:"period,omitempty"`
	FacilityType *CodeableConcept `json:"facilitytype,omitempty"`
	PracticeSetting *CodeableConcept `json:"practicesetting,omitempty"`
	SourcePatientInfo *Reference `json:"sourcepatientinfo,omitempty"`
	Related []*Reference `json:"related,omitempty"`
}

// NewDocumentReferenceContext creates a new DocumentReferenceContext instance.
func NewDocumentReferenceContext() *DocumentReferenceContext {
	return &DocumentReferenceContext{}
}

// UnmarshalJSON populates DocumentReferenceContext from JSON data.
func (m *DocumentReferenceContext) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Encounter []*Reference `json:"encounter,omitempty"`
		Event []*CodeableConcept `json:"event,omitempty"`
		Period *Period `json:"period,omitempty"`
		FacilityType *CodeableConcept `json:"facilitytype,omitempty"`
		PracticeSetting *CodeableConcept `json:"practicesetting,omitempty"`
		SourcePatientInfo *Reference `json:"sourcepatientinfo,omitempty"`
		Related []*Reference `json:"related,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Encounter = temp.Encounter
	m.Event = temp.Event
	m.Period = temp.Period
	m.FacilityType = temp.FacilityType
	m.PracticeSetting = temp.PracticeSetting
	m.SourcePatientInfo = temp.SourcePatientInfo
	m.Related = temp.Related
	return nil
}

// MarshalJSON converts DocumentReferenceContext to JSON data.
func (m *DocumentReferenceContext) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Encounter []*Reference `json:"encounter,omitempty"`
		Event []*CodeableConcept `json:"event,omitempty"`
		Period *Period `json:"period,omitempty"`
		FacilityType *CodeableConcept `json:"facilitytype,omitempty"`
		PracticeSetting *CodeableConcept `json:"practicesetting,omitempty"`
		SourcePatientInfo *Reference `json:"sourcepatientinfo,omitempty"`
		Related []*Reference `json:"related,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Encounter = m.Encounter
	output.Event = m.Event
	output.Period = m.Period
	output.FacilityType = m.FacilityType
	output.PracticeSetting = m.PracticeSetting
	output.SourcePatientInfo = m.SourcePatientInfo
	output.Related = m.Related
	return json.Marshal(output)
}

// Clone creates a deep copy of DocumentReferenceContext.
func (m *DocumentReferenceContext) Clone() *DocumentReferenceContext {
	if m == nil { return nil }
	return &DocumentReferenceContext{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Encounter: cloneSlices(m.Encounter),
		Event: cloneSlices(m.Event),
		Period: m.Period.Clone(),
		FacilityType: m.FacilityType.Clone(),
		PracticeSetting: m.PracticeSetting.Clone(),
		SourcePatientInfo: m.SourcePatientInfo.Clone(),
		Related: cloneSlices(m.Related),
	}
}

// Equals checks equality between two DocumentReferenceContext instances.
func (m *DocumentReferenceContext) Equals(other *DocumentReferenceContext) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Encounter, other.Encounter) { return false }
	if !compareSlices(m.Event, other.Event) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !m.FacilityType.Equals(other.FacilityType) { return false }
	if !m.PracticeSetting.Equals(other.PracticeSetting) { return false }
	if !m.SourcePatientInfo.Equals(other.SourcePatientInfo) { return false }
	if !compareSlices(m.Related, other.Related) { return false }
	return true
}

