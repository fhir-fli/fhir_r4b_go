// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// FhirExpression
// A expression that is evaluated in a specified context and returns a value. The context of use of the expression must specify the context in which the expression is evaluated, and how the result of the expression is used.
type FhirExpression struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Name *FhirId `json:"name,omitempty"`
	Language *ExpressionLanguage `json:"language,omitempty"`
	Expression *FhirString `json:"expression,omitempty"`
	Reference *FhirUri `json:"reference,omitempty"`
}

// NewFhirExpression creates a new FhirExpression instance
func NewFhirExpression() *FhirExpression {
	return &FhirExpression{}
}

// FromJSON populates FhirExpression from JSON data
func (m *FhirExpression) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts FhirExpression to JSON data
func (m *FhirExpression) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of FhirExpression
func (m *FhirExpression) Clone() *FhirExpression {
	if m == nil { return nil }
	return &FhirExpression{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Description: m.Description.Clone(),
		Name: m.Name.Clone(),
		Language: m.Language.Clone(),
		Expression: m.Expression.Clone(),
		Reference: m.Reference.Clone(),
	}
}

// Equals checks for equality with another FhirExpression instance
func (m *FhirExpression) Equals(other *FhirExpression) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Expression.Equals(other.Expression) { return false }
	if !m.Reference.Equals(other.Reference) { return false }
	return true
}

