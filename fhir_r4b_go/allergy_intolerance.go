// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// AllergyIntolerance
// Risk of harmful or undesirable, physiological response which is unique to an individual and associated with exposure to a substance.
type AllergyIntolerance struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	ClinicalStatus *CodeableConcept `json:"clinicalstatus,omitempty"`
	VerificationStatus *CodeableConcept `json:"verificationstatus,omitempty"`
	Type *AllergyIntoleranceType `json:"type,omitempty"`
	Category []*AllergyIntoleranceCategory `json:"category,omitempty"`
	Criticality *AllergyIntoleranceCriticality `json:"criticality,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Patient *Reference `json:"patient,omitempty"`
	Encounter *Reference `json:"encounter,omitempty"`
	OnsetDateTime *FhirDateTime `json:"onsetdatetime,omitempty"`
	OnsetAge *Age `json:"onsetage,omitempty"`
	OnsetPeriod *Period `json:"onsetperiod,omitempty"`
	OnsetRange *Range `json:"onsetrange,omitempty"`
	OnsetString *FhirString `json:"onsetstring,omitempty"`
	RecordedDate *FhirDateTime `json:"recordeddate,omitempty"`
	Recorder *Reference `json:"recorder,omitempty"`
	Asserter *Reference `json:"asserter,omitempty"`
	LastOccurrence *FhirDateTime `json:"lastoccurrence,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
	Reaction []*AllergyIntoleranceReaction `json:"reaction,omitempty"`
}

// NewAllergyIntolerance creates a new AllergyIntolerance instance
func NewAllergyIntolerance() *AllergyIntolerance {
	return &AllergyIntolerance{}
}

// FromJSON populates AllergyIntolerance from JSON data
func (m *AllergyIntolerance) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts AllergyIntolerance to JSON data
func (m *AllergyIntolerance) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of AllergyIntolerance
func (m *AllergyIntolerance) Clone() *AllergyIntolerance {
	if m == nil { return nil }
	return &AllergyIntolerance{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		ClinicalStatus: m.ClinicalStatus.Clone(),
		VerificationStatus: m.VerificationStatus.Clone(),
		Type: m.Type.Clone(),
		Category: cloneSlices(m.Category),
		Criticality: m.Criticality.Clone(),
		Code: m.Code.Clone(),
		Patient: m.Patient.Clone(),
		Encounter: m.Encounter.Clone(),
		OnsetDateTime: m.OnsetDateTime.Clone(),
		OnsetAge: m.OnsetAge.Clone(),
		OnsetPeriod: m.OnsetPeriod.Clone(),
		OnsetRange: m.OnsetRange.Clone(),
		OnsetString: m.OnsetString.Clone(),
		RecordedDate: m.RecordedDate.Clone(),
		Recorder: m.Recorder.Clone(),
		Asserter: m.Asserter.Clone(),
		LastOccurrence: m.LastOccurrence.Clone(),
		Note: cloneSlices(m.Note),
		Reaction: cloneSlices(m.Reaction),
	}
}

// Equals checks for equality with another AllergyIntolerance instance
func (m *AllergyIntolerance) Equals(other *AllergyIntolerance) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.ClinicalStatus.Equals(other.ClinicalStatus) { return false }
	if !m.VerificationStatus.Equals(other.VerificationStatus) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !compareSlices(m.Category, other.Category) { return false }
	if !m.Criticality.Equals(other.Criticality) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Patient.Equals(other.Patient) { return false }
	if !m.Encounter.Equals(other.Encounter) { return false }
	if !m.OnsetDateTime.Equals(other.OnsetDateTime) { return false }
	if !m.OnsetAge.Equals(other.OnsetAge) { return false }
	if !m.OnsetPeriod.Equals(other.OnsetPeriod) { return false }
	if !m.OnsetRange.Equals(other.OnsetRange) { return false }
	if !m.OnsetString.Equals(other.OnsetString) { return false }
	if !m.RecordedDate.Equals(other.RecordedDate) { return false }
	if !m.Recorder.Equals(other.Recorder) { return false }
	if !m.Asserter.Equals(other.Asserter) { return false }
	if !m.LastOccurrence.Equals(other.LastOccurrence) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	if !compareSlices(m.Reaction, other.Reaction) { return false }
	return true
}

// AllergyIntoleranceReaction
// Details about each adverse reaction event linked to exposure to the identified substance.
type AllergyIntoleranceReaction struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Substance *CodeableConcept `json:"substance,omitempty"`
	Manifestation []*CodeableConcept `json:"manifestation,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Onset *FhirDateTime `json:"onset,omitempty"`
	Severity *AllergyIntoleranceSeverity `json:"severity,omitempty"`
	ExposureRoute *CodeableConcept `json:"exposureroute,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
}

// NewAllergyIntoleranceReaction creates a new AllergyIntoleranceReaction instance
func NewAllergyIntoleranceReaction() *AllergyIntoleranceReaction {
	return &AllergyIntoleranceReaction{}
}

// FromJSON populates AllergyIntoleranceReaction from JSON data
func (m *AllergyIntoleranceReaction) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts AllergyIntoleranceReaction to JSON data
func (m *AllergyIntoleranceReaction) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of AllergyIntoleranceReaction
func (m *AllergyIntoleranceReaction) Clone() *AllergyIntoleranceReaction {
	if m == nil { return nil }
	return &AllergyIntoleranceReaction{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Substance: m.Substance.Clone(),
		Manifestation: cloneSlices(m.Manifestation),
		Description: m.Description.Clone(),
		Onset: m.Onset.Clone(),
		Severity: m.Severity.Clone(),
		ExposureRoute: m.ExposureRoute.Clone(),
		Note: cloneSlices(m.Note),
	}
}

// Equals checks for equality with another AllergyIntoleranceReaction instance
func (m *AllergyIntoleranceReaction) Equals(other *AllergyIntoleranceReaction) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Substance.Equals(other.Substance) { return false }
	if !compareSlices(m.Manifestation, other.Manifestation) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.Onset.Equals(other.Onset) { return false }
	if !m.Severity.Equals(other.Severity) { return false }
	if !m.ExposureRoute.Equals(other.ExposureRoute) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	return true
}

