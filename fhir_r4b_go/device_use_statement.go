// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// DeviceUseStatement
// A record of a device being used by a patient where the record is the result of a report from the patient or another clinician.
type DeviceUseStatement struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	BasedOn []*Reference `json:"basedon,omitempty"`
	Status *DeviceUseStatementStatus `json:"status,omitempty"`
	Subject *Reference `json:"subject,omitempty"`
	DerivedFrom []*Reference `json:"derivedfrom,omitempty"`
	TimingTiming *Timing `json:"timingtiming,omitempty"`
	TimingPeriod *Period `json:"timingperiod,omitempty"`
	TimingDateTime *FhirDateTime `json:"timingdatetime,omitempty"`
	RecordedOn *FhirDateTime `json:"recordedon,omitempty"`
	Source *Reference `json:"source,omitempty"`
	Device *Reference `json:"device,omitempty"`
	ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
	ReasonReference []*Reference `json:"reasonreference,omitempty"`
	BodySite *CodeableConcept `json:"bodysite,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
}

// NewDeviceUseStatement creates a new DeviceUseStatement instance
func NewDeviceUseStatement() *DeviceUseStatement {
	return &DeviceUseStatement{}
}

// FromJSON populates DeviceUseStatement from JSON data
func (m *DeviceUseStatement) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts DeviceUseStatement to JSON data
func (m *DeviceUseStatement) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of DeviceUseStatement
func (m *DeviceUseStatement) Clone() *DeviceUseStatement {
	if m == nil { return nil }
	return &DeviceUseStatement{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		BasedOn: cloneSlices(m.BasedOn),
		Status: m.Status.Clone(),
		Subject: m.Subject.Clone(),
		DerivedFrom: cloneSlices(m.DerivedFrom),
		TimingTiming: m.TimingTiming.Clone(),
		TimingPeriod: m.TimingPeriod.Clone(),
		TimingDateTime: m.TimingDateTime.Clone(),
		RecordedOn: m.RecordedOn.Clone(),
		Source: m.Source.Clone(),
		Device: m.Device.Clone(),
		ReasonCode: cloneSlices(m.ReasonCode),
		ReasonReference: cloneSlices(m.ReasonReference),
		BodySite: m.BodySite.Clone(),
		Note: cloneSlices(m.Note),
	}
}

// Equals checks for equality with another DeviceUseStatement instance
func (m *DeviceUseStatement) Equals(other *DeviceUseStatement) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.BasedOn, other.BasedOn) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Subject.Equals(other.Subject) { return false }
	if !compareSlices(m.DerivedFrom, other.DerivedFrom) { return false }
	if !m.TimingTiming.Equals(other.TimingTiming) { return false }
	if !m.TimingPeriod.Equals(other.TimingPeriod) { return false }
	if !m.TimingDateTime.Equals(other.TimingDateTime) { return false }
	if !m.RecordedOn.Equals(other.RecordedOn) { return false }
	if !m.Source.Equals(other.Source) { return false }
	if !m.Device.Equals(other.Device) { return false }
	if !compareSlices(m.ReasonCode, other.ReasonCode) { return false }
	if !compareSlices(m.ReasonReference, other.ReasonReference) { return false }
	if !m.BodySite.Equals(other.BodySite) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	return true
}

