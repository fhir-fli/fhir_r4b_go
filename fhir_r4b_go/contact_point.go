// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// ContactPoint
// Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.
type ContactPoint struct {
	extends DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	System *ContactPointSystem `json:"system,omitempty"`
	Value *FhirString `json:"value,omitempty"`
	Use *ContactPointUse `json:"use,omitempty"`
	Rank *FhirPositiveInt `json:"rank,omitempty"`
	Period *Period `json:"period,omitempty"`
}

// NewContactPoint creates a new ContactPoint instance.
func NewContactPoint() *ContactPoint {
	return &ContactPoint{}
}

// UnmarshalJSON populates ContactPoint from JSON data.
func (m *ContactPoint) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		System *ContactPointSystem `json:"system,omitempty"`
		Value *FhirString `json:"value,omitempty"`
		Use *ContactPointUse `json:"use,omitempty"`
		Rank *FhirPositiveInt `json:"rank,omitempty"`
		Period *Period `json:"period,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.System = temp.System
	m.Value = temp.Value
	m.Use = temp.Use
	m.Rank = temp.Rank
	m.Period = temp.Period
	return nil
}

// MarshalJSON converts ContactPoint to JSON data.
func (m *ContactPoint) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		System *ContactPointSystem `json:"system,omitempty"`
		Value interface{} `json:"value,omitempty"`
		ValueElement map[string]interface{} `json:"_value,omitempty"`
		Use *ContactPointUse `json:"use,omitempty"`
		Rank interface{} `json:"rank,omitempty"`
		RankElement map[string]interface{} `json:"_rank,omitempty"`
		Period *Period `json:"period,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.System = m.System
	if m.Value != nil && m.Value.Value != nil {
		output.Value = m.Value.Value
		if m.Value.Element != nil {
			output.ValueElement = toMapOrNil(m.Value.Element.MarshalJSON())
		}
	}
	output.Use = m.Use
	if m.Rank != nil && m.Rank.Value != nil {
		output.Rank = m.Rank.Value
		if m.Rank.Element != nil {
			output.RankElement = toMapOrNil(m.Rank.Element.MarshalJSON())
		}
	}
	output.Period = m.Period
	return json.Marshal(output)
}

// Clone creates a deep copy of ContactPoint.
func (m *ContactPoint) Clone() *ContactPoint {
	if m == nil { return nil }
	return &ContactPoint{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		System: m.System.Clone(),
		Value: m.Value.Clone(),
		Use: m.Use.Clone(),
		Rank: m.Rank.Clone(),
		Period: m.Period.Clone(),
	}
}

// Equals checks equality between two ContactPoint instances.
func (m *ContactPoint) Equals(other *ContactPoint) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.System.Equals(other.System) { return false }
	if !m.Value.Equals(other.Value) { return false }
	if !m.Use.Equals(other.Use) { return false }
	if !m.Rank.Equals(other.Rank) { return false }
	if !m.Period.Equals(other.Period) { return false }
	return true
}

