// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// FhirDuration
// A length of time.
type FhirDuration struct {
	Quantity
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Value *FhirDecimal `json:"value,omitempty"`
	Comparator *QuantityComparator `json:"comparator,omitempty"`
	Unit *FhirString `json:"unit,omitempty"`
	System *FhirUri `json:"system,omitempty"`
	Code *FhirCode `json:"code,omitempty"`
}

// NewFhirDuration creates a new FhirDuration instance
func NewFhirDuration() *FhirDuration {
	return &FhirDuration{}
}

// FromJSON populates FhirDuration from JSON data
func (m *FhirDuration) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts FhirDuration to JSON data
func (m *FhirDuration) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of FhirDuration
func (m *FhirDuration) Clone() *FhirDuration {
	if m == nil { return nil }
	return &FhirDuration{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Value: m.Value.Clone(),
		Comparator: m.Comparator.Clone(),
		Unit: m.Unit.Clone(),
		System: m.System.Clone(),
		Code: m.Code.Clone(),
	}
}

// Equals checks for equality with another FhirDuration instance
func (m *FhirDuration) Equals(other *FhirDuration) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Value.Equals(other.Value) { return false }
	if !m.Comparator.Equals(other.Comparator) { return false }
	if !m.Unit.Equals(other.Unit) { return false }
	if !m.System.Equals(other.System) { return false }
	if !m.Code.Equals(other.Code) { return false }
	return true
}

