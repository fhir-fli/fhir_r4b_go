// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// SupplyRequest
// A record of a request for a medication, substance or device used in the healthcare setting.
type SupplyRequest struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *SupplyRequestStatus `json:"status,omitempty"`
	Category *CodeableConcept `json:"category,omitempty"`
	Priority *RequestPriority `json:"priority,omitempty"`
	ItemCodeableConcept *CodeableConcept `json:"itemcodeableconcept,omitempty"`
	ItemReference *Reference `json:"itemreference,omitempty"`
	Quantity *Quantity `json:"quantity,omitempty"`
	Parameter []*SupplyRequestParameter `json:"parameter,omitempty"`
	OccurrenceDateTime *FhirDateTime `json:"occurrencedatetime,omitempty"`
	OccurrencePeriod *Period `json:"occurrenceperiod,omitempty"`
	OccurrenceTiming *Timing `json:"occurrencetiming,omitempty"`
	AuthoredOn *FhirDateTime `json:"authoredon,omitempty"`
	Requester *Reference `json:"requester,omitempty"`
	Supplier []*Reference `json:"supplier,omitempty"`
	ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
	ReasonReference []*Reference `json:"reasonreference,omitempty"`
	DeliverFrom *Reference `json:"deliverfrom,omitempty"`
	DeliverTo *Reference `json:"deliverto,omitempty"`
}

// NewSupplyRequest creates a new SupplyRequest instance.
func NewSupplyRequest() *SupplyRequest {
	return &SupplyRequest{}
}

// UnmarshalJSON populates SupplyRequest from JSON data.
func (m *SupplyRequest) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Status *SupplyRequestStatus `json:"status,omitempty"`
		Category *CodeableConcept `json:"category,omitempty"`
		Priority *RequestPriority `json:"priority,omitempty"`
		ItemCodeableConcept *CodeableConcept `json:"itemcodeableconcept,omitempty"`
		ItemReference *Reference `json:"itemreference,omitempty"`
		Quantity *Quantity `json:"quantity,omitempty"`
		Parameter []*SupplyRequestParameter `json:"parameter,omitempty"`
		OccurrenceDateTime *FhirDateTime `json:"occurrencedatetime,omitempty"`
		OccurrencePeriod *Period `json:"occurrenceperiod,omitempty"`
		OccurrenceTiming *Timing `json:"occurrencetiming,omitempty"`
		AuthoredOn *FhirDateTime `json:"authoredon,omitempty"`
		Requester *Reference `json:"requester,omitempty"`
		Supplier []*Reference `json:"supplier,omitempty"`
		ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
		ReasonReference []*Reference `json:"reasonreference,omitempty"`
		DeliverFrom *Reference `json:"deliverfrom,omitempty"`
		DeliverTo *Reference `json:"deliverto,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Identifier = temp.Identifier
	m.Status = temp.Status
	m.Category = temp.Category
	m.Priority = temp.Priority
	m.ItemCodeableConcept = temp.ItemCodeableConcept
	m.ItemReference = temp.ItemReference
	m.Quantity = temp.Quantity
	m.Parameter = temp.Parameter
	m.OccurrenceDateTime = temp.OccurrenceDateTime
	m.OccurrencePeriod = temp.OccurrencePeriod
	m.OccurrenceTiming = temp.OccurrenceTiming
	m.AuthoredOn = temp.AuthoredOn
	m.Requester = temp.Requester
	m.Supplier = temp.Supplier
	m.ReasonCode = temp.ReasonCode
	m.ReasonReference = temp.ReasonReference
	m.DeliverFrom = temp.DeliverFrom
	m.DeliverTo = temp.DeliverTo
	return nil
}

// MarshalJSON converts SupplyRequest to JSON data.
func (m *SupplyRequest) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Status *SupplyRequestStatus `json:"status,omitempty"`
		Category *CodeableConcept `json:"category,omitempty"`
		Priority *RequestPriority `json:"priority,omitempty"`
		ItemCodeableConcept *CodeableConcept `json:"itemcodeableconcept,omitempty"`
		ItemReference *Reference `json:"itemreference,omitempty"`
		Quantity *Quantity `json:"quantity,omitempty"`
		Parameter []*SupplyRequestParameter `json:"parameter,omitempty"`
		OccurrenceDateTime interface{} `json:"occurrencedatetime,omitempty"`
		OccurrenceDateTimeElement map[string]interface{} `json:"_occurrencedatetime,omitempty"`
		OccurrencePeriod *Period `json:"occurrenceperiod,omitempty"`
		OccurrenceTiming *Timing `json:"occurrencetiming,omitempty"`
		AuthoredOn interface{} `json:"authoredon,omitempty"`
		AuthoredOnElement map[string]interface{} `json:"_authoredon,omitempty"`
		Requester *Reference `json:"requester,omitempty"`
		Supplier []*Reference `json:"supplier,omitempty"`
		ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
		ReasonReference []*Reference `json:"reasonreference,omitempty"`
		DeliverFrom *Reference `json:"deliverfrom,omitempty"`
		DeliverTo *Reference `json:"deliverto,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Identifier = m.Identifier
	output.Status = m.Status
	output.Category = m.Category
	output.Priority = m.Priority
	output.ItemCodeableConcept = m.ItemCodeableConcept
	output.ItemReference = m.ItemReference
	output.Quantity = m.Quantity
	output.Parameter = m.Parameter
	if m.OccurrenceDateTime != nil && m.OccurrenceDateTime.Value != nil {
		output.OccurrenceDateTime = m.OccurrenceDateTime.Value
		if m.OccurrenceDateTime.Element != nil {
			output.OccurrenceDateTimeElement = toMapOrNil(m.OccurrenceDateTime.Element.MarshalJSON())
		}
	}
	output.OccurrencePeriod = m.OccurrencePeriod
	output.OccurrenceTiming = m.OccurrenceTiming
	if m.AuthoredOn != nil && m.AuthoredOn.Value != nil {
		output.AuthoredOn = m.AuthoredOn.Value
		if m.AuthoredOn.Element != nil {
			output.AuthoredOnElement = toMapOrNil(m.AuthoredOn.Element.MarshalJSON())
		}
	}
	output.Requester = m.Requester
	output.Supplier = m.Supplier
	output.ReasonCode = m.ReasonCode
	output.ReasonReference = m.ReasonReference
	output.DeliverFrom = m.DeliverFrom
	output.DeliverTo = m.DeliverTo
	return json.Marshal(output)
}

// Clone creates a deep copy of SupplyRequest.
func (m *SupplyRequest) Clone() *SupplyRequest {
	if m == nil { return nil }
	return &SupplyRequest{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		Category: m.Category.Clone(),
		Priority: m.Priority.Clone(),
		ItemCodeableConcept: m.ItemCodeableConcept.Clone(),
		ItemReference: m.ItemReference.Clone(),
		Quantity: m.Quantity.Clone(),
		Parameter: cloneSlices(m.Parameter),
		OccurrenceDateTime: m.OccurrenceDateTime.Clone(),
		OccurrencePeriod: m.OccurrencePeriod.Clone(),
		OccurrenceTiming: m.OccurrenceTiming.Clone(),
		AuthoredOn: m.AuthoredOn.Clone(),
		Requester: m.Requester.Clone(),
		Supplier: cloneSlices(m.Supplier),
		ReasonCode: cloneSlices(m.ReasonCode),
		ReasonReference: cloneSlices(m.ReasonReference),
		DeliverFrom: m.DeliverFrom.Clone(),
		DeliverTo: m.DeliverTo.Clone(),
	}
}

// Equals checks equality between two SupplyRequest instances.
func (m *SupplyRequest) Equals(other *SupplyRequest) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Category.Equals(other.Category) { return false }
	if !m.Priority.Equals(other.Priority) { return false }
	if !m.ItemCodeableConcept.Equals(other.ItemCodeableConcept) { return false }
	if !m.ItemReference.Equals(other.ItemReference) { return false }
	if !m.Quantity.Equals(other.Quantity) { return false }
	if !compareSlices(m.Parameter, other.Parameter) { return false }
	if !m.OccurrenceDateTime.Equals(other.OccurrenceDateTime) { return false }
	if !m.OccurrencePeriod.Equals(other.OccurrencePeriod) { return false }
	if !m.OccurrenceTiming.Equals(other.OccurrenceTiming) { return false }
	if !m.AuthoredOn.Equals(other.AuthoredOn) { return false }
	if !m.Requester.Equals(other.Requester) { return false }
	if !compareSlices(m.Supplier, other.Supplier) { return false }
	if !compareSlices(m.ReasonCode, other.ReasonCode) { return false }
	if !compareSlices(m.ReasonReference, other.ReasonReference) { return false }
	if !m.DeliverFrom.Equals(other.DeliverFrom) { return false }
	if !m.DeliverTo.Equals(other.DeliverTo) { return false }
	return true
}

// SupplyRequestParameter
// Specific parameters for the ordered item.  For example, the size of the indicated item.
type SupplyRequestParameter struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	ValueCodeableConcept *CodeableConcept `json:"valuecodeableconcept,omitempty"`
	ValueQuantity *Quantity `json:"valuequantity,omitempty"`
	ValueRange *Range `json:"valuerange,omitempty"`
	ValueBoolean *FhirBoolean `json:"valueboolean,omitempty"`
}

// NewSupplyRequestParameter creates a new SupplyRequestParameter instance.
func NewSupplyRequestParameter() *SupplyRequestParameter {
	return &SupplyRequestParameter{}
}

// UnmarshalJSON populates SupplyRequestParameter from JSON data.
func (m *SupplyRequestParameter) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Code *CodeableConcept `json:"code,omitempty"`
		ValueCodeableConcept *CodeableConcept `json:"valuecodeableconcept,omitempty"`
		ValueQuantity *Quantity `json:"valuequantity,omitempty"`
		ValueRange *Range `json:"valuerange,omitempty"`
		ValueBoolean *FhirBoolean `json:"valueboolean,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Code = temp.Code
	m.ValueCodeableConcept = temp.ValueCodeableConcept
	m.ValueQuantity = temp.ValueQuantity
	m.ValueRange = temp.ValueRange
	m.ValueBoolean = temp.ValueBoolean
	return nil
}

// MarshalJSON converts SupplyRequestParameter to JSON data.
func (m *SupplyRequestParameter) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Code *CodeableConcept `json:"code,omitempty"`
		ValueCodeableConcept *CodeableConcept `json:"valuecodeableconcept,omitempty"`
		ValueQuantity *Quantity `json:"valuequantity,omitempty"`
		ValueRange *Range `json:"valuerange,omitempty"`
		ValueBoolean interface{} `json:"valueboolean,omitempty"`
		ValueBooleanElement map[string]interface{} `json:"_valueboolean,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Code = m.Code
	output.ValueCodeableConcept = m.ValueCodeableConcept
	output.ValueQuantity = m.ValueQuantity
	output.ValueRange = m.ValueRange
	if m.ValueBoolean != nil && m.ValueBoolean.Value != nil {
		output.ValueBoolean = m.ValueBoolean.Value
		if m.ValueBoolean.Element != nil {
			output.ValueBooleanElement = toMapOrNil(m.ValueBoolean.Element.MarshalJSON())
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of SupplyRequestParameter.
func (m *SupplyRequestParameter) Clone() *SupplyRequestParameter {
	if m == nil { return nil }
	return &SupplyRequestParameter{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		ValueCodeableConcept: m.ValueCodeableConcept.Clone(),
		ValueQuantity: m.ValueQuantity.Clone(),
		ValueRange: m.ValueRange.Clone(),
		ValueBoolean: m.ValueBoolean.Clone(),
	}
}

// Equals checks equality between two SupplyRequestParameter instances.
func (m *SupplyRequestParameter) Equals(other *SupplyRequestParameter) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.ValueCodeableConcept.Equals(other.ValueCodeableConcept) { return false }
	if !m.ValueQuantity.Equals(other.ValueQuantity) { return false }
	if !m.ValueRange.Equals(other.ValueRange) { return false }
	if !m.ValueBoolean.Equals(other.ValueBoolean) { return false }
	return true
}

