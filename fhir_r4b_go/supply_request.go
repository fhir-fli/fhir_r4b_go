// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// SupplyRequest
// A record of a request for a medication, substance or device used in the healthcare setting.
type SupplyRequest struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *SupplyRequestStatus `json:"status,omitempty"`
	Category *CodeableConcept `json:"category,omitempty"`
	Priority *RequestPriority `json:"priority,omitempty"`
	ItemCodeableConcept *CodeableConcept `json:"itemcodeableconcept,omitempty"`
	ItemReference *Reference `json:"itemreference,omitempty"`
	Quantity *Quantity `json:"quantity,omitempty"`
	Parameter []*SupplyRequestParameter `json:"parameter,omitempty"`
	OccurrenceDateTime *FhirDateTime `json:"occurrencedatetime,omitempty"`
	OccurrencePeriod *Period `json:"occurrenceperiod,omitempty"`
	OccurrenceTiming *Timing `json:"occurrencetiming,omitempty"`
	AuthoredOn *FhirDateTime `json:"authoredon,omitempty"`
	Requester *Reference `json:"requester,omitempty"`
	Supplier []*Reference `json:"supplier,omitempty"`
	ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
	ReasonReference []*Reference `json:"reasonreference,omitempty"`
	DeliverFrom *Reference `json:"deliverfrom,omitempty"`
	DeliverTo *Reference `json:"deliverto,omitempty"`
}

// NewSupplyRequest creates a new SupplyRequest instance
func NewSupplyRequest() *SupplyRequest {
	return &SupplyRequest{}
}

// FromJSON populates SupplyRequest from JSON data
func (m *SupplyRequest) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts SupplyRequest to JSON data
func (m *SupplyRequest) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of SupplyRequest
func (m *SupplyRequest) Clone() *SupplyRequest {
	if m == nil { return nil }
	return &SupplyRequest{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		Category: m.Category.Clone(),
		Priority: m.Priority.Clone(),
		ItemCodeableConcept: m.ItemCodeableConcept.Clone(),
		ItemReference: m.ItemReference.Clone(),
		Quantity: m.Quantity.Clone(),
		Parameter: cloneSlices(m.Parameter),
		OccurrenceDateTime: m.OccurrenceDateTime.Clone(),
		OccurrencePeriod: m.OccurrencePeriod.Clone(),
		OccurrenceTiming: m.OccurrenceTiming.Clone(),
		AuthoredOn: m.AuthoredOn.Clone(),
		Requester: m.Requester.Clone(),
		Supplier: cloneSlices(m.Supplier),
		ReasonCode: cloneSlices(m.ReasonCode),
		ReasonReference: cloneSlices(m.ReasonReference),
		DeliverFrom: m.DeliverFrom.Clone(),
		DeliverTo: m.DeliverTo.Clone(),
	}
}

// Equals checks for equality with another SupplyRequest instance
func (m *SupplyRequest) Equals(other *SupplyRequest) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Category.Equals(other.Category) { return false }
	if !m.Priority.Equals(other.Priority) { return false }
	if !m.ItemCodeableConcept.Equals(other.ItemCodeableConcept) { return false }
	if !m.ItemReference.Equals(other.ItemReference) { return false }
	if !m.Quantity.Equals(other.Quantity) { return false }
	if !compareSlices(m.Parameter, other.Parameter) { return false }
	if !m.OccurrenceDateTime.Equals(other.OccurrenceDateTime) { return false }
	if !m.OccurrencePeriod.Equals(other.OccurrencePeriod) { return false }
	if !m.OccurrenceTiming.Equals(other.OccurrenceTiming) { return false }
	if !m.AuthoredOn.Equals(other.AuthoredOn) { return false }
	if !m.Requester.Equals(other.Requester) { return false }
	if !compareSlices(m.Supplier, other.Supplier) { return false }
	if !compareSlices(m.ReasonCode, other.ReasonCode) { return false }
	if !compareSlices(m.ReasonReference, other.ReasonReference) { return false }
	if !m.DeliverFrom.Equals(other.DeliverFrom) { return false }
	if !m.DeliverTo.Equals(other.DeliverTo) { return false }
	return true
}

// SupplyRequestParameter
// Specific parameters for the ordered item.  For example, the size of the indicated item.
type SupplyRequestParameter struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	ValueCodeableConcept *CodeableConcept `json:"valuecodeableconcept,omitempty"`
	ValueQuantity *Quantity `json:"valuequantity,omitempty"`
	ValueRange *Range `json:"valuerange,omitempty"`
	ValueBoolean *FhirBoolean `json:"valueboolean,omitempty"`
}

// NewSupplyRequestParameter creates a new SupplyRequestParameter instance
func NewSupplyRequestParameter() *SupplyRequestParameter {
	return &SupplyRequestParameter{}
}

// FromJSON populates SupplyRequestParameter from JSON data
func (m *SupplyRequestParameter) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts SupplyRequestParameter to JSON data
func (m *SupplyRequestParameter) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of SupplyRequestParameter
func (m *SupplyRequestParameter) Clone() *SupplyRequestParameter {
	if m == nil { return nil }
	return &SupplyRequestParameter{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		ValueCodeableConcept: m.ValueCodeableConcept.Clone(),
		ValueQuantity: m.ValueQuantity.Clone(),
		ValueRange: m.ValueRange.Clone(),
		ValueBoolean: m.ValueBoolean.Clone(),
	}
}

// Equals checks for equality with another SupplyRequestParameter instance
func (m *SupplyRequestParameter) Equals(other *SupplyRequestParameter) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.ValueCodeableConcept.Equals(other.ValueCodeableConcept) { return false }
	if !m.ValueQuantity.Equals(other.ValueQuantity) { return false }
	if !m.ValueRange.Equals(other.ValueRange) { return false }
	if !m.ValueBoolean.Equals(other.ValueBoolean) { return false }
	return true
}

