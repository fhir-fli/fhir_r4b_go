// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
	"fmt"
)

// OperationOutcome
// A collection of error, warning, or information messages that result from a system action.
type OperationOutcome struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Issue []*OperationOutcomeIssue `json:"issue,omitempty"`
}

// NewOperationOutcome creates a new OperationOutcome instance.
func NewOperationOutcome() *OperationOutcome {
	return &OperationOutcome{}
}

// UnmarshalJSON populates OperationOutcome from JSON data.
func (m *OperationOutcome) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Issue []*OperationOutcomeIssue `json:"issue,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Issue = temp.Issue
	return nil
}

// MarshalJSON converts OperationOutcome to JSON data.
func (m *OperationOutcome) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Issue []*OperationOutcomeIssue `json:"issue,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Issue = m.Issue
	return json.Marshal(output)
}

// Clone creates a deep copy of OperationOutcome.
func (m *OperationOutcome) Clone() *OperationOutcome {
	if m == nil { return nil }
	return &OperationOutcome{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Issue: cloneSlices(m.Issue),
	}
}

// Equals checks equality between two OperationOutcome instances.
func (m *OperationOutcome) Equals(other *OperationOutcome) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Issue, other.Issue) { return false }
	return true
}

// OperationOutcomeIssue
// An error, warning, or information message that results from a system action.
type OperationOutcomeIssue struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Severity *IssueSeverity `json:"severity,omitempty"`
	Code *IssueType `json:"code,omitempty"`
	Details *CodeableConcept `json:"details,omitempty"`
	Diagnostics *FhirString `json:"diagnostics,omitempty"`
	Location []*FhirString `json:"location,omitempty"`
	Expression []*FhirString `json:"expression,omitempty"`
}

// NewOperationOutcomeIssue creates a new OperationOutcomeIssue instance.
func NewOperationOutcomeIssue() *OperationOutcomeIssue {
	return &OperationOutcomeIssue{}
}

// UnmarshalJSON populates OperationOutcomeIssue from JSON data.
func (m *OperationOutcomeIssue) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Severity *IssueSeverity `json:"severity,omitempty"`
		Code *IssueType `json:"code,omitempty"`
		Details *CodeableConcept `json:"details,omitempty"`
		Diagnostics *FhirString `json:"diagnostics,omitempty"`
		Location []interface{} `json:"location,omitempty"`
		Expression []interface{} `json:"expression,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Severity = temp.Severity
	m.Code = temp.Code
	m.Details = temp.Details
	m.Diagnostics = temp.Diagnostics
	if len(temp.Location) > 0 {
		m.Location = make([]*FhirString, len(temp.Location))
		for i := range temp.Location {
			itemMap, ok := temp.Location[i].(map[string]interface{})
			if !ok { return fmt.Errorf("invalid value for Location[%d]: expected map", i) }
			primitive, err := NewFhirStringFromMap(itemMap)
			if err != nil { return fmt.Errorf("failed to parse Location[%d]: %v", i, err) }
			m.Location[i] = primitive
		}
	}
	if len(temp.Expression) > 0 {
		m.Expression = make([]*FhirString, len(temp.Expression))
		for i := range temp.Expression {
			itemMap, ok := temp.Expression[i].(map[string]interface{})
			if !ok { return fmt.Errorf("invalid value for Expression[%d]: expected map", i) }
			primitive, err := NewFhirStringFromMap(itemMap)
			if err != nil { return fmt.Errorf("failed to parse Expression[%d]: %v", i, err) }
			m.Expression[i] = primitive
		}
	}
	return nil
}

// MarshalJSON converts OperationOutcomeIssue to JSON data.
func (m *OperationOutcomeIssue) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Severity *IssueSeverity `json:"severity,omitempty"`
		Code *IssueType `json:"code,omitempty"`
		Details *CodeableConcept `json:"details,omitempty"`
		Diagnostics interface{} `json:"diagnostics,omitempty"`
		DiagnosticsElement map[string]interface{} `json:"_diagnostics,omitempty"`
		Location []interface{} `json:"location,omitempty"`
		LocationElement []map[string]interface{} `json:"_location,omitempty"`
		Expression []interface{} `json:"expression,omitempty"`
		ExpressionElement []map[string]interface{} `json:"_expression,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Severity = m.Severity
	output.Code = m.Code
	output.Details = m.Details
	if m.Diagnostics != nil && m.Diagnostics.Value != nil {
		output.Diagnostics = m.Diagnostics.Value
		if m.Diagnostics.Element != nil {
			output.DiagnosticsElement = toMapOrNil(m.Diagnostics.Element.MarshalJSON())
		}
	}
	if len(m.Location) > 0 {
		output.Location = make([]interface{}, len(m.Location))
		output.LocationElement = make([]map[string]interface{}, len(m.Location))
		for i, item := range m.Location {
			if item != nil && item.Value != nil {
				output.Location[i] = item.Value
			}
			if item != nil && item.Element != nil {
				output.LocationElement[i] = toMapOrNil(item.Element.MarshalJSON())
			}
		}
	}
	if len(m.Expression) > 0 {
		output.Expression = make([]interface{}, len(m.Expression))
		output.ExpressionElement = make([]map[string]interface{}, len(m.Expression))
		for i, item := range m.Expression {
			if item != nil && item.Value != nil {
				output.Expression[i] = item.Value
			}
			if item != nil && item.Element != nil {
				output.ExpressionElement[i] = toMapOrNil(item.Element.MarshalJSON())
			}
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of OperationOutcomeIssue.
func (m *OperationOutcomeIssue) Clone() *OperationOutcomeIssue {
	if m == nil { return nil }
	return &OperationOutcomeIssue{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Severity: m.Severity.Clone(),
		Code: m.Code.Clone(),
		Details: m.Details.Clone(),
		Diagnostics: m.Diagnostics.Clone(),
		Location: cloneSlices(m.Location),
		Expression: cloneSlices(m.Expression),
	}
}

// Equals checks equality between two OperationOutcomeIssue instances.
func (m *OperationOutcomeIssue) Equals(other *OperationOutcomeIssue) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Severity.Equals(other.Severity) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Details.Equals(other.Details) { return false }
	if !m.Diagnostics.Equals(other.Diagnostics) { return false }
	if !compareSlices(m.Location, other.Location) { return false }
	if !compareSlices(m.Expression, other.Expression) { return false }
	return true
}

