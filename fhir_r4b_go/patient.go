// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// Patient
// Demographics and other administrative information about an individual or animal receiving care or other health-related services.
type Patient struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Active *FhirBoolean `json:"active,omitempty"`
	Name []*HumanName `json:"name,omitempty"`
	Telecom []*ContactPoint `json:"telecom,omitempty"`
	Gender *AdministrativeGender `json:"gender,omitempty"`
	BirthDate *FhirDate `json:"birthdate,omitempty"`
	DeceasedBoolean *FhirBoolean `json:"deceasedboolean,omitempty"`
	DeceasedDateTime *FhirDateTime `json:"deceaseddatetime,omitempty"`
	Address []*Address `json:"address,omitempty"`
	MaritalStatus *CodeableConcept `json:"maritalstatus,omitempty"`
	MultipleBirthBoolean *FhirBoolean `json:"multiplebirthboolean,omitempty"`
	MultipleBirthInteger *FhirInteger `json:"multiplebirthinteger,omitempty"`
	Photo []*Attachment `json:"photo,omitempty"`
	Contact []*PatientContact `json:"contact,omitempty"`
	Communication []*PatientCommunication `json:"communication,omitempty"`
	GeneralPractitioner []*Reference `json:"generalpractitioner,omitempty"`
	ManagingOrganization *Reference `json:"managingorganization,omitempty"`
	Link []*PatientLink `json:"link,omitempty"`
}

// NewPatient creates a new Patient instance.
func NewPatient() *Patient {
	return &Patient{}
}

// UnmarshalJSON populates Patient from JSON data.
func (m *Patient) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Active *FhirBoolean `json:"active,omitempty"`
		Name []*HumanName `json:"name,omitempty"`
		Telecom []*ContactPoint `json:"telecom,omitempty"`
		Gender *AdministrativeGender `json:"gender,omitempty"`
		BirthDate *FhirDate `json:"birthdate,omitempty"`
		DeceasedBoolean *FhirBoolean `json:"deceasedboolean,omitempty"`
		DeceasedDateTime *FhirDateTime `json:"deceaseddatetime,omitempty"`
		Address []*Address `json:"address,omitempty"`
		MaritalStatus *CodeableConcept `json:"maritalstatus,omitempty"`
		MultipleBirthBoolean *FhirBoolean `json:"multiplebirthboolean,omitempty"`
		MultipleBirthInteger *FhirInteger `json:"multiplebirthinteger,omitempty"`
		Photo []*Attachment `json:"photo,omitempty"`
		Contact []*PatientContact `json:"contact,omitempty"`
		Communication []*PatientCommunication `json:"communication,omitempty"`
		GeneralPractitioner []*Reference `json:"generalpractitioner,omitempty"`
		ManagingOrganization *Reference `json:"managingorganization,omitempty"`
		Link []*PatientLink `json:"link,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Identifier = temp.Identifier
	m.Active = temp.Active
	m.Name = temp.Name
	m.Telecom = temp.Telecom
	m.Gender = temp.Gender
	m.BirthDate = temp.BirthDate
	m.DeceasedBoolean = temp.DeceasedBoolean
	m.DeceasedDateTime = temp.DeceasedDateTime
	m.Address = temp.Address
	m.MaritalStatus = temp.MaritalStatus
	m.MultipleBirthBoolean = temp.MultipleBirthBoolean
	m.MultipleBirthInteger = temp.MultipleBirthInteger
	m.Photo = temp.Photo
	m.Contact = temp.Contact
	m.Communication = temp.Communication
	m.GeneralPractitioner = temp.GeneralPractitioner
	m.ManagingOrganization = temp.ManagingOrganization
	m.Link = temp.Link
	return nil
}

// MarshalJSON converts Patient to JSON data.
func (m *Patient) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Active interface{} `json:"active,omitempty"`
		ActiveElement map[string]interface{} `json:"_active,omitempty"`
		Name []*HumanName `json:"name,omitempty"`
		Telecom []*ContactPoint `json:"telecom,omitempty"`
		Gender *AdministrativeGender `json:"gender,omitempty"`
		BirthDate interface{} `json:"birthdate,omitempty"`
		BirthDateElement map[string]interface{} `json:"_birthdate,omitempty"`
		DeceasedBoolean interface{} `json:"deceasedboolean,omitempty"`
		DeceasedBooleanElement map[string]interface{} `json:"_deceasedboolean,omitempty"`
		DeceasedDateTime interface{} `json:"deceaseddatetime,omitempty"`
		DeceasedDateTimeElement map[string]interface{} `json:"_deceaseddatetime,omitempty"`
		Address []*Address `json:"address,omitempty"`
		MaritalStatus *CodeableConcept `json:"maritalstatus,omitempty"`
		MultipleBirthBoolean interface{} `json:"multiplebirthboolean,omitempty"`
		MultipleBirthBooleanElement map[string]interface{} `json:"_multiplebirthboolean,omitempty"`
		MultipleBirthInteger interface{} `json:"multiplebirthinteger,omitempty"`
		MultipleBirthIntegerElement map[string]interface{} `json:"_multiplebirthinteger,omitempty"`
		Photo []*Attachment `json:"photo,omitempty"`
		Contact []*PatientContact `json:"contact,omitempty"`
		Communication []*PatientCommunication `json:"communication,omitempty"`
		GeneralPractitioner []*Reference `json:"generalpractitioner,omitempty"`
		ManagingOrganization *Reference `json:"managingorganization,omitempty"`
		Link []*PatientLink `json:"link,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Identifier = m.Identifier
	if m.Active != nil && m.Active.Value != nil {
		output.Active = m.Active.Value
		if m.Active.Element != nil {
			output.ActiveElement = toMapOrNil(m.Active.Element.MarshalJSON())
		}
	}
	output.Name = m.Name
	output.Telecom = m.Telecom
	output.Gender = m.Gender
	if m.BirthDate != nil && m.BirthDate.Value != nil {
		output.BirthDate = m.BirthDate.Value
		if m.BirthDate.Element != nil {
			output.BirthDateElement = toMapOrNil(m.BirthDate.Element.MarshalJSON())
		}
	}
	if m.DeceasedBoolean != nil && m.DeceasedBoolean.Value != nil {
		output.DeceasedBoolean = m.DeceasedBoolean.Value
		if m.DeceasedBoolean.Element != nil {
			output.DeceasedBooleanElement = toMapOrNil(m.DeceasedBoolean.Element.MarshalJSON())
		}
	}
	if m.DeceasedDateTime != nil && m.DeceasedDateTime.Value != nil {
		output.DeceasedDateTime = m.DeceasedDateTime.Value
		if m.DeceasedDateTime.Element != nil {
			output.DeceasedDateTimeElement = toMapOrNil(m.DeceasedDateTime.Element.MarshalJSON())
		}
	}
	output.Address = m.Address
	output.MaritalStatus = m.MaritalStatus
	if m.MultipleBirthBoolean != nil && m.MultipleBirthBoolean.Value != nil {
		output.MultipleBirthBoolean = m.MultipleBirthBoolean.Value
		if m.MultipleBirthBoolean.Element != nil {
			output.MultipleBirthBooleanElement = toMapOrNil(m.MultipleBirthBoolean.Element.MarshalJSON())
		}
	}
	if m.MultipleBirthInteger != nil && m.MultipleBirthInteger.Value != nil {
		output.MultipleBirthInteger = m.MultipleBirthInteger.Value
		if m.MultipleBirthInteger.Element != nil {
			output.MultipleBirthIntegerElement = toMapOrNil(m.MultipleBirthInteger.Element.MarshalJSON())
		}
	}
	output.Photo = m.Photo
	output.Contact = m.Contact
	output.Communication = m.Communication
	output.GeneralPractitioner = m.GeneralPractitioner
	output.ManagingOrganization = m.ManagingOrganization
	output.Link = m.Link
	return json.Marshal(output)
}

// Clone creates a deep copy of Patient.
func (m *Patient) Clone() *Patient {
	if m == nil { return nil }
	return &Patient{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Active: m.Active.Clone(),
		Name: cloneSlices(m.Name),
		Telecom: cloneSlices(m.Telecom),
		Gender: m.Gender.Clone(),
		BirthDate: m.BirthDate.Clone(),
		DeceasedBoolean: m.DeceasedBoolean.Clone(),
		DeceasedDateTime: m.DeceasedDateTime.Clone(),
		Address: cloneSlices(m.Address),
		MaritalStatus: m.MaritalStatus.Clone(),
		MultipleBirthBoolean: m.MultipleBirthBoolean.Clone(),
		MultipleBirthInteger: m.MultipleBirthInteger.Clone(),
		Photo: cloneSlices(m.Photo),
		Contact: cloneSlices(m.Contact),
		Communication: cloneSlices(m.Communication),
		GeneralPractitioner: cloneSlices(m.GeneralPractitioner),
		ManagingOrganization: m.ManagingOrganization.Clone(),
		Link: cloneSlices(m.Link),
	}
}

// Equals checks equality between two Patient instances.
func (m *Patient) Equals(other *Patient) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Active.Equals(other.Active) { return false }
	if !compareSlices(m.Name, other.Name) { return false }
	if !compareSlices(m.Telecom, other.Telecom) { return false }
	if !m.Gender.Equals(other.Gender) { return false }
	if !m.BirthDate.Equals(other.BirthDate) { return false }
	if !m.DeceasedBoolean.Equals(other.DeceasedBoolean) { return false }
	if !m.DeceasedDateTime.Equals(other.DeceasedDateTime) { return false }
	if !compareSlices(m.Address, other.Address) { return false }
	if !m.MaritalStatus.Equals(other.MaritalStatus) { return false }
	if !m.MultipleBirthBoolean.Equals(other.MultipleBirthBoolean) { return false }
	if !m.MultipleBirthInteger.Equals(other.MultipleBirthInteger) { return false }
	if !compareSlices(m.Photo, other.Photo) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !compareSlices(m.Communication, other.Communication) { return false }
	if !compareSlices(m.GeneralPractitioner, other.GeneralPractitioner) { return false }
	if !m.ManagingOrganization.Equals(other.ManagingOrganization) { return false }
	if !compareSlices(m.Link, other.Link) { return false }
	return true
}

// PatientContact
// A contact party (e.g. guardian, partner, friend) for the patient.
type PatientContact struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Relationship []*CodeableConcept `json:"relationship,omitempty"`
	Name *HumanName `json:"name,omitempty"`
	Telecom []*ContactPoint `json:"telecom,omitempty"`
	Address *Address `json:"address,omitempty"`
	Gender *AdministrativeGender `json:"gender,omitempty"`
	Organization *Reference `json:"organization,omitempty"`
	Period *Period `json:"period,omitempty"`
}

// NewPatientContact creates a new PatientContact instance.
func NewPatientContact() *PatientContact {
	return &PatientContact{}
}

// UnmarshalJSON populates PatientContact from JSON data.
func (m *PatientContact) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Relationship []*CodeableConcept `json:"relationship,omitempty"`
		Name *HumanName `json:"name,omitempty"`
		Telecom []*ContactPoint `json:"telecom,omitempty"`
		Address *Address `json:"address,omitempty"`
		Gender *AdministrativeGender `json:"gender,omitempty"`
		Organization *Reference `json:"organization,omitempty"`
		Period *Period `json:"period,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Relationship = temp.Relationship
	m.Name = temp.Name
	m.Telecom = temp.Telecom
	m.Address = temp.Address
	m.Gender = temp.Gender
	m.Organization = temp.Organization
	m.Period = temp.Period
	return nil
}

// MarshalJSON converts PatientContact to JSON data.
func (m *PatientContact) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Relationship []*CodeableConcept `json:"relationship,omitempty"`
		Name *HumanName `json:"name,omitempty"`
		Telecom []*ContactPoint `json:"telecom,omitempty"`
		Address *Address `json:"address,omitempty"`
		Gender *AdministrativeGender `json:"gender,omitempty"`
		Organization *Reference `json:"organization,omitempty"`
		Period *Period `json:"period,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Relationship = m.Relationship
	output.Name = m.Name
	output.Telecom = m.Telecom
	output.Address = m.Address
	output.Gender = m.Gender
	output.Organization = m.Organization
	output.Period = m.Period
	return json.Marshal(output)
}

// Clone creates a deep copy of PatientContact.
func (m *PatientContact) Clone() *PatientContact {
	if m == nil { return nil }
	return &PatientContact{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Relationship: cloneSlices(m.Relationship),
		Name: m.Name.Clone(),
		Telecom: cloneSlices(m.Telecom),
		Address: m.Address.Clone(),
		Gender: m.Gender.Clone(),
		Organization: m.Organization.Clone(),
		Period: m.Period.Clone(),
	}
}

// Equals checks equality between two PatientContact instances.
func (m *PatientContact) Equals(other *PatientContact) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Relationship, other.Relationship) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !compareSlices(m.Telecom, other.Telecom) { return false }
	if !m.Address.Equals(other.Address) { return false }
	if !m.Gender.Equals(other.Gender) { return false }
	if !m.Organization.Equals(other.Organization) { return false }
	if !m.Period.Equals(other.Period) { return false }
	return true
}

// PatientCommunication
// A language which may be used to communicate with the patient about his or her health.
type PatientCommunication struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Language *CodeableConcept `json:"language,omitempty"`
	Preferred *FhirBoolean `json:"preferred,omitempty"`
}

// NewPatientCommunication creates a new PatientCommunication instance.
func NewPatientCommunication() *PatientCommunication {
	return &PatientCommunication{}
}

// UnmarshalJSON populates PatientCommunication from JSON data.
func (m *PatientCommunication) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Language *CodeableConcept `json:"language,omitempty"`
		Preferred *FhirBoolean `json:"preferred,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Language = temp.Language
	m.Preferred = temp.Preferred
	return nil
}

// MarshalJSON converts PatientCommunication to JSON data.
func (m *PatientCommunication) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Language *CodeableConcept `json:"language,omitempty"`
		Preferred interface{} `json:"preferred,omitempty"`
		PreferredElement map[string]interface{} `json:"_preferred,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Language = m.Language
	if m.Preferred != nil && m.Preferred.Value != nil {
		output.Preferred = m.Preferred.Value
		if m.Preferred.Element != nil {
			output.PreferredElement = toMapOrNil(m.Preferred.Element.MarshalJSON())
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of PatientCommunication.
func (m *PatientCommunication) Clone() *PatientCommunication {
	if m == nil { return nil }
	return &PatientCommunication{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Language: m.Language.Clone(),
		Preferred: m.Preferred.Clone(),
	}
}

// Equals checks equality between two PatientCommunication instances.
func (m *PatientCommunication) Equals(other *PatientCommunication) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Preferred.Equals(other.Preferred) { return false }
	return true
}

// PatientLink
// Link to another patient resource that concerns the same actual patient.
type PatientLink struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Other *Reference `json:"other,omitempty"`
	Type *LinkType `json:"type,omitempty"`
}

// NewPatientLink creates a new PatientLink instance.
func NewPatientLink() *PatientLink {
	return &PatientLink{}
}

// UnmarshalJSON populates PatientLink from JSON data.
func (m *PatientLink) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Other *Reference `json:"other,omitempty"`
		Type *LinkType `json:"type,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Other = temp.Other
	m.Type = temp.Type
	return nil
}

// MarshalJSON converts PatientLink to JSON data.
func (m *PatientLink) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Other *Reference `json:"other,omitempty"`
		Type *LinkType `json:"type,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Other = m.Other
	output.Type = m.Type
	return json.Marshal(output)
}

// Clone creates a deep copy of PatientLink.
func (m *PatientLink) Clone() *PatientLink {
	if m == nil { return nil }
	return &PatientLink{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Other: m.Other.Clone(),
		Type: m.Type.Clone(),
	}
}

// Equals checks equality between two PatientLink instances.
func (m *PatientLink) Equals(other *PatientLink) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Other.Equals(other.Other) { return false }
	if !m.Type.Equals(other.Type) { return false }
	return true
}

