// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// SupplyDelivery
// Record of delivery of what is supplied.
type SupplyDelivery struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	BasedOn []*Reference `json:"basedon,omitempty"`
	PartOf []*Reference `json:"partof,omitempty"`
	Status *SupplyDeliveryStatus `json:"status,omitempty"`
	Patient *Reference `json:"patient,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	SuppliedItem *SupplyDeliverySuppliedItem `json:"supplieditem,omitempty"`
	OccurrenceDateTime *FhirDateTime `json:"occurrencedatetime,omitempty"`
	OccurrencePeriod *Period `json:"occurrenceperiod,omitempty"`
	OccurrenceTiming *Timing `json:"occurrencetiming,omitempty"`
	Supplier *Reference `json:"supplier,omitempty"`
	Destination *Reference `json:"destination,omitempty"`
	Receiver []*Reference `json:"receiver,omitempty"`
}

// NewSupplyDelivery creates a new SupplyDelivery instance.
func NewSupplyDelivery() *SupplyDelivery {
	return &SupplyDelivery{}
}

// FromJSON populates SupplyDelivery from JSON data.
func (m *SupplyDelivery) FromJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		BasedOn []*Reference `json:"basedon,omitempty"`
		PartOf []*Reference `json:"partof,omitempty"`
		Status *SupplyDeliveryStatus `json:"status,omitempty"`
		Patient *Reference `json:"patient,omitempty"`
		Type *CodeableConcept `json:"type,omitempty"`
		SuppliedItem *SupplyDeliverySuppliedItem `json:"supplieditem,omitempty"`
		OccurrenceDateTime *FhirDateTime `json:"occurrencedatetime,omitempty"`
		OccurrencePeriod *Period `json:"occurrenceperiod,omitempty"`
		OccurrenceTiming *Timing `json:"occurrencetiming,omitempty"`
		Supplier *Reference `json:"supplier,omitempty"`
		Destination *Reference `json:"destination,omitempty"`
		Receiver []*Reference `json:"receiver,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Identifier = temp.Identifier
	m.BasedOn = temp.BasedOn
	m.PartOf = temp.PartOf
	m.Status = temp.Status
	m.Patient = temp.Patient
	m.Type = temp.Type
	m.SuppliedItem = temp.SuppliedItem
	m.OccurrenceDateTime = temp.OccurrenceDateTime
	m.OccurrencePeriod = temp.OccurrencePeriod
	m.OccurrenceTiming = temp.OccurrenceTiming
	m.Supplier = temp.Supplier
	m.Destination = temp.Destination
	m.Receiver = temp.Receiver
	return nil
}

// ToJSON converts SupplyDelivery to JSON data.
func (m *SupplyDelivery) ToJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		BasedOn []*Reference `json:"basedon,omitempty"`
		PartOf []*Reference `json:"partof,omitempty"`
		Status *SupplyDeliveryStatus `json:"status,omitempty"`
		Patient *Reference `json:"patient,omitempty"`
		Type *CodeableConcept `json:"type,omitempty"`
		SuppliedItem *SupplyDeliverySuppliedItem `json:"supplieditem,omitempty"`
		OccurrenceDateTime interface{} `json:"occurrencedatetime,omitempty"`
		OccurrenceDateTimeElement map[string]interface{} `json:"_occurrencedatetime,omitempty"`
		OccurrencePeriod *Period `json:"occurrenceperiod,omitempty"`
		OccurrenceTiming *Timing `json:"occurrencetiming,omitempty"`
		Supplier *Reference `json:"supplier,omitempty"`
		Destination *Reference `json:"destination,omitempty"`
		Receiver []*Reference `json:"receiver,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.ToJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.ToJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Identifier = m.Identifier
	output.BasedOn = m.BasedOn
	output.PartOf = m.PartOf
	output.Status = m.Status
	output.Patient = m.Patient
	output.Type = m.Type
	output.SuppliedItem = m.SuppliedItem
	if m.OccurrenceDateTime != nil && m.OccurrenceDateTime.Value != nil {
		output.OccurrenceDateTime = m.OccurrenceDateTime.Value
		if m.OccurrenceDateTime.Element != nil {
			output.OccurrenceDateTimeElement = toMapOrNil(m.OccurrenceDateTime.Element.ToJSON())
		}
	}
	output.OccurrencePeriod = m.OccurrencePeriod
	output.OccurrenceTiming = m.OccurrenceTiming
	output.Supplier = m.Supplier
	output.Destination = m.Destination
	output.Receiver = m.Receiver
	return json.Marshal(output)
}

// Clone creates a deep copy of SupplyDelivery.
func (m *SupplyDelivery) Clone() *SupplyDelivery {
	if m == nil { return nil }
	return &SupplyDelivery{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		BasedOn: cloneSlices(m.BasedOn),
		PartOf: cloneSlices(m.PartOf),
		Status: m.Status.Clone(),
		Patient: m.Patient.Clone(),
		Type: m.Type.Clone(),
		SuppliedItem: m.SuppliedItem.Clone(),
		OccurrenceDateTime: m.OccurrenceDateTime.Clone(),
		OccurrencePeriod: m.OccurrencePeriod.Clone(),
		OccurrenceTiming: m.OccurrenceTiming.Clone(),
		Supplier: m.Supplier.Clone(),
		Destination: m.Destination.Clone(),
		Receiver: cloneSlices(m.Receiver),
	}
}

// Equals checks equality between two SupplyDelivery instances.
func (m *SupplyDelivery) Equals(other *SupplyDelivery) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.BasedOn, other.BasedOn) { return false }
	if !compareSlices(m.PartOf, other.PartOf) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Patient.Equals(other.Patient) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.SuppliedItem.Equals(other.SuppliedItem) { return false }
	if !m.OccurrenceDateTime.Equals(other.OccurrenceDateTime) { return false }
	if !m.OccurrencePeriod.Equals(other.OccurrencePeriod) { return false }
	if !m.OccurrenceTiming.Equals(other.OccurrenceTiming) { return false }
	if !m.Supplier.Equals(other.Supplier) { return false }
	if !m.Destination.Equals(other.Destination) { return false }
	if !compareSlices(m.Receiver, other.Receiver) { return false }
	return true
}

// SupplyDeliverySuppliedItem
// The item that is being delivered or has been supplied.
type SupplyDeliverySuppliedItem struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Quantity *Quantity `json:"quantity,omitempty"`
	ItemCodeableConcept *CodeableConcept `json:"itemcodeableconcept,omitempty"`
	ItemReference *Reference `json:"itemreference,omitempty"`
}

// NewSupplyDeliverySuppliedItem creates a new SupplyDeliverySuppliedItem instance.
func NewSupplyDeliverySuppliedItem() *SupplyDeliverySuppliedItem {
	return &SupplyDeliverySuppliedItem{}
}

// FromJSON populates SupplyDeliverySuppliedItem from JSON data.
func (m *SupplyDeliverySuppliedItem) FromJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Quantity *Quantity `json:"quantity,omitempty"`
		ItemCodeableConcept *CodeableConcept `json:"itemcodeableconcept,omitempty"`
		ItemReference *Reference `json:"itemreference,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Quantity = temp.Quantity
	m.ItemCodeableConcept = temp.ItemCodeableConcept
	m.ItemReference = temp.ItemReference
	return nil
}

// ToJSON converts SupplyDeliverySuppliedItem to JSON data.
func (m *SupplyDeliverySuppliedItem) ToJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Quantity *Quantity `json:"quantity,omitempty"`
		ItemCodeableConcept *CodeableConcept `json:"itemcodeableconcept,omitempty"`
		ItemReference *Reference `json:"itemreference,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.ToJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Quantity = m.Quantity
	output.ItemCodeableConcept = m.ItemCodeableConcept
	output.ItemReference = m.ItemReference
	return json.Marshal(output)
}

// Clone creates a deep copy of SupplyDeliverySuppliedItem.
func (m *SupplyDeliverySuppliedItem) Clone() *SupplyDeliverySuppliedItem {
	if m == nil { return nil }
	return &SupplyDeliverySuppliedItem{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Quantity: m.Quantity.Clone(),
		ItemCodeableConcept: m.ItemCodeableConcept.Clone(),
		ItemReference: m.ItemReference.Clone(),
	}
}

// Equals checks equality between two SupplyDeliverySuppliedItem instances.
func (m *SupplyDeliverySuppliedItem) Equals(other *SupplyDeliverySuppliedItem) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Quantity.Equals(other.Quantity) { return false }
	if !m.ItemCodeableConcept.Equals(other.ItemCodeableConcept) { return false }
	if !m.ItemReference.Equals(other.ItemReference) { return false }
	return true
}

