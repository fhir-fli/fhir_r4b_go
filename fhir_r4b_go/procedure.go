// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Procedure
// An action that is or was performed on or for a patient. This can be a physical intervention like an operation, or less invasive like long term services, counseling, or hypnotherapy.
type Procedure struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	InstantiatesCanonical []*FhirCanonical `json:"instantiatescanonical,omitempty"`
	InstantiatesUri []*FhirUri `json:"instantiatesuri,omitempty"`
	BasedOn []*Reference `json:"basedon,omitempty"`
	PartOf []*Reference `json:"partof,omitempty"`
	Status *EventStatus `json:"status,omitempty"`
	StatusReason *CodeableConcept `json:"statusreason,omitempty"`
	Category *CodeableConcept `json:"category,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Subject *Reference `json:"subject,omitempty"`
	Encounter *Reference `json:"encounter,omitempty"`
	PerformedDateTime *FhirDateTime `json:"performeddatetime,omitempty"`
	PerformedPeriod *Period `json:"performedperiod,omitempty"`
	PerformedString *FhirString `json:"performedstring,omitempty"`
	PerformedAge *Age `json:"performedage,omitempty"`
	PerformedRange *Range `json:"performedrange,omitempty"`
	Recorder *Reference `json:"recorder,omitempty"`
	Asserter *Reference `json:"asserter,omitempty"`
	Performer []*ProcedurePerformer `json:"performer,omitempty"`
	Location *Reference `json:"location,omitempty"`
	ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
	ReasonReference []*Reference `json:"reasonreference,omitempty"`
	BodySite []*CodeableConcept `json:"bodysite,omitempty"`
	Outcome *CodeableConcept `json:"outcome,omitempty"`
	Report []*Reference `json:"report,omitempty"`
	Complication []*CodeableConcept `json:"complication,omitempty"`
	ComplicationDetail []*Reference `json:"complicationdetail,omitempty"`
	FollowUp []*CodeableConcept `json:"followup,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
	FocalDevice []*ProcedureFocalDevice `json:"focaldevice,omitempty"`
	UsedReference []*Reference `json:"usedreference,omitempty"`
	UsedCode []*CodeableConcept `json:"usedcode,omitempty"`
}

// NewProcedure creates a new Procedure instance
func NewProcedure() *Procedure {
	return &Procedure{}
}

// FromJSON populates Procedure from JSON data
func (m *Procedure) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Procedure to JSON data
func (m *Procedure) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Procedure
func (m *Procedure) Clone() *Procedure {
	if m == nil { return nil }
	return &Procedure{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		InstantiatesCanonical: cloneSlices(m.InstantiatesCanonical),
		InstantiatesUri: cloneSlices(m.InstantiatesUri),
		BasedOn: cloneSlices(m.BasedOn),
		PartOf: cloneSlices(m.PartOf),
		Status: m.Status.Clone(),
		StatusReason: m.StatusReason.Clone(),
		Category: m.Category.Clone(),
		Code: m.Code.Clone(),
		Subject: m.Subject.Clone(),
		Encounter: m.Encounter.Clone(),
		PerformedDateTime: m.PerformedDateTime.Clone(),
		PerformedPeriod: m.PerformedPeriod.Clone(),
		PerformedString: m.PerformedString.Clone(),
		PerformedAge: m.PerformedAge.Clone(),
		PerformedRange: m.PerformedRange.Clone(),
		Recorder: m.Recorder.Clone(),
		Asserter: m.Asserter.Clone(),
		Performer: cloneSlices(m.Performer),
		Location: m.Location.Clone(),
		ReasonCode: cloneSlices(m.ReasonCode),
		ReasonReference: cloneSlices(m.ReasonReference),
		BodySite: cloneSlices(m.BodySite),
		Outcome: m.Outcome.Clone(),
		Report: cloneSlices(m.Report),
		Complication: cloneSlices(m.Complication),
		ComplicationDetail: cloneSlices(m.ComplicationDetail),
		FollowUp: cloneSlices(m.FollowUp),
		Note: cloneSlices(m.Note),
		FocalDevice: cloneSlices(m.FocalDevice),
		UsedReference: cloneSlices(m.UsedReference),
		UsedCode: cloneSlices(m.UsedCode),
	}
}

// Equals checks for equality with another Procedure instance
func (m *Procedure) Equals(other *Procedure) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.InstantiatesCanonical, other.InstantiatesCanonical) { return false }
	if !compareSlices(m.InstantiatesUri, other.InstantiatesUri) { return false }
	if !compareSlices(m.BasedOn, other.BasedOn) { return false }
	if !compareSlices(m.PartOf, other.PartOf) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.StatusReason.Equals(other.StatusReason) { return false }
	if !m.Category.Equals(other.Category) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Subject.Equals(other.Subject) { return false }
	if !m.Encounter.Equals(other.Encounter) { return false }
	if !m.PerformedDateTime.Equals(other.PerformedDateTime) { return false }
	if !m.PerformedPeriod.Equals(other.PerformedPeriod) { return false }
	if !m.PerformedString.Equals(other.PerformedString) { return false }
	if !m.PerformedAge.Equals(other.PerformedAge) { return false }
	if !m.PerformedRange.Equals(other.PerformedRange) { return false }
	if !m.Recorder.Equals(other.Recorder) { return false }
	if !m.Asserter.Equals(other.Asserter) { return false }
	if !compareSlices(m.Performer, other.Performer) { return false }
	if !m.Location.Equals(other.Location) { return false }
	if !compareSlices(m.ReasonCode, other.ReasonCode) { return false }
	if !compareSlices(m.ReasonReference, other.ReasonReference) { return false }
	if !compareSlices(m.BodySite, other.BodySite) { return false }
	if !m.Outcome.Equals(other.Outcome) { return false }
	if !compareSlices(m.Report, other.Report) { return false }
	if !compareSlices(m.Complication, other.Complication) { return false }
	if !compareSlices(m.ComplicationDetail, other.ComplicationDetail) { return false }
	if !compareSlices(m.FollowUp, other.FollowUp) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	if !compareSlices(m.FocalDevice, other.FocalDevice) { return false }
	if !compareSlices(m.UsedReference, other.UsedReference) { return false }
	if !compareSlices(m.UsedCode, other.UsedCode) { return false }
	return true
}

// ProcedurePerformer
// Limited to "real" people rather than equipment.
type ProcedurePerformer struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Function_ *CodeableConcept `json:"function,omitempty"`
	Actor *Reference `json:"actor,omitempty"`
	OnBehalfOf *Reference `json:"onbehalfof,omitempty"`
}

// NewProcedurePerformer creates a new ProcedurePerformer instance
func NewProcedurePerformer() *ProcedurePerformer {
	return &ProcedurePerformer{}
}

// FromJSON populates ProcedurePerformer from JSON data
func (m *ProcedurePerformer) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ProcedurePerformer to JSON data
func (m *ProcedurePerformer) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ProcedurePerformer
func (m *ProcedurePerformer) Clone() *ProcedurePerformer {
	if m == nil { return nil }
	return &ProcedurePerformer{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Function_: m.Function_.Clone(),
		Actor: m.Actor.Clone(),
		OnBehalfOf: m.OnBehalfOf.Clone(),
	}
}

// Equals checks for equality with another ProcedurePerformer instance
func (m *ProcedurePerformer) Equals(other *ProcedurePerformer) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Function_.Equals(other.Function_) { return false }
	if !m.Actor.Equals(other.Actor) { return false }
	if !m.OnBehalfOf.Equals(other.OnBehalfOf) { return false }
	return true
}

// ProcedureFocalDevice
// A device that is implanted, removed or otherwise manipulated (calibration, battery replacement, fitting a prosthesis, attaching a wound-vac, etc.) as a focal portion of the Procedure.
type ProcedureFocalDevice struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Action *CodeableConcept `json:"action,omitempty"`
	Manipulated *Reference `json:"manipulated,omitempty"`
}

// NewProcedureFocalDevice creates a new ProcedureFocalDevice instance
func NewProcedureFocalDevice() *ProcedureFocalDevice {
	return &ProcedureFocalDevice{}
}

// FromJSON populates ProcedureFocalDevice from JSON data
func (m *ProcedureFocalDevice) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ProcedureFocalDevice to JSON data
func (m *ProcedureFocalDevice) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ProcedureFocalDevice
func (m *ProcedureFocalDevice) Clone() *ProcedureFocalDevice {
	if m == nil { return nil }
	return &ProcedureFocalDevice{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Action: m.Action.Clone(),
		Manipulated: m.Manipulated.Clone(),
	}
}

// Equals checks for equality with another ProcedureFocalDevice instance
func (m *ProcedureFocalDevice) Equals(other *ProcedureFocalDevice) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Action.Equals(other.Action) { return false }
	if !m.Manipulated.Equals(other.Manipulated) { return false }
	return true
}

