// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// HealthcareService
// The details of a healthcare service available at a location.
type HealthcareService struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Active *FhirBoolean `json:"active,omitempty"`
	ProvidedBy *Reference `json:"providedby,omitempty"`
	Category []*CodeableConcept `json:"category,omitempty"`
	Type []*CodeableConcept `json:"type,omitempty"`
	Specialty []*CodeableConcept `json:"specialty,omitempty"`
	Location []*Reference `json:"location,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Comment *FhirString `json:"comment,omitempty"`
	ExtraDetails *FhirMarkdown `json:"extradetails,omitempty"`
	Photo *Attachment `json:"photo,omitempty"`
	Telecom []*ContactPoint `json:"telecom,omitempty"`
	CoverageArea []*Reference `json:"coveragearea,omitempty"`
	ServiceProvisionCode []*CodeableConcept `json:"serviceprovisioncode,omitempty"`
	Eligibility []*HealthcareServiceEligibility `json:"eligibility,omitempty"`
	Program []*CodeableConcept `json:"program,omitempty"`
	Characteristic []*CodeableConcept `json:"characteristic,omitempty"`
	Communication []*CodeableConcept `json:"communication,omitempty"`
	ReferralMethod []*CodeableConcept `json:"referralmethod,omitempty"`
	AppointmentRequired *FhirBoolean `json:"appointmentrequired,omitempty"`
	AvailableTime []*HealthcareServiceAvailableTime `json:"availabletime,omitempty"`
	NotAvailable []*HealthcareServiceNotAvailable `json:"notavailable,omitempty"`
	AvailabilityExceptions *FhirString `json:"availabilityexceptions,omitempty"`
	Endpoint []*Reference `json:"endpoint,omitempty"`
}

// NewHealthcareService creates a new HealthcareService instance
func NewHealthcareService() *HealthcareService {
	return &HealthcareService{}
}

// FromJSON populates HealthcareService from JSON data
func (m *HealthcareService) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts HealthcareService to JSON data
func (m *HealthcareService) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of HealthcareService
func (m *HealthcareService) Clone() *HealthcareService {
	if m == nil { return nil }
	return &HealthcareService{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Active: m.Active.Clone(),
		ProvidedBy: m.ProvidedBy.Clone(),
		Category: cloneSlices(m.Category),
		Type: cloneSlices(m.Type),
		Specialty: cloneSlices(m.Specialty),
		Location: cloneSlices(m.Location),
		Name: m.Name.Clone(),
		Comment: m.Comment.Clone(),
		ExtraDetails: m.ExtraDetails.Clone(),
		Photo: m.Photo.Clone(),
		Telecom: cloneSlices(m.Telecom),
		CoverageArea: cloneSlices(m.CoverageArea),
		ServiceProvisionCode: cloneSlices(m.ServiceProvisionCode),
		Eligibility: cloneSlices(m.Eligibility),
		Program: cloneSlices(m.Program),
		Characteristic: cloneSlices(m.Characteristic),
		Communication: cloneSlices(m.Communication),
		ReferralMethod: cloneSlices(m.ReferralMethod),
		AppointmentRequired: m.AppointmentRequired.Clone(),
		AvailableTime: cloneSlices(m.AvailableTime),
		NotAvailable: cloneSlices(m.NotAvailable),
		AvailabilityExceptions: m.AvailabilityExceptions.Clone(),
		Endpoint: cloneSlices(m.Endpoint),
	}
}

// Equals checks for equality with another HealthcareService instance
func (m *HealthcareService) Equals(other *HealthcareService) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Active.Equals(other.Active) { return false }
	if !m.ProvidedBy.Equals(other.ProvidedBy) { return false }
	if !compareSlices(m.Category, other.Category) { return false }
	if !compareSlices(m.Type, other.Type) { return false }
	if !compareSlices(m.Specialty, other.Specialty) { return false }
	if !compareSlices(m.Location, other.Location) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Comment.Equals(other.Comment) { return false }
	if !m.ExtraDetails.Equals(other.ExtraDetails) { return false }
	if !m.Photo.Equals(other.Photo) { return false }
	if !compareSlices(m.Telecom, other.Telecom) { return false }
	if !compareSlices(m.CoverageArea, other.CoverageArea) { return false }
	if !compareSlices(m.ServiceProvisionCode, other.ServiceProvisionCode) { return false }
	if !compareSlices(m.Eligibility, other.Eligibility) { return false }
	if !compareSlices(m.Program, other.Program) { return false }
	if !compareSlices(m.Characteristic, other.Characteristic) { return false }
	if !compareSlices(m.Communication, other.Communication) { return false }
	if !compareSlices(m.ReferralMethod, other.ReferralMethod) { return false }
	if !m.AppointmentRequired.Equals(other.AppointmentRequired) { return false }
	if !compareSlices(m.AvailableTime, other.AvailableTime) { return false }
	if !compareSlices(m.NotAvailable, other.NotAvailable) { return false }
	if !m.AvailabilityExceptions.Equals(other.AvailabilityExceptions) { return false }
	if !compareSlices(m.Endpoint, other.Endpoint) { return false }
	return true
}

// HealthcareServiceEligibility
// Does this service have specific eligibility requirements that need to be met in order to use the service?
type HealthcareServiceEligibility struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Comment *FhirMarkdown `json:"comment,omitempty"`
}

// NewHealthcareServiceEligibility creates a new HealthcareServiceEligibility instance
func NewHealthcareServiceEligibility() *HealthcareServiceEligibility {
	return &HealthcareServiceEligibility{}
}

// FromJSON populates HealthcareServiceEligibility from JSON data
func (m *HealthcareServiceEligibility) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts HealthcareServiceEligibility to JSON data
func (m *HealthcareServiceEligibility) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of HealthcareServiceEligibility
func (m *HealthcareServiceEligibility) Clone() *HealthcareServiceEligibility {
	if m == nil { return nil }
	return &HealthcareServiceEligibility{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		Comment: m.Comment.Clone(),
	}
}

// Equals checks for equality with another HealthcareServiceEligibility instance
func (m *HealthcareServiceEligibility) Equals(other *HealthcareServiceEligibility) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Comment.Equals(other.Comment) { return false }
	return true
}

// HealthcareServiceAvailableTime
// A collection of times that the Service Site is available.
type HealthcareServiceAvailableTime struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	DaysOfWeek []*DaysOfWeek `json:"daysofweek,omitempty"`
	AllDay *FhirBoolean `json:"allday,omitempty"`
	AvailableStartTime *FhirTime `json:"availablestarttime,omitempty"`
	AvailableEndTime *FhirTime `json:"availableendtime,omitempty"`
}

// NewHealthcareServiceAvailableTime creates a new HealthcareServiceAvailableTime instance
func NewHealthcareServiceAvailableTime() *HealthcareServiceAvailableTime {
	return &HealthcareServiceAvailableTime{}
}

// FromJSON populates HealthcareServiceAvailableTime from JSON data
func (m *HealthcareServiceAvailableTime) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts HealthcareServiceAvailableTime to JSON data
func (m *HealthcareServiceAvailableTime) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of HealthcareServiceAvailableTime
func (m *HealthcareServiceAvailableTime) Clone() *HealthcareServiceAvailableTime {
	if m == nil { return nil }
	return &HealthcareServiceAvailableTime{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		DaysOfWeek: cloneSlices(m.DaysOfWeek),
		AllDay: m.AllDay.Clone(),
		AvailableStartTime: m.AvailableStartTime.Clone(),
		AvailableEndTime: m.AvailableEndTime.Clone(),
	}
}

// Equals checks for equality with another HealthcareServiceAvailableTime instance
func (m *HealthcareServiceAvailableTime) Equals(other *HealthcareServiceAvailableTime) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.DaysOfWeek, other.DaysOfWeek) { return false }
	if !m.AllDay.Equals(other.AllDay) { return false }
	if !m.AvailableStartTime.Equals(other.AvailableStartTime) { return false }
	if !m.AvailableEndTime.Equals(other.AvailableEndTime) { return false }
	return true
}

// HealthcareServiceNotAvailable
// The HealthcareService is not available during this period of time due to the provided reason.
type HealthcareServiceNotAvailable struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	During *Period `json:"during,omitempty"`
}

// NewHealthcareServiceNotAvailable creates a new HealthcareServiceNotAvailable instance
func NewHealthcareServiceNotAvailable() *HealthcareServiceNotAvailable {
	return &HealthcareServiceNotAvailable{}
}

// FromJSON populates HealthcareServiceNotAvailable from JSON data
func (m *HealthcareServiceNotAvailable) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts HealthcareServiceNotAvailable to JSON data
func (m *HealthcareServiceNotAvailable) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of HealthcareServiceNotAvailable
func (m *HealthcareServiceNotAvailable) Clone() *HealthcareServiceNotAvailable {
	if m == nil { return nil }
	return &HealthcareServiceNotAvailable{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Description: m.Description.Clone(),
		During: m.During.Clone(),
	}
}

// Equals checks for equality with another HealthcareServiceNotAvailable instance
func (m *HealthcareServiceNotAvailable) Equals(other *HealthcareServiceNotAvailable) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.During.Equals(other.During) { return false }
	return true
}

