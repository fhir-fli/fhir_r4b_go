// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// RelatedPerson
// Information about a person that is involved in the care for a patient, but who is not the target of healthcare, nor has a formal responsibility in the care process.
type RelatedPerson struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Active *FhirBoolean `json:"active,omitempty"`
	Patient *Reference `json:"patient,omitempty"`
	Relationship []*CodeableConcept `json:"relationship,omitempty"`
	Name []*HumanName `json:"name,omitempty"`
	Telecom []*ContactPoint `json:"telecom,omitempty"`
	Gender *AdministrativeGender `json:"gender,omitempty"`
	BirthDate *FhirDate `json:"birthdate,omitempty"`
	Address []*Address `json:"address,omitempty"`
	Photo []*Attachment `json:"photo,omitempty"`
	Period *Period `json:"period,omitempty"`
	Communication []*RelatedPersonCommunication `json:"communication,omitempty"`
}

// NewRelatedPerson creates a new RelatedPerson instance
func NewRelatedPerson() *RelatedPerson {
	return &RelatedPerson{}
}

// FromJSON populates RelatedPerson from JSON data
func (m *RelatedPerson) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts RelatedPerson to JSON data
func (m *RelatedPerson) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of RelatedPerson
func (m *RelatedPerson) Clone() *RelatedPerson {
	if m == nil { return nil }
	return &RelatedPerson{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Active: m.Active.Clone(),
		Patient: m.Patient.Clone(),
		Relationship: cloneSlices(m.Relationship),
		Name: cloneSlices(m.Name),
		Telecom: cloneSlices(m.Telecom),
		Gender: m.Gender.Clone(),
		BirthDate: m.BirthDate.Clone(),
		Address: cloneSlices(m.Address),
		Photo: cloneSlices(m.Photo),
		Period: m.Period.Clone(),
		Communication: cloneSlices(m.Communication),
	}
}

// Equals checks for equality with another RelatedPerson instance
func (m *RelatedPerson) Equals(other *RelatedPerson) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Active.Equals(other.Active) { return false }
	if !m.Patient.Equals(other.Patient) { return false }
	if !compareSlices(m.Relationship, other.Relationship) { return false }
	if !compareSlices(m.Name, other.Name) { return false }
	if !compareSlices(m.Telecom, other.Telecom) { return false }
	if !m.Gender.Equals(other.Gender) { return false }
	if !m.BirthDate.Equals(other.BirthDate) { return false }
	if !compareSlices(m.Address, other.Address) { return false }
	if !compareSlices(m.Photo, other.Photo) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !compareSlices(m.Communication, other.Communication) { return false }
	return true
}

// RelatedPersonCommunication
// A language which may be used to communicate with about the patient's health.
type RelatedPersonCommunication struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Language *CodeableConcept `json:"language,omitempty"`
	Preferred *FhirBoolean `json:"preferred,omitempty"`
}

// NewRelatedPersonCommunication creates a new RelatedPersonCommunication instance
func NewRelatedPersonCommunication() *RelatedPersonCommunication {
	return &RelatedPersonCommunication{}
}

// FromJSON populates RelatedPersonCommunication from JSON data
func (m *RelatedPersonCommunication) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts RelatedPersonCommunication to JSON data
func (m *RelatedPersonCommunication) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of RelatedPersonCommunication
func (m *RelatedPersonCommunication) Clone() *RelatedPersonCommunication {
	if m == nil { return nil }
	return &RelatedPersonCommunication{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Language: m.Language.Clone(),
		Preferred: m.Preferred.Clone(),
	}
}

// Equals checks for equality with another RelatedPersonCommunication instance
func (m *RelatedPersonCommunication) Equals(other *RelatedPersonCommunication) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Preferred.Equals(other.Preferred) { return false }
	return true
}

