// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// CodeableReference
// A reference to a resource (by instance), or instead, a reference to a concept defined in a terminology or ontology (by class).
type CodeableReference struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Concept *CodeableConcept `json:"concept,omitempty"`
	Reference *Reference `json:"reference,omitempty"`
}

// NewCodeableReference creates a new CodeableReference instance
func NewCodeableReference() *CodeableReference {
	return &CodeableReference{}
}

// FromJSON populates CodeableReference from JSON data
func (m *CodeableReference) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts CodeableReference to JSON data
func (m *CodeableReference) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of CodeableReference
func (m *CodeableReference) Clone() *CodeableReference {
	if m == nil { return nil }
	return &CodeableReference{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Concept: m.Concept.Clone(),
		Reference: m.Reference.Clone(),
	}
}

// Equals checks for equality with another CodeableReference instance
func (m *CodeableReference) Equals(other *CodeableReference) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Concept.Equals(other.Concept) { return false }
	if !m.Reference.Equals(other.Reference) { return false }
	return true
}

