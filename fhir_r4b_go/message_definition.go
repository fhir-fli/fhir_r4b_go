// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// MessageDefinition
// Defines the characteristics of a message that can be shared between systems, including the type of event that initiates the message, the content to be transmitted and what response(s), if any, are permitted.
type MessageDefinition struct {
	CanonicalResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Url *FhirUri `json:"url,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Version *FhirString `json:"version,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	Replaces []*FhirCanonical `json:"replaces,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	Experimental *FhirBoolean `json:"experimental,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Publisher *FhirString `json:"publisher,omitempty"`
	Contact []*ContactDetail `json:"contact,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	UseContext []*UsageContext `json:"usecontext,omitempty"`
	Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`
	Purpose *FhirMarkdown `json:"purpose,omitempty"`
	Copyright *FhirMarkdown `json:"copyright,omitempty"`
	Base *FhirCanonical `json:"base,omitempty"`
	Parent []*FhirCanonical `json:"parent,omitempty"`
	EventCoding *Coding `json:"eventcoding,omitempty"`
	EventUri *FhirUri `json:"eventuri,omitempty"`
	Category *MessageSignificanceCategory `json:"category,omitempty"`
	Focus []*MessageDefinitionFocus `json:"focus,omitempty"`
	ResponseRequired *MessageheaderResponseRequest `json:"responserequired,omitempty"`
	AllowedResponse []*MessageDefinitionAllowedResponse `json:"allowedresponse,omitempty"`
	Graph []*FhirCanonical `json:"graph,omitempty"`
}

// NewMessageDefinition creates a new MessageDefinition instance
func NewMessageDefinition() *MessageDefinition {
	return &MessageDefinition{}
}

// FromJSON populates MessageDefinition from JSON data
func (m *MessageDefinition) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts MessageDefinition to JSON data
func (m *MessageDefinition) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of MessageDefinition
func (m *MessageDefinition) Clone() *MessageDefinition {
	if m == nil { return nil }
	return &MessageDefinition{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Url: m.Url.Clone(),
		Identifier: cloneSlices(m.Identifier),
		Version: m.Version.Clone(),
		Name: m.Name.Clone(),
		Title: m.Title.Clone(),
		Replaces: cloneSlices(m.Replaces),
		Status: m.Status.Clone(),
		Experimental: m.Experimental.Clone(),
		Date: m.Date.Clone(),
		Publisher: m.Publisher.Clone(),
		Contact: cloneSlices(m.Contact),
		Description: m.Description.Clone(),
		UseContext: cloneSlices(m.UseContext),
		Jurisdiction: cloneSlices(m.Jurisdiction),
		Purpose: m.Purpose.Clone(),
		Copyright: m.Copyright.Clone(),
		Base: m.Base.Clone(),
		Parent: cloneSlices(m.Parent),
		EventCoding: m.EventCoding.Clone(),
		EventUri: m.EventUri.Clone(),
		Category: m.Category.Clone(),
		Focus: cloneSlices(m.Focus),
		ResponseRequired: m.ResponseRequired.Clone(),
		AllowedResponse: cloneSlices(m.AllowedResponse),
		Graph: cloneSlices(m.Graph),
	}
}

// Equals checks for equality with another MessageDefinition instance
func (m *MessageDefinition) Equals(other *MessageDefinition) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Version.Equals(other.Version) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !compareSlices(m.Replaces, other.Replaces) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Experimental.Equals(other.Experimental) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Publisher.Equals(other.Publisher) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.UseContext, other.UseContext) { return false }
	if !compareSlices(m.Jurisdiction, other.Jurisdiction) { return false }
	if !m.Purpose.Equals(other.Purpose) { return false }
	if !m.Copyright.Equals(other.Copyright) { return false }
	if !m.Base.Equals(other.Base) { return false }
	if !compareSlices(m.Parent, other.Parent) { return false }
	if !m.EventCoding.Equals(other.EventCoding) { return false }
	if !m.EventUri.Equals(other.EventUri) { return false }
	if !m.Category.Equals(other.Category) { return false }
	if !compareSlices(m.Focus, other.Focus) { return false }
	if !m.ResponseRequired.Equals(other.ResponseRequired) { return false }
	if !compareSlices(m.AllowedResponse, other.AllowedResponse) { return false }
	if !compareSlices(m.Graph, other.Graph) { return false }
	return true
}

// MessageDefinitionFocus
// Identifies the resource (or resources) that are being addressed by the event.  For example, the Encounter for an admit message or two Account records for a merge.
type MessageDefinitionFocus struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *FhirCode `json:"code,omitempty"`
	Profile *FhirCanonical `json:"profile,omitempty"`
	Min *FhirUnsignedInt `json:"min,omitempty"`
	Max *FhirString `json:"max,omitempty"`
}

// NewMessageDefinitionFocus creates a new MessageDefinitionFocus instance
func NewMessageDefinitionFocus() *MessageDefinitionFocus {
	return &MessageDefinitionFocus{}
}

// FromJSON populates MessageDefinitionFocus from JSON data
func (m *MessageDefinitionFocus) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts MessageDefinitionFocus to JSON data
func (m *MessageDefinitionFocus) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of MessageDefinitionFocus
func (m *MessageDefinitionFocus) Clone() *MessageDefinitionFocus {
	if m == nil { return nil }
	return &MessageDefinitionFocus{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		Profile: m.Profile.Clone(),
		Min: m.Min.Clone(),
		Max: m.Max.Clone(),
	}
}

// Equals checks for equality with another MessageDefinitionFocus instance
func (m *MessageDefinitionFocus) Equals(other *MessageDefinitionFocus) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Profile.Equals(other.Profile) { return false }
	if !m.Min.Equals(other.Min) { return false }
	if !m.Max.Equals(other.Max) { return false }
	return true
}

// MessageDefinitionAllowedResponse
// Indicates what types of messages may be sent as an application-level response to this message.
type MessageDefinitionAllowedResponse struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Message *FhirCanonical `json:"message,omitempty"`
	Situation *FhirMarkdown `json:"situation,omitempty"`
}

// NewMessageDefinitionAllowedResponse creates a new MessageDefinitionAllowedResponse instance
func NewMessageDefinitionAllowedResponse() *MessageDefinitionAllowedResponse {
	return &MessageDefinitionAllowedResponse{}
}

// FromJSON populates MessageDefinitionAllowedResponse from JSON data
func (m *MessageDefinitionAllowedResponse) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts MessageDefinitionAllowedResponse to JSON data
func (m *MessageDefinitionAllowedResponse) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of MessageDefinitionAllowedResponse
func (m *MessageDefinitionAllowedResponse) Clone() *MessageDefinitionAllowedResponse {
	if m == nil { return nil }
	return &MessageDefinitionAllowedResponse{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Message: m.Message.Clone(),
		Situation: m.Situation.Clone(),
	}
}

// Equals checks for equality with another MessageDefinitionAllowedResponse instance
func (m *MessageDefinitionAllowedResponse) Equals(other *MessageDefinitionAllowedResponse) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Message.Equals(other.Message) { return false }
	if !m.Situation.Equals(other.Situation) { return false }
	return true
}

