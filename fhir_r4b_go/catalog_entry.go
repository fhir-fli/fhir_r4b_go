// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// CatalogEntry
// Catalog entries are wrappers that contextualize items included in a catalog.
type CatalogEntry struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	Orderable *FhirBoolean `json:"orderable,omitempty"`
	ReferencedItem *Reference `json:"referenceditem,omitempty"`
	AdditionalIdentifier []*Identifier `json:"additionalidentifier,omitempty"`
	Classification []*CodeableConcept `json:"classification,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	ValidityPeriod *Period `json:"validityperiod,omitempty"`
	ValidTo *FhirDateTime `json:"validto,omitempty"`
	LastUpdated *FhirDateTime `json:"lastupdated,omitempty"`
	AdditionalCharacteristic []*CodeableConcept `json:"additionalcharacteristic,omitempty"`
	AdditionalClassification []*CodeableConcept `json:"additionalclassification,omitempty"`
	RelatedEntry []*CatalogEntryRelatedEntry `json:"relatedentry,omitempty"`
}

// NewCatalogEntry creates a new CatalogEntry instance.
func NewCatalogEntry() *CatalogEntry {
	return &CatalogEntry{}
}

// FromJSON populates CatalogEntry from JSON data.
func (m *CatalogEntry) FromJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Type *CodeableConcept `json:"type,omitempty"`
		Orderable *FhirBoolean `json:"orderable,omitempty"`
		ReferencedItem *Reference `json:"referenceditem,omitempty"`
		AdditionalIdentifier []*Identifier `json:"additionalidentifier,omitempty"`
		Classification []*CodeableConcept `json:"classification,omitempty"`
		Status *PublicationStatus `json:"status,omitempty"`
		ValidityPeriod *Period `json:"validityperiod,omitempty"`
		ValidTo *FhirDateTime `json:"validto,omitempty"`
		LastUpdated *FhirDateTime `json:"lastupdated,omitempty"`
		AdditionalCharacteristic []*CodeableConcept `json:"additionalcharacteristic,omitempty"`
		AdditionalClassification []*CodeableConcept `json:"additionalclassification,omitempty"`
		RelatedEntry []*CatalogEntryRelatedEntry `json:"relatedentry,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Identifier = temp.Identifier
	m.Type = temp.Type
	m.Orderable = temp.Orderable
	m.ReferencedItem = temp.ReferencedItem
	m.AdditionalIdentifier = temp.AdditionalIdentifier
	m.Classification = temp.Classification
	m.Status = temp.Status
	m.ValidityPeriod = temp.ValidityPeriod
	m.ValidTo = temp.ValidTo
	m.LastUpdated = temp.LastUpdated
	m.AdditionalCharacteristic = temp.AdditionalCharacteristic
	m.AdditionalClassification = temp.AdditionalClassification
	m.RelatedEntry = temp.RelatedEntry
	return nil
}

// ToJSON converts CatalogEntry to JSON data.
func (m *CatalogEntry) ToJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Type *CodeableConcept `json:"type,omitempty"`
		Orderable interface{} `json:"orderable,omitempty"`
		OrderableElement map[string]interface{} `json:"_orderable,omitempty"`
		ReferencedItem *Reference `json:"referenceditem,omitempty"`
		AdditionalIdentifier []*Identifier `json:"additionalidentifier,omitempty"`
		Classification []*CodeableConcept `json:"classification,omitempty"`
		Status *PublicationStatus `json:"status,omitempty"`
		ValidityPeriod *Period `json:"validityperiod,omitempty"`
		ValidTo interface{} `json:"validto,omitempty"`
		ValidToElement map[string]interface{} `json:"_validto,omitempty"`
		LastUpdated interface{} `json:"lastupdated,omitempty"`
		LastUpdatedElement map[string]interface{} `json:"_lastupdated,omitempty"`
		AdditionalCharacteristic []*CodeableConcept `json:"additionalcharacteristic,omitempty"`
		AdditionalClassification []*CodeableConcept `json:"additionalclassification,omitempty"`
		RelatedEntry []*CatalogEntryRelatedEntry `json:"relatedentry,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.ToJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.ToJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Identifier = m.Identifier
	output.Type = m.Type
	if m.Orderable != nil && m.Orderable.Value != nil {
		output.Orderable = m.Orderable.Value
		if m.Orderable.Element != nil {
			output.OrderableElement = toMapOrNil(m.Orderable.Element.ToJSON())
		}
	}
	output.ReferencedItem = m.ReferencedItem
	output.AdditionalIdentifier = m.AdditionalIdentifier
	output.Classification = m.Classification
	output.Status = m.Status
	output.ValidityPeriod = m.ValidityPeriod
	if m.ValidTo != nil && m.ValidTo.Value != nil {
		output.ValidTo = m.ValidTo.Value
		if m.ValidTo.Element != nil {
			output.ValidToElement = toMapOrNil(m.ValidTo.Element.ToJSON())
		}
	}
	if m.LastUpdated != nil && m.LastUpdated.Value != nil {
		output.LastUpdated = m.LastUpdated.Value
		if m.LastUpdated.Element != nil {
			output.LastUpdatedElement = toMapOrNil(m.LastUpdated.Element.ToJSON())
		}
	}
	output.AdditionalCharacteristic = m.AdditionalCharacteristic
	output.AdditionalClassification = m.AdditionalClassification
	output.RelatedEntry = m.RelatedEntry
	return json.Marshal(output)
}

// Clone creates a deep copy of CatalogEntry.
func (m *CatalogEntry) Clone() *CatalogEntry {
	if m == nil { return nil }
	return &CatalogEntry{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Type: m.Type.Clone(),
		Orderable: m.Orderable.Clone(),
		ReferencedItem: m.ReferencedItem.Clone(),
		AdditionalIdentifier: cloneSlices(m.AdditionalIdentifier),
		Classification: cloneSlices(m.Classification),
		Status: m.Status.Clone(),
		ValidityPeriod: m.ValidityPeriod.Clone(),
		ValidTo: m.ValidTo.Clone(),
		LastUpdated: m.LastUpdated.Clone(),
		AdditionalCharacteristic: cloneSlices(m.AdditionalCharacteristic),
		AdditionalClassification: cloneSlices(m.AdditionalClassification),
		RelatedEntry: cloneSlices(m.RelatedEntry),
	}
}

// Equals checks equality between two CatalogEntry instances.
func (m *CatalogEntry) Equals(other *CatalogEntry) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Orderable.Equals(other.Orderable) { return false }
	if !m.ReferencedItem.Equals(other.ReferencedItem) { return false }
	if !compareSlices(m.AdditionalIdentifier, other.AdditionalIdentifier) { return false }
	if !compareSlices(m.Classification, other.Classification) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.ValidityPeriod.Equals(other.ValidityPeriod) { return false }
	if !m.ValidTo.Equals(other.ValidTo) { return false }
	if !m.LastUpdated.Equals(other.LastUpdated) { return false }
	if !compareSlices(m.AdditionalCharacteristic, other.AdditionalCharacteristic) { return false }
	if !compareSlices(m.AdditionalClassification, other.AdditionalClassification) { return false }
	if !compareSlices(m.RelatedEntry, other.RelatedEntry) { return false }
	return true
}

// CatalogEntryRelatedEntry
// Used for example, to point to a substance, or to a device used to administer a medication.
type CatalogEntryRelatedEntry struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Relationtype *CatalogEntryRelationType `json:"relationtype,omitempty"`
	Item *Reference `json:"item,omitempty"`
}

// NewCatalogEntryRelatedEntry creates a new CatalogEntryRelatedEntry instance.
func NewCatalogEntryRelatedEntry() *CatalogEntryRelatedEntry {
	return &CatalogEntryRelatedEntry{}
}

// FromJSON populates CatalogEntryRelatedEntry from JSON data.
func (m *CatalogEntryRelatedEntry) FromJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Relationtype *CatalogEntryRelationType `json:"relationtype,omitempty"`
		Item *Reference `json:"item,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Relationtype = temp.Relationtype
	m.Item = temp.Item
	return nil
}

// ToJSON converts CatalogEntryRelatedEntry to JSON data.
func (m *CatalogEntryRelatedEntry) ToJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Relationtype *CatalogEntryRelationType `json:"relationtype,omitempty"`
		Item *Reference `json:"item,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.ToJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Relationtype = m.Relationtype
	output.Item = m.Item
	return json.Marshal(output)
}

// Clone creates a deep copy of CatalogEntryRelatedEntry.
func (m *CatalogEntryRelatedEntry) Clone() *CatalogEntryRelatedEntry {
	if m == nil { return nil }
	return &CatalogEntryRelatedEntry{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Relationtype: m.Relationtype.Clone(),
		Item: m.Item.Clone(),
	}
}

// Equals checks equality between two CatalogEntryRelatedEntry instances.
func (m *CatalogEntryRelatedEntry) Equals(other *CatalogEntryRelatedEntry) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Relationtype.Equals(other.Relationtype) { return false }
	if !m.Item.Equals(other.Item) { return false }
	return true
}

