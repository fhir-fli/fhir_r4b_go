// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Contributor
// A contributor to the content of a knowledge asset, including authors, editors, reviewers, and endorsers.
type Contributor struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Type *ContributorType `json:"type,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Contact []*ContactDetail `json:"contact,omitempty"`
}

// NewContributor creates a new Contributor instance
func NewContributor() *Contributor {
	return &Contributor{}
}

// FromJSON populates Contributor from JSON data
func (m *Contributor) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Contributor to JSON data
func (m *Contributor) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Contributor
func (m *Contributor) Clone() *Contributor {
	if m == nil { return nil }
	return &Contributor{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Type: m.Type.Clone(),
		Name: m.Name.Clone(),
		Contact: cloneSlices(m.Contact),
	}
}

// Equals checks for equality with another Contributor instance
func (m *Contributor) Equals(other *Contributor) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	return true
}

