// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Media
// A photo, video, or audio recording acquired or used in healthcare. The actual content may be inline or provided by direct reference.
type Media struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	BasedOn []*Reference `json:"basedon,omitempty"`
	PartOf []*Reference `json:"partof,omitempty"`
	Status *EventStatus `json:"status,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	Modality *CodeableConcept `json:"modality,omitempty"`
	View *CodeableConcept `json:"view,omitempty"`
	Subject *Reference `json:"subject,omitempty"`
	Encounter *Reference `json:"encounter,omitempty"`
	CreatedDateTime *FhirDateTime `json:"createddatetime,omitempty"`
	CreatedPeriod *Period `json:"createdperiod,omitempty"`
	Issued *FhirInstant `json:"issued,omitempty"`
	Operator_ *Reference `json:"operator,omitempty"`
	ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
	BodySite *CodeableConcept `json:"bodysite,omitempty"`
	DeviceName *FhirString `json:"devicename,omitempty"`
	Device *Reference `json:"device,omitempty"`
	Height *FhirPositiveInt `json:"height,omitempty"`
	Width *FhirPositiveInt `json:"width,omitempty"`
	Frames *FhirPositiveInt `json:"frames,omitempty"`
	Duration *FhirDecimal `json:"duration,omitempty"`
	Content *Attachment `json:"content,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
}

// NewMedia creates a new Media instance
func NewMedia() *Media {
	return &Media{}
}

// FromJSON populates Media from JSON data
func (m *Media) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Media to JSON data
func (m *Media) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Media
func (m *Media) Clone() *Media {
	if m == nil { return nil }
	return &Media{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		BasedOn: cloneSlices(m.BasedOn),
		PartOf: cloneSlices(m.PartOf),
		Status: m.Status.Clone(),
		Type: m.Type.Clone(),
		Modality: m.Modality.Clone(),
		View: m.View.Clone(),
		Subject: m.Subject.Clone(),
		Encounter: m.Encounter.Clone(),
		CreatedDateTime: m.CreatedDateTime.Clone(),
		CreatedPeriod: m.CreatedPeriod.Clone(),
		Issued: m.Issued.Clone(),
		Operator_: m.Operator_.Clone(),
		ReasonCode: cloneSlices(m.ReasonCode),
		BodySite: m.BodySite.Clone(),
		DeviceName: m.DeviceName.Clone(),
		Device: m.Device.Clone(),
		Height: m.Height.Clone(),
		Width: m.Width.Clone(),
		Frames: m.Frames.Clone(),
		Duration: m.Duration.Clone(),
		Content: m.Content.Clone(),
		Note: cloneSlices(m.Note),
	}
}

// Equals checks for equality with another Media instance
func (m *Media) Equals(other *Media) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.BasedOn, other.BasedOn) { return false }
	if !compareSlices(m.PartOf, other.PartOf) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Modality.Equals(other.Modality) { return false }
	if !m.View.Equals(other.View) { return false }
	if !m.Subject.Equals(other.Subject) { return false }
	if !m.Encounter.Equals(other.Encounter) { return false }
	if !m.CreatedDateTime.Equals(other.CreatedDateTime) { return false }
	if !m.CreatedPeriod.Equals(other.CreatedPeriod) { return false }
	if !m.Issued.Equals(other.Issued) { return false }
	if !m.Operator_.Equals(other.Operator_) { return false }
	if !compareSlices(m.ReasonCode, other.ReasonCode) { return false }
	if !m.BodySite.Equals(other.BodySite) { return false }
	if !m.DeviceName.Equals(other.DeviceName) { return false }
	if !m.Device.Equals(other.Device) { return false }
	if !m.Height.Equals(other.Height) { return false }
	if !m.Width.Equals(other.Width) { return false }
	if !m.Frames.Equals(other.Frames) { return false }
	if !m.Duration.Equals(other.Duration) { return false }
	if !m.Content.Equals(other.Content) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	return true
}

