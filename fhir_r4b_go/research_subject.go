// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// ResearchSubject
// A physical entity which is the primary unit of operational and/or administrative interest in a study.
type ResearchSubject struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *ResearchSubjectStatus `json:"status,omitempty"`
	Period *Period `json:"period,omitempty"`
	Study *Reference `json:"study,omitempty"`
	Individual *Reference `json:"individual,omitempty"`
	AssignedArm *FhirString `json:"assignedarm,omitempty"`
	ActualArm *FhirString `json:"actualarm,omitempty"`
	Consent *Reference `json:"consent,omitempty"`
}

// NewResearchSubject creates a new ResearchSubject instance
func NewResearchSubject() *ResearchSubject {
	return &ResearchSubject{}
}

// FromJSON populates ResearchSubject from JSON data
func (m *ResearchSubject) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts ResearchSubject to JSON data
func (m *ResearchSubject) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of ResearchSubject
func (m *ResearchSubject) Clone() *ResearchSubject {
	if m == nil { return nil }
	return &ResearchSubject{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		Period: m.Period.Clone(),
		Study: m.Study.Clone(),
		Individual: m.Individual.Clone(),
		AssignedArm: m.AssignedArm.Clone(),
		ActualArm: m.ActualArm.Clone(),
		Consent: m.Consent.Clone(),
	}
}

// Equals checks for equality with another ResearchSubject instance
func (m *ResearchSubject) Equals(other *ResearchSubject) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !m.Study.Equals(other.Study) { return false }
	if !m.Individual.Equals(other.Individual) { return false }
	if !m.AssignedArm.Equals(other.AssignedArm) { return false }
	if !m.ActualArm.Equals(other.ActualArm) { return false }
	if !m.Consent.Equals(other.Consent) { return false }
	return true
}

