// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// ResearchSubject
// A physical entity which is the primary unit of operational and/or administrative interest in a study.
type ResearchSubject struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *ResearchSubjectStatus `json:"status,omitempty"`
	Period *Period `json:"period,omitempty"`
	Study *Reference `json:"study,omitempty"`
	Individual *Reference `json:"individual,omitempty"`
	AssignedArm *FhirString `json:"assignedarm,omitempty"`
	ActualArm *FhirString `json:"actualarm,omitempty"`
	Consent *Reference `json:"consent,omitempty"`
}

// NewResearchSubject creates a new ResearchSubject instance.
func NewResearchSubject() *ResearchSubject {
	return &ResearchSubject{}
}

// UnmarshalJSON populates ResearchSubject from JSON data.
func (m *ResearchSubject) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Status *ResearchSubjectStatus `json:"status,omitempty"`
		Period *Period `json:"period,omitempty"`
		Study *Reference `json:"study,omitempty"`
		Individual *Reference `json:"individual,omitempty"`
		AssignedArm *FhirString `json:"assignedarm,omitempty"`
		ActualArm *FhirString `json:"actualarm,omitempty"`
		Consent *Reference `json:"consent,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Identifier = temp.Identifier
	m.Status = temp.Status
	m.Period = temp.Period
	m.Study = temp.Study
	m.Individual = temp.Individual
	m.AssignedArm = temp.AssignedArm
	m.ActualArm = temp.ActualArm
	m.Consent = temp.Consent
	return nil
}

// MarshalJSON converts ResearchSubject to JSON data.
func (m *ResearchSubject) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Status *ResearchSubjectStatus `json:"status,omitempty"`
		Period *Period `json:"period,omitempty"`
		Study *Reference `json:"study,omitempty"`
		Individual *Reference `json:"individual,omitempty"`
		AssignedArm interface{} `json:"assignedarm,omitempty"`
		AssignedArmElement map[string]interface{} `json:"_assignedarm,omitempty"`
		ActualArm interface{} `json:"actualarm,omitempty"`
		ActualArmElement map[string]interface{} `json:"_actualarm,omitempty"`
		Consent *Reference `json:"consent,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Identifier = m.Identifier
	output.Status = m.Status
	output.Period = m.Period
	output.Study = m.Study
	output.Individual = m.Individual
	if m.AssignedArm != nil && m.AssignedArm.Value != nil {
		output.AssignedArm = m.AssignedArm.Value
		if m.AssignedArm.Element != nil {
			output.AssignedArmElement = toMapOrNil(m.AssignedArm.Element.MarshalJSON())
		}
	}
	if m.ActualArm != nil && m.ActualArm.Value != nil {
		output.ActualArm = m.ActualArm.Value
		if m.ActualArm.Element != nil {
			output.ActualArmElement = toMapOrNil(m.ActualArm.Element.MarshalJSON())
		}
	}
	output.Consent = m.Consent
	return json.Marshal(output)
}

// Clone creates a deep copy of ResearchSubject.
func (m *ResearchSubject) Clone() *ResearchSubject {
	if m == nil { return nil }
	return &ResearchSubject{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		Period: m.Period.Clone(),
		Study: m.Study.Clone(),
		Individual: m.Individual.Clone(),
		AssignedArm: m.AssignedArm.Clone(),
		ActualArm: m.ActualArm.Clone(),
		Consent: m.Consent.Clone(),
	}
}

// Equals checks equality between two ResearchSubject instances.
func (m *ResearchSubject) Equals(other *ResearchSubject) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !m.Study.Equals(other.Study) { return false }
	if !m.Individual.Equals(other.Individual) { return false }
	if !m.AssignedArm.Equals(other.AssignedArm) { return false }
	if !m.ActualArm.Equals(other.ActualArm) { return false }
	if !m.Consent.Equals(other.Consent) { return false }
	return true
}

