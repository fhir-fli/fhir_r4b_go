// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// DeviceMetric
// Describes a measurement, calculation or setting capability of a medical device.
type DeviceMetric struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	Unit *CodeableConcept `json:"unit,omitempty"`
	Source *Reference `json:"source,omitempty"`
	Parent *Reference `json:"parent,omitempty"`
	OperationalStatus *DeviceMetricOperationalStatus `json:"operationalstatus,omitempty"`
	Color *DeviceMetricColor `json:"color,omitempty"`
	Category *DeviceMetricCategory `json:"category,omitempty"`
	MeasurementPeriod *Timing `json:"measurementperiod,omitempty"`
	Calibration []*DeviceMetricCalibration `json:"calibration,omitempty"`
}

// NewDeviceMetric creates a new DeviceMetric instance.
func NewDeviceMetric() *DeviceMetric {
	return &DeviceMetric{}
}

// UnmarshalJSON populates DeviceMetric from JSON data.
func (m *DeviceMetric) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Type *CodeableConcept `json:"type,omitempty"`
		Unit *CodeableConcept `json:"unit,omitempty"`
		Source *Reference `json:"source,omitempty"`
		Parent *Reference `json:"parent,omitempty"`
		OperationalStatus *DeviceMetricOperationalStatus `json:"operationalstatus,omitempty"`
		Color *DeviceMetricColor `json:"color,omitempty"`
		Category *DeviceMetricCategory `json:"category,omitempty"`
		MeasurementPeriod *Timing `json:"measurementperiod,omitempty"`
		Calibration []*DeviceMetricCalibration `json:"calibration,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Identifier = temp.Identifier
	m.Type = temp.Type
	m.Unit = temp.Unit
	m.Source = temp.Source
	m.Parent = temp.Parent
	m.OperationalStatus = temp.OperationalStatus
	m.Color = temp.Color
	m.Category = temp.Category
	m.MeasurementPeriod = temp.MeasurementPeriod
	m.Calibration = temp.Calibration
	return nil
}

// MarshalJSON converts DeviceMetric to JSON data.
func (m *DeviceMetric) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Type *CodeableConcept `json:"type,omitempty"`
		Unit *CodeableConcept `json:"unit,omitempty"`
		Source *Reference `json:"source,omitempty"`
		Parent *Reference `json:"parent,omitempty"`
		OperationalStatus *DeviceMetricOperationalStatus `json:"operationalstatus,omitempty"`
		Color *DeviceMetricColor `json:"color,omitempty"`
		Category *DeviceMetricCategory `json:"category,omitempty"`
		MeasurementPeriod *Timing `json:"measurementperiod,omitempty"`
		Calibration []*DeviceMetricCalibration `json:"calibration,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Identifier = m.Identifier
	output.Type = m.Type
	output.Unit = m.Unit
	output.Source = m.Source
	output.Parent = m.Parent
	output.OperationalStatus = m.OperationalStatus
	output.Color = m.Color
	output.Category = m.Category
	output.MeasurementPeriod = m.MeasurementPeriod
	output.Calibration = m.Calibration
	return json.Marshal(output)
}

// Clone creates a deep copy of DeviceMetric.
func (m *DeviceMetric) Clone() *DeviceMetric {
	if m == nil { return nil }
	return &DeviceMetric{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Type: m.Type.Clone(),
		Unit: m.Unit.Clone(),
		Source: m.Source.Clone(),
		Parent: m.Parent.Clone(),
		OperationalStatus: m.OperationalStatus.Clone(),
		Color: m.Color.Clone(),
		Category: m.Category.Clone(),
		MeasurementPeriod: m.MeasurementPeriod.Clone(),
		Calibration: cloneSlices(m.Calibration),
	}
}

// Equals checks equality between two DeviceMetric instances.
func (m *DeviceMetric) Equals(other *DeviceMetric) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Unit.Equals(other.Unit) { return false }
	if !m.Source.Equals(other.Source) { return false }
	if !m.Parent.Equals(other.Parent) { return false }
	if !m.OperationalStatus.Equals(other.OperationalStatus) { return false }
	if !m.Color.Equals(other.Color) { return false }
	if !m.Category.Equals(other.Category) { return false }
	if !m.MeasurementPeriod.Equals(other.MeasurementPeriod) { return false }
	if !compareSlices(m.Calibration, other.Calibration) { return false }
	return true
}

// DeviceMetricCalibration
// Describes the calibrations that have been performed or that are required to be performed.
type DeviceMetricCalibration struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Type *DeviceMetricCalibrationType `json:"type,omitempty"`
	State *DeviceMetricCalibrationState `json:"state,omitempty"`
	Time *FhirInstant `json:"time,omitempty"`
}

// NewDeviceMetricCalibration creates a new DeviceMetricCalibration instance.
func NewDeviceMetricCalibration() *DeviceMetricCalibration {
	return &DeviceMetricCalibration{}
}

// UnmarshalJSON populates DeviceMetricCalibration from JSON data.
func (m *DeviceMetricCalibration) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Type *DeviceMetricCalibrationType `json:"type,omitempty"`
		State *DeviceMetricCalibrationState `json:"state,omitempty"`
		Time *FhirInstant `json:"time,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Type = temp.Type
	m.State = temp.State
	m.Time = temp.Time
	return nil
}

// MarshalJSON converts DeviceMetricCalibration to JSON data.
func (m *DeviceMetricCalibration) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Type *DeviceMetricCalibrationType `json:"type,omitempty"`
		State *DeviceMetricCalibrationState `json:"state,omitempty"`
		Time interface{} `json:"time,omitempty"`
		TimeElement map[string]interface{} `json:"_time,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Type = m.Type
	output.State = m.State
	if m.Time != nil && m.Time.Value != nil {
		output.Time = m.Time.Value
		if m.Time.Element != nil {
			output.TimeElement = toMapOrNil(m.Time.Element.MarshalJSON())
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of DeviceMetricCalibration.
func (m *DeviceMetricCalibration) Clone() *DeviceMetricCalibration {
	if m == nil { return nil }
	return &DeviceMetricCalibration{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Type: m.Type.Clone(),
		State: m.State.Clone(),
		Time: m.Time.Clone(),
	}
}

// Equals checks equality between two DeviceMetricCalibration instances.
func (m *DeviceMetricCalibration) Equals(other *DeviceMetricCalibration) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.State.Equals(other.State) { return false }
	if !m.Time.Equals(other.Time) { return false }
	return true
}

