// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// AppointmentResponse
// A reply to an appointment request for a patient and/or practitioner(s), such as a confirmation or rejection.
type AppointmentResponse struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Appointment *Reference `json:"appointment,omitempty"`
	Start *FhirInstant `json:"start,omitempty"`
	End *FhirInstant `json:"end,omitempty"`
	ParticipantType []*CodeableConcept `json:"participanttype,omitempty"`
	Actor *Reference `json:"actor,omitempty"`
	ParticipantStatus *ParticipationStatus `json:"participantstatus,omitempty"`
	Comment *FhirString `json:"comment,omitempty"`
}

// NewAppointmentResponse creates a new AppointmentResponse instance.
func NewAppointmentResponse() *AppointmentResponse {
	return &AppointmentResponse{}
}

// UnmarshalJSON populates AppointmentResponse from JSON data.
func (m *AppointmentResponse) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Appointment *Reference `json:"appointment,omitempty"`
		Start *FhirInstant `json:"start,omitempty"`
		End *FhirInstant `json:"end,omitempty"`
		ParticipantType []*CodeableConcept `json:"participanttype,omitempty"`
		Actor *Reference `json:"actor,omitempty"`
		ParticipantStatus *ParticipationStatus `json:"participantstatus,omitempty"`
		Comment *FhirString `json:"comment,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Identifier = temp.Identifier
	m.Appointment = temp.Appointment
	m.Start = temp.Start
	m.End = temp.End
	m.ParticipantType = temp.ParticipantType
	m.Actor = temp.Actor
	m.ParticipantStatus = temp.ParticipantStatus
	m.Comment = temp.Comment
	return nil
}

// MarshalJSON converts AppointmentResponse to JSON data.
func (m *AppointmentResponse) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Appointment *Reference `json:"appointment,omitempty"`
		Start interface{} `json:"start,omitempty"`
		StartElement map[string]interface{} `json:"_start,omitempty"`
		End interface{} `json:"end,omitempty"`
		EndElement map[string]interface{} `json:"_end,omitempty"`
		ParticipantType []*CodeableConcept `json:"participanttype,omitempty"`
		Actor *Reference `json:"actor,omitempty"`
		ParticipantStatus *ParticipationStatus `json:"participantstatus,omitempty"`
		Comment interface{} `json:"comment,omitempty"`
		CommentElement map[string]interface{} `json:"_comment,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Identifier = m.Identifier
	output.Appointment = m.Appointment
	if m.Start != nil && m.Start.Value != nil {
		output.Start = m.Start.Value
		if m.Start.Element != nil {
			output.StartElement = toMapOrNil(m.Start.Element.MarshalJSON())
		}
	}
	if m.End != nil && m.End.Value != nil {
		output.End = m.End.Value
		if m.End.Element != nil {
			output.EndElement = toMapOrNil(m.End.Element.MarshalJSON())
		}
	}
	output.ParticipantType = m.ParticipantType
	output.Actor = m.Actor
	output.ParticipantStatus = m.ParticipantStatus
	if m.Comment != nil && m.Comment.Value != nil {
		output.Comment = m.Comment.Value
		if m.Comment.Element != nil {
			output.CommentElement = toMapOrNil(m.Comment.Element.MarshalJSON())
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of AppointmentResponse.
func (m *AppointmentResponse) Clone() *AppointmentResponse {
	if m == nil { return nil }
	return &AppointmentResponse{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Appointment: m.Appointment.Clone(),
		Start: m.Start.Clone(),
		End: m.End.Clone(),
		ParticipantType: cloneSlices(m.ParticipantType),
		Actor: m.Actor.Clone(),
		ParticipantStatus: m.ParticipantStatus.Clone(),
		Comment: m.Comment.Clone(),
	}
}

// Equals checks equality between two AppointmentResponse instances.
func (m *AppointmentResponse) Equals(other *AppointmentResponse) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Appointment.Equals(other.Appointment) { return false }
	if !m.Start.Equals(other.Start) { return false }
	if !m.End.Equals(other.End) { return false }
	if !compareSlices(m.ParticipantType, other.ParticipantType) { return false }
	if !m.Actor.Equals(other.Actor) { return false }
	if !m.ParticipantStatus.Equals(other.ParticipantStatus) { return false }
	if !m.Comment.Equals(other.Comment) { return false }
	return true
}

