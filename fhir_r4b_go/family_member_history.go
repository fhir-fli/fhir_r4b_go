// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
	"fmt"
)

// FamilyMemberHistory
// Significant health conditions for a person related to the patient relevant in the context of care for the patient.
type FamilyMemberHistory struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	InstantiatesCanonical []*FhirCanonical `json:"instantiatescanonical,omitempty"`
	InstantiatesUri []*FhirUri `json:"instantiatesuri,omitempty"`
	Status *FamilyHistoryStatus `json:"status,omitempty"`
	DataAbsentReason *CodeableConcept `json:"dataabsentreason,omitempty"`
	Patient *Reference `json:"patient,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Relationship *CodeableConcept `json:"relationship,omitempty"`
	Sex *CodeableConcept `json:"sex,omitempty"`
	BornPeriod *Period `json:"bornperiod,omitempty"`
	BornDate *FhirDate `json:"borndate,omitempty"`
	BornString *FhirString `json:"bornstring,omitempty"`
	AgeAge *Age `json:"ageage,omitempty"`
	AgeRange *Range `json:"agerange,omitempty"`
	AgeString *FhirString `json:"agestring,omitempty"`
	EstimatedAge *FhirBoolean `json:"estimatedage,omitempty"`
	DeceasedBoolean *FhirBoolean `json:"deceasedboolean,omitempty"`
	DeceasedAge *Age `json:"deceasedage,omitempty"`
	DeceasedRange *Range `json:"deceasedrange,omitempty"`
	DeceasedDate *FhirDate `json:"deceaseddate,omitempty"`
	DeceasedString *FhirString `json:"deceasedstring,omitempty"`
	ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
	ReasonReference []*Reference `json:"reasonreference,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
	Condition []*FamilyMemberHistoryCondition `json:"condition,omitempty"`
}

// NewFamilyMemberHistory creates a new FamilyMemberHistory instance.
func NewFamilyMemberHistory() *FamilyMemberHistory {
	return &FamilyMemberHistory{}
}

// UnmarshalJSON populates FamilyMemberHistory from JSON data.
func (m *FamilyMemberHistory) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		InstantiatesCanonical []interface{} `json:"instantiatescanonical,omitempty"`
		InstantiatesUri []interface{} `json:"instantiatesuri,omitempty"`
		Status *FamilyHistoryStatus `json:"status,omitempty"`
		DataAbsentReason *CodeableConcept `json:"dataabsentreason,omitempty"`
		Patient *Reference `json:"patient,omitempty"`
		Date *FhirDateTime `json:"date,omitempty"`
		Name *FhirString `json:"name,omitempty"`
		Relationship *CodeableConcept `json:"relationship,omitempty"`
		Sex *CodeableConcept `json:"sex,omitempty"`
		BornPeriod *Period `json:"bornperiod,omitempty"`
		BornDate *FhirDate `json:"borndate,omitempty"`
		BornString *FhirString `json:"bornstring,omitempty"`
		AgeAge *Age `json:"ageage,omitempty"`
		AgeRange *Range `json:"agerange,omitempty"`
		AgeString *FhirString `json:"agestring,omitempty"`
		EstimatedAge *FhirBoolean `json:"estimatedage,omitempty"`
		DeceasedBoolean *FhirBoolean `json:"deceasedboolean,omitempty"`
		DeceasedAge *Age `json:"deceasedage,omitempty"`
		DeceasedRange *Range `json:"deceasedrange,omitempty"`
		DeceasedDate *FhirDate `json:"deceaseddate,omitempty"`
		DeceasedString *FhirString `json:"deceasedstring,omitempty"`
		ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
		ReasonReference []*Reference `json:"reasonreference,omitempty"`
		Note []*Annotation `json:"note,omitempty"`
		Condition []*FamilyMemberHistoryCondition `json:"condition,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Identifier = temp.Identifier
	if len(temp.InstantiatesCanonical) > 0 {
		m.InstantiatesCanonical = make([]*FhirCanonical, len(temp.InstantiatesCanonical))
		for i := range temp.InstantiatesCanonical {
			itemMap, ok := temp.InstantiatesCanonical[i].(map[string]interface{})
			if !ok { return fmt.Errorf("invalid value for InstantiatesCanonical[%d]: expected map", i) }
			primitive, err := NewFhirCanonicalFromMap(itemMap)
			if err != nil { return fmt.Errorf("failed to parse InstantiatesCanonical[%d]: %v", i, err) }
			m.InstantiatesCanonical[i] = primitive
		}
	}
	if len(temp.InstantiatesUri) > 0 {
		m.InstantiatesUri = make([]*FhirUri, len(temp.InstantiatesUri))
		for i := range temp.InstantiatesUri {
			itemMap, ok := temp.InstantiatesUri[i].(map[string]interface{})
			if !ok { return fmt.Errorf("invalid value for InstantiatesUri[%d]: expected map", i) }
			primitive, err := NewFhirUriFromMap(itemMap)
			if err != nil { return fmt.Errorf("failed to parse InstantiatesUri[%d]: %v", i, err) }
			m.InstantiatesUri[i] = primitive
		}
	}
	m.Status = temp.Status
	m.DataAbsentReason = temp.DataAbsentReason
	m.Patient = temp.Patient
	m.Date = temp.Date
	m.Name = temp.Name
	m.Relationship = temp.Relationship
	m.Sex = temp.Sex
	m.BornPeriod = temp.BornPeriod
	m.BornDate = temp.BornDate
	m.BornString = temp.BornString
	m.AgeAge = temp.AgeAge
	m.AgeRange = temp.AgeRange
	m.AgeString = temp.AgeString
	m.EstimatedAge = temp.EstimatedAge
	m.DeceasedBoolean = temp.DeceasedBoolean
	m.DeceasedAge = temp.DeceasedAge
	m.DeceasedRange = temp.DeceasedRange
	m.DeceasedDate = temp.DeceasedDate
	m.DeceasedString = temp.DeceasedString
	m.ReasonCode = temp.ReasonCode
	m.ReasonReference = temp.ReasonReference
	m.Note = temp.Note
	m.Condition = temp.Condition
	return nil
}

// MarshalJSON converts FamilyMemberHistory to JSON data.
func (m *FamilyMemberHistory) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		InstantiatesCanonical []interface{} `json:"instantiatescanonical,omitempty"`
		InstantiatesCanonicalElement []map[string]interface{} `json:"_instantiatescanonical,omitempty"`
		InstantiatesUri []interface{} `json:"instantiatesuri,omitempty"`
		InstantiatesUriElement []map[string]interface{} `json:"_instantiatesuri,omitempty"`
		Status *FamilyHistoryStatus `json:"status,omitempty"`
		DataAbsentReason *CodeableConcept `json:"dataabsentreason,omitempty"`
		Patient *Reference `json:"patient,omitempty"`
		Date interface{} `json:"date,omitempty"`
		DateElement map[string]interface{} `json:"_date,omitempty"`
		Name interface{} `json:"name,omitempty"`
		NameElement map[string]interface{} `json:"_name,omitempty"`
		Relationship *CodeableConcept `json:"relationship,omitempty"`
		Sex *CodeableConcept `json:"sex,omitempty"`
		BornPeriod *Period `json:"bornperiod,omitempty"`
		BornDate interface{} `json:"borndate,omitempty"`
		BornDateElement map[string]interface{} `json:"_borndate,omitempty"`
		BornString interface{} `json:"bornstring,omitempty"`
		BornStringElement map[string]interface{} `json:"_bornstring,omitempty"`
		AgeAge *Age `json:"ageage,omitempty"`
		AgeRange *Range `json:"agerange,omitempty"`
		AgeString interface{} `json:"agestring,omitempty"`
		AgeStringElement map[string]interface{} `json:"_agestring,omitempty"`
		EstimatedAge interface{} `json:"estimatedage,omitempty"`
		EstimatedAgeElement map[string]interface{} `json:"_estimatedage,omitempty"`
		DeceasedBoolean interface{} `json:"deceasedboolean,omitempty"`
		DeceasedBooleanElement map[string]interface{} `json:"_deceasedboolean,omitempty"`
		DeceasedAge *Age `json:"deceasedage,omitempty"`
		DeceasedRange *Range `json:"deceasedrange,omitempty"`
		DeceasedDate interface{} `json:"deceaseddate,omitempty"`
		DeceasedDateElement map[string]interface{} `json:"_deceaseddate,omitempty"`
		DeceasedString interface{} `json:"deceasedstring,omitempty"`
		DeceasedStringElement map[string]interface{} `json:"_deceasedstring,omitempty"`
		ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
		ReasonReference []*Reference `json:"reasonreference,omitempty"`
		Note []*Annotation `json:"note,omitempty"`
		Condition []*FamilyMemberHistoryCondition `json:"condition,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Identifier = m.Identifier
	if len(m.InstantiatesCanonical) > 0 {
		output.InstantiatesCanonical = make([]interface{}, len(m.InstantiatesCanonical))
		output.InstantiatesCanonicalElement = make([]map[string]interface{}, len(m.InstantiatesCanonical))
		for i, item := range m.InstantiatesCanonical {
			if item != nil && item.Value != nil {
				output.InstantiatesCanonical[i] = item.Value
			}
			if item != nil && item.Element != nil {
				output.InstantiatesCanonicalElement[i] = toMapOrNil(item.Element.MarshalJSON())
			}
		}
	}
	if len(m.InstantiatesUri) > 0 {
		output.InstantiatesUri = make([]interface{}, len(m.InstantiatesUri))
		output.InstantiatesUriElement = make([]map[string]interface{}, len(m.InstantiatesUri))
		for i, item := range m.InstantiatesUri {
			if item != nil && item.Value != nil {
				output.InstantiatesUri[i] = item.Value
			}
			if item != nil && item.Element != nil {
				output.InstantiatesUriElement[i] = toMapOrNil(item.Element.MarshalJSON())
			}
		}
	}
	output.Status = m.Status
	output.DataAbsentReason = m.DataAbsentReason
	output.Patient = m.Patient
	if m.Date != nil && m.Date.Value != nil {
		output.Date = m.Date.Value
		if m.Date.Element != nil {
			output.DateElement = toMapOrNil(m.Date.Element.MarshalJSON())
		}
	}
	if m.Name != nil && m.Name.Value != nil {
		output.Name = m.Name.Value
		if m.Name.Element != nil {
			output.NameElement = toMapOrNil(m.Name.Element.MarshalJSON())
		}
	}
	output.Relationship = m.Relationship
	output.Sex = m.Sex
	output.BornPeriod = m.BornPeriod
	if m.BornDate != nil && m.BornDate.Value != nil {
		output.BornDate = m.BornDate.Value
		if m.BornDate.Element != nil {
			output.BornDateElement = toMapOrNil(m.BornDate.Element.MarshalJSON())
		}
	}
	if m.BornString != nil && m.BornString.Value != nil {
		output.BornString = m.BornString.Value
		if m.BornString.Element != nil {
			output.BornStringElement = toMapOrNil(m.BornString.Element.MarshalJSON())
		}
	}
	output.AgeAge = m.AgeAge
	output.AgeRange = m.AgeRange
	if m.AgeString != nil && m.AgeString.Value != nil {
		output.AgeString = m.AgeString.Value
		if m.AgeString.Element != nil {
			output.AgeStringElement = toMapOrNil(m.AgeString.Element.MarshalJSON())
		}
	}
	if m.EstimatedAge != nil && m.EstimatedAge.Value != nil {
		output.EstimatedAge = m.EstimatedAge.Value
		if m.EstimatedAge.Element != nil {
			output.EstimatedAgeElement = toMapOrNil(m.EstimatedAge.Element.MarshalJSON())
		}
	}
	if m.DeceasedBoolean != nil && m.DeceasedBoolean.Value != nil {
		output.DeceasedBoolean = m.DeceasedBoolean.Value
		if m.DeceasedBoolean.Element != nil {
			output.DeceasedBooleanElement = toMapOrNil(m.DeceasedBoolean.Element.MarshalJSON())
		}
	}
	output.DeceasedAge = m.DeceasedAge
	output.DeceasedRange = m.DeceasedRange
	if m.DeceasedDate != nil && m.DeceasedDate.Value != nil {
		output.DeceasedDate = m.DeceasedDate.Value
		if m.DeceasedDate.Element != nil {
			output.DeceasedDateElement = toMapOrNil(m.DeceasedDate.Element.MarshalJSON())
		}
	}
	if m.DeceasedString != nil && m.DeceasedString.Value != nil {
		output.DeceasedString = m.DeceasedString.Value
		if m.DeceasedString.Element != nil {
			output.DeceasedStringElement = toMapOrNil(m.DeceasedString.Element.MarshalJSON())
		}
	}
	output.ReasonCode = m.ReasonCode
	output.ReasonReference = m.ReasonReference
	output.Note = m.Note
	output.Condition = m.Condition
	return json.Marshal(output)
}

// Clone creates a deep copy of FamilyMemberHistory.
func (m *FamilyMemberHistory) Clone() *FamilyMemberHistory {
	if m == nil { return nil }
	return &FamilyMemberHistory{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		InstantiatesCanonical: cloneSlices(m.InstantiatesCanonical),
		InstantiatesUri: cloneSlices(m.InstantiatesUri),
		Status: m.Status.Clone(),
		DataAbsentReason: m.DataAbsentReason.Clone(),
		Patient: m.Patient.Clone(),
		Date: m.Date.Clone(),
		Name: m.Name.Clone(),
		Relationship: m.Relationship.Clone(),
		Sex: m.Sex.Clone(),
		BornPeriod: m.BornPeriod.Clone(),
		BornDate: m.BornDate.Clone(),
		BornString: m.BornString.Clone(),
		AgeAge: m.AgeAge.Clone(),
		AgeRange: m.AgeRange.Clone(),
		AgeString: m.AgeString.Clone(),
		EstimatedAge: m.EstimatedAge.Clone(),
		DeceasedBoolean: m.DeceasedBoolean.Clone(),
		DeceasedAge: m.DeceasedAge.Clone(),
		DeceasedRange: m.DeceasedRange.Clone(),
		DeceasedDate: m.DeceasedDate.Clone(),
		DeceasedString: m.DeceasedString.Clone(),
		ReasonCode: cloneSlices(m.ReasonCode),
		ReasonReference: cloneSlices(m.ReasonReference),
		Note: cloneSlices(m.Note),
		Condition: cloneSlices(m.Condition),
	}
}

// Equals checks equality between two FamilyMemberHistory instances.
func (m *FamilyMemberHistory) Equals(other *FamilyMemberHistory) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.InstantiatesCanonical, other.InstantiatesCanonical) { return false }
	if !compareSlices(m.InstantiatesUri, other.InstantiatesUri) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.DataAbsentReason.Equals(other.DataAbsentReason) { return false }
	if !m.Patient.Equals(other.Patient) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Relationship.Equals(other.Relationship) { return false }
	if !m.Sex.Equals(other.Sex) { return false }
	if !m.BornPeriod.Equals(other.BornPeriod) { return false }
	if !m.BornDate.Equals(other.BornDate) { return false }
	if !m.BornString.Equals(other.BornString) { return false }
	if !m.AgeAge.Equals(other.AgeAge) { return false }
	if !m.AgeRange.Equals(other.AgeRange) { return false }
	if !m.AgeString.Equals(other.AgeString) { return false }
	if !m.EstimatedAge.Equals(other.EstimatedAge) { return false }
	if !m.DeceasedBoolean.Equals(other.DeceasedBoolean) { return false }
	if !m.DeceasedAge.Equals(other.DeceasedAge) { return false }
	if !m.DeceasedRange.Equals(other.DeceasedRange) { return false }
	if !m.DeceasedDate.Equals(other.DeceasedDate) { return false }
	if !m.DeceasedString.Equals(other.DeceasedString) { return false }
	if !compareSlices(m.ReasonCode, other.ReasonCode) { return false }
	if !compareSlices(m.ReasonReference, other.ReasonReference) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	if !compareSlices(m.Condition, other.Condition) { return false }
	return true
}

// FamilyMemberHistoryCondition
// The significant Conditions (or condition) that the family member had. This is a repeating section to allow a system to represent more than one condition per resource, though there is nothing stopping multiple resources - one per condition.
type FamilyMemberHistoryCondition struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Outcome *CodeableConcept `json:"outcome,omitempty"`
	ContributedToDeath *FhirBoolean `json:"contributedtodeath,omitempty"`
	OnsetAge *Age `json:"onsetage,omitempty"`
	OnsetRange *Range `json:"onsetrange,omitempty"`
	OnsetPeriod *Period `json:"onsetperiod,omitempty"`
	OnsetString *FhirString `json:"onsetstring,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
}

// NewFamilyMemberHistoryCondition creates a new FamilyMemberHistoryCondition instance.
func NewFamilyMemberHistoryCondition() *FamilyMemberHistoryCondition {
	return &FamilyMemberHistoryCondition{}
}

// UnmarshalJSON populates FamilyMemberHistoryCondition from JSON data.
func (m *FamilyMemberHistoryCondition) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Code *CodeableConcept `json:"code,omitempty"`
		Outcome *CodeableConcept `json:"outcome,omitempty"`
		ContributedToDeath *FhirBoolean `json:"contributedtodeath,omitempty"`
		OnsetAge *Age `json:"onsetage,omitempty"`
		OnsetRange *Range `json:"onsetrange,omitempty"`
		OnsetPeriod *Period `json:"onsetperiod,omitempty"`
		OnsetString *FhirString `json:"onsetstring,omitempty"`
		Note []*Annotation `json:"note,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Code = temp.Code
	m.Outcome = temp.Outcome
	m.ContributedToDeath = temp.ContributedToDeath
	m.OnsetAge = temp.OnsetAge
	m.OnsetRange = temp.OnsetRange
	m.OnsetPeriod = temp.OnsetPeriod
	m.OnsetString = temp.OnsetString
	m.Note = temp.Note
	return nil
}

// MarshalJSON converts FamilyMemberHistoryCondition to JSON data.
func (m *FamilyMemberHistoryCondition) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Code *CodeableConcept `json:"code,omitempty"`
		Outcome *CodeableConcept `json:"outcome,omitempty"`
		ContributedToDeath interface{} `json:"contributedtodeath,omitempty"`
		ContributedToDeathElement map[string]interface{} `json:"_contributedtodeath,omitempty"`
		OnsetAge *Age `json:"onsetage,omitempty"`
		OnsetRange *Range `json:"onsetrange,omitempty"`
		OnsetPeriod *Period `json:"onsetperiod,omitempty"`
		OnsetString interface{} `json:"onsetstring,omitempty"`
		OnsetStringElement map[string]interface{} `json:"_onsetstring,omitempty"`
		Note []*Annotation `json:"note,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Code = m.Code
	output.Outcome = m.Outcome
	if m.ContributedToDeath != nil && m.ContributedToDeath.Value != nil {
		output.ContributedToDeath = m.ContributedToDeath.Value
		if m.ContributedToDeath.Element != nil {
			output.ContributedToDeathElement = toMapOrNil(m.ContributedToDeath.Element.MarshalJSON())
		}
	}
	output.OnsetAge = m.OnsetAge
	output.OnsetRange = m.OnsetRange
	output.OnsetPeriod = m.OnsetPeriod
	if m.OnsetString != nil && m.OnsetString.Value != nil {
		output.OnsetString = m.OnsetString.Value
		if m.OnsetString.Element != nil {
			output.OnsetStringElement = toMapOrNil(m.OnsetString.Element.MarshalJSON())
		}
	}
	output.Note = m.Note
	return json.Marshal(output)
}

// Clone creates a deep copy of FamilyMemberHistoryCondition.
func (m *FamilyMemberHistoryCondition) Clone() *FamilyMemberHistoryCondition {
	if m == nil { return nil }
	return &FamilyMemberHistoryCondition{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Code: m.Code.Clone(),
		Outcome: m.Outcome.Clone(),
		ContributedToDeath: m.ContributedToDeath.Clone(),
		OnsetAge: m.OnsetAge.Clone(),
		OnsetRange: m.OnsetRange.Clone(),
		OnsetPeriod: m.OnsetPeriod.Clone(),
		OnsetString: m.OnsetString.Clone(),
		Note: cloneSlices(m.Note),
	}
}

// Equals checks equality between two FamilyMemberHistoryCondition instances.
func (m *FamilyMemberHistoryCondition) Equals(other *FamilyMemberHistoryCondition) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Outcome.Equals(other.Outcome) { return false }
	if !m.ContributedToDeath.Equals(other.ContributedToDeath) { return false }
	if !m.OnsetAge.Equals(other.OnsetAge) { return false }
	if !m.OnsetRange.Equals(other.OnsetRange) { return false }
	if !m.OnsetPeriod.Equals(other.OnsetPeriod) { return false }
	if !m.OnsetString.Equals(other.OnsetString) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	return true
}

