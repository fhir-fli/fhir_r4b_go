// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// AuditEvent
// A record of an event made for purposes of maintaining a security log. Typical uses include detection of intrusion attempts and monitoring for inappropriate usage.
type AuditEvent struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Type *Coding `json:"type,omitempty"`
	Subtype []*Coding `json:"subtype,omitempty"`
	Action *AuditEventAction `json:"action,omitempty"`
	Period *Period `json:"period,omitempty"`
	Recorded *FhirInstant `json:"recorded,omitempty"`
	Outcome *AuditEventOutcome `json:"outcome,omitempty"`
	OutcomeDesc *FhirString `json:"outcomedesc,omitempty"`
	PurposeOfEvent []*CodeableConcept `json:"purposeofevent,omitempty"`
	Agent []*AuditEventAgent `json:"agent,omitempty"`
	Source *AuditEventSource `json:"source,omitempty"`
	Entity []*AuditEventEntity `json:"entity,omitempty"`
}

// NewAuditEvent creates a new AuditEvent instance
func NewAuditEvent() *AuditEvent {
	return &AuditEvent{}
}

// FromJSON populates AuditEvent from JSON data
func (m *AuditEvent) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts AuditEvent to JSON data
func (m *AuditEvent) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of AuditEvent
func (m *AuditEvent) Clone() *AuditEvent {
	if m == nil { return nil }
	return &AuditEvent{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Type: m.Type.Clone(),
		Subtype: cloneSlices(m.Subtype),
		Action: m.Action.Clone(),
		Period: m.Period.Clone(),
		Recorded: m.Recorded.Clone(),
		Outcome: m.Outcome.Clone(),
		OutcomeDesc: m.OutcomeDesc.Clone(),
		PurposeOfEvent: cloneSlices(m.PurposeOfEvent),
		Agent: cloneSlices(m.Agent),
		Source: m.Source.Clone(),
		Entity: cloneSlices(m.Entity),
	}
}

// Equals checks for equality with another AuditEvent instance
func (m *AuditEvent) Equals(other *AuditEvent) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !compareSlices(m.Subtype, other.Subtype) { return false }
	if !m.Action.Equals(other.Action) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !m.Recorded.Equals(other.Recorded) { return false }
	if !m.Outcome.Equals(other.Outcome) { return false }
	if !m.OutcomeDesc.Equals(other.OutcomeDesc) { return false }
	if !compareSlices(m.PurposeOfEvent, other.PurposeOfEvent) { return false }
	if !compareSlices(m.Agent, other.Agent) { return false }
	if !m.Source.Equals(other.Source) { return false }
	if !compareSlices(m.Entity, other.Entity) { return false }
	return true
}

// AuditEventAgent
// An actor taking an active role in the event or activity that is logged.
type AuditEventAgent struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	Role []*CodeableConcept `json:"role,omitempty"`
	Who *Reference `json:"who,omitempty"`
	AltId *FhirString `json:"altid,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Requestor *FhirBoolean `json:"requestor,omitempty"`
	Location *Reference `json:"location,omitempty"`
	Policy []*FhirUri `json:"policy,omitempty"`
	Media *Coding `json:"media,omitempty"`
	Network *AuditEventNetwork `json:"network,omitempty"`
	PurposeOfUse []*CodeableConcept `json:"purposeofuse,omitempty"`
}

// NewAuditEventAgent creates a new AuditEventAgent instance
func NewAuditEventAgent() *AuditEventAgent {
	return &AuditEventAgent{}
}

// FromJSON populates AuditEventAgent from JSON data
func (m *AuditEventAgent) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts AuditEventAgent to JSON data
func (m *AuditEventAgent) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of AuditEventAgent
func (m *AuditEventAgent) Clone() *AuditEventAgent {
	if m == nil { return nil }
	return &AuditEventAgent{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Type: m.Type.Clone(),
		Role: cloneSlices(m.Role),
		Who: m.Who.Clone(),
		AltId: m.AltId.Clone(),
		Name: m.Name.Clone(),
		Requestor: m.Requestor.Clone(),
		Location: m.Location.Clone(),
		Policy: cloneSlices(m.Policy),
		Media: m.Media.Clone(),
		Network: m.Network.Clone(),
		PurposeOfUse: cloneSlices(m.PurposeOfUse),
	}
}

// Equals checks for equality with another AuditEventAgent instance
func (m *AuditEventAgent) Equals(other *AuditEventAgent) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !compareSlices(m.Role, other.Role) { return false }
	if !m.Who.Equals(other.Who) { return false }
	if !m.AltId.Equals(other.AltId) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Requestor.Equals(other.Requestor) { return false }
	if !m.Location.Equals(other.Location) { return false }
	if !compareSlices(m.Policy, other.Policy) { return false }
	if !m.Media.Equals(other.Media) { return false }
	if !m.Network.Equals(other.Network) { return false }
	if !compareSlices(m.PurposeOfUse, other.PurposeOfUse) { return false }
	return true
}

// AuditEventNetwork
// Logical network location for application activity, if the activity has a network location.
type AuditEventNetwork struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Address *FhirString `json:"address,omitempty"`
	Type *AuditEventAgentNetworkType `json:"type,omitempty"`
}

// NewAuditEventNetwork creates a new AuditEventNetwork instance
func NewAuditEventNetwork() *AuditEventNetwork {
	return &AuditEventNetwork{}
}

// FromJSON populates AuditEventNetwork from JSON data
func (m *AuditEventNetwork) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts AuditEventNetwork to JSON data
func (m *AuditEventNetwork) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of AuditEventNetwork
func (m *AuditEventNetwork) Clone() *AuditEventNetwork {
	if m == nil { return nil }
	return &AuditEventNetwork{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Address: m.Address.Clone(),
		Type: m.Type.Clone(),
	}
}

// Equals checks for equality with another AuditEventNetwork instance
func (m *AuditEventNetwork) Equals(other *AuditEventNetwork) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Address.Equals(other.Address) { return false }
	if !m.Type.Equals(other.Type) { return false }
	return true
}

// AuditEventSource
// The system that is reporting the event.
type AuditEventSource struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Site *FhirString `json:"site,omitempty"`
	Observer *Reference `json:"observer,omitempty"`
	Type []*Coding `json:"type,omitempty"`
}

// NewAuditEventSource creates a new AuditEventSource instance
func NewAuditEventSource() *AuditEventSource {
	return &AuditEventSource{}
}

// FromJSON populates AuditEventSource from JSON data
func (m *AuditEventSource) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts AuditEventSource to JSON data
func (m *AuditEventSource) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of AuditEventSource
func (m *AuditEventSource) Clone() *AuditEventSource {
	if m == nil { return nil }
	return &AuditEventSource{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Site: m.Site.Clone(),
		Observer: m.Observer.Clone(),
		Type: cloneSlices(m.Type),
	}
}

// Equals checks for equality with another AuditEventSource instance
func (m *AuditEventSource) Equals(other *AuditEventSource) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Site.Equals(other.Site) { return false }
	if !m.Observer.Equals(other.Observer) { return false }
	if !compareSlices(m.Type, other.Type) { return false }
	return true
}

// AuditEventEntity
// Specific instances of data or objects that have been accessed.
type AuditEventEntity struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	What *Reference `json:"what,omitempty"`
	Type *Coding `json:"type,omitempty"`
	Role *Coding `json:"role,omitempty"`
	Lifecycle *Coding `json:"lifecycle,omitempty"`
	SecurityLabel []*Coding `json:"securitylabel,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Query *FhirBase64Binary `json:"query,omitempty"`
	Detail []*AuditEventDetail `json:"detail,omitempty"`
}

// NewAuditEventEntity creates a new AuditEventEntity instance
func NewAuditEventEntity() *AuditEventEntity {
	return &AuditEventEntity{}
}

// FromJSON populates AuditEventEntity from JSON data
func (m *AuditEventEntity) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts AuditEventEntity to JSON data
func (m *AuditEventEntity) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of AuditEventEntity
func (m *AuditEventEntity) Clone() *AuditEventEntity {
	if m == nil { return nil }
	return &AuditEventEntity{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		What: m.What.Clone(),
		Type: m.Type.Clone(),
		Role: m.Role.Clone(),
		Lifecycle: m.Lifecycle.Clone(),
		SecurityLabel: cloneSlices(m.SecurityLabel),
		Name: m.Name.Clone(),
		Description: m.Description.Clone(),
		Query: m.Query.Clone(),
		Detail: cloneSlices(m.Detail),
	}
}

// Equals checks for equality with another AuditEventEntity instance
func (m *AuditEventEntity) Equals(other *AuditEventEntity) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.What.Equals(other.What) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Role.Equals(other.Role) { return false }
	if !m.Lifecycle.Equals(other.Lifecycle) { return false }
	if !compareSlices(m.SecurityLabel, other.SecurityLabel) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !m.Query.Equals(other.Query) { return false }
	if !compareSlices(m.Detail, other.Detail) { return false }
	return true
}

// AuditEventDetail
// Tagged value pairs for conveying additional information about the entity.
type AuditEventDetail struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Type *FhirString `json:"type,omitempty"`
	ValueString *FhirString `json:"valuestring,omitempty"`
	ValueBase64Binary *FhirBase64Binary `json:"valuebase64binary,omitempty"`
}

// NewAuditEventDetail creates a new AuditEventDetail instance
func NewAuditEventDetail() *AuditEventDetail {
	return &AuditEventDetail{}
}

// FromJSON populates AuditEventDetail from JSON data
func (m *AuditEventDetail) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts AuditEventDetail to JSON data
func (m *AuditEventDetail) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of AuditEventDetail
func (m *AuditEventDetail) Clone() *AuditEventDetail {
	if m == nil { return nil }
	return &AuditEventDetail{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Type: m.Type.Clone(),
		ValueString: m.ValueString.Clone(),
		ValueBase64Binary: m.ValueBase64Binary.Clone(),
	}
}

// Equals checks for equality with another AuditEventDetail instance
func (m *AuditEventDetail) Equals(other *AuditEventDetail) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.ValueString.Equals(other.ValueString) { return false }
	if !m.ValueBase64Binary.Equals(other.ValueBase64Binary) { return false }
	return true
}

