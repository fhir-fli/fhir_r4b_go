// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Account
// A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
type Account struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *AccountStatus `json:"status,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Subject []*Reference `json:"subject,omitempty"`
	ServicePeriod *Period `json:"serviceperiod,omitempty"`
	Coverage []*AccountCoverage `json:"coverage,omitempty"`
	Owner *Reference `json:"owner,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Guarantor []*AccountGuarantor `json:"guarantor,omitempty"`
	PartOf *Reference `json:"partof,omitempty"`
}

// NewAccount creates a new Account instance
func NewAccount() *Account {
	return &Account{}
}

// FromJSON populates Account from JSON data
func (m *Account) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Account to JSON data
func (m *Account) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Account
func (m *Account) Clone() *Account {
	if m == nil { return nil }
	return &Account{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		Type: m.Type.Clone(),
		Name: m.Name.Clone(),
		Subject: cloneSlices(m.Subject),
		ServicePeriod: m.ServicePeriod.Clone(),
		Coverage: cloneSlices(m.Coverage),
		Owner: m.Owner.Clone(),
		Description: m.Description.Clone(),
		Guarantor: cloneSlices(m.Guarantor),
		PartOf: m.PartOf.Clone(),
	}
}

// Equals checks for equality with another Account instance
func (m *Account) Equals(other *Account) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !compareSlices(m.Subject, other.Subject) { return false }
	if !m.ServicePeriod.Equals(other.ServicePeriod) { return false }
	if !compareSlices(m.Coverage, other.Coverage) { return false }
	if !m.Owner.Equals(other.Owner) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.Guarantor, other.Guarantor) { return false }
	if !m.PartOf.Equals(other.PartOf) { return false }
	return true
}

// AccountCoverage
// The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account.
type AccountCoverage struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Coverage *Reference `json:"coverage,omitempty"`
	Priority *FhirPositiveInt `json:"priority,omitempty"`
}

// NewAccountCoverage creates a new AccountCoverage instance
func NewAccountCoverage() *AccountCoverage {
	return &AccountCoverage{}
}

// FromJSON populates AccountCoverage from JSON data
func (m *AccountCoverage) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts AccountCoverage to JSON data
func (m *AccountCoverage) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of AccountCoverage
func (m *AccountCoverage) Clone() *AccountCoverage {
	if m == nil { return nil }
	return &AccountCoverage{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Coverage: m.Coverage.Clone(),
		Priority: m.Priority.Clone(),
	}
}

// Equals checks for equality with another AccountCoverage instance
func (m *AccountCoverage) Equals(other *AccountCoverage) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Coverage.Equals(other.Coverage) { return false }
	if !m.Priority.Equals(other.Priority) { return false }
	return true
}

// AccountGuarantor
// The parties responsible for balancing the account if other payment options fall short.
type AccountGuarantor struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Party *Reference `json:"party,omitempty"`
	OnHold *FhirBoolean `json:"onhold,omitempty"`
	Period *Period `json:"period,omitempty"`
}

// NewAccountGuarantor creates a new AccountGuarantor instance
func NewAccountGuarantor() *AccountGuarantor {
	return &AccountGuarantor{}
}

// FromJSON populates AccountGuarantor from JSON data
func (m *AccountGuarantor) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts AccountGuarantor to JSON data
func (m *AccountGuarantor) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of AccountGuarantor
func (m *AccountGuarantor) Clone() *AccountGuarantor {
	if m == nil { return nil }
	return &AccountGuarantor{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Party: m.Party.Clone(),
		OnHold: m.OnHold.Clone(),
		Period: m.Period.Clone(),
	}
}

// Equals checks for equality with another AccountGuarantor instance
func (m *AccountGuarantor) Equals(other *AccountGuarantor) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Party.Equals(other.Party) { return false }
	if !m.OnHold.Equals(other.OnHold) { return false }
	if !m.Period.Equals(other.Period) { return false }
	return true
}

