// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// Account
// A financial tool for tracking value accrued for a particular purpose.  In the healthcare field, used to track charges for a patient, cost centers, etc.
type Account struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Status *AccountStatus `json:"status,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Subject []*Reference `json:"subject,omitempty"`
	ServicePeriod *Period `json:"serviceperiod,omitempty"`
	Coverage []*AccountCoverage `json:"coverage,omitempty"`
	Owner *Reference `json:"owner,omitempty"`
	Description *FhirString `json:"description,omitempty"`
	Guarantor []*AccountGuarantor `json:"guarantor,omitempty"`
	PartOf *Reference `json:"partof,omitempty"`
}

// NewAccount creates a new Account instance.
func NewAccount() *Account {
	return &Account{}
}

// UnmarshalJSON populates Account from JSON data.
func (m *Account) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Status *AccountStatus `json:"status,omitempty"`
		Type *CodeableConcept `json:"type,omitempty"`
		Name *FhirString `json:"name,omitempty"`
		Subject []*Reference `json:"subject,omitempty"`
		ServicePeriod *Period `json:"serviceperiod,omitempty"`
		Coverage []*AccountCoverage `json:"coverage,omitempty"`
		Owner *Reference `json:"owner,omitempty"`
		Description *FhirString `json:"description,omitempty"`
		Guarantor []*AccountGuarantor `json:"guarantor,omitempty"`
		PartOf *Reference `json:"partof,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Identifier = temp.Identifier
	m.Status = temp.Status
	m.Type = temp.Type
	m.Name = temp.Name
	m.Subject = temp.Subject
	m.ServicePeriod = temp.ServicePeriod
	m.Coverage = temp.Coverage
	m.Owner = temp.Owner
	m.Description = temp.Description
	m.Guarantor = temp.Guarantor
	m.PartOf = temp.PartOf
	return nil
}

// MarshalJSON converts Account to JSON data.
func (m *Account) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Status *AccountStatus `json:"status,omitempty"`
		Type *CodeableConcept `json:"type,omitempty"`
		Name interface{} `json:"name,omitempty"`
		NameElement map[string]interface{} `json:"_name,omitempty"`
		Subject []*Reference `json:"subject,omitempty"`
		ServicePeriod *Period `json:"serviceperiod,omitempty"`
		Coverage []*AccountCoverage `json:"coverage,omitempty"`
		Owner *Reference `json:"owner,omitempty"`
		Description interface{} `json:"description,omitempty"`
		DescriptionElement map[string]interface{} `json:"_description,omitempty"`
		Guarantor []*AccountGuarantor `json:"guarantor,omitempty"`
		PartOf *Reference `json:"partof,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.MarshalJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Identifier = m.Identifier
	output.Status = m.Status
	output.Type = m.Type
	if m.Name != nil && m.Name.Value != nil {
		output.Name = m.Name.Value
		if m.Name.Element != nil {
			output.NameElement = toMapOrNil(m.Name.Element.MarshalJSON())
		}
	}
	output.Subject = m.Subject
	output.ServicePeriod = m.ServicePeriod
	output.Coverage = m.Coverage
	output.Owner = m.Owner
	if m.Description != nil && m.Description.Value != nil {
		output.Description = m.Description.Value
		if m.Description.Element != nil {
			output.DescriptionElement = toMapOrNil(m.Description.Element.MarshalJSON())
		}
	}
	output.Guarantor = m.Guarantor
	output.PartOf = m.PartOf
	return json.Marshal(output)
}

// Clone creates a deep copy of Account.
func (m *Account) Clone() *Account {
	if m == nil { return nil }
	return &Account{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Status: m.Status.Clone(),
		Type: m.Type.Clone(),
		Name: m.Name.Clone(),
		Subject: cloneSlices(m.Subject),
		ServicePeriod: m.ServicePeriod.Clone(),
		Coverage: cloneSlices(m.Coverage),
		Owner: m.Owner.Clone(),
		Description: m.Description.Clone(),
		Guarantor: cloneSlices(m.Guarantor),
		PartOf: m.PartOf.Clone(),
	}
}

// Equals checks equality between two Account instances.
func (m *Account) Equals(other *Account) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !compareSlices(m.Subject, other.Subject) { return false }
	if !m.ServicePeriod.Equals(other.ServicePeriod) { return false }
	if !compareSlices(m.Coverage, other.Coverage) { return false }
	if !m.Owner.Equals(other.Owner) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.Guarantor, other.Guarantor) { return false }
	if !m.PartOf.Equals(other.PartOf) { return false }
	return true
}

// AccountCoverage
// The party(s) that are responsible for covering the payment of this account, and what order should they be applied to the account.
type AccountCoverage struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Coverage *Reference `json:"coverage,omitempty"`
	Priority *FhirPositiveInt `json:"priority,omitempty"`
}

// NewAccountCoverage creates a new AccountCoverage instance.
func NewAccountCoverage() *AccountCoverage {
	return &AccountCoverage{}
}

// UnmarshalJSON populates AccountCoverage from JSON data.
func (m *AccountCoverage) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Coverage *Reference `json:"coverage,omitempty"`
		Priority *FhirPositiveInt `json:"priority,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Coverage = temp.Coverage
	m.Priority = temp.Priority
	return nil
}

// MarshalJSON converts AccountCoverage to JSON data.
func (m *AccountCoverage) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Coverage *Reference `json:"coverage,omitempty"`
		Priority interface{} `json:"priority,omitempty"`
		PriorityElement map[string]interface{} `json:"_priority,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Coverage = m.Coverage
	if m.Priority != nil && m.Priority.Value != nil {
		output.Priority = m.Priority.Value
		if m.Priority.Element != nil {
			output.PriorityElement = toMapOrNil(m.Priority.Element.MarshalJSON())
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of AccountCoverage.
func (m *AccountCoverage) Clone() *AccountCoverage {
	if m == nil { return nil }
	return &AccountCoverage{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Coverage: m.Coverage.Clone(),
		Priority: m.Priority.Clone(),
	}
}

// Equals checks equality between two AccountCoverage instances.
func (m *AccountCoverage) Equals(other *AccountCoverage) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Coverage.Equals(other.Coverage) { return false }
	if !m.Priority.Equals(other.Priority) { return false }
	return true
}

// AccountGuarantor
// The parties responsible for balancing the account if other payment options fall short.
type AccountGuarantor struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Party *Reference `json:"party,omitempty"`
	OnHold *FhirBoolean `json:"onhold,omitempty"`
	Period *Period `json:"period,omitempty"`
}

// NewAccountGuarantor creates a new AccountGuarantor instance.
func NewAccountGuarantor() *AccountGuarantor {
	return &AccountGuarantor{}
}

// UnmarshalJSON populates AccountGuarantor from JSON data.
func (m *AccountGuarantor) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Party *Reference `json:"party,omitempty"`
		OnHold *FhirBoolean `json:"onhold,omitempty"`
		Period *Period `json:"period,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Party = temp.Party
	m.OnHold = temp.OnHold
	m.Period = temp.Period
	return nil
}

// MarshalJSON converts AccountGuarantor to JSON data.
func (m *AccountGuarantor) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Party *Reference `json:"party,omitempty"`
		OnHold interface{} `json:"onhold,omitempty"`
		OnHoldElement map[string]interface{} `json:"_onhold,omitempty"`
		Period *Period `json:"period,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Party = m.Party
	if m.OnHold != nil && m.OnHold.Value != nil {
		output.OnHold = m.OnHold.Value
		if m.OnHold.Element != nil {
			output.OnHoldElement = toMapOrNil(m.OnHold.Element.MarshalJSON())
		}
	}
	output.Period = m.Period
	return json.Marshal(output)
}

// Clone creates a deep copy of AccountGuarantor.
func (m *AccountGuarantor) Clone() *AccountGuarantor {
	if m == nil { return nil }
	return &AccountGuarantor{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Party: m.Party.Clone(),
		OnHold: m.OnHold.Clone(),
		Period: m.Period.Clone(),
	}
}

// Equals checks equality between two AccountGuarantor instances.
func (m *AccountGuarantor) Equals(other *AccountGuarantor) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Party.Equals(other.Party) { return false }
	if !m.OnHold.Equals(other.OnHold) { return false }
	if !m.Period.Equals(other.Period) { return false }
	return true
}

