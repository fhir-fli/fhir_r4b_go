// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// CommunicationRequest
// A request to convey information; e.g. the CDS system proposes that an alert be sent to a responsible provider, the CDS system proposes that the public health agency be notified about a reportable condition.
type CommunicationRequest struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	BasedOn []*Reference `json:"basedon,omitempty"`
	Replaces []*Reference `json:"replaces,omitempty"`
	GroupIdentifier *Identifier `json:"groupidentifier,omitempty"`
	Status *RequestStatus `json:"status,omitempty"`
	StatusReason *CodeableConcept `json:"statusreason,omitempty"`
	Category []*CodeableConcept `json:"category,omitempty"`
	Priority *RequestPriority `json:"priority,omitempty"`
	DoNotPerform *FhirBoolean `json:"donotperform,omitempty"`
	Medium []*CodeableConcept `json:"medium,omitempty"`
	Subject *Reference `json:"subject,omitempty"`
	About []*Reference `json:"about,omitempty"`
	Encounter *Reference `json:"encounter,omitempty"`
	Payload []*CommunicationRequestPayload `json:"payload,omitempty"`
	OccurrenceDateTime *FhirDateTime `json:"occurrencedatetime,omitempty"`
	OccurrencePeriod *Period `json:"occurrenceperiod,omitempty"`
	AuthoredOn *FhirDateTime `json:"authoredon,omitempty"`
	Requester *Reference `json:"requester,omitempty"`
	Recipient []*Reference `json:"recipient,omitempty"`
	Sender *Reference `json:"sender,omitempty"`
	ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
	ReasonReference []*Reference `json:"reasonreference,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
}

// NewCommunicationRequest creates a new CommunicationRequest instance.
func NewCommunicationRequest() *CommunicationRequest {
	return &CommunicationRequest{}
}

// FromJSON populates CommunicationRequest from JSON data.
func (m *CommunicationRequest) FromJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		BasedOn []*Reference `json:"basedon,omitempty"`
		Replaces []*Reference `json:"replaces,omitempty"`
		GroupIdentifier *Identifier `json:"groupidentifier,omitempty"`
		Status *RequestStatus `json:"status,omitempty"`
		StatusReason *CodeableConcept `json:"statusreason,omitempty"`
		Category []*CodeableConcept `json:"category,omitempty"`
		Priority *RequestPriority `json:"priority,omitempty"`
		DoNotPerform *FhirBoolean `json:"donotperform,omitempty"`
		Medium []*CodeableConcept `json:"medium,omitempty"`
		Subject *Reference `json:"subject,omitempty"`
		About []*Reference `json:"about,omitempty"`
		Encounter *Reference `json:"encounter,omitempty"`
		Payload []*CommunicationRequestPayload `json:"payload,omitempty"`
		OccurrenceDateTime *FhirDateTime `json:"occurrencedatetime,omitempty"`
		OccurrencePeriod *Period `json:"occurrenceperiod,omitempty"`
		AuthoredOn *FhirDateTime `json:"authoredon,omitempty"`
		Requester *Reference `json:"requester,omitempty"`
		Recipient []*Reference `json:"recipient,omitempty"`
		Sender *Reference `json:"sender,omitempty"`
		ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
		ReasonReference []*Reference `json:"reasonreference,omitempty"`
		Note []*Annotation `json:"note,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Identifier = temp.Identifier
	m.BasedOn = temp.BasedOn
	m.Replaces = temp.Replaces
	m.GroupIdentifier = temp.GroupIdentifier
	m.Status = temp.Status
	m.StatusReason = temp.StatusReason
	m.Category = temp.Category
	m.Priority = temp.Priority
	m.DoNotPerform = temp.DoNotPerform
	m.Medium = temp.Medium
	m.Subject = temp.Subject
	m.About = temp.About
	m.Encounter = temp.Encounter
	m.Payload = temp.Payload
	m.OccurrenceDateTime = temp.OccurrenceDateTime
	m.OccurrencePeriod = temp.OccurrencePeriod
	m.AuthoredOn = temp.AuthoredOn
	m.Requester = temp.Requester
	m.Recipient = temp.Recipient
	m.Sender = temp.Sender
	m.ReasonCode = temp.ReasonCode
	m.ReasonReference = temp.ReasonReference
	m.Note = temp.Note
	return nil
}

// ToJSON converts CommunicationRequest to JSON data.
func (m *CommunicationRequest) ToJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		BasedOn []*Reference `json:"basedon,omitempty"`
		Replaces []*Reference `json:"replaces,omitempty"`
		GroupIdentifier *Identifier `json:"groupidentifier,omitempty"`
		Status *RequestStatus `json:"status,omitempty"`
		StatusReason *CodeableConcept `json:"statusreason,omitempty"`
		Category []*CodeableConcept `json:"category,omitempty"`
		Priority *RequestPriority `json:"priority,omitempty"`
		DoNotPerform interface{} `json:"donotperform,omitempty"`
		DoNotPerformElement map[string]interface{} `json:"_donotperform,omitempty"`
		Medium []*CodeableConcept `json:"medium,omitempty"`
		Subject *Reference `json:"subject,omitempty"`
		About []*Reference `json:"about,omitempty"`
		Encounter *Reference `json:"encounter,omitempty"`
		Payload []*CommunicationRequestPayload `json:"payload,omitempty"`
		OccurrenceDateTime interface{} `json:"occurrencedatetime,omitempty"`
		OccurrenceDateTimeElement map[string]interface{} `json:"_occurrencedatetime,omitempty"`
		OccurrencePeriod *Period `json:"occurrenceperiod,omitempty"`
		AuthoredOn interface{} `json:"authoredon,omitempty"`
		AuthoredOnElement map[string]interface{} `json:"_authoredon,omitempty"`
		Requester *Reference `json:"requester,omitempty"`
		Recipient []*Reference `json:"recipient,omitempty"`
		Sender *Reference `json:"sender,omitempty"`
		ReasonCode []*CodeableConcept `json:"reasoncode,omitempty"`
		ReasonReference []*Reference `json:"reasonreference,omitempty"`
		Note []*Annotation `json:"note,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.ToJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.ToJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	output.Identifier = m.Identifier
	output.BasedOn = m.BasedOn
	output.Replaces = m.Replaces
	output.GroupIdentifier = m.GroupIdentifier
	output.Status = m.Status
	output.StatusReason = m.StatusReason
	output.Category = m.Category
	output.Priority = m.Priority
	if m.DoNotPerform != nil && m.DoNotPerform.Value != nil {
		output.DoNotPerform = m.DoNotPerform.Value
		if m.DoNotPerform.Element != nil {
			output.DoNotPerformElement = toMapOrNil(m.DoNotPerform.Element.ToJSON())
		}
	}
	output.Medium = m.Medium
	output.Subject = m.Subject
	output.About = m.About
	output.Encounter = m.Encounter
	output.Payload = m.Payload
	if m.OccurrenceDateTime != nil && m.OccurrenceDateTime.Value != nil {
		output.OccurrenceDateTime = m.OccurrenceDateTime.Value
		if m.OccurrenceDateTime.Element != nil {
			output.OccurrenceDateTimeElement = toMapOrNil(m.OccurrenceDateTime.Element.ToJSON())
		}
	}
	output.OccurrencePeriod = m.OccurrencePeriod
	if m.AuthoredOn != nil && m.AuthoredOn.Value != nil {
		output.AuthoredOn = m.AuthoredOn.Value
		if m.AuthoredOn.Element != nil {
			output.AuthoredOnElement = toMapOrNil(m.AuthoredOn.Element.ToJSON())
		}
	}
	output.Requester = m.Requester
	output.Recipient = m.Recipient
	output.Sender = m.Sender
	output.ReasonCode = m.ReasonCode
	output.ReasonReference = m.ReasonReference
	output.Note = m.Note
	return json.Marshal(output)
}

// Clone creates a deep copy of CommunicationRequest.
func (m *CommunicationRequest) Clone() *CommunicationRequest {
	if m == nil { return nil }
	return &CommunicationRequest{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		BasedOn: cloneSlices(m.BasedOn),
		Replaces: cloneSlices(m.Replaces),
		GroupIdentifier: m.GroupIdentifier.Clone(),
		Status: m.Status.Clone(),
		StatusReason: m.StatusReason.Clone(),
		Category: cloneSlices(m.Category),
		Priority: m.Priority.Clone(),
		DoNotPerform: m.DoNotPerform.Clone(),
		Medium: cloneSlices(m.Medium),
		Subject: m.Subject.Clone(),
		About: cloneSlices(m.About),
		Encounter: m.Encounter.Clone(),
		Payload: cloneSlices(m.Payload),
		OccurrenceDateTime: m.OccurrenceDateTime.Clone(),
		OccurrencePeriod: m.OccurrencePeriod.Clone(),
		AuthoredOn: m.AuthoredOn.Clone(),
		Requester: m.Requester.Clone(),
		Recipient: cloneSlices(m.Recipient),
		Sender: m.Sender.Clone(),
		ReasonCode: cloneSlices(m.ReasonCode),
		ReasonReference: cloneSlices(m.ReasonReference),
		Note: cloneSlices(m.Note),
	}
}

// Equals checks equality between two CommunicationRequest instances.
func (m *CommunicationRequest) Equals(other *CommunicationRequest) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.BasedOn, other.BasedOn) { return false }
	if !compareSlices(m.Replaces, other.Replaces) { return false }
	if !m.GroupIdentifier.Equals(other.GroupIdentifier) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.StatusReason.Equals(other.StatusReason) { return false }
	if !compareSlices(m.Category, other.Category) { return false }
	if !m.Priority.Equals(other.Priority) { return false }
	if !m.DoNotPerform.Equals(other.DoNotPerform) { return false }
	if !compareSlices(m.Medium, other.Medium) { return false }
	if !m.Subject.Equals(other.Subject) { return false }
	if !compareSlices(m.About, other.About) { return false }
	if !m.Encounter.Equals(other.Encounter) { return false }
	if !compareSlices(m.Payload, other.Payload) { return false }
	if !m.OccurrenceDateTime.Equals(other.OccurrenceDateTime) { return false }
	if !m.OccurrencePeriod.Equals(other.OccurrencePeriod) { return false }
	if !m.AuthoredOn.Equals(other.AuthoredOn) { return false }
	if !m.Requester.Equals(other.Requester) { return false }
	if !compareSlices(m.Recipient, other.Recipient) { return false }
	if !m.Sender.Equals(other.Sender) { return false }
	if !compareSlices(m.ReasonCode, other.ReasonCode) { return false }
	if !compareSlices(m.ReasonReference, other.ReasonReference) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	return true
}

// CommunicationRequestPayload
// Text, attachment(s), or resource(s) to be communicated to the recipient.
type CommunicationRequestPayload struct {
	extends BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	ContentString *FhirString `json:"contentstring,omitempty"`
	ContentAttachment *Attachment `json:"contentattachment,omitempty"`
	ContentReference *Reference `json:"contentreference,omitempty"`
}

// NewCommunicationRequestPayload creates a new CommunicationRequestPayload instance.
func NewCommunicationRequestPayload() *CommunicationRequestPayload {
	return &CommunicationRequestPayload{}
}

// FromJSON populates CommunicationRequestPayload from JSON data.
func (m *CommunicationRequestPayload) FromJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		ContentString *FhirString `json:"contentstring,omitempty"`
		ContentAttachment *Attachment `json:"contentattachment,omitempty"`
		ContentReference *Reference `json:"contentreference,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.ContentString = temp.ContentString
	m.ContentAttachment = temp.ContentAttachment
	m.ContentReference = temp.ContentReference
	return nil
}

// ToJSON converts CommunicationRequestPayload to JSON data.
func (m *CommunicationRequestPayload) ToJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		ContentString interface{} `json:"contentstring,omitempty"`
		ContentStringElement map[string]interface{} `json:"_contentstring,omitempty"`
		ContentAttachment *Attachment `json:"contentattachment,omitempty"`
		ContentReference *Reference `json:"contentreference,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.ToJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	if m.ContentString != nil && m.ContentString.Value != nil {
		output.ContentString = m.ContentString.Value
		if m.ContentString.Element != nil {
			output.ContentStringElement = toMapOrNil(m.ContentString.Element.ToJSON())
		}
	}
	output.ContentAttachment = m.ContentAttachment
	output.ContentReference = m.ContentReference
	return json.Marshal(output)
}

// Clone creates a deep copy of CommunicationRequestPayload.
func (m *CommunicationRequestPayload) Clone() *CommunicationRequestPayload {
	if m == nil { return nil }
	return &CommunicationRequestPayload{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		ContentString: m.ContentString.Clone(),
		ContentAttachment: m.ContentAttachment.Clone(),
		ContentReference: m.ContentReference.Clone(),
	}
}

// Equals checks equality between two CommunicationRequestPayload instances.
func (m *CommunicationRequestPayload) Equals(other *CommunicationRequestPayload) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.ContentString.Equals(other.ContentString) { return false }
	if !m.ContentAttachment.Equals(other.ContentAttachment) { return false }
	if !m.ContentReference.Equals(other.ContentReference) { return false }
	return true
}

