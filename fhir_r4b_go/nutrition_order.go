// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// NutritionOrder
// A request to supply a diet, formula feeding (enteral) or oral nutritional supplement to a patient/resident.
type NutritionOrder struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	InstantiatesCanonical []*FhirCanonical `json:"instantiatescanonical,omitempty"`
	InstantiatesUri []*FhirUri `json:"instantiatesuri,omitempty"`
	Instantiates []*FhirUri `json:"instantiates,omitempty"`
	Status *RequestStatus `json:"status,omitempty"`
	Intent *RequestIntent `json:"intent,omitempty"`
	Patient *Reference `json:"patient,omitempty"`
	Encounter *Reference `json:"encounter,omitempty"`
	DateTime *FhirDateTime `json:"datetime,omitempty"`
	Orderer *Reference `json:"orderer,omitempty"`
	AllergyIntolerance []*Reference `json:"allergyintolerance,omitempty"`
	FoodPreferenceModifier []*CodeableConcept `json:"foodpreferencemodifier,omitempty"`
	ExcludeFoodModifier []*CodeableConcept `json:"excludefoodmodifier,omitempty"`
	OralDiet *NutritionOrderOralDiet `json:"oraldiet,omitempty"`
	Supplement []*NutritionOrderSupplement `json:"supplement,omitempty"`
	EnteralFormula *NutritionOrderEnteralFormula `json:"enteralformula,omitempty"`
	Note []*Annotation `json:"note,omitempty"`
}

// NewNutritionOrder creates a new NutritionOrder instance
func NewNutritionOrder() *NutritionOrder {
	return &NutritionOrder{}
}

// FromJSON populates NutritionOrder from JSON data
func (m *NutritionOrder) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts NutritionOrder to JSON data
func (m *NutritionOrder) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of NutritionOrder
func (m *NutritionOrder) Clone() *NutritionOrder {
	if m == nil { return nil }
	return &NutritionOrder{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		InstantiatesCanonical: cloneSlices(m.InstantiatesCanonical),
		InstantiatesUri: cloneSlices(m.InstantiatesUri),
		Instantiates: cloneSlices(m.Instantiates),
		Status: m.Status.Clone(),
		Intent: m.Intent.Clone(),
		Patient: m.Patient.Clone(),
		Encounter: m.Encounter.Clone(),
		DateTime: m.DateTime.Clone(),
		Orderer: m.Orderer.Clone(),
		AllergyIntolerance: cloneSlices(m.AllergyIntolerance),
		FoodPreferenceModifier: cloneSlices(m.FoodPreferenceModifier),
		ExcludeFoodModifier: cloneSlices(m.ExcludeFoodModifier),
		OralDiet: m.OralDiet.Clone(),
		Supplement: cloneSlices(m.Supplement),
		EnteralFormula: m.EnteralFormula.Clone(),
		Note: cloneSlices(m.Note),
	}
}

// Equals checks for equality with another NutritionOrder instance
func (m *NutritionOrder) Equals(other *NutritionOrder) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !compareSlices(m.InstantiatesCanonical, other.InstantiatesCanonical) { return false }
	if !compareSlices(m.InstantiatesUri, other.InstantiatesUri) { return false }
	if !compareSlices(m.Instantiates, other.Instantiates) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Intent.Equals(other.Intent) { return false }
	if !m.Patient.Equals(other.Patient) { return false }
	if !m.Encounter.Equals(other.Encounter) { return false }
	if !m.DateTime.Equals(other.DateTime) { return false }
	if !m.Orderer.Equals(other.Orderer) { return false }
	if !compareSlices(m.AllergyIntolerance, other.AllergyIntolerance) { return false }
	if !compareSlices(m.FoodPreferenceModifier, other.FoodPreferenceModifier) { return false }
	if !compareSlices(m.ExcludeFoodModifier, other.ExcludeFoodModifier) { return false }
	if !m.OralDiet.Equals(other.OralDiet) { return false }
	if !compareSlices(m.Supplement, other.Supplement) { return false }
	if !m.EnteralFormula.Equals(other.EnteralFormula) { return false }
	if !compareSlices(m.Note, other.Note) { return false }
	return true
}

// NutritionOrderOralDiet
// Diet given orally in contrast to enteral (tube) feeding.
type NutritionOrderOralDiet struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Type []*CodeableConcept `json:"type,omitempty"`
	Schedule []*Timing `json:"schedule,omitempty"`
	Nutrient []*NutritionOrderNutrient `json:"nutrient,omitempty"`
	Texture []*NutritionOrderTexture `json:"texture,omitempty"`
	FluidConsistencyType []*CodeableConcept `json:"fluidconsistencytype,omitempty"`
	Instruction *FhirString `json:"instruction,omitempty"`
}

// NewNutritionOrderOralDiet creates a new NutritionOrderOralDiet instance
func NewNutritionOrderOralDiet() *NutritionOrderOralDiet {
	return &NutritionOrderOralDiet{}
}

// FromJSON populates NutritionOrderOralDiet from JSON data
func (m *NutritionOrderOralDiet) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts NutritionOrderOralDiet to JSON data
func (m *NutritionOrderOralDiet) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of NutritionOrderOralDiet
func (m *NutritionOrderOralDiet) Clone() *NutritionOrderOralDiet {
	if m == nil { return nil }
	return &NutritionOrderOralDiet{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Type: cloneSlices(m.Type),
		Schedule: cloneSlices(m.Schedule),
		Nutrient: cloneSlices(m.Nutrient),
		Texture: cloneSlices(m.Texture),
		FluidConsistencyType: cloneSlices(m.FluidConsistencyType),
		Instruction: m.Instruction.Clone(),
	}
}

// Equals checks for equality with another NutritionOrderOralDiet instance
func (m *NutritionOrderOralDiet) Equals(other *NutritionOrderOralDiet) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Type, other.Type) { return false }
	if !compareSlices(m.Schedule, other.Schedule) { return false }
	if !compareSlices(m.Nutrient, other.Nutrient) { return false }
	if !compareSlices(m.Texture, other.Texture) { return false }
	if !compareSlices(m.FluidConsistencyType, other.FluidConsistencyType) { return false }
	if !m.Instruction.Equals(other.Instruction) { return false }
	return true
}

// NutritionOrderNutrient
// Class that defines the quantity and type of nutrient modifications (for example carbohydrate, fiber or sodium) required for the oral diet.
type NutritionOrderNutrient struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Modifier *CodeableConcept `json:"modifier,omitempty"`
	Amount *Quantity `json:"amount,omitempty"`
}

// NewNutritionOrderNutrient creates a new NutritionOrderNutrient instance
func NewNutritionOrderNutrient() *NutritionOrderNutrient {
	return &NutritionOrderNutrient{}
}

// FromJSON populates NutritionOrderNutrient from JSON data
func (m *NutritionOrderNutrient) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts NutritionOrderNutrient to JSON data
func (m *NutritionOrderNutrient) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of NutritionOrderNutrient
func (m *NutritionOrderNutrient) Clone() *NutritionOrderNutrient {
	if m == nil { return nil }
	return &NutritionOrderNutrient{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Modifier: m.Modifier.Clone(),
		Amount: m.Amount.Clone(),
	}
}

// Equals checks for equality with another NutritionOrderNutrient instance
func (m *NutritionOrderNutrient) Equals(other *NutritionOrderNutrient) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Modifier.Equals(other.Modifier) { return false }
	if !m.Amount.Equals(other.Amount) { return false }
	return true
}

// NutritionOrderTexture
// Class that describes any texture modifications required for the patient to safely consume various types of solid foods.
type NutritionOrderTexture struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Modifier *CodeableConcept `json:"modifier,omitempty"`
	FoodType *CodeableConcept `json:"foodtype,omitempty"`
}

// NewNutritionOrderTexture creates a new NutritionOrderTexture instance
func NewNutritionOrderTexture() *NutritionOrderTexture {
	return &NutritionOrderTexture{}
}

// FromJSON populates NutritionOrderTexture from JSON data
func (m *NutritionOrderTexture) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts NutritionOrderTexture to JSON data
func (m *NutritionOrderTexture) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of NutritionOrderTexture
func (m *NutritionOrderTexture) Clone() *NutritionOrderTexture {
	if m == nil { return nil }
	return &NutritionOrderTexture{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Modifier: m.Modifier.Clone(),
		FoodType: m.FoodType.Clone(),
	}
}

// Equals checks for equality with another NutritionOrderTexture instance
func (m *NutritionOrderTexture) Equals(other *NutritionOrderTexture) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Modifier.Equals(other.Modifier) { return false }
	if !m.FoodType.Equals(other.FoodType) { return false }
	return true
}

// NutritionOrderSupplement
// Oral nutritional products given in order to add further nutritional value to the patient's diet.
type NutritionOrderSupplement struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Type *CodeableConcept `json:"type,omitempty"`
	ProductName *FhirString `json:"productname,omitempty"`
	Schedule []*Timing `json:"schedule,omitempty"`
	Quantity *Quantity `json:"quantity,omitempty"`
	Instruction *FhirString `json:"instruction,omitempty"`
}

// NewNutritionOrderSupplement creates a new NutritionOrderSupplement instance
func NewNutritionOrderSupplement() *NutritionOrderSupplement {
	return &NutritionOrderSupplement{}
}

// FromJSON populates NutritionOrderSupplement from JSON data
func (m *NutritionOrderSupplement) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts NutritionOrderSupplement to JSON data
func (m *NutritionOrderSupplement) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of NutritionOrderSupplement
func (m *NutritionOrderSupplement) Clone() *NutritionOrderSupplement {
	if m == nil { return nil }
	return &NutritionOrderSupplement{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Type: m.Type.Clone(),
		ProductName: m.ProductName.Clone(),
		Schedule: cloneSlices(m.Schedule),
		Quantity: m.Quantity.Clone(),
		Instruction: m.Instruction.Clone(),
	}
}

// Equals checks for equality with another NutritionOrderSupplement instance
func (m *NutritionOrderSupplement) Equals(other *NutritionOrderSupplement) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.ProductName.Equals(other.ProductName) { return false }
	if !compareSlices(m.Schedule, other.Schedule) { return false }
	if !m.Quantity.Equals(other.Quantity) { return false }
	if !m.Instruction.Equals(other.Instruction) { return false }
	return true
}

// NutritionOrderEnteralFormula
// Feeding provided through the gastrointestinal tract via a tube, catheter, or stoma that delivers nutrition distal to the oral cavity.
type NutritionOrderEnteralFormula struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	BaseFormulaType *CodeableConcept `json:"baseformulatype,omitempty"`
	BaseFormulaProductName *FhirString `json:"baseformulaproductname,omitempty"`
	AdditiveType *CodeableConcept `json:"additivetype,omitempty"`
	AdditiveProductName *FhirString `json:"additiveproductname,omitempty"`
	CaloricDensity *Quantity `json:"caloricdensity,omitempty"`
	RouteofAdministration *CodeableConcept `json:"routeofadministration,omitempty"`
	Administration []*NutritionOrderAdministration `json:"administration,omitempty"`
	MaxVolumeToDeliver *Quantity `json:"maxvolumetodeliver,omitempty"`
	AdministrationInstruction *FhirString `json:"administrationinstruction,omitempty"`
}

// NewNutritionOrderEnteralFormula creates a new NutritionOrderEnteralFormula instance
func NewNutritionOrderEnteralFormula() *NutritionOrderEnteralFormula {
	return &NutritionOrderEnteralFormula{}
}

// FromJSON populates NutritionOrderEnteralFormula from JSON data
func (m *NutritionOrderEnteralFormula) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts NutritionOrderEnteralFormula to JSON data
func (m *NutritionOrderEnteralFormula) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of NutritionOrderEnteralFormula
func (m *NutritionOrderEnteralFormula) Clone() *NutritionOrderEnteralFormula {
	if m == nil { return nil }
	return &NutritionOrderEnteralFormula{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		BaseFormulaType: m.BaseFormulaType.Clone(),
		BaseFormulaProductName: m.BaseFormulaProductName.Clone(),
		AdditiveType: m.AdditiveType.Clone(),
		AdditiveProductName: m.AdditiveProductName.Clone(),
		CaloricDensity: m.CaloricDensity.Clone(),
		RouteofAdministration: m.RouteofAdministration.Clone(),
		Administration: cloneSlices(m.Administration),
		MaxVolumeToDeliver: m.MaxVolumeToDeliver.Clone(),
		AdministrationInstruction: m.AdministrationInstruction.Clone(),
	}
}

// Equals checks for equality with another NutritionOrderEnteralFormula instance
func (m *NutritionOrderEnteralFormula) Equals(other *NutritionOrderEnteralFormula) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.BaseFormulaType.Equals(other.BaseFormulaType) { return false }
	if !m.BaseFormulaProductName.Equals(other.BaseFormulaProductName) { return false }
	if !m.AdditiveType.Equals(other.AdditiveType) { return false }
	if !m.AdditiveProductName.Equals(other.AdditiveProductName) { return false }
	if !m.CaloricDensity.Equals(other.CaloricDensity) { return false }
	if !m.RouteofAdministration.Equals(other.RouteofAdministration) { return false }
	if !compareSlices(m.Administration, other.Administration) { return false }
	if !m.MaxVolumeToDeliver.Equals(other.MaxVolumeToDeliver) { return false }
	if !m.AdministrationInstruction.Equals(other.AdministrationInstruction) { return false }
	return true
}

// NutritionOrderAdministration
// Formula administration instructions as structured data.  This repeating structure allows for changing the administration rate or volume over time for both bolus and continuous feeding.  An example of this would be an instruction to increase the rate of continuous feeding every 2 hours.
type NutritionOrderAdministration struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Schedule *Timing `json:"schedule,omitempty"`
	Quantity *Quantity `json:"quantity,omitempty"`
	RateQuantity *Quantity `json:"ratequantity,omitempty"`
	RateRatio *Ratio `json:"rateratio,omitempty"`
}

// NewNutritionOrderAdministration creates a new NutritionOrderAdministration instance
func NewNutritionOrderAdministration() *NutritionOrderAdministration {
	return &NutritionOrderAdministration{}
}

// FromJSON populates NutritionOrderAdministration from JSON data
func (m *NutritionOrderAdministration) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts NutritionOrderAdministration to JSON data
func (m *NutritionOrderAdministration) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of NutritionOrderAdministration
func (m *NutritionOrderAdministration) Clone() *NutritionOrderAdministration {
	if m == nil { return nil }
	return &NutritionOrderAdministration{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Schedule: m.Schedule.Clone(),
		Quantity: m.Quantity.Clone(),
		RateQuantity: m.RateQuantity.Clone(),
		RateRatio: m.RateRatio.Clone(),
	}
}

// Equals checks for equality with another NutritionOrderAdministration instance
func (m *NutritionOrderAdministration) Equals(other *NutritionOrderAdministration) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Schedule.Equals(other.Schedule) { return false }
	if !m.Quantity.Equals(other.Quantity) { return false }
	if !m.RateQuantity.Equals(other.RateQuantity) { return false }
	if !m.RateRatio.Equals(other.RateRatio) { return false }
	return true
}

