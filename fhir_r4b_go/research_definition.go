// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
	"fmt"
)

// ResearchDefinition
// The ResearchDefinition resource describes the conditional state (population and any exposures being compared within the population) and outcome (if specified) that the knowledge (evidence, assertion, recommendation) is about.
type ResearchDefinition struct {
	extends DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Url *FhirUri `json:"url,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Version *FhirString `json:"version,omitempty"`
	Name *FhirString `json:"name,omitempty"`
	Title *FhirString `json:"title,omitempty"`
	ShortTitle *FhirString `json:"shorttitle,omitempty"`
	Subtitle *FhirString `json:"subtitle,omitempty"`
	Status *PublicationStatus `json:"status,omitempty"`
	Experimental *FhirBoolean `json:"experimental,omitempty"`
	SubjectCodeableConcept *CodeableConcept `json:"subjectcodeableconcept,omitempty"`
	SubjectReference *Reference `json:"subjectreference,omitempty"`
	Date *FhirDateTime `json:"date,omitempty"`
	Publisher *FhirString `json:"publisher,omitempty"`
	Contact []*ContactDetail `json:"contact,omitempty"`
	Description *FhirMarkdown `json:"description,omitempty"`
	Comment []*FhirString `json:"comment,omitempty"`
	UseContext []*UsageContext `json:"usecontext,omitempty"`
	Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`
	Purpose *FhirMarkdown `json:"purpose,omitempty"`
	Usage *FhirString `json:"usage,omitempty"`
	Copyright *FhirMarkdown `json:"copyright,omitempty"`
	ApprovalDate *FhirDate `json:"approvaldate,omitempty"`
	LastReviewDate *FhirDate `json:"lastreviewdate,omitempty"`
	EffectivePeriod *Period `json:"effectiveperiod,omitempty"`
	Topic []*CodeableConcept `json:"topic,omitempty"`
	Author []*ContactDetail `json:"author,omitempty"`
	Editor []*ContactDetail `json:"editor,omitempty"`
	Reviewer []*ContactDetail `json:"reviewer,omitempty"`
	Endorser []*ContactDetail `json:"endorser,omitempty"`
	RelatedArtifact []*RelatedArtifact `json:"relatedartifact,omitempty"`
	Library_ []*FhirCanonical `json:"library,omitempty"`
	Population *Reference `json:"population,omitempty"`
	Exposure *Reference `json:"exposure,omitempty"`
	ExposureAlternative *Reference `json:"exposurealternative,omitempty"`
	Outcome *Reference `json:"outcome,omitempty"`
}

// NewResearchDefinition creates a new ResearchDefinition instance.
func NewResearchDefinition() *ResearchDefinition {
	return &ResearchDefinition{}
}

// FromJSON populates ResearchDefinition from JSON data.
func (m *ResearchDefinition) FromJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Url *FhirUri `json:"url,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Version *FhirString `json:"version,omitempty"`
		Name *FhirString `json:"name,omitempty"`
		Title *FhirString `json:"title,omitempty"`
		ShortTitle *FhirString `json:"shorttitle,omitempty"`
		Subtitle *FhirString `json:"subtitle,omitempty"`
		Status *PublicationStatus `json:"status,omitempty"`
		Experimental *FhirBoolean `json:"experimental,omitempty"`
		SubjectCodeableConcept *CodeableConcept `json:"subjectcodeableconcept,omitempty"`
		SubjectReference *Reference `json:"subjectreference,omitempty"`
		Date *FhirDateTime `json:"date,omitempty"`
		Publisher *FhirString `json:"publisher,omitempty"`
		Contact []*ContactDetail `json:"contact,omitempty"`
		Description *FhirMarkdown `json:"description,omitempty"`
		Comment []interface{} `json:"comment,omitempty"`
		UseContext []*UsageContext `json:"usecontext,omitempty"`
		Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`
		Purpose *FhirMarkdown `json:"purpose,omitempty"`
		Usage *FhirString `json:"usage,omitempty"`
		Copyright *FhirMarkdown `json:"copyright,omitempty"`
		ApprovalDate *FhirDate `json:"approvaldate,omitempty"`
		LastReviewDate *FhirDate `json:"lastreviewdate,omitempty"`
		EffectivePeriod *Period `json:"effectiveperiod,omitempty"`
		Topic []*CodeableConcept `json:"topic,omitempty"`
		Author []*ContactDetail `json:"author,omitempty"`
		Editor []*ContactDetail `json:"editor,omitempty"`
		Reviewer []*ContactDetail `json:"reviewer,omitempty"`
		Endorser []*ContactDetail `json:"endorser,omitempty"`
		RelatedArtifact []*RelatedArtifact `json:"relatedartifact,omitempty"`
		Library_ []interface{} `json:"library,omitempty"`
		Population *Reference `json:"population,omitempty"`
		Exposure *Reference `json:"exposure,omitempty"`
		ExposureAlternative *Reference `json:"exposurealternative,omitempty"`
		Outcome *Reference `json:"outcome,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Meta = temp.Meta
	m.ImplicitRules = temp.ImplicitRules
	m.Language = temp.Language
	m.Text = temp.Text
	m.Contained = temp.Contained
	m.Extension_ = temp.Extension_
	m.ModifierExtension = temp.ModifierExtension
	m.Url = temp.Url
	m.Identifier = temp.Identifier
	m.Version = temp.Version
	m.Name = temp.Name
	m.Title = temp.Title
	m.ShortTitle = temp.ShortTitle
	m.Subtitle = temp.Subtitle
	m.Status = temp.Status
	m.Experimental = temp.Experimental
	m.SubjectCodeableConcept = temp.SubjectCodeableConcept
	m.SubjectReference = temp.SubjectReference
	m.Date = temp.Date
	m.Publisher = temp.Publisher
	m.Contact = temp.Contact
	m.Description = temp.Description
	if len(temp.Comment) > 0 {
		m.Comment = make([]*FhirString, len(temp.Comment))
		for i := range temp.Comment {
			itemMap, ok := temp.Comment[i].(map[string]interface{})
			if !ok { return fmt.Errorf("invalid value for Comment[%d]: expected map", i) }
			primitive, err := NewFhirStringFromMap(itemMap)
			if err != nil { return fmt.Errorf("failed to parse Comment[%d]: %v", i, err) }
			m.Comment[i] = primitive
		}
	}
	m.UseContext = temp.UseContext
	m.Jurisdiction = temp.Jurisdiction
	m.Purpose = temp.Purpose
	m.Usage = temp.Usage
	m.Copyright = temp.Copyright
	m.ApprovalDate = temp.ApprovalDate
	m.LastReviewDate = temp.LastReviewDate
	m.EffectivePeriod = temp.EffectivePeriod
	m.Topic = temp.Topic
	m.Author = temp.Author
	m.Editor = temp.Editor
	m.Reviewer = temp.Reviewer
	m.Endorser = temp.Endorser
	m.RelatedArtifact = temp.RelatedArtifact
	if len(temp.Library_) > 0 {
		m.Library_ = make([]*FhirCanonical, len(temp.Library_))
		for i := range temp.Library_ {
			itemMap, ok := temp.Library_[i].(map[string]interface{})
			if !ok { return fmt.Errorf("invalid value for Library_[%d]: expected map", i) }
			primitive, err := NewFhirCanonicalFromMap(itemMap)
			if err != nil { return fmt.Errorf("failed to parse Library_[%d]: %v", i, err) }
			m.Library_[i] = primitive
		}
	}
	m.Population = temp.Population
	m.Exposure = temp.Exposure
	m.ExposureAlternative = temp.ExposureAlternative
	m.Outcome = temp.Outcome
	return nil
}

// ToJSON converts ResearchDefinition to JSON data.
func (m *ResearchDefinition) ToJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Meta *FhirMeta `json:"meta,omitempty"`
		ImplicitRules interface{} `json:"implicitrules,omitempty"`
		ImplicitRulesElement map[string]interface{} `json:"_implicitrules,omitempty"`
		Language *CommonLanguages `json:"language,omitempty"`
		Text *Narrative `json:"text,omitempty"`
		Contained []*Resource `json:"contained,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
		Url interface{} `json:"url,omitempty"`
		UrlElement map[string]interface{} `json:"_url,omitempty"`
		Identifier []*Identifier `json:"identifier,omitempty"`
		Version interface{} `json:"version,omitempty"`
		VersionElement map[string]interface{} `json:"_version,omitempty"`
		Name interface{} `json:"name,omitempty"`
		NameElement map[string]interface{} `json:"_name,omitempty"`
		Title interface{} `json:"title,omitempty"`
		TitleElement map[string]interface{} `json:"_title,omitempty"`
		ShortTitle interface{} `json:"shorttitle,omitempty"`
		ShortTitleElement map[string]interface{} `json:"_shorttitle,omitempty"`
		Subtitle interface{} `json:"subtitle,omitempty"`
		SubtitleElement map[string]interface{} `json:"_subtitle,omitempty"`
		Status *PublicationStatus `json:"status,omitempty"`
		Experimental interface{} `json:"experimental,omitempty"`
		ExperimentalElement map[string]interface{} `json:"_experimental,omitempty"`
		SubjectCodeableConcept *CodeableConcept `json:"subjectcodeableconcept,omitempty"`
		SubjectReference *Reference `json:"subjectreference,omitempty"`
		Date interface{} `json:"date,omitempty"`
		DateElement map[string]interface{} `json:"_date,omitempty"`
		Publisher interface{} `json:"publisher,omitempty"`
		PublisherElement map[string]interface{} `json:"_publisher,omitempty"`
		Contact []*ContactDetail `json:"contact,omitempty"`
		Description interface{} `json:"description,omitempty"`
		DescriptionElement map[string]interface{} `json:"_description,omitempty"`
		Comment []interface{} `json:"comment,omitempty"`
		CommentElement []map[string]interface{} `json:"_comment,omitempty"`
		UseContext []*UsageContext `json:"usecontext,omitempty"`
		Jurisdiction []*CodeableConcept `json:"jurisdiction,omitempty"`
		Purpose interface{} `json:"purpose,omitempty"`
		PurposeElement map[string]interface{} `json:"_purpose,omitempty"`
		Usage interface{} `json:"usage,omitempty"`
		UsageElement map[string]interface{} `json:"_usage,omitempty"`
		Copyright interface{} `json:"copyright,omitempty"`
		CopyrightElement map[string]interface{} `json:"_copyright,omitempty"`
		ApprovalDate interface{} `json:"approvaldate,omitempty"`
		ApprovalDateElement map[string]interface{} `json:"_approvaldate,omitempty"`
		LastReviewDate interface{} `json:"lastreviewdate,omitempty"`
		LastReviewDateElement map[string]interface{} `json:"_lastreviewdate,omitempty"`
		EffectivePeriod *Period `json:"effectiveperiod,omitempty"`
		Topic []*CodeableConcept `json:"topic,omitempty"`
		Author []*ContactDetail `json:"author,omitempty"`
		Editor []*ContactDetail `json:"editor,omitempty"`
		Reviewer []*ContactDetail `json:"reviewer,omitempty"`
		Endorser []*ContactDetail `json:"endorser,omitempty"`
		RelatedArtifact []*RelatedArtifact `json:"relatedartifact,omitempty"`
		Library_ []interface{} `json:"library,omitempty"`
		Library_Element []map[string]interface{} `json:"_library,omitempty"`
		Population *Reference `json:"population,omitempty"`
		Exposure *Reference `json:"exposure,omitempty"`
		ExposureAlternative *Reference `json:"exposurealternative,omitempty"`
		Outcome *Reference `json:"outcome,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.ToJSON())
		}
	}
	output.Meta = m.Meta
	if m.ImplicitRules != nil && m.ImplicitRules.Value != nil {
		output.ImplicitRules = m.ImplicitRules.Value
		if m.ImplicitRules.Element != nil {
			output.ImplicitRulesElement = toMapOrNil(m.ImplicitRules.Element.ToJSON())
		}
	}
	output.Language = m.Language
	output.Text = m.Text
	output.Contained = m.Contained
	output.Extension_ = m.Extension_
	output.ModifierExtension = m.ModifierExtension
	if m.Url != nil && m.Url.Value != nil {
		output.Url = m.Url.Value
		if m.Url.Element != nil {
			output.UrlElement = toMapOrNil(m.Url.Element.ToJSON())
		}
	}
	output.Identifier = m.Identifier
	if m.Version != nil && m.Version.Value != nil {
		output.Version = m.Version.Value
		if m.Version.Element != nil {
			output.VersionElement = toMapOrNil(m.Version.Element.ToJSON())
		}
	}
	if m.Name != nil && m.Name.Value != nil {
		output.Name = m.Name.Value
		if m.Name.Element != nil {
			output.NameElement = toMapOrNil(m.Name.Element.ToJSON())
		}
	}
	if m.Title != nil && m.Title.Value != nil {
		output.Title = m.Title.Value
		if m.Title.Element != nil {
			output.TitleElement = toMapOrNil(m.Title.Element.ToJSON())
		}
	}
	if m.ShortTitle != nil && m.ShortTitle.Value != nil {
		output.ShortTitle = m.ShortTitle.Value
		if m.ShortTitle.Element != nil {
			output.ShortTitleElement = toMapOrNil(m.ShortTitle.Element.ToJSON())
		}
	}
	if m.Subtitle != nil && m.Subtitle.Value != nil {
		output.Subtitle = m.Subtitle.Value
		if m.Subtitle.Element != nil {
			output.SubtitleElement = toMapOrNil(m.Subtitle.Element.ToJSON())
		}
	}
	output.Status = m.Status
	if m.Experimental != nil && m.Experimental.Value != nil {
		output.Experimental = m.Experimental.Value
		if m.Experimental.Element != nil {
			output.ExperimentalElement = toMapOrNil(m.Experimental.Element.ToJSON())
		}
	}
	output.SubjectCodeableConcept = m.SubjectCodeableConcept
	output.SubjectReference = m.SubjectReference
	if m.Date != nil && m.Date.Value != nil {
		output.Date = m.Date.Value
		if m.Date.Element != nil {
			output.DateElement = toMapOrNil(m.Date.Element.ToJSON())
		}
	}
	if m.Publisher != nil && m.Publisher.Value != nil {
		output.Publisher = m.Publisher.Value
		if m.Publisher.Element != nil {
			output.PublisherElement = toMapOrNil(m.Publisher.Element.ToJSON())
		}
	}
	output.Contact = m.Contact
	if m.Description != nil && m.Description.Value != nil {
		output.Description = m.Description.Value
		if m.Description.Element != nil {
			output.DescriptionElement = toMapOrNil(m.Description.Element.ToJSON())
		}
	}
	if len(m.Comment) > 0 {
		output.Comment = make([]interface{}, len(m.Comment))
		output.CommentElement = make([]map[string]interface{}, len(m.Comment))
		for i, item := range m.Comment {
			if item != nil && item.Value != nil {
				output.Comment[i] = item.Value
			}
			if item != nil && item.Element != nil {
				output.CommentElement[i] = toMapOrNil(item.Element.ToJSON())
			}
		}
	}
	output.UseContext = m.UseContext
	output.Jurisdiction = m.Jurisdiction
	if m.Purpose != nil && m.Purpose.Value != nil {
		output.Purpose = m.Purpose.Value
		if m.Purpose.Element != nil {
			output.PurposeElement = toMapOrNil(m.Purpose.Element.ToJSON())
		}
	}
	if m.Usage != nil && m.Usage.Value != nil {
		output.Usage = m.Usage.Value
		if m.Usage.Element != nil {
			output.UsageElement = toMapOrNil(m.Usage.Element.ToJSON())
		}
	}
	if m.Copyright != nil && m.Copyright.Value != nil {
		output.Copyright = m.Copyright.Value
		if m.Copyright.Element != nil {
			output.CopyrightElement = toMapOrNil(m.Copyright.Element.ToJSON())
		}
	}
	if m.ApprovalDate != nil && m.ApprovalDate.Value != nil {
		output.ApprovalDate = m.ApprovalDate.Value
		if m.ApprovalDate.Element != nil {
			output.ApprovalDateElement = toMapOrNil(m.ApprovalDate.Element.ToJSON())
		}
	}
	if m.LastReviewDate != nil && m.LastReviewDate.Value != nil {
		output.LastReviewDate = m.LastReviewDate.Value
		if m.LastReviewDate.Element != nil {
			output.LastReviewDateElement = toMapOrNil(m.LastReviewDate.Element.ToJSON())
		}
	}
	output.EffectivePeriod = m.EffectivePeriod
	output.Topic = m.Topic
	output.Author = m.Author
	output.Editor = m.Editor
	output.Reviewer = m.Reviewer
	output.Endorser = m.Endorser
	output.RelatedArtifact = m.RelatedArtifact
	if len(m.Library_) > 0 {
		output.Library_ = make([]interface{}, len(m.Library_))
		output.Library_Element = make([]map[string]interface{}, len(m.Library_))
		for i, item := range m.Library_ {
			if item != nil && item.Value != nil {
				output.Library_[i] = item.Value
			}
			if item != nil && item.Element != nil {
				output.Library_Element[i] = toMapOrNil(item.Element.ToJSON())
			}
		}
	}
	output.Population = m.Population
	output.Exposure = m.Exposure
	output.ExposureAlternative = m.ExposureAlternative
	output.Outcome = m.Outcome
	return json.Marshal(output)
}

// Clone creates a deep copy of ResearchDefinition.
func (m *ResearchDefinition) Clone() *ResearchDefinition {
	if m == nil { return nil }
	return &ResearchDefinition{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Url: m.Url.Clone(),
		Identifier: cloneSlices(m.Identifier),
		Version: m.Version.Clone(),
		Name: m.Name.Clone(),
		Title: m.Title.Clone(),
		ShortTitle: m.ShortTitle.Clone(),
		Subtitle: m.Subtitle.Clone(),
		Status: m.Status.Clone(),
		Experimental: m.Experimental.Clone(),
		SubjectCodeableConcept: m.SubjectCodeableConcept.Clone(),
		SubjectReference: m.SubjectReference.Clone(),
		Date: m.Date.Clone(),
		Publisher: m.Publisher.Clone(),
		Contact: cloneSlices(m.Contact),
		Description: m.Description.Clone(),
		Comment: cloneSlices(m.Comment),
		UseContext: cloneSlices(m.UseContext),
		Jurisdiction: cloneSlices(m.Jurisdiction),
		Purpose: m.Purpose.Clone(),
		Usage: m.Usage.Clone(),
		Copyright: m.Copyright.Clone(),
		ApprovalDate: m.ApprovalDate.Clone(),
		LastReviewDate: m.LastReviewDate.Clone(),
		EffectivePeriod: m.EffectivePeriod.Clone(),
		Topic: cloneSlices(m.Topic),
		Author: cloneSlices(m.Author),
		Editor: cloneSlices(m.Editor),
		Reviewer: cloneSlices(m.Reviewer),
		Endorser: cloneSlices(m.Endorser),
		RelatedArtifact: cloneSlices(m.RelatedArtifact),
		Library_: cloneSlices(m.Library_),
		Population: m.Population.Clone(),
		Exposure: m.Exposure.Clone(),
		ExposureAlternative: m.ExposureAlternative.Clone(),
		Outcome: m.Outcome.Clone(),
	}
}

// Equals checks equality between two ResearchDefinition instances.
func (m *ResearchDefinition) Equals(other *ResearchDefinition) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Version.Equals(other.Version) { return false }
	if !m.Name.Equals(other.Name) { return false }
	if !m.Title.Equals(other.Title) { return false }
	if !m.ShortTitle.Equals(other.ShortTitle) { return false }
	if !m.Subtitle.Equals(other.Subtitle) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Experimental.Equals(other.Experimental) { return false }
	if !m.SubjectCodeableConcept.Equals(other.SubjectCodeableConcept) { return false }
	if !m.SubjectReference.Equals(other.SubjectReference) { return false }
	if !m.Date.Equals(other.Date) { return false }
	if !m.Publisher.Equals(other.Publisher) { return false }
	if !compareSlices(m.Contact, other.Contact) { return false }
	if !m.Description.Equals(other.Description) { return false }
	if !compareSlices(m.Comment, other.Comment) { return false }
	if !compareSlices(m.UseContext, other.UseContext) { return false }
	if !compareSlices(m.Jurisdiction, other.Jurisdiction) { return false }
	if !m.Purpose.Equals(other.Purpose) { return false }
	if !m.Usage.Equals(other.Usage) { return false }
	if !m.Copyright.Equals(other.Copyright) { return false }
	if !m.ApprovalDate.Equals(other.ApprovalDate) { return false }
	if !m.LastReviewDate.Equals(other.LastReviewDate) { return false }
	if !m.EffectivePeriod.Equals(other.EffectivePeriod) { return false }
	if !compareSlices(m.Topic, other.Topic) { return false }
	if !compareSlices(m.Author, other.Author) { return false }
	if !compareSlices(m.Editor, other.Editor) { return false }
	if !compareSlices(m.Reviewer, other.Reviewer) { return false }
	if !compareSlices(m.Endorser, other.Endorser) { return false }
	if !compareSlices(m.RelatedArtifact, other.RelatedArtifact) { return false }
	if !compareSlices(m.Library_, other.Library_) { return false }
	if !m.Population.Equals(other.Population) { return false }
	if !m.Exposure.Equals(other.Exposure) { return false }
	if !m.ExposureAlternative.Equals(other.ExposureAlternative) { return false }
	if !m.Outcome.Equals(other.Outcome) { return false }
	return true
}

