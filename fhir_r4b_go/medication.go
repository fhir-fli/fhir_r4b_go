// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Medication
// This resource is primarily used for the identification and definition of a medication for the purposes of prescribing, dispensing, and administering a medication as well as for making statements about medication use.
type Medication struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Status *MedicationStatusCodes `json:"status,omitempty"`
	Manufacturer *Reference `json:"manufacturer,omitempty"`
	Form *CodeableConcept `json:"form,omitempty"`
	Amount *Ratio `json:"amount,omitempty"`
	Ingredient []*MedicationIngredient `json:"ingredient,omitempty"`
	Batch *MedicationBatch `json:"batch,omitempty"`
}

// NewMedication creates a new Medication instance
func NewMedication() *Medication {
	return &Medication{}
}

// FromJSON populates Medication from JSON data
func (m *Medication) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Medication to JSON data
func (m *Medication) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Medication
func (m *Medication) Clone() *Medication {
	if m == nil { return nil }
	return &Medication{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Code: m.Code.Clone(),
		Status: m.Status.Clone(),
		Manufacturer: m.Manufacturer.Clone(),
		Form: m.Form.Clone(),
		Amount: m.Amount.Clone(),
		Ingredient: cloneSlices(m.Ingredient),
		Batch: m.Batch.Clone(),
	}
}

// Equals checks for equality with another Medication instance
func (m *Medication) Equals(other *Medication) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Status.Equals(other.Status) { return false }
	if !m.Manufacturer.Equals(other.Manufacturer) { return false }
	if !m.Form.Equals(other.Form) { return false }
	if !m.Amount.Equals(other.Amount) { return false }
	if !compareSlices(m.Ingredient, other.Ingredient) { return false }
	if !m.Batch.Equals(other.Batch) { return false }
	return true
}

// MedicationIngredient
// Identifies a particular constituent of interest in the product.
type MedicationIngredient struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	ItemCodeableConcept *CodeableConcept `json:"itemcodeableconcept,omitempty"`
	ItemReference *Reference `json:"itemreference,omitempty"`
	IsActive *FhirBoolean `json:"isactive,omitempty"`
	Strength *Ratio `json:"strength,omitempty"`
}

// NewMedicationIngredient creates a new MedicationIngredient instance
func NewMedicationIngredient() *MedicationIngredient {
	return &MedicationIngredient{}
}

// FromJSON populates MedicationIngredient from JSON data
func (m *MedicationIngredient) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts MedicationIngredient to JSON data
func (m *MedicationIngredient) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of MedicationIngredient
func (m *MedicationIngredient) Clone() *MedicationIngredient {
	if m == nil { return nil }
	return &MedicationIngredient{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		ItemCodeableConcept: m.ItemCodeableConcept.Clone(),
		ItemReference: m.ItemReference.Clone(),
		IsActive: m.IsActive.Clone(),
		Strength: m.Strength.Clone(),
	}
}

// Equals checks for equality with another MedicationIngredient instance
func (m *MedicationIngredient) Equals(other *MedicationIngredient) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.ItemCodeableConcept.Equals(other.ItemCodeableConcept) { return false }
	if !m.ItemReference.Equals(other.ItemReference) { return false }
	if !m.IsActive.Equals(other.IsActive) { return false }
	if !m.Strength.Equals(other.Strength) { return false }
	return true
}

// MedicationBatch
// Information that only applies to packages (not products).
type MedicationBatch struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	LotNumber *FhirString `json:"lotnumber,omitempty"`
	ExpirationDate *FhirDateTime `json:"expirationdate,omitempty"`
}

// NewMedicationBatch creates a new MedicationBatch instance
func NewMedicationBatch() *MedicationBatch {
	return &MedicationBatch{}
}

// FromJSON populates MedicationBatch from JSON data
func (m *MedicationBatch) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts MedicationBatch to JSON data
func (m *MedicationBatch) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of MedicationBatch
func (m *MedicationBatch) Clone() *MedicationBatch {
	if m == nil { return nil }
	return &MedicationBatch{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		LotNumber: m.LotNumber.Clone(),
		ExpirationDate: m.ExpirationDate.Clone(),
	}
}

// Equals checks for equality with another MedicationBatch instance
func (m *MedicationBatch) Equals(other *MedicationBatch) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !m.LotNumber.Equals(other.LotNumber) { return false }
	if !m.ExpirationDate.Equals(other.ExpirationDate) { return false }
	return true
}

