// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json"
)

// RelatedArtifact
// Related artifacts such as additional documentation, justification, or bibliographic references.
type RelatedArtifact struct {
	extends DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Type *RelatedArtifactType `json:"type,omitempty"`
	Label *FhirString `json:"label,omitempty"`
	Display *FhirString `json:"display,omitempty"`
	Citation *FhirMarkdown `json:"citation,omitempty"`
	Url *FhirUrl `json:"url,omitempty"`
	Document *Attachment `json:"document,omitempty"`
	Resource *FhirCanonical `json:"resource,omitempty"`
}

// NewRelatedArtifact creates a new RelatedArtifact instance.
func NewRelatedArtifact() *RelatedArtifact {
	return &RelatedArtifact{}
}

// UnmarshalJSON populates RelatedArtifact from JSON data.
func (m *RelatedArtifact) UnmarshalJSON(data []byte) error {
	temp := struct {
		Id *FhirString `json:"id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		Type *RelatedArtifactType `json:"type,omitempty"`
		Label *FhirString `json:"label,omitempty"`
		Display *FhirString `json:"display,omitempty"`
		Citation *FhirMarkdown `json:"citation,omitempty"`
		Url *FhirUrl `json:"url,omitempty"`
		Document *Attachment `json:"document,omitempty"`
		Resource *FhirCanonical `json:"resource,omitempty"`
	}{}
	if err := json.Unmarshal(data, &temp); err != nil {
		return err
	}
	m.Id = temp.Id
	m.Extension_ = temp.Extension_
	m.Type = temp.Type
	m.Label = temp.Label
	m.Display = temp.Display
	m.Citation = temp.Citation
	m.Url = temp.Url
	m.Document = temp.Document
	m.Resource = temp.Resource
	return nil
}

// MarshalJSON converts RelatedArtifact to JSON data.
func (m *RelatedArtifact) MarshalJSON() ([]byte, error) {
	output := struct {
		Id interface{} `json:"id,omitempty"`
		IdElement map[string]interface{} `json:"_id,omitempty"`
		Extension_ []*FhirExtension `json:"extension,omitempty"`
		Type *RelatedArtifactType `json:"type,omitempty"`
		Label interface{} `json:"label,omitempty"`
		LabelElement map[string]interface{} `json:"_label,omitempty"`
		Display interface{} `json:"display,omitempty"`
		DisplayElement map[string]interface{} `json:"_display,omitempty"`
		Citation interface{} `json:"citation,omitempty"`
		CitationElement map[string]interface{} `json:"_citation,omitempty"`
		Url interface{} `json:"url,omitempty"`
		UrlElement map[string]interface{} `json:"_url,omitempty"`
		Document *Attachment `json:"document,omitempty"`
		Resource interface{} `json:"resource,omitempty"`
		ResourceElement map[string]interface{} `json:"_resource,omitempty"`
	}{}
	if m.Id != nil && m.Id.Value != nil {
		output.Id = m.Id.Value
		if m.Id.Element != nil {
			output.IdElement = toMapOrNil(m.Id.Element.MarshalJSON())
		}
	}
	output.Extension_ = m.Extension_
	output.Type = m.Type
	if m.Label != nil && m.Label.Value != nil {
		output.Label = m.Label.Value
		if m.Label.Element != nil {
			output.LabelElement = toMapOrNil(m.Label.Element.MarshalJSON())
		}
	}
	if m.Display != nil && m.Display.Value != nil {
		output.Display = m.Display.Value
		if m.Display.Element != nil {
			output.DisplayElement = toMapOrNil(m.Display.Element.MarshalJSON())
		}
	}
	if m.Citation != nil && m.Citation.Value != nil {
		output.Citation = m.Citation.Value
		if m.Citation.Element != nil {
			output.CitationElement = toMapOrNil(m.Citation.Element.MarshalJSON())
		}
	}
	if m.Url != nil && m.Url.Value != nil {
		output.Url = m.Url.Value
		if m.Url.Element != nil {
			output.UrlElement = toMapOrNil(m.Url.Element.MarshalJSON())
		}
	}
	output.Document = m.Document
	if m.Resource != nil && m.Resource.Value != nil {
		output.Resource = m.Resource.Value
		if m.Resource.Element != nil {
			output.ResourceElement = toMapOrNil(m.Resource.Element.MarshalJSON())
		}
	}
	return json.Marshal(output)
}

// Clone creates a deep copy of RelatedArtifact.
func (m *RelatedArtifact) Clone() *RelatedArtifact {
	if m == nil { return nil }
	return &RelatedArtifact{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Type: m.Type.Clone(),
		Label: m.Label.Clone(),
		Display: m.Display.Clone(),
		Citation: m.Citation.Clone(),
		Url: m.Url.Clone(),
		Document: m.Document.Clone(),
		Resource: m.Resource.Clone(),
	}
}

// Equals checks equality between two RelatedArtifact instances.
func (m *RelatedArtifact) Equals(other *RelatedArtifact) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Label.Equals(other.Label) { return false }
	if !m.Display.Equals(other.Display) { return false }
	if !m.Citation.Equals(other.Citation) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !m.Document.Equals(other.Document) { return false }
	if !m.Resource.Equals(other.Resource) { return false }
	return true
}

