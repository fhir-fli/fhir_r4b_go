// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// RelatedArtifact
// Related artifacts such as additional documentation, justification, or bibliographic references.
type RelatedArtifact struct {
	DataType
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	Type *RelatedArtifactType `json:"type,omitempty"`
	Label *FhirString `json:"label,omitempty"`
	Display *FhirString `json:"display,omitempty"`
	Citation *FhirMarkdown `json:"citation,omitempty"`
	Url *FhirUrl `json:"url,omitempty"`
	Document *Attachment `json:"document,omitempty"`
	Resource *FhirCanonical `json:"resource,omitempty"`
}

// NewRelatedArtifact creates a new RelatedArtifact instance
func NewRelatedArtifact() *RelatedArtifact {
	return &RelatedArtifact{}
}

// FromJSON populates RelatedArtifact from JSON data
func (m *RelatedArtifact) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts RelatedArtifact to JSON data
func (m *RelatedArtifact) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of RelatedArtifact
func (m *RelatedArtifact) Clone() *RelatedArtifact {
	if m == nil { return nil }
	return &RelatedArtifact{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		Type: m.Type.Clone(),
		Label: m.Label.Clone(),
		Display: m.Display.Clone(),
		Citation: m.Citation.Clone(),
		Url: m.Url.Clone(),
		Document: m.Document.Clone(),
		Resource: m.Resource.Clone(),
	}
}

// Equals checks for equality with another RelatedArtifact instance
func (m *RelatedArtifact) Equals(other *RelatedArtifact) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !m.Type.Equals(other.Type) { return false }
	if !m.Label.Equals(other.Label) { return false }
	if !m.Display.Equals(other.Display) { return false }
	if !m.Citation.Equals(other.Citation) { return false }
	if !m.Url.Equals(other.Url) { return false }
	if !m.Document.Equals(other.Document) { return false }
	if !m.Resource.Equals(other.Resource) { return false }
	return true
}

