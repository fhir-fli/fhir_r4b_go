// Code generated by FHIR Generator. DO NOT EDIT.

package fhir_r4b_go

import (
	"encoding/json")

// Practitioner
// A person who is directly or indirectly involved in the provisioning of healthcare.
type Practitioner struct {
	DomainResource
	Id *FhirString `json:"id,omitempty"`
	Meta *FhirMeta `json:"meta,omitempty"`
	ImplicitRules *FhirUri `json:"implicitrules,omitempty"`
	Language *CommonLanguages `json:"language,omitempty"`
	Text *Narrative `json:"text,omitempty"`
	Contained []*Resource `json:"contained,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Active *FhirBoolean `json:"active,omitempty"`
	Name []*HumanName `json:"name,omitempty"`
	Telecom []*ContactPoint `json:"telecom,omitempty"`
	Address []*Address `json:"address,omitempty"`
	Gender *AdministrativeGender `json:"gender,omitempty"`
	BirthDate *FhirDate `json:"birthdate,omitempty"`
	Photo []*Attachment `json:"photo,omitempty"`
	Qualification []*PractitionerQualification `json:"qualification,omitempty"`
	Communication []*CodeableConcept `json:"communication,omitempty"`
}

// NewPractitioner creates a new Practitioner instance
func NewPractitioner() *Practitioner {
	return &Practitioner{}
}

// FromJSON populates Practitioner from JSON data
func (m *Practitioner) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts Practitioner to JSON data
func (m *Practitioner) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of Practitioner
func (m *Practitioner) Clone() *Practitioner {
	if m == nil { return nil }
	return &Practitioner{
		Id: m.Id.Clone(),
		Meta: m.Meta.Clone(),
		ImplicitRules: m.ImplicitRules.Clone(),
		Language: m.Language.Clone(),
		Text: m.Text.Clone(),
		Contained: cloneSlices(m.Contained),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Active: m.Active.Clone(),
		Name: cloneSlices(m.Name),
		Telecom: cloneSlices(m.Telecom),
		Address: cloneSlices(m.Address),
		Gender: m.Gender.Clone(),
		BirthDate: m.BirthDate.Clone(),
		Photo: cloneSlices(m.Photo),
		Qualification: cloneSlices(m.Qualification),
		Communication: cloneSlices(m.Communication),
	}
}

// Equals checks for equality with another Practitioner instance
func (m *Practitioner) Equals(other *Practitioner) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !m.Meta.Equals(other.Meta) { return false }
	if !m.ImplicitRules.Equals(other.ImplicitRules) { return false }
	if !m.Language.Equals(other.Language) { return false }
	if !m.Text.Equals(other.Text) { return false }
	if !compareSlices(m.Contained, other.Contained) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Active.Equals(other.Active) { return false }
	if !compareSlices(m.Name, other.Name) { return false }
	if !compareSlices(m.Telecom, other.Telecom) { return false }
	if !compareSlices(m.Address, other.Address) { return false }
	if !m.Gender.Equals(other.Gender) { return false }
	if !m.BirthDate.Equals(other.BirthDate) { return false }
	if !compareSlices(m.Photo, other.Photo) { return false }
	if !compareSlices(m.Qualification, other.Qualification) { return false }
	if !compareSlices(m.Communication, other.Communication) { return false }
	return true
}

// PractitionerQualification
// The official certifications, training, and licenses that authorize or otherwise pertain to the provision of care by the practitioner.  For example, a medical license issued by a medical board authorizing the practitioner to practice medicine within a certian locality.
type PractitionerQualification struct {
	BackboneElement
	Id *FhirString `json:"id,omitempty"`
	Extension_ []*FhirExtension `json:"extension,omitempty"`
	ModifierExtension []*FhirExtension `json:"modifierextension,omitempty"`
	Identifier []*Identifier `json:"identifier,omitempty"`
	Code *CodeableConcept `json:"code,omitempty"`
	Period *Period `json:"period,omitempty"`
	Issuer *Reference `json:"issuer,omitempty"`
}

// NewPractitionerQualification creates a new PractitionerQualification instance
func NewPractitionerQualification() *PractitionerQualification {
	return &PractitionerQualification{}
}

// FromJSON populates PractitionerQualification from JSON data
func (m *PractitionerQualification) FromJSON(data []byte) error {
	return json.Unmarshal(data, m)
}

// ToJSON converts PractitionerQualification to JSON data
func (m *PractitionerQualification) ToJSON() ([]byte, error) {
	return json.Marshal(m)
}

// Clone creates a deep copy of PractitionerQualification
func (m *PractitionerQualification) Clone() *PractitionerQualification {
	if m == nil { return nil }
	return &PractitionerQualification{
		Id: m.Id.Clone(),
		Extension_: cloneSlices(m.Extension_),
		ModifierExtension: cloneSlices(m.ModifierExtension),
		Identifier: cloneSlices(m.Identifier),
		Code: m.Code.Clone(),
		Period: m.Period.Clone(),
		Issuer: m.Issuer.Clone(),
	}
}

// Equals checks for equality with another PractitionerQualification instance
func (m *PractitionerQualification) Equals(other *PractitionerQualification) bool {
	if m == nil && other == nil { return true }
	if m == nil || other == nil { return false }
	if !m.Id.Equals(other.Id) { return false }
	if !compareSlices(m.Extension_, other.Extension_) { return false }
	if !compareSlices(m.ModifierExtension, other.ModifierExtension) { return false }
	if !compareSlices(m.Identifier, other.Identifier) { return false }
	if !m.Code.Equals(other.Code) { return false }
	if !m.Period.Equals(other.Period) { return false }
	if !m.Issuer.Equals(other.Issuer) { return false }
	return true
}

